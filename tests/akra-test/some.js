var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var _this = this;
var akra;
(function (akra) {
    (function (ELogLevel) {
        ELogLevel._map = [];
        ELogLevel.NONE = 0x0000;
        ELogLevel.LOG = 0x0001;
        ELogLevel.INFORMATION = 0x0002;
        ELogLevel.WARNING = 0x0004;
        ELogLevel.ERROR = 0x0008;
        ELogLevel.CRITICAL = 0x0010;
        ELogLevel.ALL = 0x001F;
    })(akra.ELogLevel || (akra.ELogLevel = {}));
    var ELogLevel = akra.ELogLevel;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.DEBUG = true;
    akra.logger;
    akra.typeOf;
    akra.typeOf = function typeOf(x) {
        var s = typeof x;
        if (s === "object") {
            if (x) {
                if (x instanceof Array) {
                    return 'array';
                } else if (x instanceof Object) {
                    return s;
                }
                var sClassName = Object.prototype.toString.call(x);
                if (sClassName == '[object Window]') {
                    return 'object';
                }
                if ((sClassName == '[object Array]' || typeof x.length == 'number' && typeof x.splice != 'undefined' && typeof x.propertyIsEnumerable != 'undefined' && !x.propertyIsEnumerable('splice'))) {
                    return 'array';
                }
                if ((sClassName == '[object Function]' || typeof x.call != 'undefined' && typeof x.propertyIsEnumerable != 'undefined' && !x.propertyIsEnumerable('call'))) {
                    return 'function';
                }
            } else {
                return 'null';
            }
        } else if (s == 'function' && typeof x.call == 'undefined') {
            return 'object';
        }
        return s;
    };
    akra.isDef = function (x) {
        return x !== undefined;
    };
    akra.isEmpty = function (x) {
        return x.length == 0;
    };
    akra.isDefAndNotNull = function (x) {
        return x != null;
    };
    akra.isNull = function (x) {
        return x === null;
    };
    akra.isBoolean = function (x) {
        return typeof x === "boolean";
    };
    akra.isString = function (x) {
        return typeof x === "string";
    };
    akra.isNumber = function (x) {
        return typeof x === "number";
    };
    akra.isFloat = akra.isNumber;
    akra.isInt = akra.isNumber;
    akra.isFunction = function (x) {
        return akra.typeOf(x) === "function";
    };
    akra.isObject = function (x) {
        var type = akra.typeOf(x);
        return type == "object" || type == "array" || type == "function";
    };
    akra.isArrayBuffer = function (x) {
        return x instanceof ArrayBuffer;
    };
    akra.isTypedArray = function (x) {
        return x !== null && typeof x === "object" && typeof x.byteOffset === "number";
    };
    akra.isBlob = function (x) {
        return x instanceof Blob;
    };
    akra.isArray = function (x) {
        return akra.typeOf(x) == "array";
    };
    ;
    function genArray(pType, nSize) {
        var tmp = new Array(nSize);
        for(var i = 0; i < nSize; ++i) {
            tmp[i] = (pType ? new pType() : null);
        }
        return tmp;
    }
    akra.genArray = genArray;
    akra.INVALID_INDEX = 0xffff;
    akra.MIN_INT32 = 0xffffffff;
    akra.MAX_INT32 = 0x7fffffff;
    akra.MIN_INT16 = 0xffff;
    akra.MAX_INT16 = 0x7fff;
    akra.MIN_INT8 = 0xff;
    akra.MAX_INT8 = 0x7f;
    akra.MIN_UINT32 = 0;
    akra.MAX_UINT32 = 0xffffffff;
    akra.MIN_UINT16 = 0;
    akra.MAX_UINT16 = 0xffff;
    akra.MIN_UINT8 = 0;
    akra.MAX_UINT8 = 0xff;
    akra.SIZE_FLOAT64 = 8;
    akra.SIZE_REAL64 = 8;
    akra.SIZE_FLOAT32 = 4;
    akra.SIZE_REAL32 = 4;
    akra.SIZE_INT32 = 4;
    akra.SIZE_UINT32 = 4;
    akra.SIZE_INT16 = 2;
    akra.SIZE_UINT16 = 2;
    akra.SIZE_INT8 = 1;
    akra.SIZE_UINT8 = 1;
    akra.SIZE_BYTE = 1;
    akra.SIZE_UBYTE = 1;
    akra.MAX_FLOAT64 = Number.MAX_VALUE;
    akra.MIN_FLOAT64 = -Number.MAX_VALUE;
    akra.TINY_FLOAT64 = Number.MIN_VALUE;
    akra.MAX_FLOAT32 = 3.4e38;
    akra.MIN_FLOAT32 = -3.4e38;
    akra.TINY_FLOAT32 = 1.5e-45;
    akra.DEFAULT_MATERIAL_NAME = "default";
    (function (EDataTypes) {
        EDataTypes._map = [];
        EDataTypes.BYTE = 0x1400;
        EDataTypes.UNSIGNED_BYTE = 0x1401;
        EDataTypes.SHORT = 0x1402;
        EDataTypes.UNSIGNED_SHORT = 0x1403;
        EDataTypes.INT = 0x1404;
        EDataTypes.UNSIGNED_INT = 0x1405;
        EDataTypes.FLOAT = 0x1406;
    })(akra.EDataTypes || (akra.EDataTypes = {}));
    var EDataTypes = akra.EDataTypes;
    ;
    (function (EDataTypeSizes) {
        EDataTypeSizes._map = [];
        EDataTypeSizes.BYTES_PER_BYTE = 1;
        EDataTypeSizes.BYTES_PER_UNSIGNED_BYTE = 1;
        EDataTypeSizes.BYTES_PER_UBYTE = 1;
        EDataTypeSizes.BYTES_PER_SHORT = 2;
        EDataTypeSizes.BYTES_PER_UNSIGNED_SHORT = 2;
        EDataTypeSizes.BYTES_PER_USHORT = 2;
        EDataTypeSizes.BYTES_PER_INT = 4;
        EDataTypeSizes.BYTES_PER_UNSIGNED_INT = 4;
        EDataTypeSizes.BYTES_PER_UINT = 4;
        EDataTypeSizes.BYTES_PER_FLOAT = 4;
    })(akra.EDataTypeSizes || (akra.EDataTypeSizes = {}));
    var EDataTypeSizes = akra.EDataTypeSizes;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
        function getTypeSize(eType) {
        switch(eType) {
            case EDataTypes.BYTE:
            case EDataTypes.UNSIGNED_BYTE:
                return 1;
            case EDataTypes.SHORT:
            case EDataTypes.UNSIGNED_SHORT:
                return 2;
            case EDataTypes.INT:
            case EDataTypes.UNSIGNED_INT:
            case EDataTypes.FLOAT:
                return 4;
            default:
 {
                    akra.logger.setSourceLocation("common.ts", 411);
                    akra.logger.error('unknown data/image type used');
                }
                ;
        }
    }
    akra.getTypeSize = getTypeSize;
    akra.sid = function () {
        return (++akra.sid._iTotal);
    };
    akra.sid._iTotal = 0;
    function now() {
        return (new Date()).getTime();
    }
    akra.now = now;
    inline;
    function memcpy(pDst, iDstOffset, pSrc, iSrcOffset, nLength) {
        var dstU8 = new Uint8Array(pDst, iDstOffset, nLength);
        var srcU8 = new Uint8Array(pSrc, iSrcOffset, nLength);
        dstU8.set(srcU8);
    }
    ;
    (window).URL = (window).URL ? (window).URL : (window).webkitURL ? (window).webkitURL : null;
    (window).BlobBuilder = (window).WebKitBlobBuilder || (window).MozBlobBuilder || (window).BlobBuilder;
    (window).requestFileSystem = (window).requestFileSystem || (window).webkitRequestFileSystem;
    (window).requestAnimationFrame = (window).requestAnimationFrame || (window).webkitRequestAnimationFrame || (window).mozRequestAnimationFrame;
    (window).WebSocket = (window).WebSocket || (window).MozWebSocket;
    (window).storageInfo = (window).storageInfo || (window).webkitTemporaryStorage;
    (navigator).gamepads = (navigator).gamepads || (navigator).webkitGamepads;
    (navigator).getGamepads = (navigator).getGamepads || (navigator).webkitGetGamepads;
    Worker.prototype.postMessage = (Worker).prototype.webkitPostMessage || Worker.prototype.postMessage;
})(akra || (akra = {}));
;
function utf8_encode(argString) {
    if (argString === null || typeof argString === "undefined") {
        return "";
    }
    var string = (argString + "");
    var utftext = "", start, end, stringl = 0;
    start = end = 0;
    stringl = string.length;
    for(var n = 0; n < stringl; n++) {
        var c1 = string.charCodeAt(n);
        var enc = null;
        if (c1 < 128) {
            end++;
        } else if (c1 > 127 && c1 < 2048) {
            enc = String.fromCharCode((c1 >> 6) | 192) + String.fromCharCode((c1 & 63) | 128);
        } else {
            enc = String.fromCharCode((c1 >> 12) | 224) + String.fromCharCode(((c1 >> 6) & 63) | 128) + String.fromCharCode((c1 & 63) | 128);
        }
        if (enc !== null) {
            if (end > start) {
                utftext += string.slice(start, end);
            }
            utftext += enc;
            start = end = n + 1;
        }
    }
    if (end > start) {
        utftext += string.slice(start, stringl);
    }
    return utftext;
}
function utf8_decode(str_data) {
    var tmp_arr = [], i = 0, ac = 0, c1 = 0, c2 = 0, c3 = 0;
    str_data += "";
    while(i < str_data.length) {
        c1 = str_data.charCodeAt(i);
        if (c1 < 128) {
            tmp_arr[ac++] = String.fromCharCode(c1);
            i++;
        } else if (c1 > 191 && c1 < 224) {
            c2 = str_data.charCodeAt(i + 1);
            tmp_arr[ac++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            i += 2;
        } else {
            c2 = str_data.charCodeAt(i + 1);
            c3 = str_data.charCodeAt(i + 2);
            tmp_arr[ac++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            i += 3;
        }
    }
    return tmp_arr.join("");
}
var akra;
(function (akra) {
    })(akra || (akra = {}));
var akra;
(function (akra) {
    (function (bf) {
        bf.flag = function (x) {
            return (1 << (x));
        };
        bf.testBit = function (value, bit) {
            return ((value & bf.flag(bit)) != 0);
        };
        bf.testAll = function (value, set) {
            return (((value) & (set)) == (set));
        };
        bf.testAny = function (value, set) {
            return (((value) & (set)) != 0);
        };
        bf.setBit = function (value, bit, setting) {
            if (typeof setting === "undefined") { setting = true; }
            return (setting ? ((value) |= bf.flag((bit))) : bf.clearBit(value, bit));
        };
        bf.clearBit = function (value, bit) {
            return ((value) &= ~bf.flag((bit)));
        };
        bf.setAll = function (value, set, setting) {
            if (typeof setting === "undefined") { setting = true; }
            return (setting ? bf.setAll(value, set) : bf.clearAll(value, set));
        };
        bf.clearAll = function (value, set) {
            return ((value) &= ~(set));
        };
        bf.equal = function (value, src) {
            value = src;
        };
        bf.isEqual = function (value, src) {
            return value == src;
        };
        bf.isNotEqaul = function (value, src) {
            return value != src;
        };
        bf.set = function (value, src) {
            value = src;
        };
        bf.clear = function (value) {
            value = 0;
        };
        bf.setFlags = function (value, src) {
            return (value |= src);
        };
        bf.clearFlags = function (value, src) {
            return value &= ~src;
        };
        bf.isEmpty = function (value) {
            return (value == 0);
        };
        bf.totalBits = function (value) {
            return 32;
        };
        bf.totalSet = function (value) {
            var count = 0;
            var total = bf.totalBits(value);
            for(var i = total; i; --i) {
                count += (value & 1);
                value >>= 1;
            }
            return (count);
        };
        inline;
        function fixedToFixed(value, n, p) {
            if (n > p) {
                value >>= n - p;
            } else if (n < p) {
                if (value == 0) {
                    value = 0;
                } else if (value == ((1) << n) - 1) {
                    value = (1 << p) - 1;
                } else {
                    value = value * (1 << p) / ((1 << n) - 1);
                }
            }
            return value;
        }
        inline;
        function floatToFixed(value, bits) {
            if (value <= 0.0) {
                return 0;
            } else if (value >= 1.0) {
                return (1 << bits) - 1;
            } else {
                return (value * (1 << bits));
            }
        }
        inline;
        function fixedToFloat(value, bits) {
            return (value & ((1 << bits) - 1)) / ((1 << bits) - 1);
        }
        inline;
        function intWrite(pDest, n, value) {
            switch(n) {
                case 1:
                    pDest[0] = value;
                    break;
                case 2:
                    pDest[1] = ((value >> 8) & 0xFF);
                    pDest[0] = (value & 0xFF);
                    break;
                case 3:
                    pDest[2] = ((value >> 16) & 0xFF);
                    pDest[1] = ((value >> 8) & 0xFF);
                    pDest[0] = (value & 0xFF);
                    break;
                case 4:
                    pDest[3] = ((value >> 24) & 0xFF);
                    pDest[2] = ((value >> 16) & 0xFF);
                    pDest[1] = ((value >> 8) & 0xFF);
                    pDest[0] = (value & 0xFF);
                    break;
            }
        }
        inline;
        function intRead(pSrc, n) {
            switch(n) {
                case 1:
                    return pSrc[0];
                case 2:
                    return pSrc[0] | pSrc[1] << 8;
                case 3:
                    return pSrc[0] | pSrc[1] << 8 | pSrc[2] << 16;
                case 4:
                    return (pSrc[0]) | (pSrc[1] << 8) | (pSrc[2] << 16) | (pSrc[3] << 24);
            }
            return 0;
        }
                var _u32 = new Uint32Array(1);
        var _f32 = new Float32Array(_u32.buffer);
        inline;
        function floatToHalf(f) {
            _f32[0] = f;
            return floatToHalfI(_u32[0]);
        }
        inline;
        function floatToHalfI(i) {
            var s = (i >> 16) & 0x00008000;
            var e = ((i >> 23) & 0x000000ff) - (127 - 15);
            var m = i & 0x007fffff;
            if (e <= 0) {
                if (e < -10) {
                    return 0;
                }
                m = (m | 0x00800000) >> (1 - e);
                return (s | (m >> 13));
            } else if (e == 0xff - (127 - 15)) {
                if (m == 0) {
                    return (s | 0x7c00);
                } else {
                    m >>= 13;
                    return (s | 0x7c00 | m | (m == 0));
                }
            } else {
                if (e > 30) {
                    return (s | 0x7c00);
                }
                return (s | (e << 10) | (m >> 13));
            }
        }
        inline;
        function halfToFloat(y) {
            _u32[0] = halfToFloatI(y);
            return _f32[0];
        }
        inline;
        function halfToFloatI(y) {
            var s = (y >> 15) & 0x00000001;
            var e = (y >> 10) & 0x0000001f;
            var m = y & 0x000003ff;
            if (e == 0) {
                if (m == 0) {
                    return s << 31;
                } else {
                    while(!(m & 0x00000400)) {
                        m <<= 1;
                        e -= 1;
                    }
                    e += 1;
                    m &= ~0x00000400;
                }
            } else if (e == 31) {
                if (m == 0) {
                    return (s << 31) | 0x7f800000;
                } else {
                    return (s << 31) | 0x7f800000 | (m << 13);
                }
            }
            e = e + (127 - 15);
            m = m << 13;
            return (s << 31) | (e << 23) | m;
        }
    })(akra.bf || (akra.bf = {}));
    var bf = akra.bf;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Logger = (function () {
            function Logger() {
                this.inline = isUsedFamilyName(sFamilyName, string);
                this.bool = {
                    return: isDef(this._pCodeFamilyMap[sFamilyName])
                };
                this.inline = isUsedCode(eCode, number);
                this.bool = {
                    return: isDef(this._pCodeInfoMap[eCode])
                };
                this.inline = isLogCode(eCode, any);
                this.bool = {
                    return: isInt(eCode)
                };
                this._eUnknownCode = 0;
                this._sUnknownMessage = "Unknown code";
                this._eLogLevel = ELogLevel.ALL;
                this._pGeneralRoutineMap = {};
                this._pCurrentSourceLocation = {
                    file: "",
                    line: 0
                };
                this._pLastLogEntity = {
                    code: this._eUnknownCode,
                    location: this._pCurrentSourceLocation,
                    message: this._sUnknownMessage,
                    info: null
                };
                this._pCodeFamilyMap = {};
                this._pCodeFamilyList = [];
                this._pCodeInfoMap = {};
                this._pCodeFamilyRoutineDMap = {};
                this._nFamilyGenerator = 0;
            }
            Logger._sDefaultFamilyName = "CodeFamily";
            Logger.prototype.init = function () {
                return true;
            };
            Logger.prototype.setLogLevel = function (eLevel) {
                this._eLogLevel = eLevel;
            };
            Logger.prototype.getLogLevel = function () {
                return this._eLogLevel;
            };
            Logger.prototype.registerCode = function (eCode, sMessage) {
                if (typeof sMessage === "undefined") { sMessage = this._sUnknownMessage; }
                if (this.isUsedCode(eCode)) {
                    return false;
                }
                var sFamilyName = this.getFamilyName(eCode);
                if (isNull(sFamilyName)) {
                    return false;
                }
                var pCodeInfo = {
                    code: eCode,
                    message: sMessage,
                    familyName: sFamilyName
                };
                this._pCodeInfoMap[eCode] = pCodeInfo;
                return true;
            };
            Logger.prototype.setUnknownCode = function (eCode, sMessage) {
                this._eUnknownCode = eCode;
                this._sUnknownMessage = sMessage;
            };
            Logger.prototype.registerCodeFamily = function (eCodeMin, eCodeMax, sFamilyName) {
                if (!isDef(sFamilyName)) {
                    sFamilyName = this.generateFamilyName();
                }
                if (this.isUsedFamilyName(sFamilyName)) {
                    return false;
                }
                if (!this.isValidCodeInterval(eCodeMin, eCodeMax)) {
                    return false;
                }
                var pCodeFamily = {
                    familyName: sFamilyName,
                    codeMin: eCodeMin,
                    codeMax: eCodeMax
                };
                this._pCodeFamilyMap[sFamilyName] = pCodeFamily;
                this._pCodeFamilyList.push(pCodeFamily);
                return true;
            };
            Logger.prototype.getFamilyName = function (eCode) {
                var i = 0;
                var pCodeFamilyList = this._pCodeFamilyList;
                var pCodeFamily;
                for(i = 0; i < pCodeFamilyList.length; i++) {
                    pCodeFamily = pCodeFamilyList[i];
                    if (pCodeFamily.codeMin <= eCode && pCodeFamily.codeMax >= eCode) {
                        return pCodeFamily.familyName;
                    }
                }
                return null;
            };
            Logger.prototype.setCodeFamilyRoutine = function () {
                var sFamilyName = null;
                var fnLogRoutine = null;
                var eLevel = ELogLevel.LOG;
                if (isInt(arguments[0])) {
                    sFamilyName = this.getFamilyName(arguments[0]);
                    fnLogRoutine = arguments[1];
                    eLevel = arguments[2];
                    if (isNull(sFamilyName)) {
                        return false;
                    }
                } else if (isString(arguments[0])) {
                    sFamilyName = arguments[0];
                    fnLogRoutine = arguments[1];
                    eLevel = arguments[2];
                }
                if (!this.isUsedFamilyName(sFamilyName)) {
                    return false;
                }
                var pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[sFamilyName];
                if (!isDef(pCodeFamilyRoutineMap)) {
                    pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[sFamilyName] = {};
                }
                if (bf.testAll(eLevel, ELogLevel.LOG)) {
                    pCodeFamilyRoutineMap[ELogLevel.LOG] = fnLogRoutine;
                }
                if (bf.testAll(eLevel, ELogLevel.INFORMATION)) {
                    pCodeFamilyRoutineMap[ELogLevel.INFORMATION] = fnLogRoutine;
                }
                if (bf.testAll(eLevel, ELogLevel.WARNING)) {
                    pCodeFamilyRoutineMap[ELogLevel.WARNING] = fnLogRoutine;
                }
                if (bf.testAll(eLevel, ELogLevel.ERROR)) {
                    pCodeFamilyRoutineMap[ELogLevel.ERROR] = fnLogRoutine;
                }
                if (bf.testAll(eLevel, ELogLevel.CRITICAL)) {
                    pCodeFamilyRoutineMap[ELogLevel.CRITICAL] = fnLogRoutine;
                }
                return true;
            };
            Logger.prototype.setLogRoutine = function (fnLogRoutine, eLevel) {
                if (bf.testAll(eLevel, ELogLevel.LOG)) {
                    this._pGeneralRoutineMap[ELogLevel.LOG] = fnLogRoutine;
                }
                if (bf.testAll(eLevel, ELogLevel.INFORMATION)) {
                    this._pGeneralRoutineMap[ELogLevel.INFORMATION] = fnLogRoutine;
                }
                if (bf.testAll(eLevel, ELogLevel.WARNING)) {
                    this._pGeneralRoutineMap[ELogLevel.WARNING] = fnLogRoutine;
                }
                if (bf.testAll(eLevel, ELogLevel.ERROR)) {
                    this._pGeneralRoutineMap[ELogLevel.ERROR] = fnLogRoutine;
                }
                if (bf.testAll(eLevel, ELogLevel.CRITICAL)) {
                    this._pGeneralRoutineMap[ELogLevel.CRITICAL] = fnLogRoutine;
                }
            };
            Logger.prototype.setSourceLocation = function () {
                var sFile;
                var iLine;
                if (arguments.length === 2) {
                    sFile = arguments[0];
                    iLine = arguments[1];
                } else {
                    if (isDef(arguments[0]) && !(isNull(arguments[0]))) {
                        sFile = arguments[0].file;
                        iLine = arguments[0].line;
                    } else {
                        sFile = "";
                        iLine = 0;
                    }
                }
                this._pCurrentSourceLocation.file = sFile;
                this._pCurrentSourceLocation.line = iLine;
            };
            Logger.prototype.log = function () {
                var pArgs = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    pArgs[_i] = arguments[_i + 0];
                }
                if (!bf.testAll(this._eLogLevel, ELogLevel.LOG)) {
                    return;
                }
                var fnLogRoutine = this._pGeneralRoutineMap[ELogLevel.LOG];
                if (!isDef(fnLogRoutine)) {
                    return;
                }
                var pLogEntity = this._pLastLogEntity;
                pLogEntity.code = this._eUnknownCode;
                pLogEntity.location = this._pCurrentSourceLocation;
                pLogEntity.info = pArgs;
                pLogEntity.message = this._sUnknownMessage;
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.info = function () {
                if (!bf.testAll(this._eLogLevel, ELogLevel.INFORMATION)) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, ELogLevel.INFORMATION);
                if (isNull(fnLogRoutine)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.warning = function () {
                if (!bf.testAll(this._eLogLevel, ELogLevel.WARNING)) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, ELogLevel.WARNING);
                if (isNull(fnLogRoutine)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.error = function () {
                if (!bf.testAll(this._eLogLevel, ELogLevel.ERROR)) {
                    return;
                }
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, ELogLevel.ERROR);
                if (isNull(fnLogRoutine)) {
                    return;
                }
                fnLogRoutine.call(null, pLogEntity);
            };
            Logger.prototype.criticalError = function () {
                var pLogEntity;
                var fnLogRoutine;
                pLogEntity = this.prepareLogEntity.apply(this, arguments);
                fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, ELogLevel.CRITICAL);
                var sSystemMessage = "A Critical error has occured! Code: " + pLogEntity.code.toString();
                if (bf.testAll(this._eLogLevel, ELogLevel.CRITICAL) && !isNull(fnLogRoutine)) {
                    fnLogRoutine.call(null, pLogEntity);
                }
                alert(sSystemMessage);
                throw new Error(sSystemMessage);
            };
            Logger.prototype.assert = function () {
                var bCondition = arguments[0];
                if (!bCondition) {
                    var pLogEntity;
                    var fnLogRoutine;
                    var pArgs = [];
                    for(var i = 1; i < arguments.length; i++) {
                        pArgs[i - 1] = arguments[i];
                    }
                    pLogEntity = this.prepareLogEntity.apply(this, pArgs);
                    fnLogRoutine = this.getCodeRoutineFunc(pLogEntity.code, ELogLevel.CRITICAL);
                    var sSystemMessage = "A error has occured! Code: " + pLogEntity.code.toString() + "\n Accept to exit, refuse to continue.";
                    if (bf.testAll(this._eLogLevel, ELogLevel.CRITICAL) && !isNull(fnLogRoutine)) {
                        fnLogRoutine.call(null, pLogEntity);
                    }
                    if (confirm(sSystemMessage)) {
                        throw new Error(sSystemMessage);
                    }
                }
            };
            Logger.prototype.generateFamilyName = function () {
                var sSuffix = (this._nFamilyGenerator++);
                var sName = Logger._sDefaultFamilyName + sSuffix;
                if (this.isUsedFamilyName(sName)) {
                    return this.generateFamilyName();
                } else {
                    return sName;
                }
            };
            Logger.prototype.isValidCodeInterval = function (eCodeMin, eCodeMax) {
                if (eCodeMin > eCodeMax) {
                    return false;
                }
                var i = 0;
                var pCodeFamilyList = this._pCodeFamilyList;
                var pCodeFamily;
                for(i = 0; i < pCodeFamilyList.length; i++) {
                    pCodeFamily = pCodeFamilyList[i];
                    if ((pCodeFamily.codeMin <= eCodeMin && pCodeFamily.codeMax >= eCodeMin) || (pCodeFamily.codeMin <= eCodeMax && pCodeFamily.codeMax >= eCodeMax)) {
                        return false;
                    }
                }
                return true;
            };
            Logger.prototype.isLogEntity = function (pObj) {
                if (isObject(pObj) && isDef(pObj.code) && isDef(pObj.location)) {
                    return true;
                }
                return false;
            };
            Logger.prototype.prepareLogEntity = function () {
                var eCode = this._eUnknownCode;
                var sMessage = this._sUnknownMessage;
                var pInfo = null;
                if (arguments.length === 1 && this.isLogEntity(arguments[0])) {
                    var pEntity = arguments[0];
                    eCode = pEntity.code;
                    pInfo = pEntity.info;
                    this.setSourceLocation(pEntity.location);
                    if (!isDef(pEntity.message)) {
                        var pCodeInfo = this._pCodeInfoMap[eCode];
                        if (isDef(pCodeInfo)) {
                            sMessage = pCodeInfo.message;
                        }
                    }
                } else {
                    if (this.isLogCode(arguments[0])) {
                        eCode = arguments[0];
                        if (arguments.length > 1) {
                            pInfo = new Array(arguments.length - 1);
                            var i = 0;
                            for(i = 0; i < pInfo.length; i++) {
                                pInfo[i] = arguments[i + 1];
                            }
                        }
                    } else {
                        eCode = this._eUnknownCode;
                        pInfo = new Array(arguments.length);
                        var i = 0;
                        for(i = 0; i < pInfo.length; i++) {
                            pInfo[i] = arguments[i];
                        }
                    }
                    var pCodeInfo = this._pCodeInfoMap[eCode];
                    if (isDef(pCodeInfo)) {
                        sMessage = pCodeInfo.message;
                    }
                }
                var pLogEntity = this._pLastLogEntity;
                pLogEntity.code = eCode;
                pLogEntity.location = this._pCurrentSourceLocation;
                pLogEntity.message = sMessage;
                pLogEntity.info = pInfo;
                return pLogEntity;
            };
            Logger.prototype.getCodeRoutineFunc = function (eCode, eLevel) {
                var pCodeInfo = this._pCodeInfoMap[eCode];
                var fnLogRoutine;
                if (!isDef(pCodeInfo)) {
                    fnLogRoutine = this._pGeneralRoutineMap[eLevel];
                    return isDef(fnLogRoutine) ? fnLogRoutine : null;
                }
                var pCodeFamilyRoutineMap = this._pCodeFamilyRoutineDMap[pCodeInfo.familyName];
                if (!isDef(pCodeFamilyRoutineMap) || !isDef(pCodeFamilyRoutineMap[eLevel])) {
                    fnLogRoutine = this._pGeneralRoutineMap[eLevel];
                    return isDef(fnLogRoutine) ? fnLogRoutine : null;
                }
                fnLogRoutine = pCodeFamilyRoutineMap[eLevel];
                return fnLogRoutine;
            };
            return Logger;
        })();
        util.Logger = Logger;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        util.logger = new Logger();
        util.logger.init();
        util.logger.setUnknownCode(0, "Unknown code.");
        util.logger.setLogLevel(ELogLevel.ALL);
        util.logger.registerCodeFamily(0, 100, "SystemCodes");
        util.logger.registerCodeFamily(2000, 2199, "ParserSyntaxErrors");
        util.logger.registerCodeFamily(2200, 2500, "EffectSyntaxErrors");
        function sourceLocationToString(pLocation) {
            var pDate = new Date();
            var sTime = pDate.getHours() + ":" + pDate.getMinutes() + "." + pDate.getSeconds();
            var sLocation = "[" + pLocation.file + ":" + pLocation.line.toString() + " " + sTime + "]: ";
            return sLocation;
        }
        function logRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["log"].apply(console, pArgs);
        }
        function warningRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift("Code: " + pLogEntity.code.toString());
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["warn"].apply(console, pArgs);
        }
        function errorRoutine(pLogEntity) {
            var pArgs = pLogEntity.info;
            pArgs.unshift(pLogEntity.message);
            pArgs.unshift("Error code: " + pLogEntity.code.toString() + ".");
            pArgs.unshift(sourceLocationToString(pLogEntity.location));
            console["error"].apply(console, pArgs);
        }
        util.logger.setLogRoutine(logRoutine, ELogLevel.LOG | ELogLevel.INFORMATION);
        util.logger.setLogRoutine(warningRoutine, ELogLevel.WARNING);
        util.logger.setLogRoutine(errorRoutine, ELogLevel.ERROR | ELogLevel.CRITICAL);
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    akra.createEngine;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    (function (EEventTypes) {
        EEventTypes._map = [];
        EEventTypes._map[0] = "BROADCAST";
        EEventTypes.BROADCAST = 0;
        EEventTypes._map[1] = "UNICAST";
        EEventTypes.UNICAST = 1;
    })(akra.EEventTypes || (akra.EEventTypes = {}));
    var EEventTypes = akra.EEventTypes;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ESceneTypes) {
        ESceneTypes._map = [];
        ESceneTypes._map[0] = "TYPE_3D";
        ESceneTypes.TYPE_3D = 0;
        ESceneTypes._map[1] = "TYPE_2D";
        ESceneTypes.TYPE_2D = 1;
    })(akra.ESceneTypes || (akra.ESceneTypes = {}));
    var ESceneTypes = akra.ESceneTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    (function (EResourceFamilies) {
        EResourceFamilies._map = [];
        EResourceFamilies.VIDEO_RESOURCE = 0;
        EResourceFamilies._map[1] = "AUDIO_RESOURCE";
        EResourceFamilies.AUDIO_RESOURCE = 1;
        EResourceFamilies._map[2] = "GAME_RESOURCE";
        EResourceFamilies.GAME_RESOURCE = 2;
        EResourceFamilies._map[3] = "TOTAL_RESOURCE_FAMILIES";
        EResourceFamilies.TOTAL_RESOURCE_FAMILIES = 3;
    })(akra.EResourceFamilies || (akra.EResourceFamilies = {}));
    var EResourceFamilies = akra.EResourceFamilies;
    ;
    (function (EVideoResources) {
        EVideoResources._map = [];
        EVideoResources._map[0] = "TEXTURE_RESOURCE";
        EVideoResources.TEXTURE_RESOURCE = 0;
        EVideoResources._map[1] = "VIDEOBUFFER_RESOURCE";
        EVideoResources.VIDEOBUFFER_RESOURCE = 1;
        EVideoResources._map[2] = "VERTEXBUFFER_RESOURCE";
        EVideoResources.VERTEXBUFFER_RESOURCE = 2;
        EVideoResources._map[3] = "INDEXBUFFER_RESOURCE";
        EVideoResources.INDEXBUFFER_RESOURCE = 3;
        EVideoResources._map[4] = "EFFECT_RESOURCE";
        EVideoResources.EFFECT_RESOURCE = 4;
        EVideoResources._map[5] = "RENDERMETHOD_RESOURCE";
        EVideoResources.RENDERMETHOD_RESOURCE = 5;
        EVideoResources._map[6] = "MODEL_RESOURCE";
        EVideoResources.MODEL_RESOURCE = 6;
        EVideoResources._map[7] = "EFFECTFILEDATA_RESOURCE";
        EVideoResources.EFFECTFILEDATA_RESOURCE = 7;
        EVideoResources._map[8] = "IMAGE_RESOURCE";
        EVideoResources.IMAGE_RESOURCE = 8;
        EVideoResources._map[9] = "SURFACEMATERIAL_RESOURCE";
        EVideoResources.SURFACEMATERIAL_RESOURCE = 9;
        EVideoResources._map[10] = "SHADERPROGRAM_RESOURCE";
        EVideoResources.SHADERPROGRAM_RESOURCE = 10;
        EVideoResources._map[11] = "COMPONENT_RESOURCE";
        EVideoResources.COMPONENT_RESOURCE = 11;
        EVideoResources._map[12] = "EFFECTDATA_RESOURCE";
        EVideoResources.EFFECTDATA_RESOURCE = 12;
        EVideoResources._map[13] = "TOTAL_VIDEO_RESOURCES";
        EVideoResources.TOTAL_VIDEO_RESOURCES = 13;
    })(akra.EVideoResources || (akra.EVideoResources = {}));
    var EVideoResources = akra.EVideoResources;
    ;
    (function (EAudioResources) {
        EAudioResources._map = [];
        EAudioResources._map[0] = "TOTAL_AUDIO_RESOURCES";
        EAudioResources.TOTAL_AUDIO_RESOURCES = 0;
    })(akra.EAudioResources || (akra.EAudioResources = {}));
    var EAudioResources = akra.EAudioResources;
    ;
    (function (EGameResources) {
        EGameResources._map = [];
        EGameResources._map[0] = "TOTAL_GAME_RESOURCES";
        EGameResources.TOTAL_GAME_RESOURCES = 0;
    })(akra.EGameResources || (akra.EGameResources = {}));
    var EGameResources = akra.EGameResources;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ECompareFunction) {
        ECompareFunction._map = [];
        ECompareFunction._map[0] = "ALWAYS_FAIL";
        ECompareFunction.ALWAYS_FAIL = 0;
        ECompareFunction._map[1] = "ALWAYS_PASS";
        ECompareFunction.ALWAYS_PASS = 1;
        ECompareFunction._map[2] = "LESS";
        ECompareFunction.LESS = 2;
        ECompareFunction._map[3] = "LESS_EQUAL";
        ECompareFunction.LESS_EQUAL = 3;
        ECompareFunction._map[4] = "EQUAL";
        ECompareFunction.EQUAL = 4;
        ECompareFunction._map[5] = "NOT_EQUAL";
        ECompareFunction.NOT_EQUAL = 5;
        ECompareFunction._map[6] = "GREATER_EQUAL";
        ECompareFunction.GREATER_EQUAL = 6;
        ECompareFunction._map[7] = "GREATER";
        ECompareFunction.GREATER = 7;
    })(akra.ECompareFunction || (akra.ECompareFunction = {}));
    var ECompareFunction = akra.ECompareFunction;
    (function (ECullingMode) {
        ECullingMode._map = [];
        ECullingMode.NONE = 1;
        ECullingMode.CLOCKWISE = 2;
        ECullingMode.ANTICLOCKWISE = 3;
    })(akra.ECullingMode || (akra.ECullingMode = {}));
    var ECullingMode = akra.ECullingMode;
    (function (EFrameBufferTypes) {
        EFrameBufferTypes._map = [];
        EFrameBufferTypes.COLOR = 0x1;
        EFrameBufferTypes.DEPTH = 0x2;
        EFrameBufferTypes.STENCIL = 0x4;
    })(akra.EFrameBufferTypes || (akra.EFrameBufferTypes = {}));
    var EFrameBufferTypes = akra.EFrameBufferTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    (function (EPrimitiveTypes) {
        EPrimitiveTypes._map = [];
        EPrimitiveTypes.POINTLIST = 0;
        EPrimitiveTypes._map[1] = "LINELIST";
        EPrimitiveTypes.LINELIST = 1;
        EPrimitiveTypes._map[2] = "LINELOOP";
        EPrimitiveTypes.LINELOOP = 2;
        EPrimitiveTypes._map[3] = "LINESTRIP";
        EPrimitiveTypes.LINESTRIP = 3;
        EPrimitiveTypes._map[4] = "TRIANGLELIST";
        EPrimitiveTypes.TRIANGLELIST = 4;
        EPrimitiveTypes._map[5] = "TRIANGLESTRIP";
        EPrimitiveTypes.TRIANGLESTRIP = 5;
        EPrimitiveTypes._map[6] = "TRIANGLEFAN";
        EPrimitiveTypes.TRIANGLEFAN = 6;
    })(akra.EPrimitiveTypes || (akra.EPrimitiveTypes = {}));
    var EPrimitiveTypes = akra.EPrimitiveTypes;
    ;
    (function (ERenderCapabilitiesCategory) {
        ERenderCapabilitiesCategory._map = [];
        ERenderCapabilitiesCategory.C_COMMON = 0;
        ERenderCapabilitiesCategory.C_COMMON_2 = 1;
        ERenderCapabilitiesCategory.C_WEBGL = 2;
        ERenderCapabilitiesCategory.COUNT = 3;
    })(akra.ERenderCapabilitiesCategory || (akra.ERenderCapabilitiesCategory = {}));
    var ERenderCapabilitiesCategory = akra.ERenderCapabilitiesCategory;
    (function (ERenderCapabilities) {
        ERenderCapabilities._map = [];
        ERenderCapabilities.AUTOMIPMAP = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 0));
        ERenderCapabilities.BLENDING = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 1));
        ERenderCapabilities.ANISOTROPY = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 2));
        ERenderCapabilities.DOT3 = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 3));
        ERenderCapabilities.CUBEMAPPING = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 4));
        ERenderCapabilities.HWSTENCIL = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 5));
        ERenderCapabilities.VBO = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 7));
        ERenderCapabilities.VERTEX_PROGRAM = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 9));
        ERenderCapabilities.FRAGMENT_PROGRAM = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 10));
        ERenderCapabilities.SCISSOR_TEST = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 11));
        ERenderCapabilities.TWO_SIDED_STENCIL = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 12));
        ERenderCapabilities.STENCIL_WRAP = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 13));
        ERenderCapabilities.HWOCCLUSION = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 14));
        ERenderCapabilities.USER_CLIP_PLANES = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 15));
        ERenderCapabilities.VERTEX_FORMAT_UBYTE4 = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 16));
        ERenderCapabilities.INFINITE_FAR_PLANE = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 17));
        ERenderCapabilities.HWRENDER_TO_TEXTURE = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 18));
        ERenderCapabilities.TEXTURE_FLOAT = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 19));
        ERenderCapabilities.NON_POWER_OF_2_TEXTURES = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 20));
        ERenderCapabilities.TEXTURE_3D = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 21));
        ERenderCapabilities.POINT_SPRITES = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 22));
        ERenderCapabilities.POINT_EXTENDED_PARAMETERS = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 23));
        ERenderCapabilities.VERTEX_TEXTURE_FETCH = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 24));
        ERenderCapabilities.MIPMAP_LOD_BIAS = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 25));
        ERenderCapabilities.GEOMETRY_PROGRAM = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 26));
        ERenderCapabilities.HWRENDER_TO_VERTEX_BUFFER = ((ERenderCapabilitiesCategory.C_COMMON << (32 - 4)) | (1 << 27));
        ERenderCapabilities.TEXTURE_COMPRESSION = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 0));
        ERenderCapabilities.TEXTURE_COMPRESSION_DXT = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 1));
        ERenderCapabilities.TEXTURE_COMPRESSION_VTC = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 2));
        ERenderCapabilities.TEXTURE_COMPRESSION_PVRTC = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 3));
        ERenderCapabilities.FIXED_FUNCTION = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 4));
        ERenderCapabilities.MRT_DIFFERENT_BIT_DEPTHS = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 5));
        ERenderCapabilities.ALPHA_TO_COVERAGE = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 6));
        ERenderCapabilities.ADVANCED_BLEND_OPERATIONS = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 7));
        ERenderCapabilities.RTT_SEPARATE_DEPTHBUFFER = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 8));
        ERenderCapabilities.RTT_MAIN_DEPTHBUFFER_ATTACHABLE = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 9));
        ERenderCapabilities.RTT_DEPTHBUFFER_RESOLUTION_LESSEQUAL = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 10));
        ERenderCapabilities.VERTEX_BUFFER_INSTANCE_DATA = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 11));
        ERenderCapabilities.CAN_GET_COMPILED_SHADER_BUFFER = ((ERenderCapabilitiesCategory.C_COMMON_2 << (32 - 4)) | (1 << 12));
        ERenderCapabilities.GL1_5_NOVBO = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 1));
        ERenderCapabilities.FBO = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 2));
        ERenderCapabilities.FBO_ARB = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 3));
        ERenderCapabilities.FBO_ATI = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 4));
        ERenderCapabilities.PBUFFER = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 5));
        ERenderCapabilities.GL1_5_NOHWOCCLUSION = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 6));
        ERenderCapabilities.POINT_EXTENDED_PARAMETERS_ARB = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 7));
        ERenderCapabilities.POINT_EXTENDED_PARAMETERS_EXT = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 8));
        ERenderCapabilities.SEPARATE_SHADER_OBJECTS = ((ERenderCapabilitiesCategory.C_WEBGL << (32 - 4)) | (1 << 9));
    })(akra.ERenderCapabilities || (akra.ERenderCapabilities = {}));
    var ERenderCapabilities = akra.ERenderCapabilities;
    (function (EAttachmentTypes) {
        EAttachmentTypes._map = [];
        EAttachmentTypes.COLOR_ATTACHMENT0 = 0x8CE0;
        EAttachmentTypes.DEPTH_ATTACHMENT = 0x8D00;
        EAttachmentTypes.STENCIL_ATTACHMENT = 0x8D20;
        EAttachmentTypes.DEPTH_STENCIL_ATTACHMENT = 0x821A;
    })(akra.EAttachmentTypes || (akra.EAttachmentTypes = {}));
    var EAttachmentTypes = akra.EAttachmentTypes;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EUtilTimerCommands) {
        EUtilTimerCommands._map = [];
        EUtilTimerCommands._map[0] = "TIMER_RESET";
        EUtilTimerCommands.TIMER_RESET = 0;
        EUtilTimerCommands._map[1] = "TIMER_START";
        EUtilTimerCommands.TIMER_START = 1;
        EUtilTimerCommands._map[2] = "TIMER_STOP";
        EUtilTimerCommands.TIMER_STOP = 2;
        EUtilTimerCommands._map[3] = "TIMER_ADVANCE";
        EUtilTimerCommands.TIMER_ADVANCE = 3;
        EUtilTimerCommands._map[4] = "TIMER_GET_ABSOLUTE_TIME";
        EUtilTimerCommands.TIMER_GET_ABSOLUTE_TIME = 4;
        EUtilTimerCommands._map[5] = "TIMER_GET_APP_TIME";
        EUtilTimerCommands.TIMER_GET_APP_TIME = 5;
        EUtilTimerCommands._map[6] = "TIMER_GET_ELAPSED_TIME";
        EUtilTimerCommands.TIMER_GET_ELAPSED_TIME = 6;
    })(akra.EUtilTimerCommands || (akra.EUtilTimerCommands = {}));
    var EUtilTimerCommands = akra.EUtilTimerCommands;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ENodeCreateMode) {
        ENodeCreateMode._map = [];
        ENodeCreateMode._map[0] = "k_Default";
        ENodeCreateMode.k_Default = 0;
        ENodeCreateMode._map[1] = "k_Necessary";
        ENodeCreateMode.k_Necessary = 1;
        ENodeCreateMode._map[2] = "k_Not";
        ENodeCreateMode.k_Not = 2;
    })(akra.ENodeCreateMode || (akra.ENodeCreateMode = {}));
    var ENodeCreateMode = akra.ENodeCreateMode;
    (function (EParserCode) {
        EParserCode._map = [];
        EParserCode._map[0] = "k_Pause";
        EParserCode.k_Pause = 0;
        EParserCode._map[1] = "k_Ok";
        EParserCode.k_Ok = 1;
        EParserCode._map[2] = "k_Error";
        EParserCode.k_Error = 2;
    })(akra.EParserCode || (akra.EParserCode = {}));
    var EParserCode = akra.EParserCode;
    (function (EParserType) {
        EParserType._map = [];
        EParserType._map[0] = "k_LR0";
        EParserType.k_LR0 = 0;
        EParserType._map[1] = "k_LR1";
        EParserType.k_LR1 = 1;
        EParserType._map[2] = "k_LALR";
        EParserType.k_LALR = 2;
    })(akra.EParserType || (akra.EParserType = {}));
    var EParserType = akra.EParserType;
    (function (EParseMode) {
        EParseMode._map = [];
        EParseMode.k_AllNode = 0x0001;
        EParseMode.k_Negate = 0x0002;
        EParseMode.k_Add = 0x0004;
        EParseMode.k_Optimize = 0x0008;
        EParseMode.k_DebugMode = 0x0010;
    })(akra.EParseMode || (akra.EParseMode = {}));
    var EParseMode = akra.EParseMode;
    (function (ETokenType) {
        ETokenType._map = [];
        ETokenType.k_NumericLiteral = 1;
        ETokenType._map[2] = "k_CommentLiteral";
        ETokenType.k_CommentLiteral = 2;
        ETokenType._map[3] = "k_StringLiteral";
        ETokenType.k_StringLiteral = 3;
        ETokenType._map[4] = "k_PunctuatorLiteral";
        ETokenType.k_PunctuatorLiteral = 4;
        ETokenType._map[5] = "k_WhitespaceLiteral";
        ETokenType.k_WhitespaceLiteral = 5;
        ETokenType._map[6] = "k_IdentifierLiteral";
        ETokenType.k_IdentifierLiteral = 6;
        ETokenType._map[7] = "k_KeywordLiteral";
        ETokenType.k_KeywordLiteral = 7;
        ETokenType._map[8] = "k_Unknown";
        ETokenType.k_Unknown = 8;
        ETokenType._map[9] = "k_End";
        ETokenType.k_End = 9;
    })(akra.ETokenType || (akra.ETokenType = {}));
    var ETokenType = akra.ETokenType;
    (function (EOperationType) {
        EOperationType._map = [];
        EOperationType.k_Error = 100;
        EOperationType._map[101] = "k_Shift";
        EOperationType.k_Shift = 101;
        EOperationType._map[102] = "k_Reduce";
        EOperationType.k_Reduce = 102;
        EOperationType._map[103] = "k_Success";
        EOperationType.k_Success = 103;
        EOperationType._map[104] = "k_Pause";
        EOperationType.k_Pause = 104;
        EOperationType._map[105] = "k_Ok";
        EOperationType.k_Ok = 105;
    })(akra.EOperationType || (akra.EOperationType = {}));
    var EOperationType = akra.EOperationType;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    (function (EResourceItemEvents) {
        EResourceItemEvents._map = [];
        EResourceItemEvents._map[0] = "CREATED";
        EResourceItemEvents.CREATED = 0;
        EResourceItemEvents._map[1] = "LOADED";
        EResourceItemEvents.LOADED = 1;
        EResourceItemEvents._map[2] = "DISABLED";
        EResourceItemEvents.DISABLED = 2;
        EResourceItemEvents._map[3] = "ALTERED";
        EResourceItemEvents.ALTERED = 3;
        EResourceItemEvents._map[4] = "TOTALRESOURCEFLAGS";
        EResourceItemEvents.TOTALRESOURCEFLAGS = 4;
    })(akra.EResourceItemEvents || (akra.EResourceItemEvents = {}));
    var EResourceItemEvents = akra.EResourceItemEvents;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EAFXInstructionTypes) {
        EAFXInstructionTypes._map = [];
        EAFXInstructionTypes.k_Instruction = 0;
        EAFXInstructionTypes._map[1] = "k_InstructionCollector";
        EAFXInstructionTypes.k_InstructionCollector = 1;
        EAFXInstructionTypes._map[2] = "k_SimpleInstruction";
        EAFXInstructionTypes.k_SimpleInstruction = 2;
        EAFXInstructionTypes._map[3] = "k_VariableTypeInstruction";
        EAFXInstructionTypes.k_VariableTypeInstruction = 3;
        EAFXInstructionTypes._map[4] = "k_SystemTypeInstruction";
        EAFXInstructionTypes.k_SystemTypeInstruction = 4;
        EAFXInstructionTypes._map[5] = "k_ComplexTypeInstruction";
        EAFXInstructionTypes.k_ComplexTypeInstruction = 5;
        EAFXInstructionTypes._map[6] = "k_TypedInstruction";
        EAFXInstructionTypes.k_TypedInstruction = 6;
        EAFXInstructionTypes._map[7] = "k_DeclInstruction";
        EAFXInstructionTypes.k_DeclInstruction = 7;
        EAFXInstructionTypes._map[8] = "k_IntInstruction";
        EAFXInstructionTypes.k_IntInstruction = 8;
        EAFXInstructionTypes._map[9] = "k_FloatInstruction";
        EAFXInstructionTypes.k_FloatInstruction = 9;
        EAFXInstructionTypes._map[10] = "k_BoolInstruction";
        EAFXInstructionTypes.k_BoolInstruction = 10;
        EAFXInstructionTypes._map[11] = "k_StringInstruction";
        EAFXInstructionTypes.k_StringInstruction = 11;
        EAFXInstructionTypes._map[12] = "k_IdInstruction";
        EAFXInstructionTypes.k_IdInstruction = 12;
        EAFXInstructionTypes._map[13] = "k_KeywordInstruction";
        EAFXInstructionTypes.k_KeywordInstruction = 13;
        EAFXInstructionTypes._map[14] = "k_TypeDeclInstruction";
        EAFXInstructionTypes.k_TypeDeclInstruction = 14;
        EAFXInstructionTypes._map[15] = "k_VariableDeclInstruction";
        EAFXInstructionTypes.k_VariableDeclInstruction = 15;
        EAFXInstructionTypes._map[16] = "k_AnnotationInstruction";
        EAFXInstructionTypes.k_AnnotationInstruction = 16;
        EAFXInstructionTypes._map[17] = "k_UsageTypeInstruction";
        EAFXInstructionTypes.k_UsageTypeInstruction = 17;
        EAFXInstructionTypes._map[18] = "k_BaseTypeInstruction";
        EAFXInstructionTypes.k_BaseTypeInstruction = 18;
        EAFXInstructionTypes._map[19] = "k_StructDeclInstruction";
        EAFXInstructionTypes.k_StructDeclInstruction = 19;
        EAFXInstructionTypes._map[20] = "k_StructFieldsInstruction";
        EAFXInstructionTypes.k_StructFieldsInstruction = 20;
        EAFXInstructionTypes._map[21] = "k_ExprInstruction";
        EAFXInstructionTypes.k_ExprInstruction = 21;
        EAFXInstructionTypes._map[22] = "k_IdExprInstruction";
        EAFXInstructionTypes.k_IdExprInstruction = 22;
        EAFXInstructionTypes._map[23] = "k_ArithmeticExprInstruction";
        EAFXInstructionTypes.k_ArithmeticExprInstruction = 23;
        EAFXInstructionTypes._map[24] = "k_AssignmentExprInstruction";
        EAFXInstructionTypes.k_AssignmentExprInstruction = 24;
        EAFXInstructionTypes._map[25] = "k_RelationalExprInstruction";
        EAFXInstructionTypes.k_RelationalExprInstruction = 25;
        EAFXInstructionTypes._map[26] = "k_LogicalExprInstruction";
        EAFXInstructionTypes.k_LogicalExprInstruction = 26;
        EAFXInstructionTypes._map[27] = "k_ConditionalExprInstruction";
        EAFXInstructionTypes.k_ConditionalExprInstruction = 27;
        EAFXInstructionTypes._map[28] = "k_CastExprInstruction";
        EAFXInstructionTypes.k_CastExprInstruction = 28;
        EAFXInstructionTypes._map[29] = "k_UnaryExprInstruction";
        EAFXInstructionTypes.k_UnaryExprInstruction = 29;
        EAFXInstructionTypes._map[30] = "k_PostfixIndexInstruction";
        EAFXInstructionTypes.k_PostfixIndexInstruction = 30;
        EAFXInstructionTypes._map[31] = "k_PostfixPointInstruction";
        EAFXInstructionTypes.k_PostfixPointInstruction = 31;
        EAFXInstructionTypes._map[32] = "k_PostfixArithmeticInstruction";
        EAFXInstructionTypes.k_PostfixArithmeticInstruction = 32;
        EAFXInstructionTypes._map[33] = "k_PrimaryExprInstruction";
        EAFXInstructionTypes.k_PrimaryExprInstruction = 33;
        EAFXInstructionTypes._map[34] = "k_ComplexExprInstruction";
        EAFXInstructionTypes.k_ComplexExprInstruction = 34;
        EAFXInstructionTypes._map[35] = "k_FunctionCallInstruction";
        EAFXInstructionTypes.k_FunctionCallInstruction = 35;
        EAFXInstructionTypes._map[36] = "k_SystemCallInstruction";
        EAFXInstructionTypes.k_SystemCallInstruction = 36;
        EAFXInstructionTypes._map[37] = "k_ConstructorCallInstruction";
        EAFXInstructionTypes.k_ConstructorCallInstruction = 37;
        EAFXInstructionTypes._map[38] = "k_CompileExprInstruction";
        EAFXInstructionTypes.k_CompileExprInstruction = 38;
        EAFXInstructionTypes._map[39] = "k_InitExprInstruction";
        EAFXInstructionTypes.k_InitExprInstruction = 39;
        EAFXInstructionTypes._map[40] = "k_SamplerStateBlockInstruction";
        EAFXInstructionTypes.k_SamplerStateBlockInstruction = 40;
        EAFXInstructionTypes._map[41] = "k_SamplerStateInstruction";
        EAFXInstructionTypes.k_SamplerStateInstruction = 41;
        EAFXInstructionTypes._map[42] = "k_ExtractExprInstruction";
        EAFXInstructionTypes.k_ExtractExprInstruction = 42;
        EAFXInstructionTypes._map[43] = "k_MemExprInstruction";
        EAFXInstructionTypes.k_MemExprInstruction = 43;
        EAFXInstructionTypes._map[44] = "k_FunctionDeclInstruction";
        EAFXInstructionTypes.k_FunctionDeclInstruction = 44;
        EAFXInstructionTypes._map[45] = "k_ShaderFunctionInstruction";
        EAFXInstructionTypes.k_ShaderFunctionInstruction = 45;
        EAFXInstructionTypes._map[46] = "k_SystemFunctionInstruction";
        EAFXInstructionTypes.k_SystemFunctionInstruction = 46;
        EAFXInstructionTypes._map[47] = "k_FunctionDefInstruction";
        EAFXInstructionTypes.k_FunctionDefInstruction = 47;
        EAFXInstructionTypes._map[48] = "k_StmtInstruction";
        EAFXInstructionTypes.k_StmtInstruction = 48;
        EAFXInstructionTypes._map[49] = "k_StmtBlockInstruction";
        EAFXInstructionTypes.k_StmtBlockInstruction = 49;
        EAFXInstructionTypes._map[50] = "k_ExprStmtInstruction";
        EAFXInstructionTypes.k_ExprStmtInstruction = 50;
        EAFXInstructionTypes._map[51] = "k_BreakStmtInstruction";
        EAFXInstructionTypes.k_BreakStmtInstruction = 51;
        EAFXInstructionTypes._map[52] = "k_WhileStmtInstruction";
        EAFXInstructionTypes.k_WhileStmtInstruction = 52;
        EAFXInstructionTypes._map[53] = "k_ForStmtInstruction";
        EAFXInstructionTypes.k_ForStmtInstruction = 53;
        EAFXInstructionTypes._map[54] = "k_IfStmtInstruction";
        EAFXInstructionTypes.k_IfStmtInstruction = 54;
        EAFXInstructionTypes._map[55] = "k_DeclStmtInstruction";
        EAFXInstructionTypes.k_DeclStmtInstruction = 55;
        EAFXInstructionTypes._map[56] = "k_ReturnStmtInstruction";
        EAFXInstructionTypes.k_ReturnStmtInstruction = 56;
        EAFXInstructionTypes._map[57] = "k_ExtractStmtInstruction";
        EAFXInstructionTypes.k_ExtractStmtInstruction = 57;
        EAFXInstructionTypes._map[58] = "k_SemicolonStmtInstruction";
        EAFXInstructionTypes.k_SemicolonStmtInstruction = 58;
        EAFXInstructionTypes._map[59] = "k_PassInstruction";
        EAFXInstructionTypes.k_PassInstruction = 59;
        EAFXInstructionTypes._map[60] = "k_TechniqueInstruction";
        EAFXInstructionTypes.k_TechniqueInstruction = 60;
    })(akra.EAFXInstructionTypes || (akra.EAFXInstructionTypes = {}));
    var EAFXInstructionTypes = akra.EAFXInstructionTypes;
    (function (EFunctionType) {
        EFunctionType._map = [];
        EFunctionType.k_Vertex = 0;
        EFunctionType.k_Pixel = 1;
        EFunctionType.k_Fragment = 1;
        EFunctionType.k_Function = 2;
        EFunctionType.k_PassFunction = 3;
    })(akra.EFunctionType || (akra.EFunctionType = {}));
    var EFunctionType = akra.EFunctionType;
    (function (ECheckStage) {
        ECheckStage._map = [];
        ECheckStage._map[0] = "CODE_TARGET_SUPPORT";
        ECheckStage.CODE_TARGET_SUPPORT = 0;
        ECheckStage._map[1] = "SELF_CONTAINED";
        ECheckStage.SELF_CONTAINED = 1;
    })(akra.ECheckStage || (akra.ECheckStage = {}));
    var ECheckStage = akra.ECheckStage;
    (function (EVarUsedMode) {
        EVarUsedMode._map = [];
        EVarUsedMode._map[0] = "k_Read";
        EVarUsedMode.k_Read = 0;
        EVarUsedMode._map[1] = "k_Write";
        EVarUsedMode.k_Write = 1;
        EVarUsedMode._map[2] = "k_ReadWrite";
        EVarUsedMode.k_ReadWrite = 2;
        EVarUsedMode._map[3] = "k_Undefined";
        EVarUsedMode.k_Undefined = 3;
        EVarUsedMode.k_Default = EVarUsedMode.k_ReadWrite;
    })(akra.EVarUsedMode || (akra.EVarUsedMode = {}));
    var EVarUsedMode = akra.EVarUsedMode;
    (function (EExtractExprType) {
        EExtractExprType._map = [];
        EExtractExprType._map[0] = "k_Header";
        EExtractExprType.k_Header = 0;
        EExtractExprType._map[1] = "k_Float";
        EExtractExprType.k_Float = 1;
        EExtractExprType._map[2] = "k_Int";
        EExtractExprType.k_Int = 2;
        EExtractExprType._map[3] = "k_Bool";
        EExtractExprType.k_Bool = 3;
        EExtractExprType._map[4] = "k_Float2";
        EExtractExprType.k_Float2 = 4;
        EExtractExprType._map[5] = "k_Int2";
        EExtractExprType.k_Int2 = 5;
        EExtractExprType._map[6] = "k_Bool2";
        EExtractExprType.k_Bool2 = 6;
        EExtractExprType._map[7] = "k_Float3";
        EExtractExprType.k_Float3 = 7;
        EExtractExprType._map[8] = "k_Int3";
        EExtractExprType.k_Int3 = 8;
        EExtractExprType._map[9] = "k_Bool3";
        EExtractExprType.k_Bool3 = 9;
        EExtractExprType._map[10] = "k_Float4";
        EExtractExprType.k_Float4 = 10;
        EExtractExprType._map[11] = "k_Int4";
        EExtractExprType.k_Int4 = 11;
        EExtractExprType._map[12] = "k_Bool4";
        EExtractExprType.k_Bool4 = 12;
        EExtractExprType._map[13] = "k_Float4x4";
        EExtractExprType.k_Float4x4 = 13;
    })(akra.EExtractExprType || (akra.EExtractExprType = {}));
    var EExtractExprType = akra.EExtractExprType;
    (function (EAFXBlendMode) {
        EAFXBlendMode._map = [];
        EAFXBlendMode._map[0] = "k_Shared";
        EAFXBlendMode.k_Shared = 0;
        EAFXBlendMode._map[1] = "k_Uniform";
        EAFXBlendMode.k_Uniform = 1;
        EAFXBlendMode._map[2] = "k_Attribute";
        EAFXBlendMode.k_Attribute = 2;
        EAFXBlendMode._map[3] = "k_Foreign";
        EAFXBlendMode.k_Foreign = 3;
        EAFXBlendMode._map[4] = "k_Global";
        EAFXBlendMode.k_Global = 4;
        EAFXBlendMode._map[5] = "k_Varying";
        EAFXBlendMode.k_Varying = 5;
        EAFXBlendMode._map[6] = "k_TypeDecl";
        EAFXBlendMode.k_TypeDecl = 6;
        EAFXBlendMode._map[7] = "k_VertexOut";
        EAFXBlendMode.k_VertexOut = 7;
    })(akra.EAFXBlendMode || (akra.EAFXBlendMode = {}));
    var EAFXBlendMode = akra.EAFXBlendMode;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EPixelFormats) {
        EPixelFormats._map = [];
        EPixelFormats.UNKNOWN = 0;
        EPixelFormats.L8 = 1;
        EPixelFormats.BYTE_L = EPixelFormats.L8;
        EPixelFormats.L16 = 2;
        EPixelFormats.SHORT_L = EPixelFormats.L16;
        EPixelFormats.A8 = 3;
        EPixelFormats.BYTE_A = EPixelFormats.A8;
        EPixelFormats.A4L4 = 4;
        EPixelFormats.BYTE_LA = 5;
        EPixelFormats.R5G6B5 = 6;
        EPixelFormats.B5G6R5 = 7;
        EPixelFormats.R3G3B2 = 31;
        EPixelFormats.A4R4G4B4 = 8;
        EPixelFormats.A1R5G5B5 = 9;
        EPixelFormats.R8G8B8 = 10;
        EPixelFormats.B8G8R8 = 11;
        EPixelFormats.A8R8G8B8 = 12;
        EPixelFormats.A8B8G8R8 = 13;
        EPixelFormats.B8G8R8A8 = 14;
        EPixelFormats.R8G8B8A8 = 28;
        EPixelFormats.X8R8G8B8 = 26;
        EPixelFormats.X8B8G8R8 = 27;
        EPixelFormats.BYTE_RGB = EPixelFormats.R8G8B8;
        EPixelFormats.BYTE_BGR = EPixelFormats.B8G8R8;
        EPixelFormats.BYTE_BGRA = EPixelFormats.B8G8R8A8;
        EPixelFormats.BYTE_RGBA = EPixelFormats.R8G8B8A8;
        EPixelFormats.BYTE_ABGR = EPixelFormats.A8B8G8R8;
        EPixelFormats.BYTE_ARGB = EPixelFormats.A8R8G8B8;
        EPixelFormats.A2R10G10B10 = 15;
        EPixelFormats.A2B10G10R10 = 16;
        EPixelFormats.DXT1 = 17;
        EPixelFormats.DXT2 = 18;
        EPixelFormats.DXT3 = 19;
        EPixelFormats.DXT4 = 20;
        EPixelFormats.DXT5 = 21;
        EPixelFormats.FLOAT16_R = 32;
        EPixelFormats.FLOAT16_RGB = 22;
        EPixelFormats.FLOAT16_RGBA = 23;
        EPixelFormats.FLOAT32_R = 33;
        EPixelFormats.FLOAT32_RGB = 24;
        EPixelFormats.FLOAT32_RGBA = 25;
        EPixelFormats.FLOAT16_GR = 35;
        EPixelFormats.FLOAT32_GR = 36;
        EPixelFormats.FLOAT32_DEPTH = 29;
        EPixelFormats.DEPTH8 = 44;
        EPixelFormats.BYTE_DEPTH = EPixelFormats.DEPTH8;
        EPixelFormats.DEPTH16 = 45;
        EPixelFormats.SHORT_DEPTH = EPixelFormats.DEPTH16;
        EPixelFormats.DEPTH32 = 46;
        EPixelFormats.DEPTH24STENCIL8 = 47;
        EPixelFormats.SHORT_RGBA = 30;
        EPixelFormats.SHORT_GR = 34;
        EPixelFormats.SHORT_RGB = 37;
        EPixelFormats.PVRTC_RGB2 = 38;
        EPixelFormats.PVRTC_RGBA2 = 39;
        EPixelFormats.PVRTC_RGB4 = 40;
        EPixelFormats.PVRTC_RGBA4 = 41;
        EPixelFormats.R8 = 42;
        EPixelFormats.RG8 = 43;
        EPixelFormats.TOTAL = 48;
    })(akra.EPixelFormats || (akra.EPixelFormats = {}));
    var EPixelFormats = akra.EPixelFormats;
    ;
    (function (EPixelFormatFlags) {
        EPixelFormatFlags._map = [];
        EPixelFormatFlags.HASALPHA = 0x00000001;
        EPixelFormatFlags.COMPRESSED = 0x00000002;
        EPixelFormatFlags.FLOAT = 0x00000004;
        EPixelFormatFlags.DEPTH = 0x00000008;
        EPixelFormatFlags.NATIVEENDIAN = 0x00000010;
        EPixelFormatFlags.LUMINANCE = 0x00000020;
        EPixelFormatFlags.STENCIL = 0x00000040;
    })(akra.EPixelFormatFlags || (akra.EPixelFormatFlags = {}));
    var EPixelFormatFlags = akra.EPixelFormatFlags;
    (function (EPixelComponentTypes) {
        EPixelComponentTypes._map = [];
        EPixelComponentTypes.BYTE = 0;
        EPixelComponentTypes.SHORT = 1;
        EPixelComponentTypes.INT = 2;
        EPixelComponentTypes.FLOAT16 = 3;
        EPixelComponentTypes.FLOAT32 = 4;
        EPixelComponentTypes.COUNT = 5;
    })(akra.EPixelComponentTypes || (akra.EPixelComponentTypes = {}));
    var EPixelComponentTypes = akra.EPixelComponentTypes;
    ;
    (function (EFilters) {
        EFilters._map = [];
        EFilters._map[0] = "NEAREST";
        EFilters.NEAREST = 0;
        EFilters._map[1] = "LINEAR";
        EFilters.LINEAR = 1;
        EFilters._map[2] = "BILINEAR";
        EFilters.BILINEAR = 2;
        EFilters._map[3] = "BOX";
        EFilters.BOX = 3;
        EFilters._map[4] = "TRIANGLE";
        EFilters.TRIANGLE = 4;
        EFilters._map[5] = "BICUBIC";
        EFilters.BICUBIC = 5;
    })(akra.EFilters || (akra.EFilters = {}));
    var EFilters = akra.EFilters;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EHardwareBufferFlags) {
        EHardwareBufferFlags._map = [];
        EHardwareBufferFlags.STATIC = 0x01;
        EHardwareBufferFlags.DYNAMIC = 0x02;
        EHardwareBufferFlags.STREAM = 0x80;
        EHardwareBufferFlags.READABLE = 0x04;
        EHardwareBufferFlags.BACKUP_COPY = 0x08;
        EHardwareBufferFlags.SOFTWARE = 0x10;
        EHardwareBufferFlags.ALIGNMENT = 0x20;
        EHardwareBufferFlags.DISCARDABLE = 0x40;
        EHardwareBufferFlags.STATIC_READABLE = EHardwareBufferFlags.STATIC | EHardwareBufferFlags.READABLE;
        EHardwareBufferFlags.DYNAMIC_DISCARDABLE = EHardwareBufferFlags.DYNAMIC | EHardwareBufferFlags.DISCARDABLE;
    })(akra.EHardwareBufferFlags || (akra.EHardwareBufferFlags = {}));
    var EHardwareBufferFlags = akra.EHardwareBufferFlags;
    (function (ELockFlags) {
        ELockFlags._map = [];
        ELockFlags.READ = 0x01;
        ELockFlags.WRITE = 0x02;
        ELockFlags.DISCARD = 0x04;
        ELockFlags.NO_OVERWRITE = 0x08;
        ELockFlags.NORMAL = ELockFlags.READ | ELockFlags.WRITE;
    })(akra.ELockFlags || (akra.ELockFlags = {}));
    var ELockFlags = akra.ELockFlags;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    (function (ETextureFlags) {
        ETextureFlags._map = [];
        ETextureFlags.STATIC = EHardwareBufferFlags.STATIC;
        ETextureFlags.DYNAMIC = EHardwareBufferFlags.DYNAMIC;
        ETextureFlags.READEBLE = EHardwareBufferFlags.READABLE;
        ETextureFlags.DYNAMIC_DISCARDABLE = EHardwareBufferFlags.DYNAMIC_DISCARDABLE;
        ETextureFlags.AUTOMIPMAP = 0x100;
        ETextureFlags.RENDERTARGET = 0x200;
        ETextureFlags.DEFAULT = ETextureFlags.STATIC;
    })(akra.ETextureFlags || (akra.ETextureFlags = {}));
    var ETextureFlags = akra.ETextureFlags;
    (function (ETextureFilters) {
        ETextureFilters._map = [];
        ETextureFilters.NEAREST = 0x2600;
        ETextureFilters.LINEAR = 0x2601;
        ETextureFilters.NEAREST_MIPMAP_NEAREST = 0x2700;
        ETextureFilters.LINEAR_MIPMAP_NEAREST = 0x2701;
        ETextureFilters.NEAREST_MIPMAP_LINEAR = 0x2702;
        ETextureFilters.LINEAR_MIPMAP_LINEAR = 0x2703;
    })(akra.ETextureFilters || (akra.ETextureFilters = {}));
    var ETextureFilters = akra.ETextureFilters;
    ;
    (function (ETextureWrapModes) {
        ETextureWrapModes._map = [];
        ETextureWrapModes.REPEAT = 0x2901;
        ETextureWrapModes.CLAMP_TO_EDGE = 0x812F;
        ETextureWrapModes.MIRRORED_REPEAT = 0x8370;
    })(akra.ETextureWrapModes || (akra.ETextureWrapModes = {}));
    var ETextureWrapModes = akra.ETextureWrapModes;
    ;
    (function (ETextureParameters) {
        ETextureParameters._map = [];
        ETextureParameters.MAG_FILTER = 0x2800;
        ETextureParameters._map[10241] = "MIN_FILTER";
        ETextureParameters.MIN_FILTER = 10241;
        ETextureParameters._map[10242] = "WRAP_S";
        ETextureParameters.WRAP_S = 10242;
        ETextureParameters._map[10243] = "WRAP_T";
        ETextureParameters.WRAP_T = 10243;
    })(akra.ETextureParameters || (akra.ETextureParameters = {}));
    var ETextureParameters = akra.ETextureParameters;
    ;
    (function (ETextureTypes) {
        ETextureTypes._map = [];
        ETextureTypes.TEXTURE_2D = 0x0DE1;
        ETextureTypes.TEXTURE_CUBE_MAP = 0x8513;
    })(akra.ETextureTypes || (akra.ETextureTypes = {}));
    var ETextureTypes = akra.ETextureTypes;
    ;
    (function (ECubeFace) {
        ECubeFace._map = [];
        ECubeFace.POSITIVE_X = 0;
        ECubeFace.NEGATIVE_X = 1;
        ECubeFace.POSITIVE_Y = 2;
        ECubeFace.NEGATIVE_Y = 3;
        ECubeFace.POSITIVE_Z = 4;
        ECubeFace.NEGATIVE_Z = 5;
    })(akra.ECubeFace || (akra.ECubeFace = {}));
    var ECubeFace = akra.ECubeFace;
    ;
    (function (ETextureCubeFlags) {
        ETextureCubeFlags._map = [];
        ETextureCubeFlags.POSITIVE_X = 0x00000001;
        ETextureCubeFlags.NEGATIVE_X = 0x00000002;
        ETextureCubeFlags.POSITIVE_Y = 0x00000004;
        ETextureCubeFlags.NEGATIVE_Y = 0x00000008;
        ETextureCubeFlags.POSITIVE_Z = 0x0000000c;
        ETextureCubeFlags.NEGATIVE_Z = 0x000000010;
    })(akra.ETextureCubeFlags || (akra.ETextureCubeFlags = {}));
    var ETextureCubeFlags = akra.ETextureCubeFlags;
    ;
    (function (ETextureUnits) {
        ETextureUnits._map = [];
        ETextureUnits.TEXTURE0 = 0x84C0;
    })(akra.ETextureUnits || (akra.ETextureUnits = {}));
    var ETextureUnits = akra.ETextureUnits;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    (function (ESurfaceMaterialTextures) {
        ESurfaceMaterialTextures._map = [];
        ESurfaceMaterialTextures.TEXTURE0 = 0;
        ESurfaceMaterialTextures._map[1] = "TEXTURE1";
        ESurfaceMaterialTextures.TEXTURE1 = 1;
        ESurfaceMaterialTextures._map[2] = "TEXTURE2";
        ESurfaceMaterialTextures.TEXTURE2 = 2;
        ESurfaceMaterialTextures._map[3] = "TEXTURE3";
        ESurfaceMaterialTextures.TEXTURE3 = 3;
        ESurfaceMaterialTextures._map[4] = "TEXTURE4";
        ESurfaceMaterialTextures.TEXTURE4 = 4;
        ESurfaceMaterialTextures._map[5] = "TEXTURE5";
        ESurfaceMaterialTextures.TEXTURE5 = 5;
        ESurfaceMaterialTextures._map[6] = "TEXTURE6";
        ESurfaceMaterialTextures.TEXTURE6 = 6;
        ESurfaceMaterialTextures._map[7] = "TEXTURE7";
        ESurfaceMaterialTextures.TEXTURE7 = 7;
        ESurfaceMaterialTextures._map[8] = "TEXTURE8";
        ESurfaceMaterialTextures.TEXTURE8 = 8;
        ESurfaceMaterialTextures._map[9] = "TEXTURE9";
        ESurfaceMaterialTextures.TEXTURE9 = 9;
        ESurfaceMaterialTextures._map[10] = "TEXTURE10";
        ESurfaceMaterialTextures.TEXTURE10 = 10;
        ESurfaceMaterialTextures._map[11] = "TEXTURE11";
        ESurfaceMaterialTextures.TEXTURE11 = 11;
        ESurfaceMaterialTextures._map[12] = "TEXTURE12";
        ESurfaceMaterialTextures.TEXTURE12 = 12;
        ESurfaceMaterialTextures._map[13] = "TEXTURE13";
        ESurfaceMaterialTextures.TEXTURE13 = 13;
        ESurfaceMaterialTextures._map[14] = "TEXTURE14";
        ESurfaceMaterialTextures.TEXTURE14 = 14;
        ESurfaceMaterialTextures._map[15] = "TEXTURE15";
        ESurfaceMaterialTextures.TEXTURE15 = 15;
        ESurfaceMaterialTextures.DIFFUSE = ESurfaceMaterialTextures.TEXTURE0;
        ESurfaceMaterialTextures.AMBIENT = ESurfaceMaterialTextures.TEXTURE1;
        ESurfaceMaterialTextures.SPECULAR = ESurfaceMaterialTextures.TEXTURE2;
        ESurfaceMaterialTextures.EMISSIVE = ESurfaceMaterialTextures.TEXTURE3;
        ESurfaceMaterialTextures.NORMAL = ESurfaceMaterialTextures.TEXTURE4;
        ESurfaceMaterialTextures.EMISSION = ESurfaceMaterialTextures.EMISSIVE;
    })(akra.ESurfaceMaterialTextures || (akra.ESurfaceMaterialTextures = {}));
    var ESurfaceMaterialTextures = akra.ESurfaceMaterialTextures;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EAFXShaderVariableType) {
        EAFXShaderVariableType._map = [];
        EAFXShaderVariableType.k_NotVar = 0;
        EAFXShaderVariableType.k_Texture = 2;
        EAFXShaderVariableType._map[3] = "k_Float";
        EAFXShaderVariableType.k_Float = 3;
        EAFXShaderVariableType._map[4] = "k_Int";
        EAFXShaderVariableType.k_Int = 4;
        EAFXShaderVariableType._map[5] = "k_Bool";
        EAFXShaderVariableType.k_Bool = 5;
        EAFXShaderVariableType._map[6] = "k_Float2";
        EAFXShaderVariableType.k_Float2 = 6;
        EAFXShaderVariableType._map[7] = "k_Int2";
        EAFXShaderVariableType.k_Int2 = 7;
        EAFXShaderVariableType._map[8] = "k_Bool2";
        EAFXShaderVariableType.k_Bool2 = 8;
        EAFXShaderVariableType._map[9] = "k_Float3";
        EAFXShaderVariableType.k_Float3 = 9;
        EAFXShaderVariableType._map[10] = "k_Int3";
        EAFXShaderVariableType.k_Int3 = 10;
        EAFXShaderVariableType._map[11] = "k_Bool3";
        EAFXShaderVariableType.k_Bool3 = 11;
        EAFXShaderVariableType._map[12] = "k_Float4";
        EAFXShaderVariableType.k_Float4 = 12;
        EAFXShaderVariableType._map[13] = "k_Int4";
        EAFXShaderVariableType.k_Int4 = 13;
        EAFXShaderVariableType._map[14] = "k_Bool4";
        EAFXShaderVariableType.k_Bool4 = 14;
        EAFXShaderVariableType._map[15] = "k_Float2x2";
        EAFXShaderVariableType.k_Float2x2 = 15;
        EAFXShaderVariableType._map[16] = "k_Float3x3";
        EAFXShaderVariableType.k_Float3x3 = 16;
        EAFXShaderVariableType._map[17] = "k_Float4x4";
        EAFXShaderVariableType.k_Float4x4 = 17;
        EAFXShaderVariableType._map[18] = "k_Sampler2D";
        EAFXShaderVariableType.k_Sampler2D = 18;
        EAFXShaderVariableType._map[19] = "k_SamplerCUBE";
        EAFXShaderVariableType.k_SamplerCUBE = 19;
        EAFXShaderVariableType._map[20] = "k_SamplerVertexTexture";
        EAFXShaderVariableType.k_SamplerVertexTexture = 20;
        EAFXShaderVariableType._map[21] = "k_CustomSystem";
        EAFXShaderVariableType.k_CustomSystem = 21;
        EAFXShaderVariableType._map[22] = "k_Complex";
        EAFXShaderVariableType.k_Complex = 22;
    })(akra.EAFXShaderVariableType || (akra.EAFXShaderVariableType = {}));
    var EAFXShaderVariableType = akra.EAFXShaderVariableType;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    (function (EDataFlowTypes) {
        EDataFlowTypes._map = [];
        EDataFlowTypes.MAPPABLE = 1;
        EDataFlowTypes.UNMAPPABLE = 0;
    })(akra.EDataFlowTypes || (akra.EDataFlowTypes = {}));
    var EDataFlowTypes = akra.EDataFlowTypes;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EResourceCodes) {
        EResourceCodes._map = [];
        EResourceCodes.INVALID_CODE = 0xFFFFFFFF;
    })(akra.EResourceCodes || (akra.EResourceCodes = {}));
    var EResourceCodes = akra.EResourceCodes;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            var ResourceCode = (function () {
                function ResourceCode(iFamily, iType) {
                    this.iValue = (EResourceCodes.INVALID_CODE);
                    switch(arguments.length) {
                        case 0:
                            this.iValue = EResourceCodes.INVALID_CODE;
                            break;
                        case 1:
                            if (arguments[0] instanceof ResourceCode) {
                                this.iValue = arguments[0].iValue;
                            } else {
                                this.iValue = arguments[0];
                            }
                            break;
                        case 2:
                            this.family = arguments[0];
                            this.type = arguments[1];
                            break;
                    }
                }
                Object.defineProperty(ResourceCode.prototype, "family", {
                    get: function () {
                        return this.iValue >> 16;
                    },
                    set: function (iNewFamily) {
                        this.iValue &= 0x0000FFFF;
                        this.iValue |= iNewFamily << 16;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourceCode.prototype, "type", {
                    get: function () {
                        return this.iValue & 0x0000FFFF;
                    },
                    set: function (iNewType) {
                        this.iValue &= 0xFFFF0000;
                        this.iValue |= iNewType & 0x0000FFFF;
                    },
                    enumerable: true,
                    configurable: true
                });
                ResourceCode.prototype.setInvalid = function () {
                    this.iValue = EResourceCodes.INVALID_CODE;
                };
                ResourceCode.prototype.less = function (pSrc) {
                    return this.iValue < pSrc.valueOf();
                };
                ResourceCode.prototype.eq = function (pSrc) {
                    this.iValue = pSrc.valueOf();
                    return this;
                };
                ResourceCode.prototype.valueOf = function () {
                    return this.iValue;
                };
                ResourceCode.prototype.toNumber = function () {
                    return this.iValue;
                };
                return ResourceCode;
            })();
            pool.ResourceCode = ResourceCode;            
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ReferenceCounter = (function () {
            function ReferenceCounter(pSrc) {
                this.nReferenceCount = 0;
            }
            ReferenceCounter.prototype.referenceCount = function () {
                return this.nReferenceCount;
            };
            ReferenceCounter.prototype.destructor = function () {
 {
                    logger.setSourceLocation("util/ReferenceCounter.ts", 26);
                    logger.assert(this.nReferenceCount === 0, 'object is used');
                }
                ;
            };
            ReferenceCounter.prototype.release = function () {
 {
                    logger.setSourceLocation("util/ReferenceCounter.ts", 30);
                    logger.assert(this.nReferenceCount > 0, 'object is used');
                }
                ;
                this.nReferenceCount--;
                return this.nReferenceCount;
            };
            ReferenceCounter.prototype.addRef = function () {
 {
                    logger.setSourceLocation("util/ReferenceCounter.ts", 36);
                    logger.assert(this.nReferenceCount != MIN_INT32, 'reference fail');
                }
                ;
                this.nReferenceCount++;
                return this.nReferenceCount;
            };
            ReferenceCounter.prototype.eq = function (pSrc) {
                return this;
            };
            return ReferenceCounter;
        })();
        util.ReferenceCounter = ReferenceCounter;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (events) {
        var EventTable = (function () {
            function EventTable() {
                this.broadcast = {};
                this.unicast = {};
                this.inline = findBroadcastList(iGuid, number);
                this.IEventSlotListMap = {
                    return: (this.broadcast[iGuid] = this.broadcast[iGuid] || {})
                };
            }
            EventTable.prototype.addDestination = function (iGuid, sSignal, pTarget, sSlot, eType) {
                if (typeof eType === "undefined") { eType = EEventTypes.BROADCAST; }
                if (eType === EEventTypes.BROADCAST) {
                    if (this.findDestinationIndexBC(iGuid, sSignal, pTarget, sSlot) === -1) {
                        this.findBroadcastSignalMap(iGuid, sSignal).push({
                            target: pTarget,
                            callback: sSlot,
                            listener: null
                        });
                    }
                    return true;
                } else {
                    this.unicast[iGuid] = this.unicast[iGuid] || {};
                    if (!isDef(this.unicast[iGuid][sSignal])) {
                        this.unicast[iGuid][sSignal] = {
                            target: pTarget,
                            callback: sSlot,
                            listener: null
                        };
                        return true;
                    }
                }
                return false;
            };
            EventTable.prototype.findDestinationIndexBC = function (iGuid, sSignal, pTarget, sSlot) {
                var pList = this.findBroadcastSignalMap(iGuid, sSignal);
                for(var i = 0; i < pList.length; ++i) {
                    if (pList[i].target === pTarget && pList[i].callback === sSlot) {
                        return i;
                    }
                }
                return -1;
            };
            EventTable.prototype.removeDestination = function (iGuid, sSignal, pTarget, sSlot, eType) {
                if (typeof eType === "undefined") { eType = EEventTypes.BROADCAST; }
                if (eType === EEventTypes.BROADCAST) {
                    var pList = this.findBroadcastSignalMap(iGuid, sSignal);
                    var i = this.findDestinationIndexBC(iGuid, sSignal, pTarget, sSlot);
                    if (i != -1) {
                        pList.splice(i, 1);
                        return true;
                    }
                } else {
                    if (this.unicast[iGuid] && this.unicast[iGuid][sSignal]) {
                        delete this.unicast[iGuid][sSignal];
                        return true;
                    }
                }
 {
                    logger.setSourceLocation("events/events.ts", 134);
                    logger.warning("cannot remove destination for GUID <%s> with signal <%s>", iGuid, sSignal);
                }
                ;
                return false;
            };
            EventTable.prototype.addListener = function (iGuid, sSignal, fnListener, eType) {
                if (typeof eType === "undefined") { eType = EEventTypes.BROADCAST; }
                if (eType === EEventTypes.BROADCAST) {
                    this.findBroadcastSignalMap(iGuid, sSignal).push({
                        target: null,
                        callback: null,
                        listener: fnListener
                    });
                    return true;
                } else {
                    this.unicast[iGuid] = this.unicast[iGuid] || {};
                    if (!isDef(this.unicast[iGuid][sSignal])) {
                        this.unicast[iGuid][sSignal] = {
                            target: null,
                            callback: null,
                            listener: fnListener
                        };
                        return true;
                    }
                }
 {
                    logger.setSourceLocation("events/events.ts", 151);
                    logger.warning("cannot add listener for GUID <%s> with signal <%s>", iGuid, sSignal);
                }
                ;
                return false;
            };
            EventTable.prototype.removeListener = function (iGuid, sSignal, fnListener, eType) {
                if (typeof eType === "undefined") { eType = EEventTypes.BROADCAST; }
                if (eType === EEventTypes.BROADCAST) {
                    var pList = this.findBroadcastSignalMap(iGuid, sSignal);
                    for(var i = 0; i < pList.length; ++i) {
                        if (pList[i].listener === fnListener) {
                            pList.splice(i, 1);
                            return true;
                        }
                    }
                } else {
                    if (this.unicast[iGuid] && this.unicast[iGuid][sSignal]) {
                        delete this.unicast[iGuid][sSignal];
                        return true;
                    }
                }
                return false;
            };
            EventTable.prototype.findUnicastList = function (iGuid) {
                this.unicast[iGuid] = this.unicast[iGuid] || {};
                return this.unicast[iGuid];
            };
            EventTable.prototype._sync = function (pTarget, pFrom) {
                this.broadcast[pTarget.getGuid()] = this.broadcast[pFrom.getGuid()];
                this.unicast[pTarget.getGuid()] = this.unicast[pFrom.getGuid()];
            };
            EventTable.prototype.findBroadcastSignalMap = function (iGuid, sSignal) {
                this.broadcast[iGuid] = this.broadcast[iGuid] || {};
                this.broadcast[iGuid][sSignal] = this.broadcast[iGuid][sSignal] || [];
                return this.broadcast[iGuid][sSignal];
            };
            return EventTable;
        })();
        events.EventTable = EventTable;        
        var EventProvider = (function () {
            function EventProvider() {
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.inline = getEventTable();
                this.IEventTable = {
                    return: EventProvider._pEventTable
                };
                this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = _syncTable(pFrom, IEventProvider);
            }
            EventProvider._pEventTable = new events.EventTable();
            return EventProvider;
        })();
        events.EventProvider = EventProvider;        
        void {
            this: ,
            getEventTable: ._sync(this, pFrom)
        };
    })(akra.events || (akra.events = {}));
    var events = akra.events;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            var ResourcePool = (function (_super) {
                __extends(ResourcePool, _super);
                function ResourcePool(pManager, tTemplate) {
                    _super.call(this);
                    this.pManager = null;
                    this.tTemplate = null;
                    this.sExt = null;
                    this.pRegistrationCode = new ResourceCode(EResourceCodes.INVALID_CODE);
                    this.pNameMap = new Array();
                    this.pDataPool = null;
                    this.inline = get;
                    this.inline = get;
                    this._iGuid = sid();
                    this.inline = getGuid();
                    this.number = {
                        return: this._iGuid
                    };
                    this._pUnicastSlotMap = null;
                    this._pBroadcastSlotList = null;
                    this.inline = getEventTable();
                    this.IEventTable = {
                        return: ResourcePool._pEventTable
                    };
                    this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                    this.bool = {
                        return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                    };
                    this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                    this.bool = {
                        return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                    };
                    this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                    this.bool = {
                        return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                    };
                    this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                    this.bool = {
                        return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                    };
                    this.inline = _syncTable(pFrom, IEventProvider);
                    this.pManager = pManager;
                    this.tTemplate = tTemplate;
                    this.pDataPool = new DataPool(this.pManager, tTemplate);
                }
                ResourcePool.prototype.iFourcc = function () {
                    return (this.sExt.charCodeAt(3) << 24) | (this.sExt.charCodeAt(2) << 16) | (this.sExt.charCodeAt(1) << 8) | (this.sExt.charCodeAt(0));
                };
                Object.defineProperty(ResourcePool.prototype, "iFourcc", {
                    set: function (iNewFourcc) {
                        this.sExt = String.fromCharCode((iNewFourcc & 0x000000FF), (iNewFourcc & 0x0000FF00) >>> 8, (iNewFourcc & 0x00FF0000) >>> 16, (iNewFourcc & 0xFF000000) >>> 24);
                    },
                    enumerable: true,
                    configurable: true
                });
                ResourcePool.prototype.manager = function () {
                    return this.pManager;
                };
                ResourcePool.prototype.registerResourcePool = function (pCode) {
                    this.pRegistrationCode.eq(pCode);
                    this.pManager.registerResourcePool(this.pRegistrationCode, this);
                };
                ResourcePool.prototype.unregisterResourcePool = function () {
                    this.pManager.unregisterResourcePool(this.pRegistrationCode);
                    this.pRegistrationCode.setInvalid();
                };
                ResourcePool.prototype.findResourceHandle = function (sName) {
                    var iNewHandle = INVALID_INDEX;
                    for(var iHandle = 0; iHandle < this.pNameMap.length; ++iHandle) {
                        if (this.pNameMap[iHandle] === sName) {
                            return iHandle;
                        }
                    }
                    return iNewHandle;
                };
                ResourcePool.prototype.findResourceName = function (iHandle) {
                    return this.pNameMap[iHandle];
                };
                ResourcePool.prototype.setResourceName = function (iHandle, sName) {
                    this.pNameMap[iHandle] = sName;
                };
                ResourcePool.prototype.initialize = function (iGrowSize) {
                    this.pDataPool.initialize(iGrowSize);
                };
                ResourcePool.prototype.destroy = function () {
                    this.pDataPool.destroy();
                };
                ResourcePool.prototype.clean = function () {
                    this.pDataPool.forEach(ResourcePool.callbackClean);
                };
                ResourcePool.prototype.destroyAll = function () {
                    this.pDataPool.forEach(ResourcePool.callbackDestroy);
                };
                ResourcePool.prototype.restoreAll = function () {
                    this.pDataPool.forEach(ResourcePool.callbackRestore);
                };
                ResourcePool.prototype.disableAll = function () {
                    this.pDataPool.forEach(ResourcePool.callbackDisable);
                };
                ResourcePool.prototype.isInitialized = function () {
                    return this.pDataPool.isInitialized();
                };
                ResourcePool.prototype.createResource = function (sResourceName) {
                    var iHandle = this.internalCreateResource(sResourceName);
                    if (iHandle !== INVALID_INDEX) {
                        var pResource = this.getResource(iHandle);
                        pResource.setResourcePool(this);
                        pResource.setResourceHandle(iHandle);
                        pResource.setResourceCode(this.pRegistrationCode);
                        this.createdResource(pResource);
                        return pResource;
                    }
                    return null;
                };
                ResourcePool.prototype.loadResource = function (sResourceName) {
                    var pResource = this.findResource(sResourceName);
                    if (pResource == null) {
                        pResource = this.createResource(sResourceName);
                        if (pResource != null) {
                            if (pResource.loadResource(sResourceName)) {
                                return pResource;
                            }
                            pResource.release();
                            pResource = null;
                        }
                    }
                    return pResource;
                };
                ResourcePool.prototype.saveResource = function (pResource) {
                    if (pResource != null) {
                        return pResource.saveResource();
                    }
                    return false;
                };
                ResourcePool.prototype.destroyResource = function (pResource) {
                    if (pResource != null) {
                        var iReferenceCount = pResource.referenceCount();
 {
                            logger.setSourceLocation("ResourcePool.ts", 180);
                            logger.assert(iReferenceCount == 0, "destruction of non-zero reference count!");
                        }
                        ;
                        if (iReferenceCount <= 0) {
                            var iHandle = pResource.resourceHandle;
                            this.internalDestroyResource(iHandle);
                        }
                    }
                };
                ResourcePool.prototype.findResource = function (sName) {
                    for(var iHandle = 0; iHandle < this.pNameMap.length; ++iHandle) {
                        if (this.pNameMap[iHandle] == sName) {
                            if (iHandle != INVALID_INDEX) {
                                var pResource = this.getResource(iHandle);
                                return pResource;
                            }
                        }
                    }
                    return null;
                };
                ResourcePool.prototype.getResource = function (iHandle) {
                    var pResource = this.internalGetResource(iHandle);
                    if (pResource != null) {
                        pResource.addRef();
                    }
                    return pResource;
                };
                ResourcePool.prototype.getResources = function () {
                    var pResources = [];
                    for(var iHandleResource in this.pNameMap) {
                        pResources.push(this.getResource(parseInt(iHandleResource)));
                    }
                    return pResources;
                };
                ResourcePool.prototype.internalGetResource = function (iHandle) {
                    return this.pDataPool.getPtr(iHandle);
                };
                ResourcePool.prototype.internalDestroyResource = function (iHandle) {
                    var pResource = this.pDataPool.getPtr(iHandle);
                    pResource.destroyResource();
                    delete this.pNameMap[iHandle];
                    this.pDataPool.release(iHandle);
                };
                ResourcePool.prototype.internalCreateResource = function (sResourceName) {
                    var iHandle = this.pDataPool.nextHandle();
                    for(var iter in this.pNameMap) {
 {
                            logger.setSourceLocation("ResourcePool.ts", 247);
                            logger.assert((this.pNameMap[iter] != sResourceName), "A resource with this name already exists: " + sResourceName);
                        }
                        ;
                    }
                    this.pNameMap[iHandle] = sResourceName;
                    var pResource = this.pDataPool.getPtr(iHandle);
                    pResource.createResource();
                    return iHandle;
                };
                ResourcePool.callbackDestroy = function callbackDestroy(pPool, iHandle, pResource) {
                    pResource.destroyResource();
                };
                ResourcePool.callbackDisable = function callbackDisable(pPool, iHandle, pResource) {
                    pResource.disableResource();
                };
                ResourcePool.callbackRestore = function callbackRestore(pPool, iHandle, pResource) {
                    pResource.restoreResource();
                };
                ResourcePool.callbackClean = function callbackClean(pPool, iHandle, pResource) {
                    if (pResource.referenceCount() == 0) {
                        pPool.release(iHandle);
                    }
                };
                ResourcePool._pEventTable = new events.EventTable();
                return ResourcePool;
            })(util.ReferenceCounter);
            pool.ResourcePool = ResourcePool;            
            void {
                this: ,
                getEventTable: ._sync(this, pFrom)
            };
            createdResource(pResource);
            void {
                this: ,
                _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
            };
            var _broadcast = (this._pBroadcastSlotList).createdResource;
            var _recivier = this;
            if (isDef(_broadcast)) {
                for(var i = 0; i < _broadcast.length; ++i) {
                    _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pResource) : _broadcast[i].listener(_recivier, pResource);
                }
            }
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
;
;
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            var PoolGroup = (function () {
                function PoolGroup(pManager, tTemplate, iMaxCount) {
                    this.iTotalOpen = 0;
                    this.iFirstOpen = 0;
                    this.iMaxCount = 0;
                    this.pNextOpenList = null;
                    this.pMemberList = null;
                    this.inline = get;
                    this.pManager = pManager;
                    this.tTemplate = tTemplate;
                    this.iMaxCount = iMaxCount;
                }
                PoolGroup.prototype.manager = function () {
                    return this.pManager;
                };
                Object.defineProperty(PoolGroup.prototype, "totalOpen", {
                    get: function () {
                        return this.iTotalOpen;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PoolGroup.prototype, "totalUsed", {
                    get: function () {
                        return this.iMaxCount - this.iTotalOpen;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PoolGroup.prototype, "firstOpen", {
                    get: function () {
                        return this.iFirstOpen;
                    },
                    enumerable: true,
                    configurable: true
                });
                PoolGroup.prototype.create = function () {
                    var i;
 {
                        logger.setSourceLocation("DataPool.ts", 70);
                        logger.assert(this.pMemberList == null && this.pNextOpenList == null, "Group has already been created");
                    }
                    ;
                    this.pNextOpenList = new Array(this.iMaxCount);
 {
                        logger.setSourceLocation("DataPool.ts", 74);
                        logger.assert(this.pNextOpenList != null, "tragic memory allocation failure!");
                    }
                    ;
                    this.pMemberList = new Array(this.iMaxCount);
                    for(i = 0; i < this.iMaxCount; i++) {
                        this.pMemberList[i] = new this.tTemplate(this.pManager);
                    }
 {
                        logger.setSourceLocation("DataPool.ts", 83);
                        logger.assert(this.pNextOpenList != null, "tragic memory allocation failure!");
                    }
                    ;
                    for(i = 0; i < this.iMaxCount - 1; i++) {
                        this.pNextOpenList[i] = i + 1;
                    }
                    this.pNextOpenList[i] = i;
                    this.iTotalOpen = this.iMaxCount;
                    this.iFirstOpen = 0;
                };
                PoolGroup.prototype.destroy = function () {
 {
                        logger.setSourceLocation("DataPool.ts", 99);
                        logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    }
                    ;
 {
                        logger.setSourceLocation("DataPool.ts", 100);
                        logger.assert(this.iTotalOpen == this.iMaxCount, "Group is not empty");
                    }
                    ;
                    delete this.pMemberList;
                    this.pMemberList = null;
                    delete this.pNextOpenList;
                    this.pNextOpenList = null;
                    this.iTotalOpen = 0;
                    this.iMaxCount = 0;
                };
                PoolGroup.prototype.nextMember = function () {
 {
                        logger.setSourceLocation("DataPool.ts", 114);
                        logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    }
                    ;
 {
                        logger.setSourceLocation("DataPool.ts", 115);
                        logger.assert(this.iTotalOpen != null, "no open slots");
                    }
                    ;
                    var iSlot = this.iFirstOpen;
                    this.iFirstOpen = this.pNextOpenList[iSlot];
                    this.iTotalOpen--;
 {
                        logger.setSourceLocation("DataPool.ts", 123);
                        logger.assert(this.iFirstOpen != INVALID_INDEX, "Invalid Open Index");
                    }
                    ;
 {
                        logger.setSourceLocation("DataPool.ts", 124);
                        logger.assert(this.isOpen(iSlot), "invalid index");
                    }
                    ;
                    this.pNextOpenList[iSlot] = INVALID_INDEX;
                    return iSlot;
                };
                PoolGroup.prototype.addMember = function (pMember) {
                    var iSlot = this.nextMember();
                    this.pMemberList[iSlot] = pMember;
                    return iSlot;
                };
                PoolGroup.prototype.release = function (iIndex) {
 {
                        logger.setSourceLocation("DataPool.ts", 142);
                        logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    }
                    ;
 {
                        logger.setSourceLocation("DataPool.ts", 143);
                        logger.assert(iIndex < this.iMaxCount, "invalid index");
                    }
                    ;
 {
                        logger.setSourceLocation("DataPool.ts", 144);
                        logger.assert(this.isOpen(iIndex) == false, "invalid index to release");
                    }
                    ;
                    this.pNextOpenList[iIndex] = this.iTotalOpen > 0 ? this.iFirstOpen : iIndex;
                    this.iTotalOpen++;
                    this.iFirstOpen = iIndex;
                };
                PoolGroup.prototype.isOpen = function (iIndex) {
 {
                        logger.setSourceLocation("DataPool.ts", 154);
                        logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    }
                    ;
 {
                        logger.setSourceLocation("DataPool.ts", 155);
                        logger.assert(iIndex < this.iMaxCount, "invalid index");
                    }
                    ;
                    return this.pNextOpenList[iIndex] != INVALID_INDEX;
                };
                PoolGroup.prototype.member = function (iIndex) {
 {
                        logger.setSourceLocation("DataPool.ts", 162);
                        logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    }
                    ;
 {
                        logger.setSourceLocation("DataPool.ts", 163);
                        logger.assert(iIndex < this.iMaxCount, "invalid index");
                    }
                    ;
                    return this.pMemberList[iIndex];
                };
                PoolGroup.prototype.memberPtr = function (iIndex) {
 {
                        logger.setSourceLocation("DataPool.ts", 168);
                        logger.assert(this.pMemberList != null && this.pNextOpenList != null, "Group has not been created");
                    }
                    ;
 {
                        logger.setSourceLocation("DataPool.ts", 169);
                        logger.assert(iIndex < this.iMaxCount, "invalid index");
                    }
                    ;
                    return this.pMemberList[iIndex];
                };
                return PoolGroup;
            })();
            pool.PoolGroup = PoolGroup;            
            var DataPool = (function () {
                function DataPool(pManager, tTemplate) {
                    this.bInitialized = false;
                    this.pGroupList = [];
                    this.iTotalMembers = 0;
                    this.iTotalOpen = 0;
                    this.iGroupCount = 0;
                    this.iIndexMask = 0;
                    this.iIndexShift = 0;
                    this.inline = get;
                    this.pManager = pManager;
                    this.tTemplate = tTemplate;
                }
                DataPool.prototype.manager = function () {
                    return this.pManager;
                };
                DataPool.prototype.initialize = function (iGrowSize) {
 {
                        logger.setSourceLocation("DataPool.ts", 209);
                        logger.assert(this.isInitialized() == false, "the cDataPool is already initialized");
                    }
                    ;
                    this.bInitialized = true;
                    this.iGroupCount = math.nearestPowerOfTwo(iGrowSize);
                    this.iIndexShift = math.lowestBitSet(this.iGroupCount);
                    this.iIndexShift = math.clamp(this.iIndexShift, 1, 15);
                    this.iGroupCount = 1 << this.iIndexShift;
                    this.iIndexMask = this.iGroupCount - 1;
                };
                DataPool.prototype.isInitialized = function () {
                    return this.bInitialized;
                };
                DataPool.prototype.destroy = function () {
                    this.clear();
                    this.bInitialized = false;
                };
                DataPool.prototype.release = function (iHandle) {
 {
                        logger.setSourceLocation("DataPool.ts", 233);
                        logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    }
                    ;
                    if (this.isHandleValid(iHandle) == true) {
 {
                            logger.setSourceLocation("DataPool.ts", 236);
                            logger.assert(this.pGroupList.length != 0, "The cDataPool has not been properly created");
                        }
                        ;
                        var iGroupIndex = this.getGroupNumber(iHandle);
                        var iItemIndex = this.getItemIndex(iHandle);
                        var pGroup = this.getGroup(iGroupIndex);
                        pGroup.release(iItemIndex);
                        var pGroupBack = this.pGroupList[this.pGroupList.length - 1];
                        if (pGroupBack.totalOpen == this.iGroupCount) {
                            pGroupBack.destroy();
                            this.pGroupList.splice(this.pGroupList.length - 1, 1);
                        }
                        this.iTotalOpen++;
                    }
                };
                DataPool.prototype.clear = function () {
                    for(var iGroupIter = 0; iGroupIter < this.pGroupList.length; ++iGroupIter) {
                        this.pGroupList[iGroupIter].destroy();
                    }
                    this.pGroupList.clear();
                };
                DataPool.prototype.add = function (pMembers) {
 {
                        logger.setSourceLocation("DataPool.ts", 265);
                        logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    }
                    ;
                    var iGroupNumber = {
                        value: 0
                    };
                    var pOpenGroup = this.findOpenGroup(iGroupNumber);
                    var iIndex = pOpenGroup.addMember(pMembers);
                    this.iTotalOpen--;
                    return this.buildHandle(iGroupNumber.value, iIndex);
                };
                DataPool.prototype.forEach = function (fFunction) {
 {
                        logger.setSourceLocation("DataPool.ts", 278);
                        logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    }
                    ;
                    var iGroupNumber = 0;
                    for(var iGroupIter = 0; iGroupIter < this.pGroupList.length; iGroupIter++) {
                        var nCallbackCount = this.pGroupList[iGroupIter].totalUsed;
                        var iItemIndex = 0;
                        while(nCallbackCount != 0 && iItemIndex < this.iGroupCount) {
                            if (this.pGroupList[iGroupIter].isOpen(iItemIndex) == false) {
                                fFunction(this, this.buildHandle(iGroupNumber, iItemIndex), this.pGroupList[iGroupIter].member(iItemIndex));
                                nCallbackCount--;
                            }
                            ++iItemIndex;
                        }
                        ++iGroupNumber;
                    }
                };
                DataPool.prototype.nextHandle = function () {
 {
                        logger.setSourceLocation("DataPool.ts", 305);
                        logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    }
                    ;
                    var iGroupNumber = {
                        value: 0
                    };
                    var pOpenGroup = this.findOpenGroup(iGroupNumber);
                    var iIndex = pOpenGroup.nextMember();
                    this.iTotalOpen--;
                    return this.buildHandle(iGroupNumber.value, iIndex);
                };
                DataPool.prototype.isHandleValid = function (iHandle) {
 {
                        logger.setSourceLocation("DataPool.ts", 317);
                        logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    }
                    ;
                    if (iHandle !== INVALID_INDEX) {
 {
                            logger.setSourceLocation("DataPool.ts", 320);
                            logger.assert(this.pGroupList.length != 0, "The cDataPool has not been properly created");
                        }
                        ;
                        var pGroup = this.getGroup(this.getGroupNumber(iHandle));
                        return !pGroup.isOpen(this.getItemIndex(iHandle));
                    }
                    return false;
                };
                DataPool.prototype.get = function (iHandle) {
 {
                        logger.setSourceLocation("DataPool.ts", 331);
                        logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    }
                    ;
 {
                        logger.setSourceLocation("DataPool.ts", 332);
                        logger.assert(this.pGroupList.length != 0, "The cDataPool has not been properly created");
                    }
                    ;
                    var pGroup = this.getGroup(this.getGroupNumber(iHandle));
                    var iItemIndex = this.getItemIndex(iHandle);
                    return pGroup.member(iItemIndex);
                };
                DataPool.prototype.getPtr = function (iHandle) {
 {
                        logger.setSourceLocation("DataPool.ts", 341);
                        logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    }
                    ;
 {
                        logger.setSourceLocation("DataPool.ts", 342);
                        logger.assert(this.pGroupList.length != 0, "The cDataPool has not been properly created");
                    }
                    ;
                    var pGroup = this.getGroup(this.getGroupNumber(iHandle));
                    var iItemIndex = this.getItemIndex(iHandle);
                    return pGroup.memberPtr(iItemIndex);
                };
                DataPool.prototype.getGenericPtr = function (iHandle) {
 {
                        logger.setSourceLocation("DataPool.ts", 351);
                        logger.assert(this.isInitialized() == true, "the cDataPool is not initialized");
                    }
                    ;
                    return this.getPtr(iHandle);
                };
                DataPool.prototype.getGroupNumber = function (iHandle) {
                    return iHandle >> this.iIndexShift;
                };
                DataPool.prototype.getItemIndex = function (iHandle) {
                    return iHandle & this.iIndexMask;
                };
                DataPool.prototype.buildHandle = function (iGroup, iIndex) {
                    return (iGroup << this.iIndexShift) + iIndex;
                };
                DataPool.prototype.addGroup = function () {
                    var pNewGroup = new PoolGroup(this.pManager, this.tTemplate, this.iGroupCount);
                    this.pGroupList.push(pNewGroup);
                    pNewGroup.create();
                    this.iTotalMembers += this.iGroupCount;
                    this.iTotalOpen += this.iGroupCount;
                    return pNewGroup;
                };
                DataPool.prototype.findOpenGroup = function (pGroupNumber) {
                    pGroupNumber.value = 0;
                    for(var iGroupIter = 0; iGroupIter < this.pGroupList.length; iGroupIter++) {
                        if (this.pGroupList[iGroupIter].totalOpen > 0) {
                            return this.pGroupList[iGroupIter];
                        }
                        pGroupNumber.value++;
                    }
 {
                        logger.setSourceLocation("DataPool.ts", 411);
                        logger.assert((this.pGroupList.length + 1) < MAX_UINT16, "the cDataPool is full!!!!");
                    }
                    ;
                    return this.addGroup();
                };
                DataPool.prototype.getGroup = function (iIndex) {
 {
                        logger.setSourceLocation("DataPool.ts", 422);
                        logger.assert(iIndex < this.pGroupList.length, "Invalid group index requested");
                    }
                    ;
                    return this.pGroupList[iIndex];
                };
                return DataPool;
            })();
            pool.DataPool = DataPool;            
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            var ResourcePoolItem = (function (_super) {
                __extends(ResourcePoolItem, _super);
                function ResourcePoolItem() {
                    _super.call(this);
                    this.pResourcePool = null;
                    this.iResourceHandle = 0;
                    this.iResourceFlags = 0;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = getEngine();
                    this.IEngine = {
                        var: pManager,
                        IResourcePoolManager:  = this.getManager()
                    };
                    this.pResourceCode = new ResourceCode(0);
                    this.pCallbackFunctions = [];
                    this.pStateWatcher = [];
                    this.pCallbackSlots = genArray(null, EResourceItemEvents.TOTALRESOURCEFLAGS);
                }
                ResourcePoolItem.prototype.resourceCode = function () {
                    return this.pResourceCode;
                };
                ResourcePoolItem.prototype.resourcePool = function () {
                    return this.pResourcePool;
                };
                ResourcePoolItem.prototype.resourceHandle = function () {
                    return this.iResourceHandle;
                };
                ResourcePoolItem.prototype.resourceFlags = function () {
                    return this.iResourceFlags;
                };
                ResourcePoolItem.prototype.alteredFlag = function () {
                    return bf.testBit(this.iResourceFlags, EResourceItemEvents.ALTERED);
                };
                ResourcePoolItem.prototype.manager = function () {
                    return this.getManager();
                };
                ResourcePoolItem.prototype.if = function (pManager) {
                    return pManager.getEngine();
                };
                return ResourcePoolItem;
            })(util.ReferenceCounter);
            pool.ResourcePoolItem = ResourcePoolItem;            
            return null;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
inline;
getManager();
ResourcePoolManager;
 {
    return (this.pResourcePool).manager;
}
createResource();
bool;
 {
    return false;
}
destroyResource();
bool;
 {
    return false;
}
disableResource();
bool;
 {
    return false;
}
restoreResource();
bool;
 {
    return false;
}
loadResource(sFilename, string = null);
bool;
 {
    return false;
}
saveResource(sFilename, string = null);
bool;
 {
    return false;
}
setChangesNotifyRoutine(fn, IResourceNotifyRoutineFunc);
void {
    for: 
};
var i = 0;
i < this.pCallbackFunctions.length;
i++;
 {
    if (this.pCallbackFunctions[i] == fn) {
        return;
    }
}
this.pCallbackFunctions.push(fn);
delChangesNotifyRoutine(fn, IResourceNotifyRoutineFunc);
void {
    for: 
};
var i = 0;
i < this.pCallbackFunctions.length;
i++;
 {
    if (this.pCallbackFunctions[i] == fn) {
        this.pCallbackFunctions[i] = null;
    }
}
setStateWatcher(eEvent, EResourceItemEvents, fnWatcher, IResourceWatcherFunc);
void {
    this: ,
    pStateWatcher: [
        eEvent
    ] = fnWatcher
};
sync(pResourceItem, IResourcePoolItem, eSignal, EResourceItemEvents, eSlot ?  : EResourceItemEvents);
bool;
 {
    eSlot = isDef(eSlot) ? eSlot : eSignal;
    eSlot = ResourcePoolItem.parseEvent(eSlot);
    eSignal = ResourcePoolItem.parseEvent(eSignal);
    var pSlots = this.pCallbackSlots, pSignSlots;
    var me = this;
    var n;
    var fn;
    var bState;
    if (isNull(pSlots[eSlot])) {
        pSlots[eSlot] = [];
    }
    pSignSlots = pSlots[eSlot];
    n = pSignSlots.length;
    bState = bf.testBit(pResourceItem.resourceFlags, eSignal);
    fn = function (eFlag, iResourceFlags, isSet) {
        if (eFlag == eSignal) {
            pSignSlots[n].bState = isSet;
            me.notifyStateChange(eSlot, this);
            for(var i = 0; i < pSignSlots.length; ++i) {
                if (pSignSlots[i].bState === false) {
                    if (bf.testBit(me.resourceFlags, eFlag)) {
                        me.setResourceFlag(eFlag, false);
                    }
                    return;
                }
            }
            me.setResourceFlag(eFlag, true);
        }
    };
    pSignSlots.push({
        bState: bState,
        fn: fn,
        pResourceItem: pResourceItem
    });
    fn.call(pResourceItem, eSignal, pResourceItem.resourceFlags, bState);
    pResourceItem.setChangesNotifyRoutine(fn);
    return true;
}
unsync(pResourceItem, IResourcePoolItem, eSignal, EResourceItemEvents, eSlot ?  : EResourceItemEvents);
bool;
 {
    eSlot = isDef(eSlot) ? eSlot : eSignal;
    eSlot = ResourcePoolItem.parseEvent(eSlot);
    eSignal = ResourcePoolItem.parseEvent(eSignal);
    var pSlots = this.pCallbackSlots, pSignSlots;
    var me = this;
    var isRem = false;
    pSignSlots = pSlots[eSlot];
    for(var i = 0, n = pSignSlots.length; i < n; ++i) {
        if (pSignSlots[i].pResourceItem === pResourceItem) {
            pSignSlots[i].pResourceItem.delChangesNotifyRoutine(pSignSlots[i].fn);
            pSignSlots.splice(i, 1);
            --n;
            --i;
            isRem = true;
        }
    }
    return isRem;
}
inline;
isResourceCreated();
bool;
 {
    return bf.testBit(this.iResourceFlags, EResourceItemEvents.CREATED);
}
inline;
isResourceLoaded();
bool;
 {
    return bf.testBit(this.iResourceFlags, EResourceItemEvents.LOADED);
}
inline;
isResourceDisabled();
bool;
 {
    return bf.testBit(this.iResourceFlags, EResourceItemEvents.DISABLED);
}
inline;
isResourceAltered();
bool;
 {
    return bf.testBit(this.iResourceFlags, EResourceItemEvents.ALTERED);
}
setAlteredFlag(isOn, bool = true);
bool;
 {
    if (this.setResourceFlag(EResourceItemEvents.ALTERED, isOn) || isOn) {
        isOn ? this.altered() : this.saved();
        return true;
    }
    return false;
}
inline;
setResourceName(sName, string);
 {
    if (this.pResourcePool != null) {
        this.pResourcePool.setResourceName(this.iResourceHandle, sName);
    }
}
findResourceName();
string;
 {
    if (this.pResourcePool != null) {
        return this.pResourcePool.findResourceName(this.iResourceHandle);
    }
    return null;
}
release();
number;
 {
    var iRefCount = _super.prototype.release.call(this);
    if (iRefCount == 0) {
        if (this.pResourcePool != null) {
            this.pResourcePool.destroyResource(this);
        }
    }
    return iRefCount;
}
inline;
notifyCreated();
void {
    if: (this.setResourceFlag(EResourceItemEvents.CREATED, true))
};
 {
    this.created();
}
inline;
notifyDestroyed();
void {
    if: (this.setResourceFlag(EResourceItemEvents.CREATED, false))
};
 {
    this.destroyed();
}
inline;
notifyLoaded();
void {
    this: ,
    setAlteredFlag: (false)
};
if (this.setResourceFlag(EResourceItemEvents.LOADED, true)) {
    this.loaded();
}
inline;
notifyUnloaded();
void {
    if: (this.setResourceFlag(EResourceItemEvents.LOADED, false))
};
 {
    this.unloaded();
}
inline;
notifyRestored();
void {
    if: (this.setResourceFlag(EResourceItemEvents.DISABLED, false))
};
 {
    this.restored();
}
inline;
notifyDisabled();
void {
    if: (this.setResourceFlag(EResourceItemEvents.DISABLED, true))
};
 {
    this.disabled();
}
inline;
notifyAltered();
void {
    this: ,
    setAlteredFlag: (true)
};
inline;
notifySaved();
void {
    this: ,
    setAlteredFlag: (false)
};
setResourceCode(pCode, IResourceCode);
void {
    this: ,
    pResourceCode: ,
    eq: (pCode)
};
setResourcePool(pPool, IResourcePool);
void {
    this: ,
    pResourcePool:  = pPool
};
setResourceHandle(iHandle, number);
void {
    this: ,
    iResourceHandle:  = iHandle
};
notifyStateChange(eEvent, EResourceItemEvents, pTarget, IResourcePoolItem = null);
void {
    if: (!this.pStateWatcher[eEvent])
};
 {
    return;
}
var pSignSlots = this.pCallbackSlots[eEvent];
var nTotal = pSignSlots.length, nLoaded = 0;
for(var i = 0; i < nTotal; ++i) {
    if (pSignSlots[i].bState) {
        ++nLoaded;
    }
}
this.pStateWatcher[eEvent](nLoaded, nTotal, pTarget);
setResourceFlag(eFlagBit, EResourceItemEvents, isSetting, bool);
bool;
setResourceFlag(iFlagBit, number, isSetting, bool);
bool;
setResourceFlag(iFlagBit, isSetting, bool);
bool;
 {
    var iTempFlags = this.iResourceFlags;
    this.iResourceFlags = bf.setBit(this.iResourceFlags, iFlagBit, isSetting);
    if (iTempFlags != this.iResourceFlags) {
        for(var i = 0; i < this.pCallbackFunctions.length; i++) {
            if (this.pCallbackFunctions[i]) {
                this.pCallbackFunctions[i].call(this, iFlagBit, this.iResourceFlags, isSetting);
            }
        }
        return true;
    }
    return false;
}
parseEvent(sEvent, string);
EResourceItemEvents;
parseEvent(iEvent, number);
EResourceItemEvents;
parseEvent(pEvent);
 {
    if (isInt(pEvent)) {
        return pEvent;
    }
    switch(pEvent.toLowerCase()) {
        case 'loaded':
            return EResourceItemEvents.LOADED;
        case 'created':
            return EResourceItemEvents.CREATED;
        case 'disabled':
            return EResourceItemEvents.DISABLED;
        case 'altered':
            return EResourceItemEvents.ALTERED;
        default:
 {
                logger.setSourceLocation("../ResourcePoolItem.ts", 382);
                logger.error('Использовано неизвестное событие для ресурса.');
            }
            ;
            return 0;
    }
}
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return ResourcePoolItem._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
created();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).created;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
destroyed();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).destroyed;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
loaded();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).loaded;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
unloaded();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).unloaded;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
restored();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).restored;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
disabled();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).disabled;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
altered();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).altered;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
saved();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).saved;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var RenderMethod = (function (_super) {
                    __extends(RenderMethod, _super);
                    function RenderMethod() {
                        _super.apply(this, arguments);

                        this._pEffect = null;
                        this._pSurfaceMaterial = null;
                        this.inline = get;
                        this.inline = get;
                        this.inline = set;
                    }
                    RenderMethod.prototype.effect = function () {
                        return this._pEffect;
                    };
                    Object.defineProperty(RenderMethod.prototype, "effect", {
                        set: function (pEffect) {
                            if (!isNull(this._pEffect)) {
                                this.unsync(this._pEffect, EResourceItemEvents.LOADED);
                                this.disconnect(this._pEffect, "altered", "notifyAltered", EEventTypes.BROADCAST);
                                this._pEffect.release();
                            }
                            this._pEffect = pEffect;
                            if (!isNull(pEffect)) {
                                this.sync(this._pEffect, EResourceItemEvents.LOADED);
                                this.connect(this._pEffect, "altered", "notifyAltered", EEventTypes.BROADCAST);
                            }
                            this._pEffect.addRef();
                            this.notifyAltered();
                        },
                        enumerable: true,
                        configurable: true
                    });
                    RenderMethod.prototype.surfaceMaterial = function () {
                        return this._pSurfaceMaterial;
                    };
                    RenderMethod.prototype.surfaceMaterial = function (pMaterial) {
                        if (!isNull(this._pSurfaceMaterial)) {
                            this.unsync(this._pSurfaceMaterial, EResourceItemEvents.LOADED);
                            this.disconnect(this._pSurfaceMaterial, "altered", "notifyAltered", EEventTypes.BROADCAST);
                            this._pSurfaceMaterial.release();
                        }
                        this._pSurfaceMaterial = pMaterial;
                        if (!isNull(pMaterial)) {
                            this.sync(this._pSurfaceMaterial, EResourceItemEvents.LOADED);
                            this.connect(this._pSurfaceMaterial, "altered", "notifyAltered", EEventTypes.BROADCAST);
                        }
                        this._pSurfaceMaterial.addRef();
                        this.notifyAltered();
                    };
                    RenderMethod.prototype.isEqual = function (pRenderMethod) {
                        return false;
                    };
                    return RenderMethod;
                })(ResourcePoolItem);
                resources.RenderMethod = RenderMethod;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    akra.DeclarationUsages = {
        POSITION: "POSITION",
        POSITION1: "POSITION1",
        POSITION2: "POSITION2",
        POSITION3: "POSITION3",
        BLENDWEIGHT: "BLENDWEIGHT",
        BLENDINDICES: "BLENDINDICES",
        BLENDMETA: "BLENDMETA",
        NORMAL: "NORMAL",
        NORMAL1: "NORMAL1",
        NORMAL2: "NORMAL2",
        NORMAL3: "NORMAL3",
        PSIZE: "PSIZE",
        TEXCOORD: "TEXCOORD",
        TEXCOORD1: "TEXCOORD1",
        TEXCOORD2: "TEXCOORD2",
        TEXCOORD3: "TEXCOORD3",
        TEXCOORD4: "TEXCOORD4",
        TEXCOORD5: "TEXCOORD5",
        TANGENT: "TANGENT",
        BINORMAL: "BINORMAL",
        TESSFACTOR: "TESSFACTOR",
        COLOR: "COLOR",
        FOG: "FOG",
        DEPTH: "DEPTH",
        SAMPLE: "SAMPLE",
        INDEX: "INDEX",
        INDEX0: "INDEX0",
        INDEX1: "INDEX1",
        INDEX2: "INDEX2",
        INDEX3: "INDEX3",
        INDEX10: "INDEX10",
        INDEX11: "INDEX11",
        INDEX12: "INDEX12",
        INDEX13: "INDEX13",
        MATERIAL: "MATERIAL",
        MATERIAL1: "MATERIAL1",
        MATERIAL2: "MATERIAL2",
        DIFFUSE: "DIFFUSE",
        AMBIENT: "AMBIENT",
        SPECULAR: "SPECULAR",
        EMISSIVE: "EMISSIVE",
        SHININESS: "SHININESS",
        TEXTURE_HEADER: "TEXTURE_HEADER",
        UNKNOWN: "UNKNOWN",
        END: "\a\n\r"
    };
    akra.DeclUsages = akra.DeclarationUsages;
    inline;
    function VE_CUSTOM(sUsage, eType, iCount, iOffset) {
        if (typeof eType === "undefined") { eType = EDataTypes.FLOAT; }
        if (typeof iCount === "undefined") { iCount = 1; }
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return {
            count: iCount,
            type: eType,
            usage: sUsage,
            offset: iOffset
        };
    }
    inline;
    function VE_FLOAT(sUsage, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return VE_CUSTOM(sUsage, EDataTypes.FLOAT, 1, iOffset);
    }
    ;
    inline;
    function VE_FLOAT2(sUsage, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return VE_CUSTOM(sUsage, EDataTypes.FLOAT, 2, iOffset);
    }
    ;
    inline;
    function VE_FLOAT3(sUsage, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return VE_CUSTOM(sUsage, EDataTypes.FLOAT, 3, iOffset);
    }
    ;
    inline;
    function VE_FLOAT4(sUsage, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return VE_CUSTOM(sUsage, EDataTypes.FLOAT, 4, iOffset);
    }
    ;
    inline;
    function VE_FLOAT4x4(sUsage, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return VE_CUSTOM(sUsage, EDataTypes.FLOAT, 16, iOffset);
    }
    ;
    inline;
    function VE_VEC2(sUsage, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return VE_CUSTOM(sUsage, EDataTypes.FLOAT, 2, iOffset);
    }
    ;
    inline;
    function VE_VEC3(sUsage, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return VE_CUSTOM(sUsage, EDataTypes.FLOAT, 3, iOffset);
    }
    ;
    inline;
    function VE_VEC4(sUsage, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return VE_CUSTOM(sUsage, EDataTypes.FLOAT, 4, iOffset);
    }
    ;
    inline;
    function VE_MAT4(sUsage, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return VE_CUSTOM(sUsage, EDataTypes.FLOAT, 16, iOffset);
    }
    ;
    inline;
    function VE_INT(sUsage, iOffset) {
        if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
        return VE_CUSTOM(sUsage, EDataTypes.INT, 1, iOffset);
    }
    ;
    inline;
    function VE_END(iOffset) {
        if (typeof iOffset === "undefined") { iOffset = 0; }
        return VE_CUSTOM(akra.DeclUsages.END, EDataTypes.UNSIGNED_BYTE, 0, iOffset);
    }
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (data) {
        var VertexElement = (function () {
            function VertexElement(nCount, eType, eUsage, iOffset) {
                if (typeof nCount === "undefined") { nCount = 1; }
                if (typeof eType === "undefined") { eType = EDataTypes.FLOAT; }
                if (typeof eUsage === "undefined") { eUsage = DeclarationUsages.POSITION; }
                if (typeof iOffset === "undefined") { iOffset = MAX_INT32; }
                this.size = 0;
                this.index = 0;
                this.semantics = DeclarationUsages.UNKNOWN;
                this.inline = static;
                this.inline = isEnd();
                this.bool = {
                    return: this.semantics === DeclUsages.END
                };
                this.count = nCount;
                this.type = eType;
                this.usage = eUsage;
                this.offset = iOffset;
                this.update();
            }
            VertexElement.prototype.update = function () {
                this.size = this.count * getTypeSize(this.type);
                this.index = 0;
                this.semantics = null;
                var pMatches = this.usage.match(/^(.*?\w)(\d+)$/i);
                if (!isNull(pMatches)) {
                    this.semantics = pMatches[1];
                    this.index = parseInt(pMatches[2]);
                } else {
                    this.semantics = this.usage;
                }
            };
            VertexElement.prototype.clone = function () {
                return new VertexElement(this.count, this.type, this.usage, this.offset);
            };
            VertexElement.prototype.hasUnknownOffset = function (pElement) {
                return (!isDef(pElement.offset) || (pElement.offset === MAX_INT32));
            };
            VertexElement.prototype.toString = function () {
                function _an(data, n, bBackward) {
                    if (typeof bBackward === "undefined") { bBackward = false; }
                    var s = String(data);
                    for(var i = 0, t = n - s.length; i < t; ++i) {
                        if (bBackward) {
                            s = " " + s;
                        } else {
                            s += " ";
                        }
                    }
                    return s;
                }
                var s = "[ USAGE: " + _an(this.usage == DeclUsages.END ? "<END>" : this.usage, 12) + ", OFFSET " + _an(this.offset, 4) + ", SIZE " + _an(this.size, 4) + " ]";
                return s;
            };
            return VertexElement;
        })();
        data.VertexElement = VertexElement;        
    })(akra.data || (akra.data = {}));
    var data = akra.data;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.VertexElement = akra.VertexElement;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (data) {
        var VertexDeclaration = (function () {
            function VertexDeclaration(pElements) {
                this.stride = 0;
                this._pElements = [];
                this.inline = get;
                this.inline = element(i, number);
                this.IVertexElement = {
                    return: this._pElements[i] || null
                };
                this.inline = hasSemantics(sSemantics, string);
                this.bool = {
                    return: this.findElement(sSemantics) !== null
                };
                if (arguments.length > 0 && isDefAndNotNull(pElements)) {
                    this.append.apply(this, arguments);
                }
            }
            VertexDeclaration.prototype.length = function () {
                return this._pElements.length;
            };
            VertexDeclaration.prototype.append = function (pData) {
                var pElements;
                if (!isArray(arguments[0])) {
                    pElements = arguments;
                } else {
                    pElements = arguments[0];
                }
                for(var i = 0; i < pElements.length; i++) {
                    var pElement = pElements[i];
                    var iOffset;
                    if (VertexElement.hasUnknownOffset(pElement)) {
                        iOffset = this.stride;
                    } else {
                        iOffset = pElement.offset;
                    }
                    var pVertexElement = new VertexElement(pElement.count, pElement.type, pElement.usage, iOffset);
                    this._pElements.push(pVertexElement);
                    var iStride = iOffset + pVertexElement.size;
                    if (this.stride < iStride) {
                        this.stride = iStride;
                    }
                }
                return this._update();
            };
            VertexDeclaration.prototype._update = function () {
                var iStride;
                for(var i = 0; i < this.length; ++i) {
                    if (this._pElements[i].usage === DeclUsages.END) {
                        this._pElements.swap(i, i + 1);
                    }
                    iStride = this._pElements[i].size + this._pElements[i].offset;
                    if (this.stride < iStride) {
                        this.stride = iStride;
                    }
                }
                var pLast = this._pElements.last;
                if (pLast.usage === DeclUsages.END && pLast.offset < this.stride) {
                    pLast.offset = this.stride;
                }
                return true;
            };
            VertexDeclaration.prototype.extend = function (decl) {
                var pDecl = decl;
                var pElement;
                for(var i = 0; i < this.length; ++i) {
                    for(var j = 0; j < pDecl.length; ++j) {
                        if (pDecl.element(j).usage == this._pElements[i].usage) {
 {
                                logger.setSourceLocation("data/VertexDeclaration.ts", 110);
                                logger.log('inconsistent declarations:', this, pDecl);
                            }
                            ;
 {
                                logger.setSourceLocation("data/VertexDeclaration.ts", 111);
                                logger.error('The attempt to combine the declaration containing the exact same semantics.');
                            }
                            ;
                            return false;
                        }
                    }
                }
                for(var i = 0; i < pDecl.length; i++) {
                    pElement = pDecl.element(i).clone();
                    pElement.offset += this.stride;
                    this._pElements.push(pElement);
                }
                return this._update();
            };
            VertexDeclaration.prototype.findElement = function (sSemantics, iCount) {
                if (typeof iCount === "undefined") { iCount = MAX_INT32; }
                sSemantics = sSemantics.toUpperCase();
                for(var i = 0; i < this.length; ++i) {
                    if (this._pElements[i].usage === sSemantics && (iCount === MAX_INT32 || this._pElements[i].count == iCount)) {
                        return this._pElements[i];
                    }
                }
                return null;
            };
            VertexDeclaration.prototype.clone = function () {
                var pElements = [];
                var pDecl;
                for(var i = 0; i < this.length; ++i) {
                    pElements.push(this._pElements[i].clone());
                }
                pDecl = new VertexDeclaration(pElements);
                if (pDecl._update()) {
                    return pDecl;
                }
                return null;
            };
            VertexDeclaration.prototype.toString = function () {
                var s = "\n";
                s += "  VERTEX DECLARATION ( " + this.stride + " b. ) \n";
                s += "---------------------------------------\n";
                for(var i = 0; i < this.length; ++i) {
                    s += this._pElements[i].toString() + '\n';
                }
                return s;
            };
            return VertexDeclaration;
        })();
        data.VertexDeclaration = VertexDeclaration;        
    })(akra.data || (akra.data = {}));
    var data = akra.data;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.VertexDeclaration = data.VertexDeclaration;
    akra.createVertexDeclaration = function (pData) {
        if (!(pData instanceof akra.VertexDeclaration)) {
            if (!(pData instanceof Array) && isDefAndNotNull(pData)) {
                pData = [
                    pData
                ];
            }
            pData = new akra.VertexDeclaration(pData);
        }
        return pData;
    };
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Color = (function () {
            function Color(r, g, b, a) {
                this.set.apply(this, arguments);
            }
            Object.defineProperty(Color.prototype, "html", {
                get: function () {
                    var r = math.round(this.r * 255).toString(16);
                    var g = math.round(this.g * 255).toString(16);
                    var b = math.round(this.b * 255).toString(16);
                    r = r.length < 2 ? "0" + r : r;
                    g = g.length < 2 ? "0" + g : g;
                    b = b.length < 2 ? "0" + b : b;
                    return "#" + r + g + b;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "htmlRgba", {
                get: function () {
                    return "rgba(" + math.floor(255 * this.r) + ", " + math.floor(255 * this.g) + ", " + math.floor(255 * this.b) + ", " + this.a + ")";
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "rgba", {
                get: function () {
                    var val32 = 0;
                    val32 = (this.a * 255) << 24;
                    val32 += (this.b * 255) << 16;
                    val32 += (this.g * 255) << 8;
                    val32 += (this.r * 255);
                    val32 = val32 >>> 0;
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    this.a = ((val32 >> 24) & 0xFF) / 255.0;
                    this.b = ((val32 >> 16) & 0xFF) / 255.0;
                    this.g = ((val32 >> 8) & 0xFF) / 255.0;
                    this.r = (val32 & 0xFF) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "argb", {
                get: function () {
                    var val32 = 0;
                    val32 = (this.b * 255) << 24;
                    val32 += (this.g * 255) << 16;
                    val32 += (this.r * 255) << 8;
                    val32 += (this.a * 255);
                    val32 = val32 >>> 0;
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    this.b = ((val32 >> 24) & 0xFF) / 255.0;
                    this.g = ((val32 >> 16) & 0xFF) / 255.0;
                    this.r = ((val32 >> 8) & 0xFF) / 255.0;
                    this.a = (val32 & 0xFF) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "bgra", {
                get: function () {
                    var val32 = 0;
                    val32 = (this.a * 255) << 24;
                    val32 += (this.r * 255) << 16;
                    val32 += (this.g * 255) << 8;
                    val32 += (this.b * 255);
                    val32 = val32 >>> 0;
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    this.a = ((val32 >> 24) & 0xFF) / 255.0;
                    this.r = ((val32 >> 16) & 0xFF) / 255.0;
                    this.g = ((val32 >> 8) & 0xFF) / 255.0;
                    this.b = (val32 & 0xFF) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Color.prototype, "abgr", {
                get: function () {
                    var val32 = 0;
                    val32 = (this.r * 255) << 24;
                    val32 += (this.g * 255) << 16;
                    val32 += (this.b * 255) << 8;
                    val32 += (this.a * 255);
                    val32 = val32 >>> 0;
                    return val32;
                },
                set: function (c) {
                    var val32 = c;
                    this.r = ((val32 >> 24) & 0xFF) / 255.0;
                    this.g = ((val32 >> 16) & 0xFF) / 255.0;
                    this.b = ((val32 >> 8) & 0xFF) / 255.0;
                    this.a = (val32 & 0xFF) / 255.0;
                },
                enumerable: true,
                configurable: true
            });
            Color.prototype.set = function (r, g, b, a) {
                switch(arguments.length) {
                    case 0:
                        this.r = this.g = this.b = 0.;
                        this.a = 1.;
                        break;
                    case 1:
                        if (isInt(arguments[0])) {
                            this.r = this.g = this.b = r;
                            this.a = 1.;
                        } else if (isDef(arguments[0].buffer)) {
                            var c = arguments[0];
                            this.r = c[0];
                            this.g = c[1];
                            this.b = c[2];
                            this.a = c[3];
                        } else {
                            var v = arguments[0];
                            this.r = v.r;
                            this.g = v.g;
                            this.b = v.b;
                            this.a = v.a;
                        }
                        break;
                    case 2:
                        this.r = this.g = this.b = r;
                        this.a = g;
                        break;
                    case 3:
                    case 4:
                        this.r = r;
                        this.g = g;
                        this.b = b;
                        this.a = isDef(a) ? a : 1.;
                        break;
                }
                return this;
            };
            Color.prototype.saturate = function () {
                if (this.r < 0.) {
                    this.r = 0.;
                } else if (this.r > 1.) {
                    this.r = 1.;
                }
                if (this.g < 0.) {
                    this.g = 0.;
                } else if (this.g > 1.) {
                    this.g = 1.;
                }
                if (this.b < 0.) {
                    this.b = 0.;
                } else if (this.b > 1.) {
                    this.b = 1.;
                }
                if (this.a < 0.) {
                    this.a = 0.;
                } else if (this.a > 1.) {
                    this.a = 1.;
                }
                return this;
            };
            Color.prototype.saturateCopy = function () {
                var ret = new Color(this);
                ret.saturate();
                return ret;
            };
            Color.prototype.add = function (cColor, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new Color(); }
                ppDest.r = this.r + cColor.r;
                ppDest.g = this.g + cColor.g;
                ppDest.b = this.b + cColor.b;
                ppDest.a = this.a + cColor.a;
                return ppDest;
            };
            Color.prototype.subtract = function (cColor, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new Color(); }
                ppDest.r = this.r - cColor.r;
                ppDest.g = this.g - cColor.g;
                ppDest.b = this.b - cColor.b;
                ppDest.a = this.a - cColor.a;
                return ppDest;
            };
            Color.prototype.multiply = function (fScalar, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new Color(); }
                if (isNumber(fScalar)) {
                    var f = fScalar;
                    ppDest.r = this.r * f;
                    ppDest.g = this.g * f;
                    ppDest.b = this.b * f;
                    ppDest.a = this.a * f;
                } else {
                    var c = arguments[0];
                    ppDest.r = this.r * c.r;
                    ppDest.g = this.g * c.g;
                    ppDest.b = this.b * c.b;
                    ppDest.a = this.a * c.a;
                }
                return ppDest;
            };
            Color.prototype.divide = function (fScalar, ppDest) {
                if (typeof ppDest === "undefined") { ppDest = new Color(); }
                if (isNumber(fScalar)) {
                    var f = fScalar;
                    ppDest.r = this.r / f;
                    ppDest.g = this.g / f;
                    ppDest.b = this.b / f;
                    ppDest.a = this.a / f;
                } else {
                    var c = arguments[0];
                    ppDest.r = this.r / c.r;
                    ppDest.g = this.g / c.g;
                    ppDest.b = this.b / c.b;
                    ppDest.a = this.a / c.a;
                }
                return ppDest;
            };
            Color.prototype.setHSB = function (fHue, fSaturation, fBrightness) {
                if (fHue > 1.0) {
                    fHue -= fHue;
                } else if (fHue < 0.0) {
                    fHue += fHue + 1;
                }
                fSaturation = math.min(fSaturation, 1.0);
                fSaturation = math.max(fSaturation, 0.0);
                fBrightness = math.min(fBrightness, 1.0);
                fBrightness = math.max(fBrightness, 0.0);
                if (fBrightness == 0.0) {
                    this.r = this.g = this.b = 0.0;
                    return;
                }
                if (fSaturation == 0.0) {
                    this.r = this.g = this.b = fBrightness;
                    return;
                }
                var fHueDomain = fHue * 6.0;
                if (fHueDomain >= 6.0) {
                    fHueDomain = 0.0;
                }
                var domain = fHueDomain;
                var f1 = fBrightness * (1 - fSaturation);
                var f2 = fBrightness * (1 - fSaturation * (fHueDomain - domain));
                var f3 = fBrightness * (1 - fSaturation * (1 - (fHueDomain - domain)));
                switch(domain) {
                    case 0:
                        this.r = fBrightness;
                        this.g = f3;
                        this.b = f1;
                        break;
                    case 1:
                        this.r = f2;
                        this.g = fBrightness;
                        this.b = f1;
                        break;
                    case 2:
                        this.r = f1;
                        this.g = fBrightness;
                        this.b = f3;
                        break;
                    case 3:
                        this.r = f1;
                        this.g = f2;
                        this.b = fBrightness;
                        break;
                    case 4:
                        this.r = f3;
                        this.g = f1;
                        this.b = fBrightness;
                        break;
                    case 5:
                        this.r = fBrightness;
                        this.g = f1;
                        this.b = f2;
                        break;
                }
                return this;
            };
            Color.prototype.getHSB = function (pHsb) {
                if (typeof pHsb === "undefined") { pHsb = [
                    0., 
                    0., 
                    0.
                ]; }
                var vMin = math.min(this.r, math.min(this.g, this.b));
                var vMax = math.max(this.r, math.max(this.g, this.b));
                var delta = vMax - vMin;
                var brightness = vMax;
                var hue = 0.;
                var saturation;
                if (math.isRealEqual(delta, 0.0, 1e-6)) {
                    hue = 0.;
                    saturation = 0.;
                } else {
                    saturation = delta / vMax;
                    var deltaR = (((vMax - this.r) / 6.0) + (delta / 2.0)) / delta;
                    var deltaG = (((vMax - this.g) / 6.0) + (delta / 2.0)) / delta;
                    var deltaB = (((vMax - this.b) / 6.0) + (delta / 2.0)) / delta;
                    if (math.isRealEqual(this.r, vMax)) {
                        hue = deltaB - deltaG;
                    } else if (math.isRealEqual(this.g, vMax)) {
                        hue = 0.3333333 + deltaR - deltaB;
                    } else if (math.isRealEqual(this.b, vMax)) {
                        hue = 0.6666667 + deltaG - deltaR;
                    }
                    if (hue < 0.0) {
                        hue += 1.0;
                    }
                    if (hue > 1.0) {
                        hue -= 1.0;
                    }
                }
                pHsb[0] = hue;
                pHsb[1] = saturation;
                pHsb[2] = brightness;
                return pHsb;
            };
            Color.prototype.toString = function () {
                return "{R: " + this.r + ", G: " + this.g + ", B: " + this.b + ", A: " + this.a + "} " + "( 0x" + this.rgba.toString(16) + " )";
            };
            Color.toFloat32Array = function toFloat32Array(pValue) {
                var pArr = new Float32Array(4);
                pArr[0] = pValue.r;
                pArr[1] = pValue.g;
                pArr[2] = pValue.b;
                pArr[3] = pValue.a;
                return pArr;
            };
            Color.BLACK = new Color(0);
            Color.WHITE = new Color(0xFF, 0xFF, 0xFF);
            Color.ZERO = new Color(0., 0., 0., 0.);
            Color.isEqual = function isEqual(c1, c2) {
                return c1.r === c2.r && c1.g === c2.g && c1.b === c2.b && c1.a === c2.a;
            };
            Color.ALICE_BLUE = new Color(0xF0 / 255., 0xF8 / 255., 0xFF / 255.);
            Color.ANTIQUE_WHITE = new Color(0xFA / 255., 0xEB / 255., 0xD7 / 255.);
            Color.AQUA = new Color(0x00 / 255., 0xFF / 255., 0xFF / 255.);
            Color.AQUA_MARINE = new Color(0x7F / 255., 0xFF / 255., 0xD4 / 255.);
            Color.AZURE = new Color(0xF0 / 255., 0xFF / 255., 0xFF / 255.);
            Color.BEIGE = new Color(0xF5 / 255., 0xF5 / 255., 0xDC / 255.);
            Color.BISQUE = new Color(0xFF / 255., 0xE4 / 255., 0xC4 / 255.);
            Color.BLANCHED_ALMOND = new Color(0xFF / 255., 0xEB / 255., 0xCD / 255.);
            Color.BLUE = new Color(0x00 / 255., 0x00 / 255., 0xFF / 255.);
            Color.BLUE_VIOLET = new Color(0x8A / 255., 0x2B / 255., 0xE2 / 255.);
            Color.BROWN = new Color(0xA5 / 255., 0x2A / 255., 0x2A / 255.);
            Color.BURLY_WOOD = new Color(0xDE / 255., 0xB8 / 255., 0x87 / 255.);
            Color.CADET_BLUE = new Color(0x5F / 255., 0x9E / 255., 0xA0 / 255.);
            Color.CHARTREUSE = new Color(0x7F / 255., 0xFF / 255., 0x00 / 255.);
            Color.CHOCOLATE = new Color(0xD2 / 255., 0x69 / 255., 0x1E / 255.);
            Color.CORAL = new Color(0xFF / 255., 0x7F / 255., 0x50 / 255.);
            Color.CORNFLOWER_BLUE = new Color(0x64 / 255., 0x95 / 255., 0xED / 255.);
            Color.CORNSILK = new Color(0xFF / 255., 0xF8 / 255., 0xDC / 255.);
            Color.CRIMSON = new Color(0xDC / 255., 0x14 / 255., 0x3C / 255.);
            Color.CYAN = new Color(0x00 / 255., 0xFF / 255., 0xFF / 255.);
            Color.DARK_BLUE = new Color(0x00 / 255., 0x00 / 255., 0x8B / 255.);
            Color.DARK_CYAN = new Color(0x00 / 255., 0x8B / 255., 0x8B / 255.);
            Color.DARK_GOLDEN_ROD = new Color(0xB8 / 255., 0x86 / 255., 0x0B / 255.);
            Color.DARK_GRAY = new Color(0xA9 / 255., 0xA9 / 255., 0xA9 / 255.);
            Color.DARK_GREEN = new Color(0x00 / 255., 0x64 / 255., 0x00 / 255.);
            Color.DARK_KHAKI = new Color(0xBD / 255., 0xB7 / 255., 0x6B / 255.);
            Color.DARK_MAGENTA = new Color(0x8B / 255., 0x00 / 255., 0x8B / 255.);
            Color.DARK_OLIVE_GREEN = new Color(0x55 / 255., 0x6B / 255., 0x2F / 255.);
            Color.DARK_ORANGE = new Color(0xFF / 255., 0x8C / 255., 0x00 / 255.);
            Color.DARK_ORCHID = new Color(0x99 / 255., 0x32 / 255., 0xCC / 255.);
            Color.DARK_RED = new Color(0x8B / 255., 0x00 / 255., 0x00 / 255.);
            Color.DARK_SALMON = new Color(0xE9 / 255., 0x96 / 255., 0x7A / 255.);
            Color.DARK_SEA_GREEN = new Color(0x8F / 255., 0xBC / 255., 0x8F / 255.);
            Color.DARK_SLATE_BLUE = new Color(0x48 / 255., 0x3D / 255., 0x8B / 255.);
            Color.DARK_SLATE_GRAY = new Color(0x2F / 255., 0x4F / 255., 0x4F / 255.);
            Color.DARK_TURQUOISE = new Color(0x00 / 255., 0xCE / 255., 0xD1 / 255.);
            Color.DARK_VIOLET = new Color(0x94 / 255., 0x00 / 255., 0xD3 / 255.);
            Color.DEEP_PINK = new Color(0xFF / 255., 0x14 / 255., 0x93 / 255.);
            Color.DEEP_SKY_BLUE = new Color(0x00 / 255., 0xBF / 255., 0xFF / 255.);
            Color.DIM_GRAY = new Color(0x69 / 255., 0x69 / 255., 0x69 / 255.);
            Color.DIM_GREY = new Color(0x69 / 255., 0x69 / 255., 0x69 / 255.);
            Color.DODGER_BLUE = new Color(0x1E / 255., 0x90 / 255., 0xFF / 255.);
            Color.FIRE_BRICK = new Color(0xB2 / 255., 0x22 / 255., 0x22 / 255.);
            Color.FLORAL_WHITE = new Color(0xFF / 255., 0xFA / 255., 0xF0 / 255.);
            Color.FOREST_GREEN = new Color(0x22 / 255., 0x8B / 255., 0x22 / 255.);
            Color.FUCHSIA = new Color(0xFF / 255., 0x00 / 255., 0xFF / 255.);
            Color.GAINSBORO = new Color(0xDC / 255., 0xDC / 255., 0xDC / 255.);
            Color.GHOST_WHITE = new Color(0xF8 / 255., 0xF8 / 255., 0xFF / 255.);
            Color.GOLD = new Color(0xFF / 255., 0xD7 / 255., 0x00 / 255.);
            Color.GOLDEN_ROD = new Color(0xDA / 255., 0xA5 / 255., 0x20 / 255.);
            Color.GRAY = new Color(0x80 / 255., 0x80 / 255., 0x80 / 255.);
            Color.GREEN = new Color(0x00 / 255., 0x80 / 255., 0x00 / 255.);
            Color.GREEN_YELLOW = new Color(0xAD / 255., 0xFF / 255., 0x2F / 255.);
            Color.HONEY_DEW = new Color(0xF0 / 255., 0xFF / 255., 0xF0 / 255.);
            Color.HOT_PINK = new Color(0xFF / 255., 0x69 / 255., 0xB4 / 255.);
            Color.INDIAN_RED = new Color(0xCD / 255., 0x5C / 255., 0x5C / 255.);
            Color.INDIGO = new Color(0x4B / 255., 0x00 / 255., 0x82 / 255.);
            Color.IVORY = new Color(0xFF / 255., 0xFF / 255., 0xF0 / 255.);
            Color.KHAKI = new Color(0xF0 / 255., 0xE6 / 255., 0x8C / 255.);
            Color.LAVENDER = new Color(0xE6 / 255., 0xE6 / 255., 0xFA / 255.);
            Color.LAVENDER_BLUSH = new Color(0xFF / 255., 0xF0 / 255., 0xF5 / 255.);
            Color.LAWN_GREEN = new Color(0x7C / 255., 0xFC / 255., 0x00 / 255.);
            Color.LEMON_CHIFFON = new Color(0xFF / 255., 0xFA / 255., 0xCD / 255.);
            Color.LIGHT_BLUE = new Color(0xAD / 255., 0xD8 / 255., 0xE6 / 255.);
            Color.LIGHT_CORAL = new Color(0xF0 / 255., 0x80 / 255., 0x80 / 255.);
            Color.LIGHT_CYAN = new Color(0xE0 / 255., 0xFF / 255., 0xFF / 255.);
            Color.LIGHT_GOLDEN_ROD_YELLOW = new Color(0xFA / 255., 0xFA / 255., 0xD2 / 255.);
            Color.LIGHT_GRAY = new Color(0xD3 / 255., 0xD3 / 255., 0xD3 / 255.);
            Color.LIGHT_GREEN = new Color(0x90 / 255., 0xEE / 255., 0x90 / 255.);
            Color.LIGHT_PINK = new Color(0xFF / 255., 0xB6 / 255., 0xC1 / 255.);
            Color.LIGHT_SALMON = new Color(0xFF / 255., 0xA0 / 255., 0x7A / 255.);
            Color.LIGHT_SEA_GREEN = new Color(0x20 / 255., 0xB2 / 255., 0xAA / 255.);
            Color.LIGHT_SKY_BLUE = new Color(0x87 / 255., 0xCE / 255., 0xFA / 255.);
            Color.LIGHT_SLATE_GRAY = new Color(0x77 / 255., 0x88 / 255., 0x99 / 255.);
            Color.LIGHT_STEEL_BLUE = new Color(0xB0 / 255., 0xC4 / 255., 0xDE / 255.);
            Color.LIGHT_YELLOW = new Color(0xFF / 255., 0xFF / 255., 0xE0 / 255.);
            Color.LIME = new Color(0x00 / 255., 0xFF / 255., 0x00 / 255.);
            Color.LIME_GREEN = new Color(0x32 / 255., 0xCD / 255., 0x32 / 255.);
            Color.LINEN = new Color(0xFA / 255., 0xF0 / 255., 0xE6 / 255.);
            Color.MAGENTA = new Color(0xFF / 255., 0x00 / 255., 0xFF / 255.);
            Color.MAROON = new Color(0x80 / 255., 0x00 / 255., 0x00 / 255.);
            Color.MEDIUM_AQUA_MARINE = new Color(0x66 / 255., 0xCD / 255., 0xAA / 255.);
            Color.MEDIUM_BLUE = new Color(0x00 / 255., 0x00 / 255., 0xCD / 255.);
            Color.MEDIUM_ORCHID = new Color(0xBA / 255., 0x55 / 255., 0xD3 / 255.);
            Color.MEDIUM_PURPLE = new Color(0x93 / 255., 0x70 / 255., 0xDB / 255.);
            Color.MEDIUM_SEA_GREEN = new Color(0x3C / 255., 0xB3 / 255., 0x71 / 255.);
            Color.MEDIUM_SLATE_BLUE = new Color(0x7B / 255., 0x68 / 255., 0xEE / 255.);
            Color.MEDIUM_SPRING_GREEN = new Color(0x00 / 255., 0xFA / 255., 0x9A / 255.);
            Color.MEDIUM_TURQUOISE = new Color(0x48 / 255., 0xD1 / 255., 0xCC / 255.);
            Color.MEDIUM_VIOLET_RED = new Color(0xC7 / 255., 0x15 / 255., 0x85 / 255.);
            Color.MIDNIGHT_BLUE = new Color(0x19 / 255., 0x19 / 255., 0x70 / 255.);
            Color.MINT_CREAM = new Color(0xF5 / 255., 0xFF / 255., 0xFA / 255.);
            Color.MISTY_ROSE = new Color(0xFF / 255., 0xE4 / 255., 0xE1 / 255.);
            Color.MOCCASIN = new Color(0xFF / 255., 0xE4 / 255., 0xB5 / 255.);
            Color.NAVAJO_WHITE = new Color(0xFF / 255., 0xDE / 255., 0xAD / 255.);
            Color.NAVY = new Color(0x00 / 255., 0x00 / 255., 0x80 / 255.);
            Color.OLD_LACE = new Color(0xFD / 255., 0xF5 / 255., 0xE6 / 255.);
            Color.OLIVE = new Color(0x80 / 255., 0x80 / 255., 0x00 / 255.);
            Color.OLIVE_DRAB = new Color(0x6B / 255., 0x8E / 255., 0x23 / 255.);
            Color.ORANGE = new Color(0xFF / 255., 0xA5 / 255., 0x00 / 255.);
            Color.ORANGE_RED = new Color(0xFF / 255., 0x45 / 255., 0x00 / 255.);
            Color.ORCHID = new Color(0xDA / 255., 0x70 / 255., 0xD6 / 255.);
            Color.PALE_GOLDEN_ROD = new Color(0xEE / 255., 0xE8 / 255., 0xAA / 255.);
            Color.PALE_GREEN = new Color(0x98 / 255., 0xFB / 255., 0x98 / 255.);
            Color.PALE_TURQUOISE = new Color(0xAF / 255., 0xEE / 255., 0xEE / 255.);
            Color.PALE_VIOLET_RED = new Color(0xDB / 255., 0x70 / 255., 0x93 / 255.);
            Color.PAPAYA_WHIP = new Color(0xFF / 255., 0xEF / 255., 0xD5 / 255.);
            Color.PEACH_PUFF = new Color(0xFF / 255., 0xDA / 255., 0xB9 / 255.);
            Color.PERU = new Color(0xCD / 255., 0x85 / 255., 0x3F / 255.);
            Color.PINK = new Color(0xFF / 255., 0xC0 / 255., 0xCB / 255.);
            Color.PLUM = new Color(0xDD / 255., 0xA0 / 255., 0xDD / 255.);
            Color.POWDER_BLUE = new Color(0xB0 / 255., 0xE0 / 255., 0xE6 / 255.);
            Color.PURPLE = new Color(0x80 / 255., 0x00 / 255., 0x80 / 255.);
            Color.RED = new Color(0xFF / 255., 0x00 / 255., 0x00 / 255.);
            Color.ROSY_BROWN = new Color(0xBC / 255., 0x8F / 255., 0x8F / 255.);
            Color.ROYAL_BLUE = new Color(0x41 / 255., 0x69 / 255., 0xE1 / 255.);
            Color.SADDLE_BROWN = new Color(0x8B / 255., 0x45 / 255., 0x13 / 255.);
            Color.SALMON = new Color(0xFA / 255., 0x80 / 255., 0x72 / 255.);
            Color.SANDY_BROWN = new Color(0xF4 / 255., 0xA4 / 255., 0x60 / 255.);
            Color.SEA_GREEN = new Color(0x2E / 255., 0x8B / 255., 0x57 / 255.);
            Color.SEA_SHELL = new Color(0xFF / 255., 0xF5 / 255., 0xEE / 255.);
            Color.SIENNA = new Color(0xA0 / 255., 0x52 / 255., 0x2D / 255.);
            Color.SILVER = new Color(0xC0 / 255., 0xC0 / 255., 0xC0 / 255.);
            Color.SKY_BLUE = new Color(0x87 / 255., 0xCE / 255., 0xEB / 255.);
            Color.SLATE_BLUE = new Color(0x6A / 255., 0x5A / 255., 0xCD / 255.);
            Color.SLATE_GRAY = new Color(0x70 / 255., 0x80 / 255., 0x90 / 255.);
            Color.SNOW = new Color(0xFF / 255., 0xFA / 255., 0xFA / 255.);
            Color.SPRING_GREEN = new Color(0x00 / 255., 0xFF / 255., 0x7F / 255.);
            Color.STEEL_BLUE = new Color(0x46 / 255., 0x82 / 255., 0xB4 / 255.);
            Color.TAN = new Color(0xD2 / 255., 0xB4 / 255., 0x8C / 255.);
            Color.TEAL = new Color(0x00 / 255., 0x80 / 255., 0x80 / 255.);
            Color.THISTLE = new Color(0xD8 / 255., 0xBF / 255., 0xD8 / 255.);
            Color.TOMATO = new Color(0xFF / 255., 0x63 / 255., 0x47 / 255.);
            Color.TURQUOISE = new Color(0x40 / 255., 0xE0 / 255., 0xD0 / 255.);
            Color.VIOLET = new Color(0xEE / 255., 0x82 / 255., 0xEE / 255.);
            Color.WHEAT = new Color(0xF5 / 255., 0xDE / 255., 0xB3 / 255.);
            Color.WHITE_SMOKE = new Color(0xF5 / 255., 0xF5 / 255., 0xF5 / 255.);
            Color.YELLOW = new Color(0xFF / 255., 0xFF / 255., 0x00 / 255.);
            Color.YELLOW_GREEN = new Color(0x9A / 255., 0xCD / 255., 0x32 / 255.);
            return Color;
        })();
        util.Color = Color;        
        var pVariousColors = [
            "BLUE", 
            "BLUE_VIOLET", 
            "BROWN", 
            "CADET_BLUE", 
            "CHARTREUSE", 
            "CRIMSON", 
            "CYAN", 
            "DEEP_PINK", 
            "DEEP_SKY_BLUE", 
            "DODGER_BLUE", 
            "FIRE_BRICK", 
            "FUCHSIA", 
            "GOLD", 
            "GREEN", 
            "GREEN_YELLOW", 
            "HOT_PINK", 
            "LAWN_GREEN", 
            "LIME", 
            "LIME_GREEN", 
            "MAGENTA", 
            "MEDIUM_BLUE", 
            "MEDIUM_ORCHID", 
            "MEDIUM_SPRING_GREEN", 
            "MEDIUM_VIOLET_RED", 
            "ORANGE", 
            "ORANGE_RED", 
            "PURPLE", 
            "RED", 
            "SPRING_GREEN", 
            "STEEL_BLUE", 
            "TOMATO", 
            "TURQUOISE", 
            "VIOLET", 
            "WHEAT", 
            "YELLOW", 
            "YELLOW_GREEN"
        ];
        var iVariousColor = 0;
        function randomColor(bVarious) {
            if (typeof bVarious === "undefined") { bVarious = false; }
            if (!bVarious) {
                return new Color(Math.random(), Math.random(), Math.random(), 1.);
            }
            if (iVariousColor === pVariousColors.length) {
                iVariousColor = 0;
            }
            return (Color)[pVariousColors[iVariousColor++]] || Color.WHITE;
        }
        util.randomColor = randomColor;
        inline;
        function colorToVec4(pValue) {
            return vec4(pValue.r, pValue.g, pValue.b, pValue.a);
        }
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Color = util.Color;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (material) {
        var Material = (function () {
            function Material(sName, pMat) {
                if (typeof sName === "undefined") { sName = null; }
                this.name = null;
                this.diffuse = new Color(.5);
                this.ambient = new Color(.5);
                this.specular = new Color(.5);
                this.emissive = new Color(.5);
                this.shininess = 50.;
                this.name = sName;
                if (isDefAndNotNull(pMat)) {
                    this.set(pMat);
                }
            }
            Material.prototype.set = function (pMat) {
                this.diffuse.set(pMat.diffuse);
                this.ambient.set(pMat.ambient);
                this.specular.set(pMat.specular);
                this.emissive.set(pMat.emissive);
                this.shininess = pMat.shininess;
                return this;
            };
            Material.prototype.isEqual = function (pMat) {
                return Color.isEqual(this.diffuse, pMat.diffuse) && Color.isEqual(this.ambient, pMat.ambient) && Color.isEqual(this.specular, pMat.specular) && Color.isEqual(this.emissive, pMat.emissive) && this.shininess === pMat.shininess;
            };
            Material.prototype.toString = function () {
                var s = "\nMATERIAL - " + this.name + "\n";
                s += "------------------------------------\n";
                s += "diffuse:   " + this.diffuse.toString() + "\n";
                s += "ambient:   " + this.ambient.toString() + "\n";
                s += "specular:  " + this.ambient.toString() + "\n";
                s += "emissive:  " + this.emissive.toString() + "\n";
                s += "shininess: " + this.shininess + "\n";
                return s;
            };
            return Material;
        })();
        material.Material = Material;        
        var FlexMaterial = (function () {
            function FlexMaterial(sName, pData) {
                this.name = null;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = set;
                this.inline = set;
                this.inline = set;
                this.inline = set;
                this.inline = get;
                this._pData = pData;
                this.name = sName;
            }
            FlexMaterial.prototype.diffuse = function () {
                return new Color(this._pData.getTypedData(DeclUsages.DIFFUSE, 0, 1));
            };
            FlexMaterial.prototype.ambient = function () {
                return new Color(this._pData.getTypedData(DeclUsages.AMBIENT, 0, 1));
            };
            FlexMaterial.prototype.specular = function () {
                return new Color(this._pData.getTypedData(DeclUsages.SPECULAR, 0, 1));
            };
            FlexMaterial.prototype.emissive = function () {
                return new Color(this._pData.getTypedData(DeclUsages.EMISSIVE, 0, 1));
            };
            FlexMaterial.prototype.shininess = function () {
                return this._pData.getTypedData(DeclUsages.SHININESS, 0, 1)[0];
            };
            FlexMaterial.prototype.diffuse = function (pValue) {
                this._pData.setData(Color.toFloat32Array(pValue), DeclUsages.DIFFUSE);
            };
            FlexMaterial.prototype.ambient = function (pValue) {
                this._pData.setData(Color.toFloat32Array(pValue), DeclUsages.AMBIENT);
            };
            FlexMaterial.prototype.specular = function (pValue) {
                this._pData.setData(Color.toFloat32Array(pValue), DeclUsages.SPECULAR);
            };
            FlexMaterial.prototype.emissive = function (pValue) {
                this._pData.setData(Color.toFloat32Array(pValue), DeclUsages.EMISSIVE);
            };
            FlexMaterial.prototype.shininess = function (pValue) {
                this._pData.setData(new Float32Array([
                    pValue
                ]), DeclUsages.SHININESS);
            };
            FlexMaterial.prototype.data = function () {
                return this._pData;
            };
            FlexMaterial.prototype.set = function (pMat) {
                this.diffuse = pMat.diffuse;
                this.ambient = pMat.ambient;
                this.specular = pMat.specular;
                this.emissive = pMat.emissive;
                this.shininess = pMat.shininess;
                return this;
            };
            FlexMaterial.prototype.isEqual = function (pMat) {
                return Color.isEqual(this.diffuse, pMat.diffuse) && Color.isEqual(this.ambient, pMat.ambient) && Color.isEqual(this.specular, pMat.specular) && Color.isEqual(this.emissive, pMat.emissive) && this.shininess === pMat.shininess;
            };
            FlexMaterial.prototype.toString = function () {
                var s = "\nFLEX MATERIAL - " + this.name + "\n";
                s += "------------------------------------\n";
                s += "diffuse:   " + this.diffuse.toString() + "\n";
                s += "ambient:   " + this.ambient.toString() + "\n";
                s += "specular:  " + this.ambient.toString() + "\n";
                s += "emissive:  " + this.emissive.toString() + "\n";
                s += "shininess: " + this.shininess + "\n";
                return s;
            };
            return FlexMaterial;
        })();        
        material.VERTEX_DECL = createVertexDeclaration([
            VE_CUSTOM(DeclUsages.MATERIAL, EDataTypes.FLOAT, 17), 
            VE_CUSTOM(DeclUsages.DIFFUSE, EDataTypes.FLOAT, 4, 0), 
            VE_CUSTOM(DeclUsages.AMBIENT, EDataTypes.FLOAT, 4, 16), 
            VE_CUSTOM(DeclUsages.SPECULAR, EDataTypes.FLOAT, 4, 32), 
            VE_CUSTOM(DeclUsages.EMISSIVE, EDataTypes.FLOAT, 4, 48), 
            VE_CUSTOM(DeclUsages.SHININESS, EDataTypes.FLOAT, 1, 64)
        ]);
        material.DEFAULT = new Material();
        function create(sName, pMat) {
            if (typeof sName === "undefined") { sName = null; }
            if (typeof pMat === "undefined") { pMat = null; }
            return new Material(sName, pMat);
        }
        material.create = create;
        function _createFlex(sName, pData) {
            return new FlexMaterial(sName, pData);
        }
        material._createFlex = _createFlex;
    })(akra.material || (akra.material = {}));
    var material = akra.material;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Material = material.Material;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var SurfaceMaterial = (function (_super) {
                    __extends(SurfaceMaterial, _super);
                    function SurfaceMaterial() {
                        _super.call(this);
                        this._pMaterial = new Material();
                        this._nTotalTextures = 0;
                        this._iTextureFlags = 0;
                        this._iTextureMatrixFlags = 0;
                        this._pTextures = new Array(SurfaceMaterial.MAX_TEXTURES_PER_SURFACE);
                        this._pTexcoords = new Array(SurfaceMaterial.MAX_TEXTURES_PER_SURFACE);
                        this._pTextureMatrices = new Array(SurfaceMaterial.MAX_TEXTURES_PER_SURFACE);
                        this._sLastHash = "";
                        this._isNeedToUpdateHash = true;
                        this.inline = get;
                        this.inline = get;
                        this.inline = set;
                        this.inline = get;
                        this.inline = get;
                        this.inline = setMaterial(pMaterial, IMaterial);
                        for(var i = 0; i < SurfaceMaterial.MAX_TEXTURES_PER_SURFACE; ++i) {
                            this._pTexcoords[i] = i;
                        }
                    }
                    SurfaceMaterial.prototype.totalTextures = function () {
                        return this._nTotalTextures;
                    };
                    SurfaceMaterial.prototype.material = function () {
                        return this._pMaterial;
                    };
                    SurfaceMaterial.prototype.material = function (pMaterial) {
                        this._pMaterial.set(pMaterial);
                    };
                    SurfaceMaterial.prototype.textureFlags = function () {
                        return this._iTextureFlags;
                    };
                    SurfaceMaterial.prototype.textureMatrixFlags = function () {
                        return this._iTextureMatrixFlags;
                    };
                    SurfaceMaterial.prototype.createResource = function () {
                        this.notifyLoaded();
                        return _super.prototype.createResource.call(this);
                    };
                    SurfaceMaterial.prototype.setTexture = function (iIndex, texture, iTexcoord) {
                        if (typeof iTexcoord === "undefined") { iTexcoord = 0; }
 {
                            logger.setSourceLocation("resources/SurfaceMaterial.ts", 48);
                            logger.assert(iIndex < SurfaceMaterial.MAX_TEXTURES_PER_SURFACE, "invalid texture slot");
                        }
                        ;
                        var pRmgr = this.getManager();
                        var pTexture = null;
                        this._pTexcoords[iIndex] = iTexcoord;
                        if (iIndex !== iTexcoord) {
                            this._isNeedToUpdateHash = true;
                        }
                        if (isString(texture)) {
                            pTexture = this._pTextures[iIndex];
                            if (pTexture) {
                                if (pTexture.release() == 0) {
                                    this._pTextures[iIndex] = null;
                                } else {
 {
                                        logger.setSourceLocation("resources/SurfaceMaterial.ts", 70);
                                        logger.warning("cannot destroy resource...");
                                    }
                                }
                                ((this._iTextureFlags) &= ~(1 << (iIndex)));
                                --this._nTotalTextures;
                            }
                            this._pTextures[iIndex] = pRmgr.texturePool.loadResource(texture);
                            if (this._pTextures[iIndex]) {
                                ((this._iTextureFlags) |= (1 << (iIndex)));
                                ++this._nTotalTextures;
                                this.sync(this._pTextures[iIndex], EResourceItemEvents.LOADED);
                            }
                            return true;
                        } else if (texture instanceof Texture) {
                            if (!this._pTextures[iIndex] || pTexture != this._pTextures[iIndex]) {
                                pTexture = texture;
                                if (this._pTextures[iIndex]) {
                                    if (this._pTextures[iIndex].release() == 0) {
                                        this._pTextures[iIndex] = null;
                                    } else {
 {
                                            logger.setSourceLocation("resources/SurfaceMaterial.ts", 102);
                                            logger.warning("cannot destroy resource...");
                                        }
                                        ;
                                    }
                                    ((this._iTextureFlags) &= ~(1 << (iIndex)));
                                    --this._nTotalTextures;
                                }
                                this._pTextures[iIndex] = pTexture;
                                this._pTextures[iIndex].addRef();
                                ((this._iTextureFlags) |= (1 << (iIndex)));
                                ++this._nTotalTextures;
                                this.sync(this._pTextures[iIndex], EResourceItemEvents.LOADED);
                            }
                            return true;
                        } else if (isNumber(texture)) {
                            if (!this._pTextures[iIndex] || this._pTextures[iIndex].resourceHandle != texture) {
                                if (this._pTextures[iIndex]) {
                                    if (this._pTextures[iIndex].release() === 0) {
                                        this._pTextures[iIndex] = null;
                                    } else {
 {
                                            logger.setSourceLocation("resources/SurfaceMaterial.ts", 141);
                                            logger.warning("cannot destroy resource...");
                                        }
                                        ;
                                    }
                                    ((this._iTextureFlags) &= ~(1 << (iIndex)));
                                    --this._nTotalTextures;
                                }
                                this._pTextures[iIndex] = pRmgr.texturePool.getResource(texture);
                                if (this._pTextures[iIndex]) {
                                    ((this._iTextureFlags) |= (1 << (iIndex)));
                                    ++this._nTotalTextures;
                                    this.sync(this._pTextures[iIndex], EResourceItemEvents.LOADED);
                                }
                            }
                            return true;
                        }
                        this._pTexcoords[iIndex] = iIndex;
                        return false;
                    };
                    SurfaceMaterial.prototype.setTextureMatrix = function (iIndex, m4fValue) {
 {
                            logger.setSourceLocation("resources/SurfaceMaterial.ts", 167);
                            logger.assert(iIndex < SurfaceMaterial.MAX_TEXTURES_PER_SURFACE, "invalid texture slot");
                        }
                        ;
                        if (!m4fValue) {
                            this._pTextureMatrices[iIndex] = new Mat4();
                        } else {
                            this._pTextureMatrices[iIndex] = new Mat4(m4fValue);
                        }
                        ((this._iTextureMatrixFlags) |= (1 << (iIndex)));
                        return true;
                    };
                    return SurfaceMaterial;
                })(ResourcePoolItem);
                resources.SurfaceMaterial = SurfaceMaterial;                
                void {
                    this: ,
                    _pMaterial: ,
                    set: (pMaterial)
                };
                isEqual(pSurfaceMaterial, ISurfaceMaterial);
                bool;
 {
                    if (this._nTotalTextures === pSurfaceMaterial.totalTextures && this._iTextureFlags === pSurfaceMaterial.textureFlags && this._iTextureMatrixFlags === pSurfaceMaterial.textureMatrixFlags) {
                        if ((this._pMaterial && this._pMaterial.isEqual(pSurfaceMaterial.material)) || (pSurfaceMaterial.material === null)) {
                            for(var i = 0; i < this._pTextures.length; i++) {
                                if (this._pTextures[i] !== pSurfaceMaterial.texture[i]) {
                                    return false;
                                }
                            }
                            ;
                            for(var i = 0; i < this._pTextureMatrices.length; ++i) {
                                for(var j = 0; j < this._pTextureMatrices[i].data.length; j++) {
                                    if (this._pTextureMatrices[i].data[j] !== pSurfaceMaterial.textureMatrix[i].data[j]) {
                                        return false;
                                    }
                                }
                                ;
                            }
                            return true;
                        }
                    }
                    return false;
                }
                inline;
                texture(iSlot, number);
                ITexture;
 {
                    return this._pTextures[iSlot];
                }
                inline;
                texcoord(iSlot, number);
                number;
 {
                    return this._pTexcoords[iSlot];
                }
                inline;
                textureMatrix(iSlot, number);
                IMat4;
 {
 {
                        logger.setSourceLocation("resources/SurfaceMaterial.ts", 227);
                        logger.assert((iSlot >= 0 && iSlot < SurfaceMaterial.MAX_TEXTURES_PER_SURFACE), "invalid texture slot");
                    }
                    ;
                    return this._pTextureMatrices[iSlot];
                }
                MAX_TEXTURES_PER_SURFACE:
number = 16
                _getHash();
                string;
 {
                    if (this._isNeedToUpdateHash) {
                        this._sLastHash = this.calcHash();
                        this._isNeedToUpdateHash = false;
                    }
                    return this._sLastHash;
                }
                calcHash();
                string;
 {
                    var sHash = "";
                    for(var i = 0; i < this._pTexcoords.length; i++) {
                        if (this._pTexcoords[i] !== i) {
                            sHash += i.toString() + "<" + this._pTexcoords[i].toString() + ".";
                        }
                    }
                    return sHash;
                }
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var Effect = (function () {
                    function Effect() { }
                    return Effect;
                })();
                resources.Effect = Effect;                
                ResourcePoolItem;
 {
                    get;
                    totalComponents();
                    number;
 {
                        return this.getComposer().getComponentCountForEffect(this);
                    }
                    get;
                    totalPasses();
                    number;
 {
                        return this.getComposer().getTotalPassesForEffect(this);
                    }
                    constructor();
 {
                        _super.prototype();
                    }
                    isEqual(pEffect, IEffect);
                    bool;
 {
                        return false;
                    }
                    isReplicated();
                    bool;
 {
                        return false;
                    }
                    isMixid();
                    bool;
 {
                        return false;
                    }
                    isParameterUsed(pParam, any, iPass ?  : number);
                    bool;
 {
                        return false;
                    }
                    createResource();
                    bool;
 {
                        this.notifyLoaded();
                        return true;
                    }
                    replicable(bValue, bool);
                    void {
                        return: 
                    };
                    miscible(bValue, bool);
                    void {
                        return: 
                    };
                    addComponent(iComponentHandle, number, iShift ?  : number, iPass ?  : number, isSet ?  : bool);
                    bool;
                    addComponent(pComponent, IAFXComponent, iShift ?  : number, iPass ?  : number, isSet ?  : bool);
                    bool;
                    addComponent(sComponent, string, iShift ?  : number, iPass ?  : number, isSet ?  : bool);
                    bool;
                    addComponent(pComponent, any, iShift ?  : number = 0, iPass ?  : number = 0xffffff, isSet ?  : bool = true);
                    bool;
 {
                        var pComponentPool = this.manager.componentPool;
                        if (isInt(pComponent)) {
                            pComponent = pComponentPool.getResource(pComponent);
                        } else if (isString(pComponent)) {
                            pComponent = pComponentPool.findResource(pComponent);
                        }
                        if (!isDef(pComponent) || isNull(pComponent)) {
 {
                                logger.setSourceLocation("resources/Effect.ts", 49);
                                logger.error("Bad component for add/delete: ", pComponent);
                            }
                            ;
                            return false;
                        }
                        if (isSet) {
                            if (!this.getComposer().addComponentToEffect(this, pComponent, iShift, iPass)) {
 {
                                    logger.setSourceLocation("resources/Effect.ts", 55);
                                    logger.error("Can not add component '" + pComponent.findResourceName() + "'");
                                }
                                ;
                                return false;
                            }
                        } else {
                            if (!this.getComposer().removeComponentFromEffect(this, pComponent, iShift, iPass)) {
 {
                                    logger.setSourceLocation("resources/Effect.ts", 61);
                                    logger.error("Can not delete component '" + pComponent.findResourceName() + "'");
                                }
                                ;
                                return false;
                            }
                        }
                        this.notifyAltered();
                        if (this.totalComponents === 1 && isSet) {
                            this.notifyRestored();
                        } else if (this.totalComponents === 0 && !isSet) {
                            this.notifyDisabled();
                        }
                        return true;
                    }
                    delComponent(iComponentHandle, number, iShift ?  : number, iPass ?  : number);
                    bool;
                    delComponent(sComponent, string, iShift ?  : number, iPass ?  : number);
                    bool;
                    delComponent(pComponent, IAFXComponent, iShift ?  : number, iPass ?  : number);
                    bool;
                    delComponent(pComponent, any, iShift ?  : number = 0, iPass ?  : number = 0xffffff);
                    bool;
 {
                        return this.addComponent(pComponent, iShift, iPass, false);
                    }
                    activate(iShift ?  : number = 0);
                    bool;
 {
                        return this.getComposer().activateEffectResource(this, iShift);
                    }
                    deactivate();
                    bool;
 {
                        return this.getComposer().deactivateEffectResource(this);
                    }
                    findParameter(pParam, any, iPass ?  : number);
                    any;
 {
                        return null;
                    }
                    inline;
                    getComposer();
                    IAFXComposer;
 {
                        return this.manager.getEngine().getComposer();
                    }
                }
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EImageFlags) {
        EImageFlags._map = [];
        EImageFlags.COMPRESSED = 0x00000001;
        EImageFlags.CUBEMAP = 0x00000002;
        EImageFlags.TEXTURE_3D = 0x00000004;
    })(akra.EImageFlags || (akra.EImageFlags = {}));
    var EImageFlags = akra.EImageFlags;
    ;
    (function (EImageCubeFlags) {
        EImageCubeFlags._map = [];
        EImageCubeFlags.POSITIVE_X = 0x00000001;
        EImageCubeFlags.NEGATIVE_X = 0x00000002;
        EImageCubeFlags.POSITIVE_Y = 0x00000004;
        EImageCubeFlags.NEGATIVE_Y = 0x00000008;
        EImageCubeFlags.POSITIVE_Z = 0x000000010;
        EImageCubeFlags.NEGATIVE_Z = 0x000000020;
    })(akra.EImageCubeFlags || (akra.EImageCubeFlags = {}));
    var EImageCubeFlags = akra.EImageCubeFlags;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Pathinfo = (function () {
            function Pathinfo(pPath) {
                this._sDirname = null;
                this._sExtension = null;
                this._sFilename = null;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                if (isDef(pPath)) {
                    this.set(pPath);
                }
            }
            Pathinfo.prototype.path = function () {
                return this.toString();
            };
            Pathinfo.prototype.path = function (sPath) {
                this.set(sPath);
            };
            Pathinfo.prototype.dirname = function () {
                return this._sDirname;
            };
            Pathinfo.prototype.dirname = function (sDirname) {
                this._sDirname = sDirname;
            };
            Pathinfo.prototype.filename = function () {
                return this._sFilename;
            };
            Pathinfo.prototype.filename = function (sFilename) {
                this._sFilename = sFilename;
            };
            Pathinfo.prototype.ext = function () {
                return this._sExtension;
            };
            Pathinfo.prototype.ext = function (sExtension) {
                this._sExtension = sExtension;
            };
            Pathinfo.prototype.basename = function () {
                return (this._sFilename ? this._sFilename + (this._sExtension ? "." + this._sExtension : "") : "");
            };
            Pathinfo.prototype.basename = function (sBasename) {
                var nPos = sBasename.lastIndexOf(".");
                if (nPos < 0) {
                    this._sFilename = sBasename.substr(0);
                    this._sExtension = null;
                } else {
                    this._sFilename = sBasename.substr(0, nPos);
                    this._sExtension = sBasename.substr(nPos + 1);
                }
            };
            Pathinfo.prototype.set = function (sPath) {
                if (isString(sPath)) {
                    var pParts = sPath.replace('\\', '/').split('/');
                    this.basename = pParts.pop();
                    this._sDirname = pParts.join('/');
                } else if (sPath instanceof Pathinfo) {
                    this._sDirname = sPath.dirname;
                    this._sFilename = sPath.filename;
                    this._sExtension = sPath.ext;
                } else {
 {
                        logger.setSourceLocation("Pathinfo.ts", 68);
                        logger.error("Unexpected data type was used.");
                    }
                    ;
                }
            };
            Pathinfo.prototype.isAbsolute = function () {
                return this._sDirname[0] === "/";
            };
            Pathinfo.prototype.toString = function () {
                return (this._sDirname ? this._sDirname + "/" : "") + (this.basename);
            };
            return Pathinfo;
        })();
        util.Pathinfo = Pathinfo;        
        util.pathinfo;
        util.pathinfo = function (pPath) {
            return new Pathinfo(pPath);
        };
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Pathinfo = util.Pathinfo;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var URI = (function () {
            function URI(pUri) {
                this.sScheme = null;
                this.sUserinfo = null;
                this.sHost = null;
                this.nPort = 0;
                this.sPath = null;
                this.sQuery = null;
                this.sFragment = null;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                if (pUri) {
                    this.set(pUri);
                }
            }
            Object.defineProperty(URI.prototype, "urn", {
                get: function () {
                    return (this.sPath ? this.sPath : "") + (this.sQuery ? '?' + this.sQuery : "") + (this.sFragment ? '#' + this.sFragment : "");
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "url", {
                get: function () {
                    return (this.sScheme ? this.sScheme : "") + this.authority;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(URI.prototype, "authority", {
                get: function () {
                    return (this.sHost ? '//' + (this.sUserinfo ? this.sUserinfo + '@' : "") + this.sHost + (this.nPort ? ':' + this.nPort : "") : "");
                },
                enumerable: true,
                configurable: true
            });
            URI.prototype.scheme = function () {
                return this.sScheme;
            };
            Object.defineProperty(URI.prototype, "protocol", {
                get: function () {
                    if (!this.sScheme) {
                        return this.sScheme;
                    }
                    return (this.sScheme.substr(0, this.sScheme.lastIndexOf(':')));
                },
                enumerable: true,
                configurable: true
            });
            URI.prototype.userinfo = function () {
                return this.sUserinfo;
            };
            URI.prototype.host = function () {
                return this.sHost;
            };
            URI.prototype.host = function (sHost) {
                this.sHost = sHost;
            };
            URI.prototype.port = function () {
                return this.nPort;
            };
            URI.prototype.port = function (iPort) {
                this.nPort = iPort;
            };
            URI.prototype.path = function () {
                return this.sPath;
            };
            URI.prototype.path = function (sPath) {
                this.sPath = sPath;
            };
            URI.prototype.query = function () {
                return this.sQuery;
            };
            URI.prototype.query = function (sQuery) {
                this.sQuery = sQuery;
            };
            URI.prototype.fragment = function () {
                return this.sFragment;
            };
            URI.prototype.set = function (pData) {
                if (isString(pData)) {
                    var pUri = URI.uriExp.exec(pData);
 {
                        logger.setSourceLocation("URI.ts", 103);
                        logger.assert(pUri !== null, 'Invalid URI format used.\nused uri: ' + pData);
                    }
                    ;
                    if (!pUri) {
                        return null;
                    }
                    this.sScheme = pUri[1] || null;
                    this.sUserinfo = pUri[2] || null;
                    this.sHost = pUri[3] || null;
                    this.nPort = parseInt(pUri[4]) || null;
                    this.sPath = pUri[5] || pUri[6] || null;
                    this.sQuery = pUri[7] || null;
                    this.sFragment = pUri[8] || null;
                    return this;
                } else if (pData instanceof URI) {
                    return this.set(pData.toString());
                }
 {
                    logger.setSourceLocation("URI.ts", 124);
                    logger.error('Unexpected data type was used.');
                }
                ;
                return null;
            };
            URI.prototype.toString = function () {
                return this.url + this.urn;
            };
            URI.here = function here() {
                return new URI(document.location.href);
            };
            URI.uriExp = new RegExp("^([a-z0-9+.-]+:)?(?:\\/\\/(?:((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*)@)?((?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*)(?::(\\d*))?(\\/(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?|(\\/?(?:[a-z0-9-._~!$&'()*+,;=:@]|%[0-9A-F]{2})*(?:[a-z0-9-._~!$&'()*+,;=:@/]|%[0-9A-F]{2})*)?)(?:\\?((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?(?:#((?:[a-z0-9-._~!$&'()*+,;=:/?@]|%[0-9A-F]{2})*))?$", "i");
            return URI;
        })();
        util.URI = URI;        
        util.uri = function (sUri) {
            return new util.URI(sUri);
        };
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        util.stoab = function (s) {
            var len = s.length;
            var pCodeList = new Array(len);
            for(var i = 0; i < len; ++i) {
                pCodeList[i] = s.charCodeAt(i);
            }
            return (new Uint8Array(pCodeList)).buffer;
        };
        util.abtos = function (pBuf) {
            var pData = new Uint8Array(pBuf);
            var s = "";
            for(var n = 0; n < pData.length; ++n) {
                s += String.fromCharCode(pData[n]);
            }
            return s;
        };
        function abtota(pBuffer, eType) {
            switch(eType) {
                case EDataTypes.FLOAT:
                    return new Float32Array(pBuffer);
                case EDataTypes.SHORT:
                    return new Int16Array(pBuffer);
                case EDataTypes.UNSIGNED_SHORT:
                    return new Uint16Array(pBuffer);
                case EDataTypes.INT:
                    return new Int32Array(pBuffer);
                case EDataTypes.UNSIGNED_INT:
                    return new Uint32Array(pBuffer);
                case EDataTypes.BYTE:
                    return new Int8Array(pBuffer);
                default:
                case EDataTypes.UNSIGNED_BYTE:
                    return new Uint8Array(pBuffer);
            }
        }
        util.abtota = abtota;
        function parseJSON(sJSON) {
            return eval('(' + sJSON + ')');
        }
        util.parseJSON = parseJSON;
        function btoa(pBlob, fn) {
            var pReader = new FileReader();
            pReader.onload = function (e) {
                fn(null, e.target.result);
            };
            pReader.onerror = function (e) {
                fn(e, null);
            };
            pReader.readAsArrayBuffer(pBlob);
        }
        util.btoa = btoa;
        function parseHTML(sHTML, useDocFragment) {
            if (typeof useDocFragment === "undefined") { useDocFragment = true; }
            var pDivEl = document.createElement('div');
            var pDocFrag;
            pDivEl.innerHTML = sHTML;
            if (!useDocFragment) {
                return pDivEl.childNodes;
            }
            pDocFrag = document.createDocumentFragment();
            for(var i = 0, len = pDivEl.childNodes.length; i < len; ++i) {
                if (!isDef(pDivEl.childNodes[i])) {
                    continue;
                }
                pDocFrag.appendChild(pDivEl.childNodes[i]);
            }
            return pDocFrag;
        }
        util.parseHTML = parseHTML;
        ;
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var Singleton = (function () {
            function Singleton() {
                var _constructor = (this).constructor;
 {
                    logger.setSourceLocation("Singleton.ts", 10);
                    logger.assert(!isDef(_constructor._pInstance), 'Singleton class may be created only one time.');
                }
                ;
                _constructor._pInstance = this;
            }
            return Singleton;
        })();
        util.Singleton = Singleton;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var BrowserInfo = (function (_super) {
            __extends(BrowserInfo, _super);
            function BrowserInfo() {
                _super.call(this);
                this.sBrowser = null;
                this.sVersion = null;
                this.sOS = null;
                this.sVersionSearch = null;
                this.init();
            }
            Object.defineProperty(BrowserInfo.prototype, "name", {
                get: function () {
                    return this.sBrowser;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BrowserInfo.prototype, "version", {
                get: function () {
                    return this.sVersion;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(BrowserInfo.prototype, "os", {
                get: function () {
                    return this.sOS;
                },
                enumerable: true,
                configurable: true
            });
            BrowserInfo.prototype.init = function () {
                this.sBrowser = this.searchString(BrowserInfo.dataBrowser) || "An unknown browser";
                this.sVersion = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
                this.sOS = this.searchString(BrowserInfo.dataOS) || "an unknown OS";
            };
            BrowserInfo.prototype.searchString = function (pDataBrowser) {
                for(var i = 0; i < pDataBrowser.length; i++) {
                    var sData = pDataBrowser[i].string;
                    var dataProp = pDataBrowser[i].prop;
                    this.sVersionSearch = pDataBrowser[i].versionSearch || pDataBrowser[i].identity;
                    if (sData) {
                        if (sData.indexOf(pDataBrowser[i].subString) != -1) {
                            return pDataBrowser[i].identity;
                        }
                    } else if (dataProp) {
                        return pDataBrowser[i].identity;
                    }
                }
                return null;
            };
            BrowserInfo.prototype.searchVersion = function (sData) {
                var iStartIndex = sData.indexOf(this.sVersionSearch);
                if (iStartIndex == -1) {
                    return null;
                }
                iStartIndex = sData.indexOf('/', iStartIndex + 1);
                if (iStartIndex == -1) {
                    return null;
                }
                var iEndIndex = sData.indexOf(' ', iStartIndex + 1);
                if (iEndIndex == -1) {
                    iEndIndex = sData.indexOf(';', iStartIndex + 1);
                    if (iEndIndex == -1) {
                        return null;
                    }
                    return sData.slice(iStartIndex + 1);
                }
                return sData.slice((iStartIndex + 1), iEndIndex);
            };
            BrowserInfo.dataBrowser = [
                {
                    string: navigator.userAgent,
                    subString: "Chrome",
                    identity: "Chrome"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "OmniWeb",
                    versionSearch: "OmniWeb/",
                    identity: "OmniWeb"
                }, 
                {
                    string: navigator.vendor,
                    subString: "Apple",
                    identity: "Safari",
                    versionSearch: "Version"
                }, 
                {
                    prop: window.opera,
                    identity: "Opera",
                    versionSearch: "Version"
                }, 
                {
                    string: navigator.vendor,
                    subString: "iCab",
                    identity: "iCab"
                }, 
                {
                    string: navigator.vendor,
                    subString: "KDE",
                    identity: "Konqueror"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "Firefox",
                    identity: "Firefox"
                }, 
                {
                    string: navigator.vendor,
                    subString: "Camino",
                    identity: "Camino"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "Netscape",
                    identity: "Netscape"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "MSIE",
                    identity: "Explorer",
                    versionSearch: "MSIE"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "Gecko",
                    identity: "Mozilla",
                    versionSearch: "rv"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "Mozilla",
                    identity: "Netscape",
                    versionSearch: "Mozilla"
                }
            ];
            BrowserInfo.dataOS = [
                {
                    string: navigator.platform,
                    subString: "Win",
                    identity: "Windows"
                }, 
                {
                    string: navigator.platform,
                    subString: "Mac",
                    identity: "Mac"
                }, 
                {
                    string: navigator.userAgent,
                    subString: "iPhone",
                    identity: "iPhone/iPod"
                }, 
                {
                    string: navigator.platform,
                    subString: "Linux",
                    identity: "Linux"
                }
            ];
            return BrowserInfo;
        })(Singleton);
        util.BrowserInfo = BrowserInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ScreenInfo = (function () {
            function ScreenInfo() { }
            Object.defineProperty(ScreenInfo.prototype, "width", {
                get: function () {
                    return screen.width;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "height", {
                get: function () {
                    return screen.height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "aspect", {
                get: function () {
                    return screen.width / screen.height;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "pixelDepth", {
                get: function () {
                    return screen.pixelDepth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScreenInfo.prototype, "colorDepth", {
                get: function () {
                    return screen.colorDepth;
                },
                enumerable: true,
                configurable: true
            });
            return ScreenInfo;
        })();
        util.ScreenInfo = ScreenInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
var akra;
(function (akra) {
    (function (math) {
        var Vec2 = (function () {
            function Vec2(fValue1, fValue2) {
                this.x = 0.;
                this.y = 0.;
                this.inline = clear();
                this.IVec2 = {
                    this: ,
                    x:  = this.y = 0.
                };
                var nArgumentsLength = arguments.length;
                var v2fVec = this;
                switch(nArgumentsLength) {
                    case 1:
                        v2fVec.set(arguments[0]);
                        break;
                    case 2:
                        v2fVec.set(arguments[0], arguments[1]);
                        break;
                    default:
                        v2fVec.x = v2fVec.y = 0.;
                        break;
                }
            }
            Object.defineProperty(Vec2.prototype, "xx", {
                get: function () {
                    return vec2(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "xy", {
                get: function () {
                    return vec2(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "yx", {
                get: function () {
                    return vec2(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec2.prototype, "yy", {
                get: function () {
                    return vec2(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Vec2.prototype.set = function (fValue1, fValue2) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0:
                        this.x = this.y = 0.;
                        break;
                    case 1:
                        if (isFloat(arguments[0])) {
                            this.x = this.y = arguments[0];
                        } else if (arguments[0] instanceof Vec2) {
                            var v2fVec = arguments[0];
                            this.x = v2fVec.x;
                            this.y = v2fVec.y;
                        } else {
                            var pArray = arguments[0];
                            this.x = pArray[0];
                            this.y = pArray[1];
                        }
                        break;
                    case 2:
                        this.x = arguments[0];
                        this.y = arguments[1];
                        break;
                }
                ;
                return this;
            };
            return Vec2;
        })();
        math.Vec2 = Vec2;        
        return this;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
;
add(v2fVec, IVec2, v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = this;
    }
    v2fDestination.x = this.x + v2fVec.x;
    v2fDestination.y = this.y + v2fVec.y;
    return v2fDestination;
}
;
subtract(v2fVec, IVec2, v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = this;
    }
    v2fDestination.x = this.x - v2fVec.x;
    v2fDestination.y = this.y - v2fVec.y;
    return v2fDestination;
}
;
inline;
dot(v2fVec, IVec2);
number;
 {
    return this.x * v2fVec.x + this.y * v2fVec.y;
}
;
isEqual(v2fVec, IVec2, fEps, number = 0.);
bool;
 {
    if (fEps === 0.) {
        if (this.x != v2fVec.x || this.y != v2fVec.y) {
            return false;
        }
    } else {
        if (abs(this.x - v2fVec.x) > fEps || abs(this.y - v2fVec.y) > fEps) {
            return false;
        }
    }
    return true;
}
;
isClear(fEps, number = 0.);
bool;
 {
    if (fEps === 0.) {
        if (this.x != 0. || this.y != 0.) {
            return false;
        }
    } else {
        if (abs(this.x) > fEps || abs(this.y) > fEps) {
            return false;
        }
    }
    return true;
}
;
negate(v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = this;
    }
    v2fDestination.x = -this.x;
    v2fDestination.y = -this.y;
    return v2fDestination;
}
;
scale(fScale, number, v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = this;
    }
    v2fDestination.x = this.x * fScale;
    v2fDestination.y = this.y * fScale;
    return v2fDestination;
}
;
normalize(v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = this;
    }
    var x = this.x, y = this.y;
    var fLength = sqrt(x * x + y * y);
    if (fLength !== 0.) {
        var fInvLength = 1. / fLength;
        x *= fInvLength;
        y *= fInvLength;
    }
    v2fDestination.x = x;
    v2fDestination.y = y;
    return v2fDestination;
}
;
inline;
length();
number;
 {
    var x = this.x, y = this.y;
    return sqrt(x * x + y * y);
}
;
inline;
lengthSquare();
number;
 {
    var x = this.x, y = this.y;
    return x * x + y * y;
}
;
direction(v2fVec, IVec2, v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = this;
    }
    var x = v2fVec.x - this.x;
    var y = v2fVec.y - this.y;
    var fLength = sqrt(x * x + y * y);
    if (fLength !== 0.) {
        var fInvLength = 1. / fLength;
        x *= fInvLength;
        y *= fInvLength;
    }
    v2fDestination.x = x;
    v2fDestination.y = y;
    return v2fDestination;
}
;
mix(v2fVec, IVec2, fA, number, v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = this;
    }
    fA = clamp(fA, 0., 1.);
    var fA1 = 1. - fA;
    var fA2 = fA;
    v2fDestination.x = fA1 * this.x + fA2 * v2fVec.x;
    v2fDestination.y = fA1 * this.y + fA2 * v2fVec.y;
    return v2fDestination;
}
;
inline;
toString();
string;
 {
    return "[x: " + this.x + ", y: " + this.y + "]";
}
;
get;
stackCeil();
Vec2;
 {
    Vec2.stackPosition = Vec2.stackPosition === Vec2.stackSize - 1 ? 0 : Vec2.stackPosition;
    return Vec2.stack[Vec2.stackPosition++];
}
stackSize:
number = 100
stackPosition:
number = 0
stack:
Vec2[] = (function () {
    var pStack = new Array(Vec2.stackSize);
    for(var i = 0; i < Vec2.stackSize; i++) {
        pStack[i] = new Vec2();
    }
    return pStack;
})()
;
;
var akra;
(function (akra) {
    (function (math) {
        var Vec3 = (function () {
            function Vec3(fValue1, fValue2, fValue3) {
                this.inline = clear();
                this.IVec3 = {
                    this: ,
                    x:  = this.y = this.z = 0.
                };
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 2:
                        this.set(arguments[0], arguments[1]);
                        break;
                    case 3:
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;
                    default:
                        this.x = this.y = this.z = 0.;
                        break;
                }
            }
            Object.defineProperty(Vec3.prototype, "xx", {
                get: function () {
                    return vec2(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xy", {
                get: function () {
                    return vec2(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xz", {
                get: function () {
                    return vec2(this.x, this.z);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yx", {
                get: function () {
                    return vec2(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yy", {
                get: function () {
                    return vec2(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yz", {
                get: function () {
                    return vec2(this.y, this.z);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zx", {
                get: function () {
                    return vec2(this.z, this.x);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zy", {
                get: function () {
                    return vec2(this.z, this.y);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zz", {
                get: function () {
                    return vec2(this.z, this.z);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxx", {
                get: function () {
                    return vec3(this.x, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxy", {
                get: function () {
                    return vec3(this.x, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xxz", {
                get: function () {
                    return vec3(this.x, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyx", {
                get: function () {
                    return vec3(this.x, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyy", {
                get: function () {
                    return vec3(this.x, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xyz", {
                get: function () {
                    return vec3(this.x, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzx", {
                get: function () {
                    return vec3(this.x, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzy", {
                get: function () {
                    return vec3(this.x, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "xzz", {
                get: function () {
                    return vec3(this.x, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxx", {
                get: function () {
                    return vec3(this.y, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxy", {
                get: function () {
                    return vec3(this.y, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yxz", {
                get: function () {
                    return vec3(this.y, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyx", {
                get: function () {
                    return vec3(this.y, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyy", {
                get: function () {
                    return vec3(this.y, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yyz", {
                get: function () {
                    return vec3(this.y, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzx", {
                get: function () {
                    return vec3(this.y, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzy", {
                get: function () {
                    return vec3(this.y, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "yzz", {
                get: function () {
                    return vec3(this.y, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxx", {
                get: function () {
                    return vec3(this.z, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxy", {
                get: function () {
                    return vec3(this.z, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zxz", {
                get: function () {
                    return vec3(this.z, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyx", {
                get: function () {
                    return vec3(this.z, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyy", {
                get: function () {
                    return vec3(this.z, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zyz", {
                get: function () {
                    return vec3(this.z, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzx", {
                get: function () {
                    return vec3(this.z, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzy", {
                get: function () {
                    return vec3(this.z, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "zzz", {
                get: function () {
                    return vec3(this.z, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Vec3.prototype.set = function (fValue1, fValue2, fValue3) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0:
                        this.x = this.y = this.z = 0.;
                        break;
                    case 1:
                        if (isFloat(arguments[0])) {
                            this.x = this.y = this.z = arguments[0];
                        } else if (arguments[0] instanceof Vec3) {
                            var v3fVec = arguments[0];
                            this.x = v3fVec.x;
                            this.y = v3fVec.y;
                            this.z = v3fVec.z;
                        } else {
                            var pArray = arguments[0];
                            this.x = pArray[0];
                            this.y = pArray[1];
                            this.z = pArray[2];
                        }
                        break;
                    case 2:
                        if (isFloat(arguments[0])) {
                            var fValue = arguments[0];
                            var v2fVec = arguments[1];
                            this.x = fValue;
                            this.y = v2fVec.x;
                            this.z = v2fVec.y;
                        } else {
                            var v2fVec = arguments[0];
                            var fValue = arguments[1];
                            this.x = v2fVec.x;
                            this.y = v2fVec.y;
                            this.z = fValue;
                        }
                        break;
                    case 3:
                        this.x = arguments[0];
                        this.y = arguments[1];
                        this.z = arguments[2];
                        break;
                }
                return this;
            };
            return Vec3;
        })();
        math.Vec3 = Vec3;        
        return this;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
;
add(v3fVec, IVec3, v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = this;
    }
    v3fDestination.x = this.x + v3fVec.x;
    v3fDestination.y = this.y + v3fVec.y;
    v3fDestination.z = this.z + v3fVec.z;
    return v3fDestination;
}
;
subtract(v3fVec, IVec3, v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = this;
    }
    v3fDestination.x = this.x - v3fVec.x;
    v3fDestination.y = this.y - v3fVec.y;
    v3fDestination.z = this.z - v3fVec.z;
    return v3fDestination;
}
;
inline;
dot(v3fVec, IVec3);
number;
 {
    return this.x * v3fVec.x + this.y * v3fVec.y + this.z * v3fVec.z;
}
;
cross(v3fVec, IVec3, v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = this;
    }
    var x1 = this.x, y1 = this.y, z1 = this.z;
    var x2 = v3fVec.x, y2 = v3fVec.y, z2 = v3fVec.z;
    v3fDestination.x = y1 * z2 - z1 * y2;
    v3fDestination.y = z1 * x2 - x1 * z2;
    v3fDestination.z = x1 * y2 - y1 * x2;
    return v3fDestination;
}
;
isEqual(v3fVec, IVec3, fEps, number = 0.);
bool;
 {
    if (fEps === 0.) {
        if (this.x != v3fVec.x || this.y != v3fVec.y || this.z != v3fVec.z) {
            return false;
        }
    } else {
        if (abs(this.x - v3fVec.x) > fEps || abs(this.y - v3fVec.y) > fEps || abs(this.z - v3fVec.z) > fEps) {
            return false;
        }
    }
    return true;
}
;
isClear(fEps, number = 0.);
bool;
 {
    if (fEps === 0.) {
        if (this.x != 0. || this.y != 0. || this.z != 0.) {
            return false;
        }
    } else {
        if (abs(this.x) > fEps || abs(this.y) > fEps || abs(this.z) > fEps) {
            return false;
        }
    }
    return true;
}
;
negate(v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = this;
    }
    v3fDestination.x = -this.x;
    v3fDestination.y = -this.y;
    v3fDestination.z = -this.z;
    return v3fDestination;
}
;
scale(v3fScale, IVec3, v3fDestination ?  : IVec3);
IVec3;
scale(fScale, number, v3fDestination ?  : IVec3);
IVec3;
scale(fScale ?  : , v3fDestination ?  : );
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = this;
    }
    if (isNumber(arguments[0])) {
        var fScale = arguments[0];
        v3fDestination.x = this.x * fScale;
        v3fDestination.y = this.y * fScale;
        v3fDestination.z = this.z * fScale;
    } else {
        var v3fScale = arguments[0];
        v3fDestination.x = this.x * v3fScale.x;
        v3fDestination.y = this.y * v3fScale.y;
        v3fDestination.z = this.z * v3fScale.z;
    }
    return v3fDestination;
}
;
normalize(v3fDestination ?  : IVec3);
IVec3;
 {
    if (!v3fDestination) {
        v3fDestination = this;
    }
    var x = this.x, y = this.y, z = this.z;
    var fLength = sqrt(x * x + y * y + z * z);
    if (fLength !== 0.) {
        var fInvLength = 1. / fLength;
        x *= fInvLength;
        y *= fInvLength;
        z *= fInvLength;
    }
    v3fDestination.x = x;
    v3fDestination.y = y;
    v3fDestination.z = z;
    return v3fDestination;
}
;
inline;
length();
number;
 {
    var x = this.x, y = this.y, z = this.z;
    return sqrt(x * x + y * y + z * z);
}
;
inline;
lengthSquare();
number;
 {
    var x = this.x, y = this.y, z = this.z;
    return x * x + y * y + z * z;
}
;
direction(v3fVec, IVec3, v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = this;
    }
    var x = v3fVec.x - this.x;
    var y = v3fVec.y - this.y;
    var z = v3fVec.z - this.z;
    var fLength = sqrt(x * x + y * y + z * z);
    if (fLength !== 0.) {
        var fInvLength = 1. / fLength;
        x *= fInvLength;
        y *= fInvLength;
        z *= fInvLength;
    }
    v3fDestination.x = x;
    v3fDestination.y = y;
    v3fDestination.z = z;
    return v3fDestination;
}
;
mix(v3fVec, IVec3, fA, number, v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = this;
    }
    fA = clamp(fA, 0., 1.);
    var fA1 = 1. - fA;
    var fA2 = fA;
    v3fDestination.x = fA1 * this.x + fA2 * v3fVec.x;
    v3fDestination.y = fA1 * this.y + fA2 * v3fVec.y;
    v3fDestination.z = fA1 * this.z + fA2 * v3fVec.z;
    return v3fDestination;
}
;
inline;
toString();
string;
 {
    return "[x: " + this.x + " ,y: " + this.y + ", z: " + this.z + "]";
}
;
toTranslationMatrix(m4fDestination ?  : IMat4);
IMat4;
 {
    if (!isDef(m4fDestination)) {
        m4fDestination = new Mat4(1.);
    } else {
        m4fDestination.set(1.);
    }
    var pData = m4fDestination.data;
    pData[12] = this.x;
    pData[13] = this.y;
    pData[14] = this.z;
    return m4fDestination;
}
;
vec3TransformCoord(m4fTransformation, IMat4, v3fDestination ?  : IVec3);
IVec3;
 {
    if (!v3fDestination) {
        v3fDestination = this;
    }
    var pData = m4fTransformation.data;
    var x = this.x;
    var y = this.y;
    var z = this.z;
    var w;
    x = pData[0] * x + pData[4] * y + pData[8] * z + pData[12];
    y = pData[1] * x + pData[5] * y + pData[9] * z + pData[13];
    z = pData[2] * x + pData[6] * y + pData[10] * z + pData[14];
    w = pData[2] * x + pData[7] * y + pData[11] * z + pData[15];
    var fInvW = 1. / w;
    v3fDestination.x = x * fInvW;
    v3fDestination.y = y * fInvW;
    v3fDestination.z = z * fInvW;
    return v3fDestination;
}
;
get;
stackCeil();
Vec3;
 {
    Vec3.stackPosition = Vec3.stackPosition === Vec3.stackSize - 1 ? 0 : Vec3.stackPosition;
    return Vec3.stack[Vec3.stackPosition++];
}
stackSize:
number = 100
stackPosition:
number = 0
stack:
Vec3[] = (function () {
    var pStack = new Array(Vec3.stackSize);
    for(var i = 0; i < Vec3.stackSize; i++) {
        pStack[i] = new Vec3();
    }
    return pStack;
})()
var akra;
(function (akra) {
    (function (math) {
        var Vec4 = (function () {
            function Vec4(fValue1, fValue2, fValue3, fValue4) {
                this.inline = clear();
                this.IVec4 = {
                    this: ,
                    x:  = this.y = this.z = this.w = 0.
                };
                var nArgumentsLength = arguments.length;
                var v4fVec = this;
                switch(nArgumentsLength) {
                    case 1:
                        v4fVec.set(arguments[0]);
                        break;
                    case 2:
                        v4fVec.set(arguments[0], arguments[1]);
                        break;
                    case 3:
                        v4fVec.set(arguments[0], arguments[1], arguments[2]);
                        break;
                    case 4:
                        v4fVec.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;
                    default:
                        v4fVec.x = v4fVec.y = v4fVec.z = v4fVec.w = 0.;
                        break;
                }
            }
            Object.defineProperty(Vec4.prototype, "xx", {
                get: function () {
                    return vec2(this.x, this.x);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xy", {
                get: function () {
                    return vec2(this.x, this.y);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xz", {
                get: function () {
                    return vec2(this.x, this.z);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xw", {
                get: function () {
                    return vec2(this.x, this.w);
                },
                set: function (v2fVec) {
                    this.x = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yx", {
                get: function () {
                    return vec2(this.y, this.x);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yy", {
                get: function () {
                    return vec2(this.y, this.y);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yz", {
                get: function () {
                    return vec2(this.y, this.z);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yw", {
                get: function () {
                    return vec2(this.y, this.w);
                },
                set: function (v2fVec) {
                    this.y = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zx", {
                get: function () {
                    return vec2(this.z, this.x);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zy", {
                get: function () {
                    return vec2(this.z, this.y);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zz", {
                get: function () {
                    return vec2(this.z, this.z);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zw", {
                get: function () {
                    return vec2(this.z, this.w);
                },
                set: function (v2fVec) {
                    this.z = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wx", {
                get: function () {
                    return vec2(this.w, this.x);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.x = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wy", {
                get: function () {
                    return vec2(this.w, this.y);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.y = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wz", {
                get: function () {
                    return vec2(this.w, this.z);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.z = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ww", {
                get: function () {
                    return vec2(this.w, this.w);
                },
                set: function (v2fVec) {
                    this.w = v2fVec.x;
                    this.w = v2fVec.y;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxx", {
                get: function () {
                    return vec3(this.x, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxy", {
                get: function () {
                    return vec3(this.x, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxz", {
                get: function () {
                    return vec3(this.x, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxw", {
                get: function () {
                    return vec3(this.x, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyx", {
                get: function () {
                    return vec3(this.x, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyy", {
                get: function () {
                    return vec3(this.x, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyz", {
                get: function () {
                    return vec3(this.x, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyw", {
                get: function () {
                    return vec3(this.x, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzx", {
                get: function () {
                    return vec3(this.x, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzy", {
                get: function () {
                    return vec3(this.x, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzz", {
                get: function () {
                    return vec3(this.x, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzw", {
                get: function () {
                    return vec3(this.x, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwx", {
                get: function () {
                    return vec3(this.x, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwy", {
                get: function () {
                    return vec3(this.x, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwz", {
                get: function () {
                    return vec3(this.x, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xww", {
                get: function () {
                    return vec3(this.x, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.x = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxx", {
                get: function () {
                    return vec3(this.y, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxy", {
                get: function () {
                    return vec3(this.y, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxz", {
                get: function () {
                    return vec3(this.y, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxw", {
                get: function () {
                    return vec3(this.y, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyx", {
                get: function () {
                    return vec3(this.y, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyy", {
                get: function () {
                    return vec3(this.y, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyz", {
                get: function () {
                    return vec3(this.y, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyw", {
                get: function () {
                    return vec3(this.y, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzx", {
                get: function () {
                    return vec3(this.y, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzy", {
                get: function () {
                    return vec3(this.y, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzz", {
                get: function () {
                    return vec3(this.y, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzw", {
                get: function () {
                    return vec3(this.y, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywx", {
                get: function () {
                    return vec3(this.y, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywy", {
                get: function () {
                    return vec3(this.y, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywz", {
                get: function () {
                    return vec3(this.y, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yww", {
                get: function () {
                    return vec3(this.y, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.y = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxx", {
                get: function () {
                    return vec3(this.z, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxy", {
                get: function () {
                    return vec3(this.z, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxz", {
                get: function () {
                    return vec3(this.z, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxw", {
                get: function () {
                    return vec3(this.z, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyx", {
                get: function () {
                    return vec3(this.z, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyy", {
                get: function () {
                    return vec3(this.z, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyz", {
                get: function () {
                    return vec3(this.z, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyw", {
                get: function () {
                    return vec3(this.z, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzx", {
                get: function () {
                    return vec3(this.z, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzy", {
                get: function () {
                    return vec3(this.z, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzz", {
                get: function () {
                    return vec3(this.z, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzw", {
                get: function () {
                    return vec3(this.z, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwx", {
                get: function () {
                    return vec3(this.z, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwy", {
                get: function () {
                    return vec3(this.z, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwz", {
                get: function () {
                    return vec3(this.z, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zww", {
                get: function () {
                    return vec3(this.z, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.z = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxx", {
                get: function () {
                    return vec3(this.w, this.x, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxy", {
                get: function () {
                    return vec3(this.w, this.x, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxz", {
                get: function () {
                    return vec3(this.w, this.x, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxw", {
                get: function () {
                    return vec3(this.w, this.x, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.x = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyx", {
                get: function () {
                    return vec3(this.w, this.y, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyy", {
                get: function () {
                    return vec3(this.w, this.y, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyz", {
                get: function () {
                    return vec3(this.w, this.y, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyw", {
                get: function () {
                    return vec3(this.w, this.y, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.y = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzx", {
                get: function () {
                    return vec3(this.w, this.z, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzy", {
                get: function () {
                    return vec3(this.w, this.z, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzz", {
                get: function () {
                    return vec3(this.w, this.z, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzw", {
                get: function () {
                    return vec3(this.w, this.z, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.z = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwx", {
                get: function () {
                    return vec3(this.w, this.w, this.x);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.x = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwy", {
                get: function () {
                    return vec3(this.w, this.w, this.y);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.y = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwz", {
                get: function () {
                    return vec3(this.w, this.w, this.z);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.z = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "www", {
                get: function () {
                    return vec3(this.w, this.w, this.w);
                },
                set: function (v3fVec) {
                    this.w = v3fVec.x;
                    this.w = v3fVec.y;
                    this.w = v3fVec.z;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxx", {
                get: function () {
                    return vec4(this.x, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxy", {
                get: function () {
                    return vec4(this.x, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxz", {
                get: function () {
                    return vec4(this.x, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxxw", {
                get: function () {
                    return vec4(this.x, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyx", {
                get: function () {
                    return vec4(this.x, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyy", {
                get: function () {
                    return vec4(this.x, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyz", {
                get: function () {
                    return vec4(this.x, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxyw", {
                get: function () {
                    return vec4(this.x, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzx", {
                get: function () {
                    return vec4(this.x, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzy", {
                get: function () {
                    return vec4(this.x, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzz", {
                get: function () {
                    return vec4(this.x, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxzw", {
                get: function () {
                    return vec4(this.x, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwx", {
                get: function () {
                    return vec4(this.x, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwy", {
                get: function () {
                    return vec4(this.x, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxwz", {
                get: function () {
                    return vec4(this.x, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xxww", {
                get: function () {
                    return vec4(this.x, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxx", {
                get: function () {
                    return vec4(this.x, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxy", {
                get: function () {
                    return vec4(this.x, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxz", {
                get: function () {
                    return vec4(this.x, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyxw", {
                get: function () {
                    return vec4(this.x, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyx", {
                get: function () {
                    return vec4(this.x, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyy", {
                get: function () {
                    return vec4(this.x, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyz", {
                get: function () {
                    return vec4(this.x, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyyw", {
                get: function () {
                    return vec4(this.x, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzx", {
                get: function () {
                    return vec4(this.x, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzy", {
                get: function () {
                    return vec4(this.x, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzz", {
                get: function () {
                    return vec4(this.x, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyzw", {
                get: function () {
                    return vec4(this.x, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywx", {
                get: function () {
                    return vec4(this.x, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywy", {
                get: function () {
                    return vec4(this.x, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xywz", {
                get: function () {
                    return vec4(this.x, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xyww", {
                get: function () {
                    return vec4(this.x, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxx", {
                get: function () {
                    return vec4(this.x, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxy", {
                get: function () {
                    return vec4(this.x, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxz", {
                get: function () {
                    return vec4(this.x, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzxw", {
                get: function () {
                    return vec4(this.x, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyx", {
                get: function () {
                    return vec4(this.x, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyy", {
                get: function () {
                    return vec4(this.x, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyz", {
                get: function () {
                    return vec4(this.x, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzyw", {
                get: function () {
                    return vec4(this.x, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzx", {
                get: function () {
                    return vec4(this.x, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzy", {
                get: function () {
                    return vec4(this.x, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzz", {
                get: function () {
                    return vec4(this.x, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzzw", {
                get: function () {
                    return vec4(this.x, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwx", {
                get: function () {
                    return vec4(this.x, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwy", {
                get: function () {
                    return vec4(this.x, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzwz", {
                get: function () {
                    return vec4(this.x, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xzww", {
                get: function () {
                    return vec4(this.x, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxx", {
                get: function () {
                    return vec4(this.x, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxy", {
                get: function () {
                    return vec4(this.x, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxz", {
                get: function () {
                    return vec4(this.x, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwxw", {
                get: function () {
                    return vec4(this.x, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyx", {
                get: function () {
                    return vec4(this.x, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyy", {
                get: function () {
                    return vec4(this.x, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyz", {
                get: function () {
                    return vec4(this.x, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwyw", {
                get: function () {
                    return vec4(this.x, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzx", {
                get: function () {
                    return vec4(this.x, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzy", {
                get: function () {
                    return vec4(this.x, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzz", {
                get: function () {
                    return vec4(this.x, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwzw", {
                get: function () {
                    return vec4(this.x, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwx", {
                get: function () {
                    return vec4(this.x, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwy", {
                get: function () {
                    return vec4(this.x, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwwz", {
                get: function () {
                    return vec4(this.x, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "xwww", {
                get: function () {
                    return vec4(this.x, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.x = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxx", {
                get: function () {
                    return vec4(this.y, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxy", {
                get: function () {
                    return vec4(this.y, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxz", {
                get: function () {
                    return vec4(this.y, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxxw", {
                get: function () {
                    return vec4(this.y, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyx", {
                get: function () {
                    return vec4(this.y, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyy", {
                get: function () {
                    return vec4(this.y, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyz", {
                get: function () {
                    return vec4(this.y, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxyw", {
                get: function () {
                    return vec4(this.y, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzx", {
                get: function () {
                    return vec4(this.y, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzy", {
                get: function () {
                    return vec4(this.y, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzz", {
                get: function () {
                    return vec4(this.y, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxzw", {
                get: function () {
                    return vec4(this.y, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwx", {
                get: function () {
                    return vec4(this.y, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwy", {
                get: function () {
                    return vec4(this.y, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxwz", {
                get: function () {
                    return vec4(this.y, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yxww", {
                get: function () {
                    return vec4(this.y, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxx", {
                get: function () {
                    return vec4(this.y, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxy", {
                get: function () {
                    return vec4(this.y, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxz", {
                get: function () {
                    return vec4(this.y, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyxw", {
                get: function () {
                    return vec4(this.y, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyx", {
                get: function () {
                    return vec4(this.y, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyy", {
                get: function () {
                    return vec4(this.y, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyz", {
                get: function () {
                    return vec4(this.y, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyyw", {
                get: function () {
                    return vec4(this.y, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzx", {
                get: function () {
                    return vec4(this.y, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzy", {
                get: function () {
                    return vec4(this.y, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzz", {
                get: function () {
                    return vec4(this.y, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyzw", {
                get: function () {
                    return vec4(this.y, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywx", {
                get: function () {
                    return vec4(this.y, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywy", {
                get: function () {
                    return vec4(this.y, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yywz", {
                get: function () {
                    return vec4(this.y, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yyww", {
                get: function () {
                    return vec4(this.y, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxx", {
                get: function () {
                    return vec4(this.y, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxy", {
                get: function () {
                    return vec4(this.y, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxz", {
                get: function () {
                    return vec4(this.y, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzxw", {
                get: function () {
                    return vec4(this.y, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyx", {
                get: function () {
                    return vec4(this.y, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyy", {
                get: function () {
                    return vec4(this.y, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyz", {
                get: function () {
                    return vec4(this.y, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzyw", {
                get: function () {
                    return vec4(this.y, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzx", {
                get: function () {
                    return vec4(this.y, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzy", {
                get: function () {
                    return vec4(this.y, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzz", {
                get: function () {
                    return vec4(this.y, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzzw", {
                get: function () {
                    return vec4(this.y, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwx", {
                get: function () {
                    return vec4(this.y, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwy", {
                get: function () {
                    return vec4(this.y, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzwz", {
                get: function () {
                    return vec4(this.y, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "yzww", {
                get: function () {
                    return vec4(this.y, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxx", {
                get: function () {
                    return vec4(this.y, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxy", {
                get: function () {
                    return vec4(this.y, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxz", {
                get: function () {
                    return vec4(this.y, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywxw", {
                get: function () {
                    return vec4(this.y, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyx", {
                get: function () {
                    return vec4(this.y, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyy", {
                get: function () {
                    return vec4(this.y, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyz", {
                get: function () {
                    return vec4(this.y, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywyw", {
                get: function () {
                    return vec4(this.y, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzx", {
                get: function () {
                    return vec4(this.y, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzy", {
                get: function () {
                    return vec4(this.y, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzz", {
                get: function () {
                    return vec4(this.y, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywzw", {
                get: function () {
                    return vec4(this.y, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwx", {
                get: function () {
                    return vec4(this.y, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwy", {
                get: function () {
                    return vec4(this.y, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywwz", {
                get: function () {
                    return vec4(this.y, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "ywww", {
                get: function () {
                    return vec4(this.y, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.y = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxx", {
                get: function () {
                    return vec4(this.z, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxy", {
                get: function () {
                    return vec4(this.z, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxz", {
                get: function () {
                    return vec4(this.z, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxxw", {
                get: function () {
                    return vec4(this.z, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyx", {
                get: function () {
                    return vec4(this.z, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyy", {
                get: function () {
                    return vec4(this.z, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyz", {
                get: function () {
                    return vec4(this.z, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxyw", {
                get: function () {
                    return vec4(this.z, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzx", {
                get: function () {
                    return vec4(this.z, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzy", {
                get: function () {
                    return vec4(this.z, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzz", {
                get: function () {
                    return vec4(this.z, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxzw", {
                get: function () {
                    return vec4(this.z, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwx", {
                get: function () {
                    return vec4(this.z, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwy", {
                get: function () {
                    return vec4(this.z, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxwz", {
                get: function () {
                    return vec4(this.z, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zxww", {
                get: function () {
                    return vec4(this.z, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxx", {
                get: function () {
                    return vec4(this.z, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxy", {
                get: function () {
                    return vec4(this.z, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxz", {
                get: function () {
                    return vec4(this.z, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyxw", {
                get: function () {
                    return vec4(this.z, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyx", {
                get: function () {
                    return vec4(this.z, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyy", {
                get: function () {
                    return vec4(this.z, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyz", {
                get: function () {
                    return vec4(this.z, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyyw", {
                get: function () {
                    return vec4(this.z, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzx", {
                get: function () {
                    return vec4(this.z, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzy", {
                get: function () {
                    return vec4(this.z, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzz", {
                get: function () {
                    return vec4(this.z, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyzw", {
                get: function () {
                    return vec4(this.z, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywx", {
                get: function () {
                    return vec4(this.z, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywy", {
                get: function () {
                    return vec4(this.z, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zywz", {
                get: function () {
                    return vec4(this.z, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zyww", {
                get: function () {
                    return vec4(this.z, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxx", {
                get: function () {
                    return vec4(this.z, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxy", {
                get: function () {
                    return vec4(this.z, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxz", {
                get: function () {
                    return vec4(this.z, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzxw", {
                get: function () {
                    return vec4(this.z, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyx", {
                get: function () {
                    return vec4(this.z, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyy", {
                get: function () {
                    return vec4(this.z, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyz", {
                get: function () {
                    return vec4(this.z, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzyw", {
                get: function () {
                    return vec4(this.z, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzx", {
                get: function () {
                    return vec4(this.z, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzy", {
                get: function () {
                    return vec4(this.z, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzz", {
                get: function () {
                    return vec4(this.z, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzzw", {
                get: function () {
                    return vec4(this.z, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwx", {
                get: function () {
                    return vec4(this.z, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwy", {
                get: function () {
                    return vec4(this.z, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzwz", {
                get: function () {
                    return vec4(this.z, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zzww", {
                get: function () {
                    return vec4(this.z, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxx", {
                get: function () {
                    return vec4(this.z, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxy", {
                get: function () {
                    return vec4(this.z, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxz", {
                get: function () {
                    return vec4(this.z, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwxw", {
                get: function () {
                    return vec4(this.z, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyx", {
                get: function () {
                    return vec4(this.z, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyy", {
                get: function () {
                    return vec4(this.z, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyz", {
                get: function () {
                    return vec4(this.z, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwyw", {
                get: function () {
                    return vec4(this.z, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzx", {
                get: function () {
                    return vec4(this.z, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzy", {
                get: function () {
                    return vec4(this.z, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzz", {
                get: function () {
                    return vec4(this.z, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwzw", {
                get: function () {
                    return vec4(this.z, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwx", {
                get: function () {
                    return vec4(this.z, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwy", {
                get: function () {
                    return vec4(this.z, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwwz", {
                get: function () {
                    return vec4(this.z, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "zwww", {
                get: function () {
                    return vec4(this.z, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.z = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxx", {
                get: function () {
                    return vec4(this.w, this.x, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxy", {
                get: function () {
                    return vec4(this.w, this.x, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxz", {
                get: function () {
                    return vec4(this.w, this.x, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxxw", {
                get: function () {
                    return vec4(this.w, this.x, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyx", {
                get: function () {
                    return vec4(this.w, this.x, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyy", {
                get: function () {
                    return vec4(this.w, this.x, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyz", {
                get: function () {
                    return vec4(this.w, this.x, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxyw", {
                get: function () {
                    return vec4(this.w, this.x, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzx", {
                get: function () {
                    return vec4(this.w, this.x, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzy", {
                get: function () {
                    return vec4(this.w, this.x, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzz", {
                get: function () {
                    return vec4(this.w, this.x, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxzw", {
                get: function () {
                    return vec4(this.w, this.x, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwx", {
                get: function () {
                    return vec4(this.w, this.x, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwy", {
                get: function () {
                    return vec4(this.w, this.x, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxwz", {
                get: function () {
                    return vec4(this.w, this.x, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wxww", {
                get: function () {
                    return vec4(this.w, this.x, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.x = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxx", {
                get: function () {
                    return vec4(this.w, this.y, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxy", {
                get: function () {
                    return vec4(this.w, this.y, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxz", {
                get: function () {
                    return vec4(this.w, this.y, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyxw", {
                get: function () {
                    return vec4(this.w, this.y, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyx", {
                get: function () {
                    return vec4(this.w, this.y, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyy", {
                get: function () {
                    return vec4(this.w, this.y, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyz", {
                get: function () {
                    return vec4(this.w, this.y, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyyw", {
                get: function () {
                    return vec4(this.w, this.y, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzx", {
                get: function () {
                    return vec4(this.w, this.y, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzy", {
                get: function () {
                    return vec4(this.w, this.y, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzz", {
                get: function () {
                    return vec4(this.w, this.y, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyzw", {
                get: function () {
                    return vec4(this.w, this.y, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywx", {
                get: function () {
                    return vec4(this.w, this.y, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywy", {
                get: function () {
                    return vec4(this.w, this.y, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wywz", {
                get: function () {
                    return vec4(this.w, this.y, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wyww", {
                get: function () {
                    return vec4(this.w, this.y, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.y = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxx", {
                get: function () {
                    return vec4(this.w, this.z, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxy", {
                get: function () {
                    return vec4(this.w, this.z, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxz", {
                get: function () {
                    return vec4(this.w, this.z, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzxw", {
                get: function () {
                    return vec4(this.w, this.z, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyx", {
                get: function () {
                    return vec4(this.w, this.z, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyy", {
                get: function () {
                    return vec4(this.w, this.z, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyz", {
                get: function () {
                    return vec4(this.w, this.z, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzyw", {
                get: function () {
                    return vec4(this.w, this.z, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzx", {
                get: function () {
                    return vec4(this.w, this.z, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzy", {
                get: function () {
                    return vec4(this.w, this.z, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzz", {
                get: function () {
                    return vec4(this.w, this.z, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzzw", {
                get: function () {
                    return vec4(this.w, this.z, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwx", {
                get: function () {
                    return vec4(this.w, this.z, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwy", {
                get: function () {
                    return vec4(this.w, this.z, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzwz", {
                get: function () {
                    return vec4(this.w, this.z, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wzww", {
                get: function () {
                    return vec4(this.w, this.z, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.z = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxx", {
                get: function () {
                    return vec4(this.w, this.w, this.x, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxy", {
                get: function () {
                    return vec4(this.w, this.w, this.x, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxz", {
                get: function () {
                    return vec4(this.w, this.w, this.x, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwxw", {
                get: function () {
                    return vec4(this.w, this.w, this.x, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.x = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyx", {
                get: function () {
                    return vec4(this.w, this.w, this.y, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyy", {
                get: function () {
                    return vec4(this.w, this.w, this.y, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyz", {
                get: function () {
                    return vec4(this.w, this.w, this.y, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwyw", {
                get: function () {
                    return vec4(this.w, this.w, this.y, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.y = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzx", {
                get: function () {
                    return vec4(this.w, this.w, this.z, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzy", {
                get: function () {
                    return vec4(this.w, this.w, this.z, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzz", {
                get: function () {
                    return vec4(this.w, this.w, this.z, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwzw", {
                get: function () {
                    return vec4(this.w, this.w, this.z, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.z = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwx", {
                get: function () {
                    return vec4(this.w, this.w, this.w, this.x);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.x = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwy", {
                get: function () {
                    return vec4(this.w, this.w, this.w, this.y);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.y = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwwz", {
                get: function () {
                    return vec4(this.w, this.w, this.w, this.z);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.z = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec4.prototype, "wwww", {
                get: function () {
                    return vec4(this.w, this.w, this.w, this.w);
                },
                set: function (v4fVec) {
                    this.w = v4fVec.x;
                    this.w = v4fVec.y;
                    this.w = v4fVec.z;
                    this.w = v4fVec.w;
                },
                enumerable: true,
                configurable: true
            });
            Vec4.prototype.set = function (fValue1, fValue2, fValue3, fValue4) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 0:
                        this.x = this.y = this.z = this.w = 0.;
                        break;
                    case 1:
                        if (isFloat(arguments[0])) {
                            this.x = this.y = this.z = this.w = arguments[0];
                        } else if (arguments[0] instanceof Vec4) {
                            var v4fVec = arguments[0];
                            this.x = v4fVec.x;
                            this.y = v4fVec.y;
                            this.z = v4fVec.z;
                            this.w = v4fVec.w;
                        } else if (isDef(arguments[0].r)) {
                            this.x = arguments[0].r;
                            this.y = arguments[0].g;
                            this.z = arguments[0].b;
                            this.w = arguments[0].a;
                        } else {
                            var pArray = arguments[0];
                            this.x = pArray[0];
                            this.y = pArray[1];
                            this.z = pArray[2];
                            this.w = pArray[3];
                        }
                        break;
                    case 2:
                        if (isFloat(arguments[0])) {
                            var fValue = arguments[0];
                            var v3fVec = arguments[1];
                            this.x = fValue;
                            this.y = v3fVec.x;
                            this.z = v3fVec.y;
                            this.w = v3fVec.z;
                        } else if (arguments[0] instanceof Vec2) {
                            var v2fVec1 = arguments[0];
                            var v2fVec2 = arguments[1];
                            this.x = v2fVec1.x;
                            this.y = v2fVec1.y;
                            this.z = v2fVec2.x;
                            this.w = v2fVec2.y;
                        } else {
                            var v3fVec = arguments[0];
                            var fValue = arguments[1];
                            this.x = v3fVec.x;
                            this.y = v3fVec.y;
                            this.z = v3fVec.z;
                            this.w = fValue;
                        }
                        break;
                    case 3:
                        if (isFloat(arguments[0])) {
                            var fValue1 = arguments[0];
                            if (isFloat(arguments[1])) {
                                var fValue2 = arguments[1];
                                var v2fVec = arguments[2];
                                this.x = fValue1;
                                this.y = fValue2;
                                this.z = v2fVec.x;
                                this.w = v2fVec.y;
                            } else {
                                var v2fVec = arguments[1];
                                var fValue2 = arguments[2];
                                this.x = fValue1;
                                this.y = v2fVec.x;
                                this.z = v2fVec.y;
                                this.w = fValue2;
                            }
                        } else {
                            var v2fVec = arguments[0];
                            var fValue1 = arguments[1];
                            var fValue2 = arguments[2];
                            this.x = v2fVec.x;
                            this.y = v2fVec.y;
                            this.z = fValue1;
                            this.w = fValue2;
                        }
                        break;
                    case 4:
                        this.x = arguments[0];
                        this.y = arguments[1];
                        this.z = arguments[2];
                        this.w = arguments[3];
                        break;
                }
                return this;
            };
            return Vec4;
        })();
        math.Vec4 = Vec4;        
        return this;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
;
add(v4fVec, IVec4, v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = this;
    }
    v4fDestination.x = this.x + v4fVec.x;
    v4fDestination.y = this.y + v4fVec.y;
    v4fDestination.z = this.z + v4fVec.z;
    v4fDestination.w = this.w + v4fVec.w;
    return v4fDestination;
}
;
subtract(v4fVec, IVec4, v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = this;
    }
    v4fDestination.x = this.x - v4fVec.x;
    v4fDestination.y = this.y - v4fVec.y;
    v4fDestination.z = this.z - v4fVec.z;
    v4fDestination.w = this.w - v4fVec.w;
    return v4fDestination;
}
;
inline;
dot(v4fVec, IVec4);
number;
 {
    return this.x * v4fVec.x + this.y * v4fVec.y + this.z * v4fVec.z + this.w * v4fVec.w;
}
;
isEqual(v4fVec, IVec4, fEps, number = 0.);
bool;
 {
    if (fEps === 0.) {
        if (this.x != v4fVec.x || this.y != v4fVec.y || this.z != v4fVec.z || this.w != v4fVec.w) {
            return false;
        }
    } else {
        if (abs(this.x - v4fVec.x) > fEps || abs(this.y - v4fVec.y) > fEps || abs(this.z - v4fVec.z) > fEps || abs(this.w - v4fVec.w) > fEps) {
            return false;
        }
    }
    return true;
}
;
isClear(fEps, number = 0.);
bool;
 {
    if (fEps === 0.) {
        if (this.x != 0. || this.y != 0. || this.z != 0. || this.w != 0.) {
            return false;
        }
    } else {
        if (abs(this.x) > fEps || abs(this.y) > fEps || abs(this.z) > fEps || abs(this.w) > fEps) {
            return false;
        }
    }
    return true;
}
;
negate(v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = this;
    }
    v4fDestination.x = -this.x;
    v4fDestination.y = -this.y;
    v4fDestination.z = -this.z;
    v4fDestination.w = -this.w;
    return v4fDestination;
}
;
scale(fScale, number, v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = this;
    }
    v4fDestination.x = this.x * fScale;
    v4fDestination.y = this.y * fScale;
    v4fDestination.z = this.z * fScale;
    v4fDestination.w = this.w * fScale;
    return v4fDestination;
}
;
normalize(v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = this;
    }
    var x = this.x, y = this.y, z = this.z, w = this.w;
    var fLength = sqrt(x * x + y * y + z * z + w * w);
    if (fLength !== 0.) {
        var fInvLength = 1. / fLength;
        x *= fInvLength;
        y *= fInvLength;
        z *= fInvLength;
        w *= fInvLength;
    }
    v4fDestination.x = x;
    v4fDestination.y = y;
    v4fDestination.z = z;
    v4fDestination.w = w;
    return v4fDestination;
}
;
inline;
length();
number;
 {
    var x = this.x, y = this.y, z = this.z, w = this.w;
    return sqrt(x * x + y * y + z * z + w * w);
}
;
inline;
lengthSquare();
number;
 {
    var x = this.x, y = this.y, z = this.z, w = this.w;
    return x * x + y * y + z * z + w * w;
}
;
direction(v4fVec, IVec4, v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = this;
    }
    var x = v4fVec.x - this.x;
    var y = v4fVec.y - this.y;
    var z = v4fVec.z - this.z;
    var w = v4fVec.w - this.w;
    var fLength = sqrt(x * x + y * y + z * z + w * w);
    if (fLength !== 0.) {
        var fInvLength = 1. / fLength;
        x *= fInvLength;
        y *= fInvLength;
        z *= fInvLength;
        w *= fInvLength;
    }
    v4fDestination.x = x;
    v4fDestination.y = y;
    v4fDestination.z = z;
    v4fDestination.w = w;
    return v4fDestination;
}
;
mix(v4fVec, IVec4, fA, number, v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = this;
    }
    fA = clamp(fA, 0., 1.);
    var fA1 = 1. - fA;
    var fA2 = fA;
    v4fDestination.x = fA1 * this.x + fA2 * v4fVec.x;
    v4fDestination.y = fA1 * this.y + fA2 * v4fVec.y;
    v4fDestination.z = fA1 * this.z + fA2 * v4fVec.z;
    v4fDestination.w = fA1 * this.w + fA2 * v4fVec.w;
    return v4fDestination;
}
;
inline;
toString();
string;
 {
    return "[x: " + this.x + ", y: " + this.y + ", z: " + this.z + ", w: " + this.w + "]";
}
;
get;
stackCeil();
Vec4;
 {
    Vec4.stackPosition = Vec4.stackPosition === Vec4.stackSize - 1 ? 0 : Vec4.stackPosition;
    return Vec4.stack[Vec4.stackPosition++];
}
stackSize:
number = 100
stackPosition:
number = 0
stack:
Vec4[] = (function () {
    var pStack = new Array(Vec4.stackSize);
    for(var i = 0; i < Vec4.stackSize; i++) {
        pStack[i] = new Vec4();
    }
    return pStack;
})()
;
;
var akra;
(function (akra) {
    (function (math) {
        var Mat3 = (function () {
            function Mat3(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 3:
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;
                    case 9:
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
                        break;
                    default:
                        break;
                }
            }
            Mat3.prototype.set = function (fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
                this.data = this.data || new Float32Array(9);
                var pData = this.data;
                var nArgumentsLength = arguments.length;
                if (nArgumentsLength == 0) {
                    pData[0] = pData[3] = pData[6] = 0;
                    pData[1] = pData[4] = pData[7] = 0;
                    pData[2] = pData[5] = pData[8] = 0;
                }
                if (nArgumentsLength == 1) {
                    if (isFloat(arguments[0])) {
                        var nValue = arguments[0];
                        pData[0] = nValue;
                        pData[3] = 0;
                        pData[6] = 0;
                        pData[1] = 0;
                        pData[4] = nValue;
                        pData[7] = 0;
                        pData[2] = 0;
                        pData[5] = 0;
                        pData[8] = nValue;
                    } else if (isDef(arguments[0].data)) {
                        var pElements = arguments[0].data;
                        if (pElements.length === 9) {
                            pData[0] = pElements[0];
                            pData[3] = pElements[3];
                            pData[6] = pElements[6];
                            pData[1] = pElements[1];
                            pData[4] = pElements[4];
                            pData[7] = pElements[7];
                            pData[2] = pElements[2];
                            pData[5] = pElements[5];
                            pData[8] = pElements[8];
                        } else {
                            pData[0] = pElements[0];
                            pData[3] = pElements[4];
                            pData[6] = pElements[8];
                            pData[1] = pElements[1];
                            pData[4] = pElements[5];
                            pData[7] = pElements[9];
                            pData[2] = pElements[2];
                            pData[5] = pElements[6];
                            pData[8] = pElements[10];
                        }
                    } else if (arguments[0] instanceof Vec3) {
                        var v3fVec = arguments[0];
                        pData[0] = v3fVec.x;
                        pData[3] = 0;
                        pData[6] = 0;
                        pData[1] = 0;
                        pData[4] = v3fVec.y;
                        pData[7] = 0;
                        pData[2] = 0;
                        pData[5] = 0;
                        pData[8] = v3fVec.z;
                    } else {
                        var pElements = arguments[0];
                        if (pElements.length == 3) {
                            pData[0] = pElements[0];
                            pData[3] = 0;
                            pData[6] = 0;
                            pData[1] = 0;
                            pData[4] = pElements[1];
                            pData[7] = 0;
                            pData[2] = 0;
                            pData[5] = 0;
                            pData[8] = pElements[2];
                        } else {
                            pData[0] = pElements[0];
                            pData[3] = pElements[3];
                            pData[6] = pElements[6];
                            pData[1] = pElements[1];
                            pData[4] = pElements[4];
                            pData[7] = pElements[7];
                            pData[2] = pElements[2];
                            pData[5] = pElements[5];
                            pData[8] = pElements[8];
                        }
                    }
                } else if (nArgumentsLength == 3) {
                    if (isFloat(arguments[0])) {
                        pData[0] = arguments[0];
                        pData[3] = 0;
                        pData[6] = 0;
                        pData[1] = 0;
                        pData[4] = arguments[1];
                        pData[7] = 0;
                        pData[2] = 0;
                        pData[5] = 0;
                        pData[8] = arguments[2];
                    } else {
                        var pData1, pData2, pData3;
                        if (arguments[0] instanceof Vec3) {
                            var v3fVec1 = arguments[0];
                            var v3fVec2 = arguments[1];
                            var v3fVec3 = arguments[2];
                            pData[0] = v3fVec1.x;
                            pData[3] = v3fVec2.x;
                            pData[6] = v3fVec3.x;
                            pData[1] = v3fVec1.y;
                            pData[4] = v3fVec2.y;
                            pData[7] = v3fVec3.y;
                            pData[2] = v3fVec1.z;
                            pData[5] = v3fVec2.z;
                            pData[8] = v3fVec3.z;
                        } else {
                            var v3fVec1 = arguments[0];
                            var v3fVec2 = arguments[1];
                            var v3fVec3 = arguments[2];
                            pData[0] = v3fVec1[0];
                            pData[3] = v3fVec2[0];
                            pData[6] = v3fVec3[0];
                            pData[1] = v3fVec1[1];
                            pData[4] = v3fVec2[1];
                            pData[7] = v3fVec3[1];
                            pData[2] = v3fVec1[2];
                            pData[5] = v3fVec2[2];
                            pData[8] = v3fVec3[2];
                        }
                    }
                } else if (nArgumentsLength == 9) {
                    pData[0] = arguments[0];
                    pData[3] = arguments[3];
                    pData[6] = arguments[6];
                    pData[1] = arguments[1];
                    pData[4] = arguments[4];
                    pData[7] = arguments[7];
                    pData[2] = arguments[2];
                    pData[5] = arguments[5];
                    pData[8] = arguments[8];
                }
                return this;
            };
            Mat3.prototype.identity = function () {
                var pData = this.data;
                pData[0] = 1.;
                pData[3] = 0.;
                pData[6] = 0.;
                pData[1] = 0.;
                pData[4] = 1.;
                pData[7] = 0.;
                pData[2] = 0.;
                pData[5] = 0.;
                pData[8] = 1.;
                return this;
            };
            Mat3.prototype.add = function (m3fMat, m3fDestination) {
                if (!isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData1[0] + pData2[0];
                pDataDestination[3] = pData1[3] + pData2[3];
                pDataDestination[6] = pData1[6] + pData2[6];
                pDataDestination[1] = pData1[1] + pData2[1];
                pDataDestination[4] = pData1[4] + pData2[4];
                pDataDestination[7] = pData1[7] + pData2[7];
                pDataDestination[2] = pData1[2] + pData2[2];
                pDataDestination[5] = pData1[5] + pData2[5];
                pDataDestination[8] = pData1[8] + pData2[8];
                return m3fDestination;
            };
            Mat3.prototype.subtract = function (m3fMat, m3fDestination) {
                if (!isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData1[0] - pData2[0];
                pDataDestination[3] = pData1[3] - pData2[3];
                pDataDestination[6] = pData1[6] - pData2[6];
                pDataDestination[1] = pData1[1] - pData2[1];
                pDataDestination[4] = pData1[4] - pData2[4];
                pDataDestination[7] = pData1[7] - pData2[7];
                pDataDestination[2] = pData1[2] - pData2[2];
                pDataDestination[5] = pData1[5] - pData2[5];
                pDataDestination[8] = pData1[8] - pData2[8];
                return m3fDestination;
            };
            Mat3.prototype.multiply = function (m3fMat, m3fDestination) {
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                if (!isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pDataDestination = m3fDestination.data;
                var a11 = pData1[0], a12 = pData1[3], a13 = pData1[6];
                var a21 = pData1[1], a22 = pData1[4], a23 = pData1[7];
                var a31 = pData1[2], a32 = pData1[5], a33 = pData1[8];
                var b11 = pData2[0], b12 = pData2[3], b13 = pData2[6];
                var b21 = pData2[1], b22 = pData2[4], b23 = pData2[7];
                var b31 = pData2[2], b32 = pData2[5], b33 = pData2[8];
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31;
                pDataDestination[3] = a11 * b12 + a12 * b22 + a13 * b32;
                pDataDestination[6] = a11 * b13 + a12 * b23 + a13 * b33;
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31;
                pDataDestination[4] = a21 * b12 + a22 * b22 + a23 * b32;
                pDataDestination[7] = a21 * b13 + a22 * b23 + a23 * b33;
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31;
                pDataDestination[5] = a31 * b12 + a32 * b22 + a33 * b32;
                pDataDestination[8] = a31 * b13 + a32 * b23 + a33 * b33;
                return m3fDestination;
            };
            Mat3.prototype.multiplyVec3 = function (v3fVec, v3fDestination) {
                var pData = this.data;
                if (!isDef(v3fDestination)) {
                    v3fDestination = v3fVec;
                }
                var x = v3fVec.x, y = v3fVec.y, z = v3fVec.z;
                v3fDestination.x = pData[0] * x + pData[3] * y + pData[6] * z;
                v3fDestination.y = pData[1] * x + pData[4] * y + pData[7] * z;
                v3fDestination.z = pData[2] * x + pData[5] * y + pData[8] * z;
                return v3fDestination;
            };
            Mat3.prototype.transpose = function (m3fDestination) {
                var pData = this.data;
                if (!isDef(m3fDestination)) {
                    var a12 = pData[3], a13 = pData[6], a23 = pData[7];
                    pData[3] = pData[1];
                    pData[6] = pData[2];
                    pData[1] = a12;
                    pData[7] = pData[5];
                    pData[2] = a13;
                    pData[5] = a23;
                    return this;
                }
                var pDataDestination = m3fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[3] = pData[1];
                pDataDestination[6] = pData[2];
                pDataDestination[1] = pData[3];
                pDataDestination[4] = pData[4];
                pDataDestination[7] = pData[5];
                pDataDestination[2] = pData[6];
                pDataDestination[5] = pData[7];
                pDataDestination[8] = pData[8];
                return m3fDestination;
            };
            Mat3.prototype.determinant = function () {
                var pData = this.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                return a11 * (a22 * a33 - a23 * a32) - a12 * (a21 * a33 - a23 * a31) + a13 * (a21 * a32 - a22 * a31);
            };
            Mat3.prototype.inverse = function (m3fDestination) {
                if (!isDef(m3fDestination)) {
                    m3fDestination = this;
                }
                var pData = this.data;
                var pDataDestination = m3fDestination.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                var A11 = a22 * a33 - a23 * a32;
                var A12 = a21 * a33 - a23 * a31;
                var A13 = a21 * a32 - a22 * a31;
                var A21 = a12 * a33 - a13 * a32;
                var A22 = a11 * a33 - a13 * a31;
                var A23 = a11 * a32 - a12 * a31;
                var A31 = a12 * a23 - a13 * a22;
                var A32 = a11 * a23 - a13 * a21;
                var A33 = a11 * a22 - a12 * a21;
                var fDeterminant = a11 * A11 - a12 * A12 + a13 * A13;
                if (fDeterminant == 0.) {
 {
                        logger.setSourceLocation("Mat3.ts", 445);
                        logger.error("обращение матрицы с нулевым детеминантом:\n", this.toString());
                    }
                    ;
                    return m3fDestination.set(1.);
                }
                var fInverseDeterminant = 1. / fDeterminant;
                pDataDestination[0] = A11 * fInverseDeterminant;
                pDataDestination[3] = -A21 * fInverseDeterminant;
                pDataDestination[6] = A31 * fInverseDeterminant;
                pDataDestination[1] = -A12 * fInverseDeterminant;
                pDataDestination[4] = A22 * fInverseDeterminant;
                pDataDestination[7] = -A32 * fInverseDeterminant;
                pDataDestination[2] = A13 * fInverseDeterminant;
                pDataDestination[5] = -A23 * fInverseDeterminant;
                pDataDestination[8] = A33 * fInverseDeterminant;
                return m3fDestination;
            };
            Mat3.prototype.isEqual = function (m3fMat, fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                var pData1 = this.data;
                var pData2 = m3fMat.data;
                if (fEps == 0) {
                    if (pData1[0] != pData2[0] || pData1[3] != pData2[3] || pData1[6] != pData2[6] || pData1[1] != pData2[1] || pData1[4] != pData2[4] || pData1[7] != pData2[7] || pData1[2] != pData2[2] || pData1[5] != pData2[5] || pData1[8] != pData2[8]) {
                        return false;
                    }
                } else {
                    if (Math.abs(pData1[0] - pData2[0]) > fEps || Math.abs(pData1[3] - pData2[3]) > fEps || Math.abs(pData1[6] - pData2[6]) > fEps || Math.abs(pData1[1] - pData2[1]) > fEps || Math.abs(pData1[4] - pData2[4]) > fEps || Math.abs(pData1[7] - pData2[7]) > fEps || Math.abs(pData1[2] - pData2[2]) > fEps || Math.abs(pData1[5] - pData2[5]) > fEps || Math.abs(pData1[8] - pData2[8]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat3.prototype.isDiagonal = function (fEps) {
                if (typeof fEps === "undefined") { fEps = 0.; }
                var pData = this.data;
                if (fEps == 0) {
                    if (pData[3] != 0 || pData[6] != 0 || pData[1] != 0 || pData[7] != 0 || pData[2] != 0 || pData[5] != 0) {
                        return false;
                    }
                } else {
                    if (Math.abs(pData[3]) > fEps || Math.abs(pData[6]) > fEps || Math.abs(pData[1]) > fEps || Math.abs(pData[7]) > fEps || Math.abs(pData[2]) > fEps || Math.abs(pData[5]) > fEps) {
                        return false;
                    }
                }
                return true;
            };
            Mat3.prototype.toMat4 = function (m4fDestination) {
                if (!isDef(m4fDestination)) {
                    m4fDestination = new Mat4();
                }
                var pData = this.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData[0];
                pDataDestination[4] = pData[3];
                pDataDestination[8] = pData[6];
                pDataDestination[12] = 0;
                pDataDestination[1] = pData[1];
                pDataDestination[5] = pData[4];
                pDataDestination[9] = pData[7];
                pDataDestination[13] = 0;
                pDataDestination[2] = pData[2];
                pDataDestination[6] = pData[5];
                pDataDestination[10] = pData[8];
                pDataDestination[14] = 0;
                pDataDestination[3] = 0;
                pDataDestination[7] = 0;
                pDataDestination[11] = 0;
                pDataDestination[15] = 1;
                return m4fDestination;
            };
            Mat3.prototype.toQuat4 = function (q4fDestination) {
                if (!isDef(q4fDestination)) {
                    q4fDestination = new Quat4();
                }
                var pData = this.data;
                var a11 = pData[0], a12 = pData[3], a13 = pData[6];
                var a21 = pData[1], a22 = pData[4], a23 = pData[7];
                var a31 = pData[2], a32 = pData[5], a33 = pData[8];
                var x2 = ((a11 - a22 - a33) + 1) / 4;
                var y2 = ((a22 - a11 - a33) + 1) / 4;
                var z2 = ((a33 - a11 - a22) + 1) / 4;
                var w2 = ((a11 + a22 + a33) + 1) / 4;
                var fMax = Math.max(x2, Math.max(y2, Math.max(z2, w2)));
                if (fMax == x2) {
                    var x = Math.sqrt(x2);
                    q4fDestination.x = x;
                    q4fDestination.y = (a21 + a12) / 4 / x;
                    q4fDestination.z = (a31 + a13) / 4 / x;
                    q4fDestination.w = (a32 - a23) / 4 / x;
                } else if (fMax == y2) {
                    var y = Math.sqrt(y2);
                    q4fDestination.x = (a21 + a12) / 4 / y;
                    q4fDestination.y = y;
                    q4fDestination.z = (a32 + a23) / 4 / y;
                    q4fDestination.w = (a13 - a31) / 4 / y;
                } else if (fMax == z2) {
                    var z = Math.sqrt(z2);
                    q4fDestination.x = (a31 + a13) / 4 / z;
                    q4fDestination.y = (a32 + a23) / 4 / z;
                    q4fDestination.z = z;
                    q4fDestination.w = (a21 - a12) / 4 / z;
                } else {
                    var w = Math.sqrt(w2);
                    q4fDestination.x = (a32 - a23) / 4 / w;
                    q4fDestination.y = (a13 - a31) / 4 / w;
                    q4fDestination.z = (a21 - a12) / 4 / w;
                    q4fDestination.w = w;
                }
                return q4fDestination;
            };
            Mat3.prototype.toString = function () {
                var pData = this.data;
                return '[' + pData[0] + ', ' + pData[3] + ', ' + pData[6] + ',\n' + +pData[1] + ', ' + pData[4] + ', ' + pData[7] + ',\n' + +pData[2] + ', ' + pData[5] + ', ' + pData[8] + ']';
            };
            Mat3.prototype.decompose = function (q4fRotation, v3fScale) {
                var m3fRotScale = this;
                var m3fRotScaleTransposed = this.transpose(mat3());
                var isRotScale = true;
                var m3fScaleRot = null, m3fScaleRotTransposed = null;
                var scaleSign = (m3fRotScale.determinant() >= 0.) ? 1 : -1;
                var m3fResult = mat3();
                m3fRotScaleTransposed.multiply(m3fRotScale, m3fResult);
                if (!m3fResult.isDiagonal(1e-4)) {
                    isRotScale = false;
                    m3fScaleRot = m3fRotScale;
                    m3fScaleRotTransposed = m3fRotScaleTransposed;
                    m3fScaleRot.multiply(m3fScaleRotTransposed, m3fResult);
                }
                var pResultData = m3fResult.data;
                var x = sqrt(pResultData[0]);
                var y = sqrt(pResultData[4]) * scaleSign;
                var z = sqrt(pResultData[8]);
                v3fScale.x = x;
                v3fScale.y = y;
                v3fScale.z = z;
                var m3fInverseScale = mat3(1. / x, 1. / y, 1. / z);
                if (isRotScale) {
                    m3fRotScale.multiply(m3fInverseScale, mat3()).toQuat4(q4fRotation);
                    return true;
                } else {
                    m3fInverseScale.multiply(m3fScaleRot, mat3()).toQuat4(q4fRotation);
 {
                        logger.setSourceLocation("Mat3.ts", 674);
                        logger.assert(false, "порядок умножения scale rot в данный момент не поддерживается");
                    }
                    ;
                    return false;
                }
            };
            Mat3.prototype.row = function (iRow, v3fDestination) {
                if (!isDef(v3fDestination)) {
                    v3fDestination = new Vec3();
                }
                var pData = this.data;
                switch(iRow) {
                    case 1:
                        v3fDestination.x = pData[0];
                        v3fDestination.y = pData[3];
                        v3fDestination.z = pData[6];
                        break;
                    case 2:
                        v3fDestination.x = pData[1];
                        v3fDestination.y = pData[4];
                        v3fDestination.z = pData[7];
                        break;
                    case 3:
                        v3fDestination.x = pData[2];
                        v3fDestination.y = pData[5];
                        v3fDestination.z = pData[8];
                        break;
                }
                return v3fDestination;
            };
            Mat3.prototype.column = function (iColumn, v3fDestination) {
                if (!isDef(v3fDestination)) {
                    v3fDestination = new Vec3();
                }
                var pData = this.data;
                switch(iColumn) {
                    case 1:
                        v3fDestination.x = pData[0];
                        v3fDestination.y = pData[1];
                        v3fDestination.z = pData[2];
                        break;
                    case 2:
                        v3fDestination.x = pData[3];
                        v3fDestination.y = pData[4];
                        v3fDestination.z = pData[5];
                        break;
                    case 3:
                        v3fDestination.x = pData[6];
                        v3fDestination.y = pData[7];
                        v3fDestination.z = pData[8];
                        break;
                }
                return v3fDestination;
            };
            Mat3.fromYawPitchRoll = function fromYawPitchRoll(fYaw, fPitch, fRoll, m3fDestination) {
                if (arguments.length <= 2) {
                    var v3fVec = arguments[0];
                    fYaw = v3fVec.x;
                    fPitch = v3fVec.y;
                    fRoll = v3fVec.z;
                    m3fDestination = arguments[1];
                }
                if (!isDef(m3fDestination)) {
                    m3fDestination = new Mat3();
                }
                var pDataDestination = m3fDestination.data;
                var fSin1 = Math.sin(fYaw);
                var fSin2 = Math.sin(fPitch);
                var fSin3 = Math.sin(fRoll);
                var fCos1 = Math.cos(fYaw);
                var fCos2 = Math.cos(fPitch);
                var fCos3 = Math.cos(fRoll);
                pDataDestination[0] = fCos1 * fCos3 + fSin1 * fSin2 * fSin3;
                pDataDestination[3] = fCos3 * fSin1 * fSin2 - fCos1 * fSin3;
                pDataDestination[6] = fCos2 * fSin1;
                pDataDestination[1] = fCos2 * fSin3;
                pDataDestination[4] = fCos2 * fCos3;
                pDataDestination[7] = -fSin2;
                pDataDestination[2] = fCos1 * fSin2 * fSin3 - fCos3 * fSin1;
                pDataDestination[5] = fSin1 * fSin3 + fCos1 * fCos3 * fSin2;
                pDataDestination[8] = fCos1 * fCos2;
                return m3fDestination;
            };
            Mat3.fromXYZ = function fromXYZ(fX, fY, fZ, m3fDestination) {
                if (arguments.length <= 2) {
                    var v3fVec = arguments[0];
                    return Mat3.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
                } else {
                    var fX = arguments[0];
                    var fY = arguments[1];
                    var fZ = arguments[2];
                    return Mat3.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
                }
            };
            Object.defineProperty(Mat3, "stackCeil", {
                get: function () {
                    Mat3.stackPosition = Mat3.stackPosition === Mat3.stackSize - 1 ? 0 : Mat3.stackPosition;
                    return Mat3.stack[Mat3.stackPosition++];
                }
,
                enumerable: true,
                configurable: true
            });
            Mat3.stackSize = 100;
            Mat3.stackPosition = 0;
            Mat3.stack = (function () {
                var pStack = new Array(Mat3.stackSize);
                for(var i = 0; i < Mat3.stackSize; i++) {
                    pStack[i] = new Mat3();
                }
                return pStack;
            })();
            return Mat3;
        })();
        math.Mat3 = Mat3;        
        ;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
;
;
var akra;
(function (akra) {
    (function (math) {
        var Mat4 = (function () {
            function Mat4(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9, fValue10, fValue11, fValue12, fValue13, fValue14, fValue15, fValue16) {
                this.inline = multiplyLeft(m4fMat, IMat4, m4fDestination ?  : IMat4);
                this.IMat4 = {
                    if: (!isDef(m4fDestination))
                };
                var nArgumentsLength = arguments.length;
                if (nArgumentsLength === 2) {
                    if (isBoolean(arguments[1])) {
                        if (arguments[1]) {
                            this.data = arguments[0];
                        } else {
                            this.data = new Float32Array(16);
                            this.set(arguments[0]);
                        }
                    } else {
                        this.data = new Float32Array(16);
                        this.set(arguments[0], arguments[1]);
                    }
                } else {
                    this.data = new Float32Array(16);
                    switch(nArgumentsLength) {
                        case 1:
                            if (arguments[0] instanceof Mat3) {
                                this.set(arguments[0], vec3(0.));
                            } else {
                                this.set(arguments[0]);
                            }
                            break;
                        case 4:
                            this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                            break;
                        case 16:
                            this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
                            break;
                        default:
                            break;
                    }
                }
            }
            Mat4.prototype.set = function (fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9, fValue10, fValue11, fValue12, fValue13, fValue14, fValue15, fValue16) {
                var nArgumentsLength = arguments.length;
                var pData = this.data;
                if (nArgumentsLength === 0) {
                    pData[0] = pData[4] = pData[8] = pData[12] = pData[1] = pData[5] = pData[9] = pData[13] = pData[2] = pData[6] = pData[10] = pData[14] = pData[3] = pData[7] = pData[11] = pData[15] = 0.;
                    return this;
                }
                if (nArgumentsLength === 1) {
                    if (isFloat(arguments[0])) {
                        var fValue = arguments[0];
                        pData[0] = fValue;
                        pData[4] = 0.;
                        pData[8] = 0.;
                        pData[12] = 0.;
                        pData[1] = 0.;
                        pData[5] = fValue;
                        pData[9] = 0.;
                        pData[13] = 0.;
                        pData[2] = 0.;
                        pData[6] = 0.;
                        pData[10] = fValue;
                        pData[14] = 0.;
                        pData[3] = 0.;
                        pData[7] = 0.;
                        pData[11] = 0.;
                        pData[15] = fValue;
                    } else if (arguments[0] instanceof Vec4) {
                        var v4fVec = arguments[0];
                        pData[0] = v4fVec.x;
                        pData[4] = 0.;
                        pData[8] = 0.;
                        pData[12] = 0.;
                        pData[1] = 0.;
                        pData[5] = v4fVec.y;
                        pData[9] = 0.;
                        pData[13] = 0.;
                        pData[2] = 0.;
                        pData[6] = 0.;
                        pData[10] = v4fVec.z;
                        pData[14] = 0.;
                        pData[3] = 0.;
                        pData[7] = 0.;
                        pData[11] = 0.;
                        pData[15] = v4fVec.w;
                    } else if (isDef(arguments[0].data)) {
                        var pMatrixData = arguments[0].data;
                        if (pMatrixData.length == 16) {
                            pData.set(pMatrixData);
                        } else {
                            pData[0] = pMatrixData[0];
                            pData[4] = pMatrixData[3];
                            pData[8] = pMatrixData[6];
                            pData[1] = pMatrixData[1];
                            pData[5] = pMatrixData[4];
                            pData[9] = pMatrixData[7];
                            pData[2] = pMatrixData[2];
                            pData[6] = pMatrixData[5];
                            pData[10] = pMatrixData[8];
                            pData[3] = 0.;
                            pData[7] = 0.;
                            pData[11] = 0.;
                            pData[15] = 1.;
                        }
                    } else {
                        var pArray = arguments[0];
                        if (pArray.length === 4) {
                            pData[0] = pArray[0];
                            pData[4] = 0.;
                            pData[8] = 0.;
                            pData[12] = 0.;
                            pData[1] = 0.;
                            pData[5] = pArray[1];
                            pData[9] = 0.;
                            pData[13] = 0.;
                            pData[2] = 0.;
                            pData[6] = 0.;
                            pData[10] = pArray[2];
                            pData[14] = 0.;
                            pData[3] = 0.;
                            pData[7] = 0.;
                            pData[11] = 0.;
                            pData[15] = pArray[3];
                        } else {
                            pData[0] = pArray[0];
                            pData[4] = pArray[4];
                            pData[8] = pArray[8];
                            pData[12] = pArray[12];
                            pData[1] = pArray[1];
                            pData[5] = pArray[5];
                            pData[9] = pArray[9];
                            pData[13] = pArray[13];
                            pData[2] = pArray[2];
                            pData[6] = pArray[6];
                            pData[10] = pArray[10];
                            pData[14] = pArray[14];
                            pData[3] = pArray[3];
                            pData[7] = pArray[7];
                            pData[11] = pArray[11];
                            pData[15] = pArray[15];
                        }
                    }
                } else if (nArgumentsLength == 2) {
                    var pMatrixData = arguments[0];
                    var v3fTranslation = arguments[1];
                    pData[0] = pMatrixData[0];
                    pData[4] = pMatrixData[3];
                    pData[8] = pMatrixData[6];
                    pData[12] = v3fTranslation.x;
                    pData[1] = pMatrixData[1];
                    pData[5] = pMatrixData[4];
                    pData[9] = pMatrixData[7];
                    pData[13] = v3fTranslation.y;
                    pData[2] = pMatrixData[2];
                    pData[6] = pMatrixData[5];
                    pData[10] = pMatrixData[8];
                    pData[14] = v3fTranslation.z;
                    pData[3] = 0.;
                    pData[7] = 0.;
                    pData[11] = 0.;
                    pData[15] = 1.;
                } else if (nArgumentsLength == 4) {
                    if (isFloat(arguments[0])) {
                        pData[0] = arguments[0];
                        pData[4] = 0;
                        pData[8] = 0;
                        pData[12] = 0;
                        pData[1] = 0;
                        pData[5] = arguments[1];
                        pData[9] = 0;
                        pData[13] = 0;
                        pData[2] = 0;
                        pData[6] = 0;
                        pData[10] = arguments[2];
                        pData[14] = 0;
                        pData[3] = 0;
                        pData[7] = 0;
                        pData[11] = 0;
                        pData[15] = arguments[3];
                    } else if (arguments[0] instanceof Vec4) {
                        var v4fColumn1 = arguments[0];
                        var v4fColumn2 = arguments[1];
                        var v4fColumn3 = arguments[2];
                        var v4fColumn4 = arguments[3];
                        pData[0] = v4fColumn1.x;
                        pData[4] = v4fColumn2.x;
                        pData[8] = v4fColumn3.x;
                        pData[12] = v4fColumn4.x;
                        pData[1] = v4fColumn1.y;
                        pData[5] = v4fColumn2.y;
                        pData[9] = v4fColumn3.y;
                        pData[13] = v4fColumn4.y;
                        pData[2] = v4fColumn1.z;
                        pData[6] = v4fColumn2.z;
                        pData[10] = v4fColumn3.z;
                        pData[14] = v4fColumn4.z;
                        pData[3] = v4fColumn1.w;
                        pData[7] = v4fColumn2.w;
                        pData[11] = v4fColumn3.w;
                        pData[15] = v4fColumn4.w;
                    } else {
                        var v4fColumn1 = arguments[0];
                        var v4fColumn2 = arguments[1];
                        var v4fColumn3 = arguments[2];
                        var v4fColumn4 = arguments[3];
                        pData[0] = v4fColumn1[0];
                        pData[4] = v4fColumn2[0];
                        pData[8] = v4fColumn3[0];
                        pData[12] = v4fColumn4[0];
                        pData[1] = v4fColumn1[1];
                        pData[5] = v4fColumn2[1];
                        pData[9] = v4fColumn3[1];
                        pData[13] = v4fColumn4[1];
                        pData[2] = v4fColumn1[2];
                        pData[6] = v4fColumn2[2];
                        pData[10] = v4fColumn3[2];
                        pData[14] = v4fColumn4[2];
                        pData[3] = v4fColumn1[3];
                        pData[7] = v4fColumn2[3];
                        pData[11] = v4fColumn3[3];
                        pData[15] = v4fColumn4[3];
                    }
                } else {
                    pData[0] = arguments[0];
                    pData[4] = arguments[4];
                    pData[8] = arguments[8];
                    pData[12] = arguments[12];
                    pData[1] = arguments[1];
                    pData[5] = arguments[5];
                    pData[9] = arguments[9];
                    pData[13] = arguments[13];
                    pData[2] = arguments[2];
                    pData[6] = arguments[6];
                    pData[10] = arguments[10];
                    pData[14] = arguments[14];
                    pData[3] = arguments[3];
                    pData[7] = arguments[7];
                    pData[11] = arguments[11];
                    pData[15] = arguments[15];
                }
                return this;
            };
            Mat4.prototype.identity = function () {
                var pData = this.data;
                pData[0] = 1.;
                pData[4] = 0.;
                pData[8] = 0.;
                pData[12] = 0.;
                pData[1] = 0.;
                pData[5] = 1.;
                pData[9] = 0.;
                pData[13] = 0.;
                pData[2] = 0.;
                pData[6] = 0.;
                pData[10] = 1.;
                pData[14] = 0.;
                pData[3] = 0.;
                pData[7] = 0.;
                pData[11] = 0.;
                pData[15] = 1.;
                return this;
            };
            Mat4.prototype.add = function (m4fMat, m4fDestination) {
                if (!isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData1[0] + pData2[0];
                pDataDestination[4] = pData1[4] + pData2[4];
                pDataDestination[8] = pData1[8] + pData2[8];
                pDataDestination[12] = pData1[12] + pData2[12];
                pDataDestination[1] = pData1[1] + pData2[1];
                pDataDestination[5] = pData1[5] + pData2[5];
                pDataDestination[9] = pData1[9] + pData2[9];
                pDataDestination[13] = pData1[13] + pData2[13];
                pDataDestination[2] = pData1[2] + pData2[2];
                pDataDestination[6] = pData1[6] + pData2[6];
                pDataDestination[10] = pData1[10] + pData2[10];
                pDataDestination[14] = pData1[14] + pData2[14];
                pDataDestination[3] = pData1[3] + pData2[3];
                pDataDestination[7] = pData1[7] + pData2[7];
                pDataDestination[11] = pData1[11] + pData2[11];
                pDataDestination[15] = pData1[15] + pData2[15];
                return m4fDestination;
            };
            Mat4.prototype.subtract = function (m4fMat, m4fDestination) {
                if (!isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                pDataDestination[0] = pData1[0] - pData2[0];
                pDataDestination[4] = pData1[4] - pData2[4];
                pDataDestination[8] = pData1[8] - pData2[8];
                pDataDestination[12] = pData1[12] - pData2[12];
                pDataDestination[1] = pData1[1] - pData2[1];
                pDataDestination[5] = pData1[5] - pData2[5];
                pDataDestination[9] = pData1[9] - pData2[9];
                pDataDestination[13] = pData1[13] - pData2[13];
                pDataDestination[2] = pData1[2] - pData2[2];
                pDataDestination[6] = pData1[6] - pData2[6];
                pDataDestination[10] = pData1[10] - pData2[10];
                pDataDestination[14] = pData1[14] - pData2[14];
                pDataDestination[3] = pData1[3] - pData2[3];
                pDataDestination[7] = pData1[7] - pData2[7];
                pDataDestination[11] = pData1[11] - pData2[11];
                pDataDestination[15] = pData1[15] - pData2[15];
                return m4fDestination;
            };
            Mat4.prototype.multiply = function (m4fMat, m4fDestination) {
                if (!isDef(m4fDestination)) {
                    m4fDestination = this;
                }
                var pData1 = this.data;
                var pData2 = m4fMat.data;
                var pDataDestination = m4fDestination.data;
                var a11 = pData1[0], a12 = pData1[4], a13 = pData1[8], a14 = pData1[12];
                var a21 = pData1[1], a22 = pData1[5], a23 = pData1[9], a24 = pData1[13];
                var a31 = pData1[2], a32 = pData1[6], a33 = pData1[10], a34 = pData1[14];
                var a41 = pData1[3], a42 = pData1[7], a43 = pData1[11], a44 = pData1[15];
                var b11 = pData2[0], b12 = pData2[4], b13 = pData2[8], b14 = pData2[12];
                var b21 = pData2[1], b22 = pData2[5], b23 = pData2[9], b24 = pData2[13];
                var b31 = pData2[2], b32 = pData2[6], b33 = pData2[10], b34 = pData2[14];
                var b41 = pData2[3], b42 = pData2[7], b43 = pData2[11], b44 = pData2[15];
                pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
                pDataDestination[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
                pDataDestination[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
                pDataDestination[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
                pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
                pDataDestination[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
                pDataDestination[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
                pDataDestination[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
                pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
                pDataDestination[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
                pDataDestination[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
                pDataDestination[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
                pDataDestination[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
                pDataDestination[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
                pDataDestination[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
                pDataDestination[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
                return m4fDestination;
            };
            return Mat4;
        })();
        math.Mat4 = Mat4;        
 {
            m4fDestination = this;
        }
        return m4fMat.multiply(this, m4fDestination);
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
;
multiplyVec4(v4fVec, IVec4, v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = v4fVec;
    }
    var pData = this.data;
    var x = v4fVec.x, y = v4fVec.y, z = v4fVec.z, w = v4fVec.w;
    v4fDestination.x = pData[0] * x + pData[4] * y + pData[8] * z + pData[12] * w;
    v4fDestination.y = pData[1] * x + pData[5] * y + pData[9] * z + pData[13] * w;
    v4fDestination.z = pData[2] * x + pData[6] * y + pData[10] * z + pData[14] * w;
    v4fDestination.w = pData[3] * x + pData[7] * y + pData[11] * z + pData[15] * w;
    return v4fDestination;
}
;
transpose(m4fDestination ?  : IMat4);
IMat4;
 {
    var pData = this.data;
    if (!isDef(m4fDestination)) {
        var a12 = pData[4], a13 = pData[8], a14 = pData[12];
        var a23 = pData[9], a24 = pData[13];
        var a34 = pData[14];
        pData[4] = pData[1];
        pData[8] = pData[2];
        pData[12] = pData[3];
        pData[1] = a12;
        pData[9] = pData[6];
        pData[13] = pData[7];
        pData[2] = a13;
        pData[6] = a23;
        pData[14] = pData[11];
        pData[3] = a14;
        pData[7] = a24;
        pData[11] = a34;
        return this;
    }
    var pDataDestination = m4fDestination.data;
    pDataDestination[0] = pData[0];
    pDataDestination[4] = pData[1];
    pDataDestination[8] = pData[2];
    pDataDestination[12] = pData[3];
    pDataDestination[1] = pData[4];
    pDataDestination[5] = pData[5];
    pDataDestination[9] = pData[6];
    pDataDestination[13] = pData[7];
    pDataDestination[2] = pData[8];
    pDataDestination[6] = pData[9];
    pDataDestination[10] = pData[10];
    pDataDestination[14] = pData[11];
    pDataDestination[3] = pData[12];
    pDataDestination[7] = pData[13];
    pDataDestination[11] = pData[14];
    pDataDestination[15] = pData[15];
    return m4fDestination;
}
;
determinant();
number;
 {
    var pData = this.data;
    var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
    var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
    var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
    var a41 = pData[3], a42 = pData[7], a43 = pData[11], a44 = pData[15];
    return a41 * a32 * a23 * a14 - a31 * a42 * a23 * a14 - a41 * a22 * a33 * a14 + a21 * a42 * a33 * a14 + a31 * a22 * a43 * a14 - a21 * a32 * a43 * a14 - a41 * a32 * a13 * a24 + a31 * a42 * a13 * a24 + a41 * a12 * a33 * a24 - a11 * a42 * a33 * a24 - a31 * a12 * a43 * a24 + a11 * a32 * a43 * a24 + a41 * a22 * a13 * a34 - a21 * a42 * a13 * a34 - a41 * a12 * a23 * a34 + a11 * a42 * a23 * a34 + a21 * a12 * a43 * a34 - a11 * a22 * a43 * a34 - a31 * a22 * a13 * a44 + a21 * a32 * a13 * a44 + a31 * a12 * a23 * a44 - a11 * a32 * a23 * a44 - a21 * a12 * a33 * a44 + a11 * a22 * a33 * a44;
}
;
inverse(m4fDestination ?  : IMat4);
IMat4;
 {
    if (!isDef(m4fDestination)) {
        m4fDestination = this;
    }
    var pData = this.data;
    var pDataDestination = m4fDestination.data;
    var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
    var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
    var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
    var a41 = pData[3], a42 = pData[7], a43 = pData[11], a44 = pData[15];
    var b00 = a11 * a22 - a12 * a21;
    var b01 = a11 * a23 - a13 * a21;
    var b02 = a11 * a24 - a14 * a21;
    var b03 = a12 * a23 - a13 * a22;
    var b04 = a12 * a24 - a14 * a22;
    var b05 = a13 * a24 - a14 * a23;
    var b06 = a31 * a42 - a32 * a41;
    var b07 = a31 * a43 - a33 * a41;
    var b08 = a31 * a44 - a34 * a41;
    var b09 = a32 * a43 - a33 * a42;
    var b10 = a32 * a44 - a34 * a42;
    var b11 = a33 * a44 - a34 * a43;
    var fDeterminant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (fDeterminant === 0.) {
 {
            logger.setSourceLocation("Mat4.ts", 624);
            logger.assert(false, "обращение матрицы с нулевым детеминантом:\n" + this.toString());
        }
        ;
        return m4fDestination.set(1.);
    }
    var fInverseDeterminant = 1 / fDeterminant;
    pDataDestination[0] = (a22 * b11 - a23 * b10 + a24 * b09) * fInverseDeterminant;
    pDataDestination[4] = (-a12 * b11 + a13 * b10 - a14 * b09) * fInverseDeterminant;
    pDataDestination[8] = (a42 * b05 - a43 * b04 + a44 * b03) * fInverseDeterminant;
    pDataDestination[12] = (-a32 * b05 + a33 * b04 - a34 * b03) * fInverseDeterminant;
    pDataDestination[1] = (-a21 * b11 + a23 * b08 - a24 * b07) * fInverseDeterminant;
    pDataDestination[5] = (a11 * b11 - a13 * b08 + a14 * b07) * fInverseDeterminant;
    pDataDestination[9] = (-a41 * b05 + a43 * b02 - a44 * b01) * fInverseDeterminant;
    pDataDestination[13] = (a31 * b05 - a33 * b02 + a34 * b01) * fInverseDeterminant;
    pDataDestination[2] = (a21 * b10 - a22 * b08 + a24 * b06) * fInverseDeterminant;
    pDataDestination[6] = (-a11 * b10 + a12 * b08 - a14 * b06) * fInverseDeterminant;
    pDataDestination[10] = (a41 * b04 - a42 * b02 + a44 * b00) * fInverseDeterminant;
    pDataDestination[14] = (-a31 * b04 + a32 * b02 - a34 * b00) * fInverseDeterminant;
    pDataDestination[3] = (-a21 * b09 + a22 * b07 - a23 * b06) * fInverseDeterminant;
    pDataDestination[7] = (a11 * b09 - a12 * b07 + a13 * b06) * fInverseDeterminant;
    pDataDestination[11] = (-a41 * b03 + a42 * b01 - a43 * b00) * fInverseDeterminant;
    pDataDestination[15] = (a31 * b03 - a32 * b01 + a33 * b00) * fInverseDeterminant;
    return m4fDestination;
}
;
inline;
trace();
number;
 {
    var pData = this.data;
    return pData[0] + pData[5] + pData[10] + pData[15];
}
;
isEqual(m4fMat, IMat4, fEps, number = 0.);
bool;
 {
    var pData1 = this.data;
    var pData2 = m4fMat.data;
    if (fEps === 0.) {
        if (pData1[0] != pData2[0] || pData1[4] != pData2[4] || pData1[8] != pData2[8] || pData1[12] != pData2[12] || pData1[1] != pData2[1] || pData1[5] != pData2[5] || pData1[9] != pData2[9] || pData1[13] != pData2[13] || pData1[2] != pData2[2] || pData1[6] != pData2[6] || pData1[10] != pData2[10] || pData1[14] != pData2[14] || pData1[3] != pData2[3] || pData1[7] != pData2[7] || pData1[11] != pData2[11] || pData1[15] != pData2[15]) {
            return false;
        }
    } else {
        if (abs(pData1[0] - pData2[0]) > fEps || abs(pData1[4] - pData2[4]) > fEps || abs(pData1[8] - pData2[8]) > fEps || abs(pData1[12] - pData2[12]) > fEps || abs(pData1[1] - pData2[1]) > fEps || abs(pData1[5] - pData2[5]) > fEps || abs(pData1[9] - pData2[9]) > fEps || abs(pData1[13] - pData2[13]) > fEps || abs(pData1[2] - pData2[2]) > fEps || abs(pData1[6] - pData2[6]) > fEps || abs(pData1[10] - pData2[10]) > fEps || abs(pData1[14] - pData2[14]) > fEps || abs(pData1[3] - pData2[3]) > fEps || abs(pData1[7] - pData2[7]) > fEps || abs(pData1[11] - pData2[11]) > fEps || abs(pData1[15] - pData2[15]) > fEps) {
            return false;
        }
    }
    return true;
}
;
isDiagonal(fEps, number = 0.);
bool;
 {
    var pData = this.data;
    if (fEps === 0.) {
        if (pData[4] !== 0. || pData[8] !== 0. || pData[12] != 0. || pData[1] !== 0. || pData[9] !== 0. || pData[13] != 0. || pData[2] !== 0. || pData[6] !== 0. || pData[14] != 0. || pData[3] !== 0. || pData[7] !== 0. || pData[11] != 0.) {
            return false;
        }
    } else {
        if (abs(pData[4]) > fEps || abs(pData[8]) > fEps || abs(pData[12]) > fEps || abs(pData[1]) > fEps || abs(pData[9]) > fEps || abs(pData[13]) > fEps || abs(pData[2]) > fEps || abs(pData[6]) > fEps || abs(pData[14]) > fEps || abs(pData[3]) > fEps || abs(pData[7]) > fEps || abs(pData[11]) > fEps) {
            return false;
        }
    }
    return true;
}
;
toMat3(m3fDestination ?  : IMat3);
IMat3;
 {
    if (!isDef(m3fDestination)) {
        m3fDestination = new Mat3();
    }
    var pData = this.data;
    var pDataDestination = m3fDestination.data;
    pDataDestination[0] = pData[0];
    pDataDestination[3] = pData[4];
    pDataDestination[6] = pData[8];
    pDataDestination[1] = pData[1];
    pDataDestination[4] = pData[5];
    pDataDestination[7] = pData[9];
    pDataDestination[2] = pData[2];
    pDataDestination[5] = pData[6];
    pDataDestination[8] = pData[10];
    return m3fDestination;
}
;
toQuat4(q4fDestination ?  : IQuat4);
 {
    if (!isDef(q4fDestination)) {
        q4fDestination = new Quat4();
    }
    var pData = this.data;
    var a11 = pData[0], a12 = pData[4], a13 = pData[8];
    var a21 = pData[1], a22 = pData[5], a23 = pData[9];
    var a31 = pData[2], a32 = pData[6], a33 = pData[10];
    var x2 = ((a11 - a22 - a33) + 1.) / 4.;
    var y2 = ((a22 - a11 - a33) + 1.) / 4.;
    var z2 = ((a33 - a11 - a22) + 1.) / 4.;
    var w2 = ((a11 + a22 + a33) + 1.) / 4.;
    var fMax = max(x2, max(y2, max(z2, w2)));
    if (fMax == x2) {
        var x = sqrt(x2);
        q4fDestination.x = x;
        q4fDestination.y = (a21 + a12) / 4. / x;
        q4fDestination.z = (a31 + a13) / 4. / x;
        q4fDestination.w = (a32 - a23) / 4. / x;
    } else if (fMax == y2) {
        var y = sqrt(y2);
        q4fDestination.x = (a21 + a12) / 4. / y;
        q4fDestination.y = y;
        q4fDestination.z = (a32 + a23) / 4. / y;
        q4fDestination.w = (a13 - a31) / 4. / y;
    } else if (fMax == z2) {
        var z = sqrt(z2);
        q4fDestination.x = (a31 + a13) / 4. / z;
        q4fDestination.y = (a32 + a23) / 4. / z;
        q4fDestination.z = z;
        q4fDestination.w = (a21 - a12) / 4. / z;
    } else {
        var w = sqrt(w2);
        q4fDestination.x = (a32 - a23) / 4. / w;
        q4fDestination.y = (a13 - a31) / 4. / w;
        q4fDestination.z = (a21 - a12) / 4. / w;
        q4fDestination.w = w;
    }
    return q4fDestination;
}
;
toRotationMatrix(m4fDestination ?  : IMat4);
IMat4;
 {
    if (!isDef(m4fDestination)) {
        m4fDestination = new Mat4();
    }
    var pData = this.data;
    var pDataDestination = m4fDestination.data;
    pDataDestination[0] = pData[0];
    pDataDestination[4] = pData[4];
    pDataDestination[8] = pData[8];
    pDataDestination[12] = 0.;
    pDataDestination[1] = pData[1];
    pDataDestination[5] = pData[5];
    pDataDestination[9] = pData[9];
    pDataDestination[13] = 0.;
    pDataDestination[2] = pData[2];
    pDataDestination[6] = pData[6];
    pDataDestination[10] = pData[10];
    pDataDestination[14] = 0.;
    pDataDestination[3] = 0.;
    pDataDestination[7] = 0.;
    pDataDestination[11] = 0.;
    pDataDestination[15] = 1.;
    return m4fDestination;
}
;
toString();
string;
 {
    var pData = this.data;
    return '[' + pData[0] + ", " + pData[4] + ', ' + pData[8] + ', ' + pData[12] + ',\n' + pData[1] + ", " + pData[5] + ', ' + pData[9] + ', ' + pData[13] + ',\n' + pData[2] + ", " + pData[6] + ', ' + pData[10] + ', ' + pData[14] + ',\n' + pData[3] + ", " + pData[7] + ', ' + pData[11] + ', ' + pData[15] + ']';
}
;
rotateRight(fAngle, number, v3fAxis, IVec3, m4fDestination ?  : IMat4);
IMat4;
 {
    var pData = this.data;
    var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
    var fLength = Math.sqrt(x * x + y * y + z * z);
    if (fLength === 0.) {
 {
            logger.setSourceLocation("Mat4.ts", 860);
            logger.assert(false, "попытка вращения вокруг оси нулевой длины. Угол " + fAngle + ". Ось " + v3fAxis.toString());
        }
        ;
        if (isDef(m4fDestination)) {
            m4fDestination.set(this);
        } else {
            m4fDestination = this;
        }
        return m4fDestination;
    }
    var fInvLength = 1. / fLength;
    x *= fInvLength;
    y *= fInvLength;
    z *= fInvLength;
    var a11 = pData[0], a12 = pData[4], a13 = pData[8];
    var a21 = pData[1], a22 = pData[5], a23 = pData[9];
    var a31 = pData[2], a32 = pData[6], a33 = pData[10];
    var fSin = sin(fAngle);
    var fCos = cos(fAngle);
    var fTmp = 1. - fCos;
    var b11 = fCos + fTmp * x * x, b12 = fTmp * x * y - fSin * z, b13 = fTmp * x * z + fSin * y;
    var b21 = fTmp * y * z + fSin * z, b22 = fCos + fTmp * y * y, b23 = fTmp * y * z - fSin * x;
    var b31 = fTmp * z * x - fSin * y, b32 = fTmp * z * y + fSin * x, b33 = fCos + fTmp * z * z;
    if (!isDef(m4fDestination)) {
        pData[0] = a11 * b11 + a12 * b21 + a13 * b31;
        pData[4] = a11 * b12 + a12 * b22 + a13 * b32;
        pData[8] = a11 * b13 + a12 * b23 + a13 * b33;
        pData[1] = a21 * b11 + a22 * b21 + a23 * b31;
        pData[5] = a21 * b12 + a22 * b22 + a23 * b32;
        pData[9] = a21 * b13 + a22 * b23 + a23 * b33;
        pData[2] = a31 * b11 + a32 * b21 + a33 * b31;
        pData[6] = a31 * b12 + a32 * b22 + a33 * b32;
        pData[10] = a31 * b13 + a32 * b23 + a33 * b33;
        return this;
    }
    var pDataDestination = m4fDestination.data;
    pDataDestination[0] = a11 * b11 + a12 * b21 + a13 * b31;
    pDataDestination[4] = a11 * b12 + a12 * b22 + a13 * b32;
    pDataDestination[8] = a11 * b13 + a12 * b23 + a13 * b33;
    pDataDestination[12] = pData[12];
    pDataDestination[1] = a21 * b11 + a22 * b21 + a23 * b31;
    pDataDestination[5] = a21 * b12 + a22 * b22 + a23 * b32;
    pDataDestination[9] = a21 * b13 + a22 * b23 + a23 * b33;
    pDataDestination[13] = pData[13];
    pDataDestination[2] = a31 * b11 + a32 * b21 + a33 * b31;
    pDataDestination[6] = a31 * b12 + a32 * b22 + a33 * b32;
    pDataDestination[10] = a31 * b13 + a32 * b23 + a33 * b33;
    pDataDestination[14] = pData[14];
    pDataDestination[3] = pData[3];
    pDataDestination[7] = pData[7];
    pDataDestination[11] = pData[11];
    pDataDestination[15] = pData[15];
    return m4fDestination;
}
;
rotateLeft(fAngle, number, v3fAxis, IVec3, m4fDestination ?  : IMat4);
IMat4;
 {
    var pData = this.data;
    var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
    var fLength = Math.sqrt(x * x + y * y + z * z);
    if (fLength === 0.) {
 {
            logger.setSourceLocation("Mat4.ts", 938);
            logger.assert(false, "попытка вращения вокруг оси нулевой длины. Угол " + fAngle + ". Ось " + v3fAxis.toString());
        }
        ;
        if (isDef(m4fDestination)) {
            m4fDestination.set(this);
        } else {
            m4fDestination = this;
        }
        return m4fDestination;
    }
    var fInvLength = 1. / fLength;
    x *= fInvLength;
    y *= fInvLength;
    z *= fInvLength;
    var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
    var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
    var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
    var fSin = sin(fAngle);
    var fCos = cos(fAngle);
    var fTmp = 1. - fCos;
    var b11 = fCos + fTmp * x * x, b12 = fTmp * x * y - fSin * z, b13 = fTmp * x * z + fSin * y;
    var b21 = fTmp * y * z + fSin * z, b22 = fCos + fTmp * y * y, b23 = fTmp * y * z - fSin * x;
    var b31 = fTmp * z * x - fSin * y, b32 = fTmp * z * y + fSin * x, b33 = fCos + fTmp * z * z;
    if (!isDef(m4fDestination)) {
        pData[0] = b11 * a11 + b12 * a21 + b13 * a31;
        pData[4] = b11 * a12 + b12 * a22 + b13 * a32;
        pData[8] = b11 * a13 + b12 * a23 + b13 * a33;
        pData[12] = b11 * a14 + b12 * a24 + b13 * a34;
        pData[1] = b21 * a11 + b22 * a21 + b23 * a31;
        pData[5] = b21 * a12 + b22 * a22 + b23 * a32;
        pData[9] = b21 * a13 + b22 * a23 + b23 * a33;
        pData[13] = b21 * a14 + b22 * a24 + b23 * a34;
        pData[2] = b31 * a11 + b32 * a21 + b33 * a31;
        pData[6] = b31 * a12 + b32 * a22 + b33 * a32;
        pData[10] = b31 * a13 + b32 * a23 + b33 * a33;
        pData[14] = b31 * a14 + b32 * a24 + b33 * a34;
        return this;
    }
    var pDataDestination = m4fDestination.data;
    pDataDestination[0] = b11 * a11 + b12 * a21 + b13 * a31;
    pDataDestination[4] = b11 * a12 + b12 * a22 + b13 * a32;
    pDataDestination[8] = b11 * a13 + b12 * a23 + b13 * a33;
    pDataDestination[12] = b11 * a14 + b12 * a24 + b13 * a34;
    pDataDestination[1] = b21 * a11 + b22 * a21 + b23 * a31;
    pDataDestination[5] = b21 * a12 + b22 * a22 + b23 * a32;
    pDataDestination[9] = b21 * a13 + b22 * a23 + b23 * a33;
    pDataDestination[13] = b21 * a14 + b22 * a24 + b23 * a34;
    pDataDestination[2] = b31 * a11 + b32 * a21 + b33 * a31;
    pDataDestination[6] = b31 * a12 + b32 * a22 + b33 * a32;
    pDataDestination[10] = b31 * a13 + b32 * a23 + b33 * a33;
    pDataDestination[14] = b31 * a14 + b32 * a24 + b33 * a34;
    pDataDestination[3] = pData[3];
    pDataDestination[7] = pData[7];
    pDataDestination[11] = pData[11];
    pDataDestination[15] = pData[15];
    return m4fDestination;
}
;
inline;
setTranslation(v3fTranslation, IVec3);
IMat4;
 {
    var pData = this.data;
    pData[12] = v3fTranslation.x;
    pData[13] = v3fTranslation.y;
    pData[14] = v3fTranslation.z;
    return this;
}
;
inline;
getTranslation(v3fTranslation ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fTranslation)) {
        v3fTranslation = new Vec3();
    }
    var pData = this.data;
    v3fTranslation.x = pData[12];
    v3fTranslation.y = pData[13];
    v3fTranslation.z = pData[14];
    return v3fTranslation;
}
;
translateRight(v3fTranslation, IVec3, m4fDestination ?  : IMat4);
IMat4;
 {
    var pData = this.data;
    var x = v3fTranslation.x, y = v3fTranslation.y, z = v3fTranslation.z;
    if (!isDef(m4fDestination)) {
        pData[12] = pData[0] * x + pData[4] * y + pData[8] * z + pData[12];
        pData[13] = pData[1] * x + pData[5] * y + pData[9] * z + pData[13];
        pData[14] = pData[2] * x + pData[6] * y + pData[10] * z + pData[14];
        pData[15] = pData[3] * x + pData[7] * y + pData[11] * z + pData[15];
        return this;
    }
    var pDataDestination = m4fDestination.data;
    var a11 = pData[0], a12 = pData[4], a13 = pData[8];
    var a21 = pData[0], a22 = pData[5], a23 = pData[9];
    var a31 = pData[0], a32 = pData[6], a33 = pData[10];
    var a41 = pData[0], a42 = pData[7], a43 = pData[11];
    pDataDestination[0] = a11;
    pDataDestination[4] = a12;
    pDataDestination[8] = a13;
    pDataDestination[12] = a11 * x + a12 * y + a13 * z + pData[12];
    pDataDestination[1] = a21;
    pDataDestination[5] = a22;
    pDataDestination[9] = a23;
    pDataDestination[13] = a21 * x + a22 * y + a23 * z + pData[13];
    pDataDestination[2] = a31;
    pDataDestination[6] = a32;
    pDataDestination[10] = a33;
    pDataDestination[14] = a31 * x + a32 * y + a33 * z + pData[14];
    pDataDestination[3] = a41;
    pDataDestination[7] = a42;
    pDataDestination[11] = a43;
    pDataDestination[15] = a41 * x + a42 * y + a43 * z + pData[15];
    return m4fDestination;
}
;
translateLeft(v3fTranslation, IVec3, m4fDestination ?  : IMat4);
IMat4;
 {
    var pData = this.data;
    var x = v3fTranslation.x, y = v3fTranslation.y, z = v3fTranslation.z;
    if (!isDef(m4fDestination)) {
        pData[12] = x + pData[12];
        pData[13] = y + pData[13];
        pData[14] = z + pData[14];
        return this;
    }
    var pDataDestination = m4fDestination.data;
    pDataDestination[0] = pData[0];
    pDataDestination[4] = pData[4];
    pDataDestination[8] = pData[8];
    pDataDestination[12] = x + pData[12];
    pDataDestination[1] = pData[1];
    pDataDestination[5] = pData[5];
    pDataDestination[9] = pData[9];
    pDataDestination[13] = y + pData[13];
    pDataDestination[2] = pData[2];
    pDataDestination[6] = pData[6];
    pDataDestination[10] = pData[10];
    pDataDestination[14] = z + pData[14];
    pDataDestination[3] = pData[3];
    pDataDestination[7] = pData[7];
    pDataDestination[11] = pData[11];
    pDataDestination[15] = pData[15];
    return m4fDestination;
}
;
scaleRight(v3fScale, IVec3, m4fDestination ?  : IMat4);
IMat4;
 {
    var pData = this.data;
    var x = v3fScale.x, y = v3fScale.y, z = v3fScale.z;
    if (!isDef(m4fDestination)) {
        pData[0] *= x;
        pData[4] *= y;
        pData[8] *= z;
        pData[1] *= x;
        pData[5] *= y;
        pData[9] *= z;
        pData[2] *= x;
        pData[6] *= y;
        pData[10] *= z;
        pData[3] *= x;
        pData[7] *= y;
        pData[11] *= z;
        return this;
    }
    var pDataDestination = m4fDestination.data;
    pDataDestination[0] = pData[0] * x;
    pDataDestination[4] = pData[4] * y;
    pDataDestination[8] = pData[8] * z;
    pDataDestination[12] = pData[12];
    pDataDestination[1] = pData[1] * x;
    pDataDestination[5] = pData[5] * y;
    pDataDestination[9] = pData[9] * z;
    pDataDestination[13] = pData[13];
    pDataDestination[2] = pData[2] * x;
    pDataDestination[6] = pData[6] * y;
    pDataDestination[10] = pData[10] * z;
    pDataDestination[14] = pData[14];
    pDataDestination[3] = pData[3] * x;
    pDataDestination[7] = pData[7] * y;
    pDataDestination[11] = pData[11] * z;
    pDataDestination[15] = pData[15];
    return m4fDestination;
}
;
scaleLeft(v3fScale, IVec3, m4fDestination ?  : IMat4);
IMat4;
 {
    var pData = this.data;
    var x = v3fScale.x, y = v3fScale.y, z = v3fScale.z;
    if (!isDef(m4fDestination)) {
        pData[0] *= x;
        pData[4] *= x;
        pData[8] *= x;
        pData[12] *= x;
        pData[1] *= y;
        pData[5] *= y;
        pData[9] *= y;
        pData[13] *= y;
        pData[2] *= z;
        pData[6] *= z;
        pData[10] *= z;
        pData[14] *= z;
        return this;
    }
    var pDataDestination = m4fDestination.data;
    pDataDestination[0] = pData[0] * x;
    pDataDestination[4] = pData[4] * x;
    pDataDestination[8] = pData[8] * x;
    pDataDestination[12] = pData[12] * x;
    pDataDestination[1] = pData[1] * y;
    pDataDestination[5] = pData[5] * y;
    pDataDestination[9] = pData[9] * y;
    pDataDestination[13] = pData[13] * y;
    pDataDestination[2] = pData[2] * z;
    pDataDestination[6] = pData[6] * z;
    pDataDestination[10] = pData[10] * z;
    pDataDestination[14] = pData[14] * z;
    pDataDestination[3] = pData[3];
    pDataDestination[7] = pData[7];
    pDataDestination[11] = pData[11];
    pDataDestination[15] = pData[15];
    return m4fDestination;
}
;
inline;
decompose(q4fRotation, IQuat4, v3fScale, IVec3, v3fTranslation, IVec3);
bool;
 {
    this.getTranslation(v3fTranslation);
    var m3fRotScale = this.toMat3(mat3());
    return m3fRotScale.decompose(q4fRotation, v3fScale);
}
;
row(iRow, number, v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = new Vec4();
    }
    var pData = this.data;
    switch(iRow) {
        case 1:
            v4fDestination.x = pData[0];
            v4fDestination.y = pData[4];
            v4fDestination.z = pData[8];
            v4fDestination.w = pData[12];
            break;
        case 2:
            v4fDestination.x = pData[1];
            v4fDestination.y = pData[5];
            v4fDestination.z = pData[9];
            v4fDestination.w = pData[13];
            break;
        case 3:
            v4fDestination.x = pData[2];
            v4fDestination.y = pData[6];
            v4fDestination.z = pData[10];
            v4fDestination.w = pData[14];
            break;
        case 4:
            v4fDestination.x = pData[3];
            v4fDestination.y = pData[7];
            v4fDestination.z = pData[11];
            v4fDestination.w = pData[15];
            break;
    }
    return v4fDestination;
}
;
column(iColumn, number, v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = new Vec4();
    }
    var pData = this.data;
    switch(iColumn) {
        case 1:
            v4fDestination.x = pData[0];
            v4fDestination.y = pData[1];
            v4fDestination.z = pData[2];
            v4fDestination.w = pData[3];
            break;
        case 2:
            v4fDestination.x = pData[4];
            v4fDestination.y = pData[5];
            v4fDestination.z = pData[6];
            v4fDestination.w = pData[7];
            break;
        case 3:
            v4fDestination.x = pData[8];
            v4fDestination.y = pData[9];
            v4fDestination.z = pData[10];
            v4fDestination.w = pData[11];
            break;
        case 4:
            v4fDestination.x = pData[12];
            v4fDestination.y = pData[13];
            v4fDestination.z = pData[14];
            v4fDestination.w = pData[15];
            break;
    }
    return v4fDestination;
}
;
unproj(v3fScreen, IVec3, v4fDestination ?  : IVec4);
IVec4;
unproj(v4fScreen, IVec4, v4fDestination ?  : IVec4);
IVec4;
unproj(v, any, v4fDestination ?  : IVec4);
IVec4;
 {
    if (!isDef(v4fDestination)) {
        v4fDestination = new Vec4();
    }
    var pData = this.data;
    var v3fScreen = v;
    var x, y, z;
    if (this.isOrthogonalProjection()) {
        z = (v3fScreen.z - pData[14]) / pData[10];
        y = (v3fScreen.y - pData[13]) / pData[5];
        x = (v3fScreen.x - pData[12]) / pData[0];
    } else {
        z = -pData[14] / (pData[10] + v3fScreen.z);
        y = -(v3fScreen.y + pData[9]) * z / pData[5];
        x = -(v3fScreen.x + pData[8]) * z / pData[0];
    }
    v4fDestination.x = x;
    v4fDestination.y = y;
    v4fDestination.z = z;
    v4fDestination.w = 1.;
    return v4fDestination;
}
;
unprojZ(fZ, number);
number;
 {
    var pData = this.data;
    if (this.isOrthogonalProjection()) {
        return (fZ - pData[14]) / pData[10];
    } else {
        return -pData[14] / (pData[10] + fZ);
    }
}
;
inline;
isOrthogonalProjection();
bool;
 {
    return ((this.data[15] === 1) ? true : false);
}
;
fromYawPitchRoll(fYaw, number, fPitch, number, fRoll, number, m4fDestination ?  : IMat4);
IMat4;
fromYawPitchRoll(v3fAngles, IVec3, m4fDestination ?  : IMat4);
IMat4;
fromYawPitchRoll(fYaw ?  : , fPitch ?  : , fRoll ?  : , m4fDestination ?  : );
IMat4;
 {
    if (arguments.length <= 2) {
        var v3fVec = arguments[0];
        fYaw = v3fVec.x;
        fPitch = v3fVec.y;
        fRoll = v3fVec.z;
        m4fDestination = arguments[1];
    }
    if (!isDef(m4fDestination)) {
        m4fDestination = new Mat4();
    }
    var pDataDestination = m4fDestination.data;
    var fSin1 = Math.sin(fYaw);
    var fSin2 = Math.sin(fPitch);
    var fSin3 = Math.sin(fRoll);
    var fCos1 = Math.cos(fYaw);
    var fCos2 = Math.cos(fPitch);
    var fCos3 = Math.cos(fRoll);
    pDataDestination[0] = fCos1 * fCos3 + fSin1 * fSin2 * fSin3;
    pDataDestination[4] = fCos3 * fSin1 * fSin2 - fCos1 * fSin3;
    pDataDestination[8] = fCos2 * fSin1;
    pDataDestination[12] = 0.;
    pDataDestination[1] = fCos2 * fSin3;
    pDataDestination[5] = fCos2 * fCos3;
    pDataDestination[9] = -fSin2;
    pDataDestination[13] = 0.;
    pDataDestination[2] = fCos1 * fSin2 * fSin3 - fCos3 * fSin1;
    pDataDestination[6] = fSin1 * fSin3 + fCos1 * fCos3 * fSin2;
    pDataDestination[10] = fCos1 * fCos2;
    pDataDestination[14] = 0.;
    pDataDestination[3] = 0.;
    pDataDestination[7] = 0.;
    pDataDestination[11] = 0.;
    pDataDestination[15] = 1.;
    return m4fDestination;
}
;
fromXYZ(fX, number, fY, number, fZ, number, m4fDestination ?  : IMat4);
IMat4;
fromXYZ(v3fAngles, IVec3, m4fDestination ?  : IMat4);
IMat4;
fromXYZ(fX ?  : , fY ?  : , fZ ?  : , m4fDestination ?  : );
IMat4;
 {
    if (arguments.length <= 2) {
        var v3fVec = arguments[0];
        return Mat4.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
    } else {
        var fX = arguments[0];
        var fY = arguments[1];
        var fZ = arguments[2];
        return Mat4.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
    }
}
;
frustum(fLeft, number, fRight, number, fBottom, number, fTop, number, fNear, number, fFar, number, m4fDestination ?  : IMat4);
IMat4;
 {
    if (!isDef(m4fDestination)) {
        m4fDestination = new Mat4();
    }
    var pDataDestination = m4fDestination.data;
    var fRL = fRight - fLeft;
    var fTB = fTop - fBottom;
    var fFN = fFar - fNear;
    pDataDestination[0] = 2. * fNear / fRL;
    pDataDestination[4] = 0.;
    pDataDestination[8] = (fRight + fLeft) / fRL;
    pDataDestination[12] = 0.;
    pDataDestination[1] = 0.;
    pDataDestination[5] = 2. * fNear / fTB;
    pDataDestination[9] = (fTop + fBottom) / fTB;
    pDataDestination[13] = 0.;
    pDataDestination[2] = 0.;
    pDataDestination[6] = 0.;
    pDataDestination[10] = -(fFar + fNear) / fFN;
    pDataDestination[14] = -2. * fFar * fNear / fFN;
    pDataDestination[3] = 0.;
    pDataDestination[7] = 0.;
    pDataDestination[11] = -1.;
    pDataDestination[15] = 0.;
    return m4fDestination;
}
;
inline;
perspective(fFovy, number, fAspect, number, fNear, number, fFar, number, m4fDestination ?  : IMat4);
IMat4;
 {
    var fTop = fNear * tan(fFovy / 2.);
    var fRight = fTop * fAspect;
    return Mat4.frustum(-fRight, fRight, -fTop, fTop, fNear, fFar, m4fDestination);
}
;
orthogonalProjectionAsymmetric(fLeft, number, fRight, number, fBottom, number, fTop, number, fNear, number, fFar, number, m4fDestination ?  : IMat4);
IMat4;
 {
    if (!isDef(m4fDestination)) {
        m4fDestination = new Mat4();
    }
    var pDataDestination = m4fDestination.data;
    var fRL = fRight - fLeft;
    var fTB = fTop - fBottom;
    var fFN = fFar - fNear;
    pDataDestination[0] = 2. / fRL;
    pDataDestination[4] = 0.;
    pDataDestination[8] = 0.;
    pDataDestination[12] = -(fRight + fLeft) / fRL;
    pDataDestination[1] = 0.;
    pDataDestination[5] = 2. / fTB;
    pDataDestination[9] = 0.;
    pDataDestination[13] = -(fTop + fBottom) / fTB;
    pDataDestination[2] = 0.;
    pDataDestination[6] = 0.;
    pDataDestination[10] = -2. / fFN;
    pDataDestination[14] = -(fFar + fNear) / fFN;
    pDataDestination[3] = 0.;
    pDataDestination[7] = 0.;
    pDataDestination[11] = 0.;
    pDataDestination[15] = 1.;
    return m4fDestination;
}
;
inline;
orthogonalProjection(fWidth, number, fHeight, number, fNear, number, fFar, number, m4fDestination ?  : IMat4);
IMat4;
 {
    var fRight = fWidth / 2.;
    var fTop = fHeight / 2.;
    return Mat4.orthogonalProjectionAsymmetric(-fRight, fRight, -fTop, fTop, fNear, fFar, m4fDestination);
}
;
lookAt(v3fEye, IVec3, v3fCenter, IVec3, v3fUp, IVec3, m4fDestination ?  : IMat4);
IMat4;
 {
    if (!isDef(m4fDestination)) {
        m4fDestination = new Mat4(1.);
    }
    var fEyeX = v3fEye.x, fEyeY = v3fEye.y, fEyeZ = v3fEye.z;
    var fCenterX = v3fCenter.x, fCenterY = v3fCenter.y, fCenterZ = v3fCenter.z;
    var fUpX = v3fUp.x, fUpY = v3fUp.y, fUpZ = v3fUp.z;
    var fLength;
    var fInvLength;
    if (fEyeX === fCenterX && fEyeY === fCenterY && fEyeZ === fCenterZ) {
        return m4fDestination;
    }
    var fXNewX, fXNewY, fXNewZ;
    var fYNewX, fYNewY, fYNewZ;
    var fZNewX, fZNewY, fZNewZ;
    fZNewX = fEyeX - fCenterX;
    fZNewY = fEyeY - fCenterY;
    fZNewZ = fEyeZ - fCenterZ;
    fLength = sqrt(fZNewX * fZNewX + fZNewY * fZNewY + fZNewZ * fZNewZ);
    fInvLength = 1. / fLength;
    fZNewX = fZNewX * fInvLength;
    fZNewY = fZNewY * fInvLength;
    fZNewZ = fZNewZ * fInvLength;
    fXNewX = fUpY * fZNewZ - fUpZ * fZNewY;
    fXNewY = fUpZ * fZNewX - fUpX * fZNewZ;
    fXNewZ = fUpX * fZNewY - fUpY * fZNewX;
    fLength = sqrt(fXNewX * fXNewX + fXNewY * fXNewY + fXNewZ * fXNewZ);
    if (fLength) {
        fInvLength = 1. / fLength;
        fXNewX = fXNewX * fInvLength;
        fXNewY = fXNewY * fInvLength;
        fXNewZ = fXNewZ * fInvLength;
    }
    fYNewX = fZNewY * fXNewZ - fZNewZ * fXNewY;
    fYNewY = fZNewZ * fXNewX - fZNewX * fXNewZ;
    fYNewZ = fZNewX * fXNewY - fZNewY * fXNewX;
    var fEyeNewX = fEyeX * fXNewX + fEyeY * fXNewY + fEyeZ * fXNewZ;
    var fEyeNewY = fEyeX * fYNewX + fEyeY * fYNewY + fEyeZ * fYNewZ;
    var fEyeNewZ = fEyeX * fZNewX + fEyeY * fZNewY + fEyeZ * fZNewZ;
    var pDataDestination = m4fDestination.data;
    pDataDestination[0] = fXNewX;
    pDataDestination[4] = fXNewY;
    pDataDestination[8] = fXNewZ;
    pDataDestination[12] = -fEyeNewX;
    pDataDestination[1] = fYNewX;
    pDataDestination[5] = fYNewY;
    pDataDestination[9] = fYNewZ;
    pDataDestination[13] = -fEyeNewY;
    pDataDestination[2] = fZNewX;
    pDataDestination[6] = fZNewY;
    pDataDestination[10] = fZNewZ;
    pDataDestination[14] = -fEyeNewZ;
    pDataDestination[3] = 0.;
    pDataDestination[7] = 0.;
    pDataDestination[11] = 0.;
    pDataDestination[15] = 1.;
    return m4fDestination;
}
;
get;
stackCeil();
Mat4;
 {
    Mat4.stackPosition = Mat4.stackPosition === Mat4.stackSize - 1 ? 0 : Mat4.stackPosition;
    return Mat4.stack[Mat4.stackPosition++];
}
stackSize:
number = 100
stackPosition:
number = 0
stack:
Mat4[] = (function () {
    var pStack = new Array(Mat4.stackSize);
    for(var i = 0; i < Mat4.stackSize; i++) {
        pStack[i] = new Mat4();
    }
    return pStack;
})()
var akra;
(function (akra) {
    (function (math) {
        var Quat4 = (function () {
            function Quat4(fX, fY, fZ, fW) {
                this.inline = length();
                this.number = {
                    var: x,
                    number:  = this.x,
                    y: number = this.y,
                    z: number = this.z,
                    w: number = this.w
                };
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 2:
                        this.set(arguments[0], arguments[1]);
                        break;
                    case 4:
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;
                    default:
                        this.x = this.y = this.z = 0.;
                        this.w = 1.;
                        break;
                }
            }
            Quat4.prototype.set = function (fX, fY, fZ, fW) {
                var nArgumentsLength = arguments.length;
                if (nArgumentsLength === 0) {
                    this.x = this.y = this.z = 0.;
                    this.w = 1.;
                }
                if (nArgumentsLength === 1) {
                    if (arguments[0] instanceof Quat4) {
                        var q4fQuat = arguments[0];
                        this.x = q4fQuat.x;
                        this.y = q4fQuat.y;
                        this.z = q4fQuat.z;
                        this.w = q4fQuat.w;
                    } else {
                        var pElements = arguments[0];
                        this.x = pElements[0];
                        this.y = pElements[1];
                        this.z = pElements[2];
                        this.w = pElements[3];
                    }
                } else if (nArgumentsLength === 2) {
                    if (isFloat(arguments[0])) {
                        var fValue = arguments[0];
                        this.x = fValue;
                        this.y = fValue;
                        this.z = fValue;
                        this.w = arguments[1];
                    } else {
                        var v3fValue = arguments[0];
                        this.x = v3fValue.x;
                        this.y = v3fValue.y;
                        this.z = v3fValue.z;
                        this.w = arguments[1];
                    }
                } else if (nArgumentsLength === 4) {
                    this.x = arguments[0];
                    this.y = arguments[1];
                    this.z = arguments[2];
                    this.w = arguments[3];
                }
                return this;
            };
            Quat4.prototype.multiply = function (q4fQuat, q4fDestination) {
                if (!isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
                var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
                q4fDestination.x = x1 * w2 + x2 * w1 + y1 * z2 - z1 * y2;
                q4fDestination.y = y1 * w2 + y2 * w1 + z1 * x2 - x1 * z2;
                q4fDestination.z = z1 * w2 + z2 * w1 + x1 * y2 - y1 * x2;
                q4fDestination.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;
                return q4fDestination;
            };
            Quat4.prototype.multiplyVec3 = function (v3fVec, v3fDestination) {
                if (!isDef(v3fDestination)) {
                    v3fDestination = v3fVec;
                }
                var q4fVec = quat4(v3fVec, 0);
                var qInverse = this.inverse(quat4());
                var qResult = this.multiply(q4fVec.multiply(qInverse), quat4());
                v3fDestination.x = qResult.x;
                v3fDestination.y = qResult.y;
                v3fDestination.z = qResult.z;
                return v3fDestination;
            };
            Quat4.prototype.conjugate = function (q4fDestination) {
                if (!isDef(q4fDestination)) {
                    this.x = -this.x;
                    this.y = -this.y;
                    this.z = -this.z;
                    return this;
                }
                q4fDestination.x = -this.x;
                q4fDestination.y = -this.y;
                q4fDestination.z = -this.z;
                q4fDestination.w = this.w;
                return q4fDestination;
            };
            Quat4.prototype.inverse = function (q4fDestination) {
                if (!isDef(q4fDestination)) {
                    q4fDestination = this;
                }
                var x = this.x, y = this.y, z = this.z, w = this.w;
                var fSqLength = x * x + y * y + z * z + w * w;
                if (fSqLength === 0.) {
                    q4fDestination.x = 0.;
                    q4fDestination.y = 0.;
                    q4fDestination.z = 0.;
                    q4fDestination.w = 0.;
                } else {
                    var fInvSqLength = 1. / fSqLength;
                    q4fDestination.x = -x * fInvSqLength;
                    q4fDestination.y = -y * fInvSqLength;
                    q4fDestination.z = -z * fInvSqLength;
                    q4fDestination.w = w * fInvSqLength;
                }
                return q4fDestination;
            };
            return Quat4;
        })();
        math.Quat4 = Quat4;        
        return sqrt(x * x + y * y + z * z + w * w);
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
;
normalize(q4fDestination ?  : IQuat4);
IQuat4;
 {
    if (!isDef(q4fDestination)) {
        q4fDestination = this;
    }
    var x = this.x, y = this.y, z = this.z, w = this.w;
    var fLength = sqrt(x * x + y * y + z * z + w * w);
    if (fLength === 0.) {
        q4fDestination.x = 0.;
        q4fDestination.y = 0.;
        q4fDestination.z = 0.;
        q4fDestination.w = 0.;
    } else {
        var fInvLength = 1 / fLength;
        q4fDestination.x = x * fInvLength;
        q4fDestination.y = y * fInvLength;
        q4fDestination.z = z * fInvLength;
        q4fDestination.w = w * fInvLength;
    }
    return q4fDestination;
}
;
calculateW(q4fDestination ?  : IQuat4);
IQuat4;
 {
    var x = this.x, y = this.y, z = this.z;
    if (!isDef(q4fDestination)) {
        this.w = sqrt(1. - x * x - y * y - z * z);
        return this;
    }
    q4fDestination.x = x;
    q4fDestination.y = y;
    q4fDestination.z = z;
    q4fDestination.w = sqrt(1. - x * x - y * y - z * z);
    return q4fDestination;
}
;
isEqual(q4fQuat, IQuat4, fEps, number = 0., asMatrix, bool = false);
bool;
 {
    var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
    var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
    var fLength1 = sqrt(x1 * x1 + y1 * y1 + z1 * z1 + w1 * w1);
    var fLength2 = sqrt(x2 * x2 + y2 * y2 + z2 * z2 + w2 * w2);
    if (abs(fLength2 - fLength2) > fEps) {
        return false;
    }
    var cosHalfTheta = (x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2) / fLength1 / fLength2;
    if (asMatrix) {
        cosHalfTheta = abs(cosHalfTheta);
    }
    if (1. - cosHalfTheta > fEps) {
        return false;
    }
    return true;
}
;
getYaw();
number;
 {
    var fYaw;
    var x = this.x, y = this.y, z = this.z, w = this.w;
    var fx2 = x * 2.;
    var fy2 = y * 2.;
    if (abs(x) == abs(w)) {
        var wTemp = w * sqrt(2.);
        var yTemp = y * sqrt(2.);
        fYaw = atan2(yTemp, wTemp) * 2.;
        var pi = PI;
        if (fYaw > pi) {
            fYaw -= pi;
        } else if (fYaw < -pi) {
            fYaw += pi;
        }
    } else {
        fYaw = atan2(fx2 * z + fy2 * w, 1. - (fx2 * x + fy2 * y));
    }
    return fYaw;
}
;
getPitch();
number;
 {
    var fPitch;
    var x = this.x, y = this.y, z = this.z, w = this.w;
    var fx2 = x * 2.;
    var fy2 = y * 2.;
    var fSinPitch = clamp(fx2 * w - fy2 * z, -1., 1.);
    fPitch = asin(fSinPitch);
    return fPitch;
}
;
getRoll();
number;
 {
    var fRoll;
    var x = this.x, y = this.y, z = this.z, w = this.w;
    var fx2 = x * 2.;
    var fz2 = z * 2.;
    if (abs(x) == abs(w)) {
        var wTemp = w * sqrt(2.);
        var yTemp = y * sqrt(2.);
        var fYaw = atan2(yTemp, wTemp) * 2.;
        fRoll = 0.;
        var pi = PI;
        if (fYaw > pi) {
            fRoll = (x == w) ? -pi : pi;
        } else if (fYaw < -pi) {
            fRoll = (x == w) ? pi : -pi;
        }
    } else {
        fRoll = atan2(fx2 * y + fz2 * w, 1. - (fx2 * x + fz2 * z));
    }
    return fRoll;
}
;
toYawPitchRoll(v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = new Vec3();
    }
    var fYaw, fPitch, fRoll;
    var x = this.x, y = this.y, z = this.z, w = this.w;
    var fx2 = x * 2.;
    var fy2 = y * 2.;
    var fz2 = z * 2.;
    var fw2 = w * 2.;
    var fSinPitch = clamp(fx2 * w - fy2 * z, -1., 1.);
    fPitch = asin(fSinPitch);
    if (abs(x) == abs(w)) {
        var wTemp = w * sqrt(2.);
        var yTemp = y * sqrt(2.);
        fYaw = atan2(yTemp, wTemp) * 2.;
        fRoll = 0.;
        var pi = PI;
        if (fYaw > pi) {
            fYaw -= pi;
            fRoll = (x == w) ? -pi : pi;
        } else if (fYaw < -pi) {
            fYaw += pi;
            fRoll = (x == w) ? pi : -pi;
        }
    } else {
        fYaw = atan2(fx2 * z + fy2 * w, 1. - (fx2 * x + fy2 * y));
        fRoll = atan2(fx2 * y + fz2 * w, 1. - (fx2 * x + fz2 * z));
    }
    v3fDestination.x = fYaw;
    v3fDestination.y = fPitch;
    v3fDestination.z = fRoll;
    return v3fDestination;
}
;
toMat3(m3fDestination ?  : IMat3);
IMat3;
 {
    if (!isDef(m3fDestination)) {
        m3fDestination = new Mat3();
    }
    var pDataDestination = m3fDestination.data;
    var x = this.x, y = this.y, z = this.z, w = this.w;
    pDataDestination[0] = 1. - 2. * (y * y + z * z);
    pDataDestination[3] = 2. * (x * y - z * w);
    pDataDestination[6] = 2. * (x * z + y * w);
    pDataDestination[1] = 2. * (x * y + z * w);
    pDataDestination[4] = 1. - 2. * (x * x + z * z);
    pDataDestination[7] = 2. * (y * z - x * w);
    pDataDestination[2] = 2. * (x * z - y * w);
    pDataDestination[5] = 2. * (y * z + x * w);
    pDataDestination[8] = 1. - 2. * (x * x + y * y);
    return m3fDestination;
}
;
toMat4(m4fDestination ?  : IMat4);
IMat4;
 {
    if (!isDef(m4fDestination)) {
        m4fDestination = new Mat4();
    }
    var pDataDestination = m4fDestination.data;
    var x = this.x, y = this.y, z = this.z, w = this.w;
    pDataDestination[0] = 1. - 2. * (y * y + z * z);
    pDataDestination[4] = 2. * (x * y - z * w);
    pDataDestination[8] = 2. * (x * z + y * w);
    pDataDestination[12] = 0.;
    pDataDestination[1] = 2. * (x * y + z * w);
    pDataDestination[5] = 1. - 2. * (x * x + z * z);
    pDataDestination[9] = 2. * (y * z - x * w);
    pDataDestination[13] = 0.;
    pDataDestination[2] = 2. * (x * z - y * w);
    pDataDestination[6] = 2. * (y * z + x * w);
    pDataDestination[10] = 1. - 2. * (x * x + y * y);
    pDataDestination[14] = 0.;
    pDataDestination[3] = 0.;
    pDataDestination[7] = 0.;
    pDataDestination[11] = 0.;
    pDataDestination[15] = 1.;
    return m4fDestination;
}
;
inline;
toString();
string;
 {
    return "[x: " + this.x + ", y: " + this.y + ", z: " + this.z + ", w: " + this.w + "]";
}
;
mix(q4fQuat, IQuat4, fA, number, q4fDestination ?  : IQuat4, bShortestPath, bool = true);
 {
    if (!isDef(q4fDestination)) {
        q4fDestination = this;
    }
    fA = clamp(fA, 0, 1);
    var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
    var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
    var fCos = x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2;
    if (fCos < 0. && bShortestPath) {
        x2 = -x2;
        y2 = -y2;
        z2 = -z2;
        w2 = -w2;
    }
    var k1 = 1. - fA;
    var k2 = fA;
    q4fDestination.x = x1 * k1 + x2 * k2;
    q4fDestination.y = y1 * k1 + y2 * k2;
    q4fDestination.z = z1 * k1 + z2 * k2;
    q4fDestination.w = w1 * k1 + w2 * k2;
    return q4fDestination;
}
;
smix(q4fQuat, IQuat4, fA, number, q4fDestination ?  : IQuat4, bShortestPath, bool = true);
 {
    if (!isDef(q4fDestination)) {
        q4fDestination = this;
    }
    fA = clamp(fA, 0, 1);
    var x1 = this.x, y1 = this.y, z1 = this.z, w1 = this.w;
    var x2 = q4fQuat.x, y2 = q4fQuat.y, z2 = q4fQuat.z, w2 = q4fQuat.w;
    var fCos = x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2;
    if (fCos < 0 && bShortestPath) {
        fCos = -fCos;
        x2 = -x2;
        y2 = -y2;
        z2 = -z2;
        w2 = -w2;
    }
    var fEps = 1e-3;
    if (abs(fCos) < 1. - fEps) {
        var fSin = sqrt(1. - fCos * fCos);
        var fInvSin = 1. / fSin;
        var fAngle = atan2(fSin, fCos);
        var k1 = sin((1. - fA) * fAngle) * fInvSin;
        var k2 = sin(fA * fAngle) * fInvSin;
        q4fDestination.x = x1 * k1 + x2 * k2;
        q4fDestination.y = y1 * k1 + y2 * k2;
        q4fDestination.z = z1 * k1 + z2 * k2;
        q4fDestination.w = w1 * k1 + w2 * k2;
    } else {
        var k1 = 1 - fA;
        var k2 = fA;
        var x = x1 * k1 + x2 * k2;
        var y = y1 * k1 + y2 * k2;
        var z = z1 * k1 + z2 * k2;
        var w = w1 * k1 + w2 * k2;
        var fLength = sqrt(x * x + y * y + z * z + w * w);
        var fInvLen = fLength ? 1 / fLength : 0;
        q4fDestination.x = x * fInvLen;
        q4fDestination.y = y * fInvLen;
        q4fDestination.z = z * fInvLen;
        q4fDestination.w = w * fInvLen;
    }
    return q4fDestination;
}
;
fromForwardUp(v3fForward, IVec3, v3fUp, IVec3, q4fDestination ?  : IQuat4);
IQuat4;
 {
    if (!isDef(q4fDestination)) {
        q4fDestination = new Quat4();
    }
    var fForwardX = v3fForward.x, fForwardY = v3fForward.y, fForwardZ = v3fForward.z;
    var fUpX = v3fUp.x, fUpY = v3fUp.y, fUpZ = v3fUp.z;
    var m3fTemp = mat3();
    var pTempData = m3fTemp.data;
    pTempData[0] = fUpY * fForwardZ - fUpZ * fForwardY;
    pTempData[3] = fUpX;
    pTempData[6] = fForwardX;
    pTempData[1] = fUpZ * fForwardX - fUpX * fForwardZ;
    pTempData[4] = fUpY;
    pTempData[7] = fForwardY;
    pTempData[2] = fUpX * fForwardY - fUpY * fForwardX;
    pTempData[5] = fUpZ;
    pTempData[8] = fForwardZ;
    return m3fTemp.toQuat4(q4fDestination);
}
;
fromAxisAngle(v3fAxis, IVec3, fAngle, number, q4fDestination ?  : IQuat4);
IQuat4;
 {
    if (!isDef(q4fDestination)) {
        q4fDestination = new Quat4();
    }
    var x = v3fAxis.x, y = v3fAxis.y, z = v3fAxis.z;
    var fLength = sqrt(x * x + y * y + z * z);
    if (fLength === 0.) {
        q4fDestination.x = q4fDestination.y = q4fDestination.z = 0;
        q4fDestination.w = 1;
        return q4fDestination;
    }
    var fInvLength = 1 / fLength;
    x *= fInvLength;
    y *= fInvLength;
    z *= fInvLength;
    var fSin = sin(fAngle / 2);
    var fCos = cos(fAngle / 2);
    q4fDestination.x = x * fSin;
    q4fDestination.y = y * fSin;
    q4fDestination.z = z * fSin;
    q4fDestination.w = fCos;
    return q4fDestination;
}
;
fromYawPitchRoll(fYaw, number, fPitch, number, fRoll, number, q4fDestination ?  : IQuat4);
IQuat4;
fromYawPitchRoll(v3fAngles, IVec3, q4fDestination ?  : IQuat4);
IQuat4;
fromYawPitchRoll(fYaw ?  : , fPitch ?  : , fRoll ?  : , q4fDestination ?  : );
IQuat4;
 {
    if (arguments.length <= 2) {
        var v3fVec = arguments[0];
        fYaw = v3fVec.x;
        fPitch = v3fVec.y;
        fRoll = v3fVec.z;
        q4fDestination = arguments[1];
    }
    if (!isDef(q4fDestination)) {
        q4fDestination = new Quat4();
    }
    var fHalfYaw = fYaw * 0.5;
    var fHalfPitch = fPitch * 0.5;
    var fHalfRoll = fRoll * 0.5;
    var fCos1 = cos(fHalfYaw), fSin1 = sin(fHalfYaw);
    var fCos2 = cos(fHalfPitch), fSin2 = sin(fHalfPitch);
    var fCos3 = cos(fHalfRoll), fSin3 = sin(fHalfRoll);
    q4fDestination.x = fCos1 * fSin2 * fCos3 + fSin1 * fCos2 * fSin3;
    q4fDestination.y = fSin1 * fCos2 * fCos3 - fCos1 * fSin2 * fSin3;
    q4fDestination.z = fCos1 * fCos2 * fSin3 - fSin1 * fSin2 * fCos3;
    q4fDestination.w = fCos1 * fCos2 * fCos3 + fSin1 * fSin2 * fSin3;
    return q4fDestination;
}
;
fromXYZ(fX, number, fY, number, fZ, number, q4fDestination ?  : IQuat4);
IQuat4;
fromXYZ(v3fAngles, IVec3, q4fDestination ?  : IQuat4);
IQuat4;
fromXYZ(fX ?  : , fY ?  : , fZ ?  : , q4fDestination ?  : );
IQuat4;
 {
    if (arguments.length <= 2) {
        var v3fVec = arguments[0];
        return Quat4.fromYawPitchRoll(v3fVec.y, v3fVec.x, v3fVec.z, arguments[1]);
    } else {
        var fX = arguments[0];
        var fY = arguments[1];
        var fZ = arguments[2];
        return Quat4.fromYawPitchRoll(fY, fX, fZ, arguments[3]);
    }
}
;
get;
stackCeil();
Quat4;
 {
    Quat4.stackPosition = Quat4.stackPosition === Quat4.stackSize - 1 ? 0 : Quat4.stackPosition;
    return Quat4.stack[Quat4.stackPosition++];
}
stackSize:
number = 100
stackPosition:
number = 0
stack:
Quat4[] = (function () {
    var pStack = new Array(Quat4.stackSize);
    for(var i = 0; i < Quat4.stackSize; i++) {
        pStack[i] = new Quat4();
    }
    return pStack;
})()
var akra;
(function (akra) {
    (function (math) {
        math.E = Math.E;
        math.LN2 = Math.LN2;
        math.LOG2E = Math.LOG2E;
        math.LOG10E = Math.LOG10E;
        math.PI = Math.PI;
        math.SQRT1_2 = Math.SQRT1_2;
        math.SQRT2 = Math.SQRT2;
        math.LN10 = Math.LN10;
        math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
        math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
        math.FLOAT_PRECISION = (3.4e-8);
        math.TWO_PI = (2.0 * math.PI);
        math.HALF_PI = (math.PI / 2.0);
        math.QUARTER_PI = (math.PI / 4.0);
        math.EIGHTH_PI = (math.PI / 8.0);
        math.PI_SQUARED = (9.86960440108935861883449099987615113531369940724079);
        math.PI_INVERSE = (0.31830988618379067153776752674502872406891929148091);
        math.PI_OVER_180 = (math.PI / 180);
        math.PI_DIV_180 = (180 / math.PI);
        math.NATURAL_LOGARITHM_BASE = (2.71828182845904523536028747135266249775724709369996);
        math.EULERS_CONSTANT = (0.57721566490153286060651);
        math.SQUARE_ROOT_2 = (1.41421356237309504880168872420969807856967187537695);
        math.INVERSE_ROOT_2 = (0.707106781186547524400844362105198);
        math.SQUARE_ROOT_3 = (1.73205080756887729352744634150587236694280525381038);
        math.SQUARE_ROOT_5 = (2.23606797749978969640917366873127623544061835961153);
        math.SQUARE_ROOT_10 = (3.16227766016837933199889354443271853371955513932522);
        math.CUBE_ROOT_2 = (1.25992104989487316476721060727822835057025146470151);
        math.CUBE_ROOT_3 = (1.44224957030740838232163831078010958839186925349935);
        math.FOURTH_ROOT_2 = (1.18920711500272106671749997056047591529297209246382);
        math.NATURAL_LOG_2 = (0.69314718055994530941723212145817656807550013436026);
        math.NATURAL_LOG_3 = (1.09861228866810969139524523692252570464749055782275);
        math.NATURAL_LOG_10 = (2.30258509299404568401799145468436420760110148862877);
        math.NATURAL_LOG_PI = (1.14472988584940017414342735135305871164729481291531);
        math.BASE_TEN_LOG_PI = (0.49714987269413385435126828829089887365167832438044);
        math.NATURAL_LOGARITHM_BASE_INVERSE = (0.36787944117144232159552377016146086744581113103177);
        math.NATURAL_LOGARITHM_BASE_SQUARED = (7.38905609893065022723042746057500781318031557055185);
        math.GOLDEN_RATIO = ((math.SQUARE_ROOT_5 + 1.0) / 2.0);
        math.DEGREE_RATIO = (math.PI_DIV_180);
        math.RADIAN_RATIO = (math.PI_OVER_180);
        math.GRAVITY_CONSTANT = 9.81;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
        math.abs = Math.abs;
        math.acos = Math.acos;
        math.asin = Math.asin;
        math.atan = Math.atan;
        math.atan2 = Math.atan2;
        math.exp = Math.exp;
        math.min = Math.min;
        math.random = Math.random;
        math.sqrt = Math.sqrt;
        math.log = Math.log;
        math.round = Math.round;
        math.floor = Math.floor;
        math.ceil = Math.ceil;
        math.sin = Math.sin;
        math.cos = Math.cos;
        math.tan = Math.tan;
        math.pow = Math.pow;
        math.max = Math.max;
        math.fpBits = function (f) {
            return math.floor(f);
        };
        math.intBits = function (i) {
            return i;
        };
        math.fpSign = function (f) {
            return (f >> 31);
        };
        math.fpExponent = function (f) {
            return (((math.fpBits(f) & 0x7fffffff) >> 23) - 127);
        };
        math.fpExponentSign = function (f) {
            return (math.fpExponent(f) >> 31);
        };
        math.fpPureMantissa = function (f) {
            return (math.fpBits(f) & 0x7fffff);
        };
        math.fpMantissa = function (f) {
            return (math.fpPureMantissa(f) | (1 << 23));
        };
        math.fpOneBits = 0x3F800000;
        math.flipSign = function (i, flip) {
            return ((flip == -1) ? -i : i);
        };
        math.absoluteValue = math.abs;
        math.raiseToPower = math.pow;
        math.isPositive = function (a) {
            return (a >= 0);
        };
        math.isNegative = function (a) {
            return (a < 0);
        };
        math.sameSigns = function (a, b) {
            return (math.isNegative(a) == math.isNegative(b));
        };
        math.copySign = function (a, b) {
            return (math.isNegative(b) ? -math.absoluteValue(a) : math.absoluteValue(a));
        };
        math.deltaRangeTest = function (a, b, epsilon) {
            if (typeof epsilon === "undefined") { epsilon = 0.0000001; }
            return ((math.absoluteValue(a - b) < epsilon) ? true : false);
        };
        math.clamp = function (value, low, high) {
            return math.max(low, math.min(value, high));
        };
        math.clampPositive = function (value) {
            return (value < 0 ? 0 : value);
        };
        math.clampNegative = function (value) {
            return (value > 0 ? 0 : value);
        };
        math.clampUnitSize = function (value) {
            return math.clamp(value, -1, 1);
        };
        math.highestBitSet = function (value) {
            return value == 0 ? (null) : (value < 0 ? 31 : ((math.log(value) / LN2) << 0));
        };
        math.lowestBitSet = function (value) {
            var temp;
            if (value == 0) {
                return null;
            }
            for(temp = 0; temp <= 31; temp++) {
                if (value & (1 << temp)) {
                    return temp;
                }
            }
            return null;
        };
        math.isPowerOfTwo = function (value) {
            return (value > 0 && math.highestBitSet(value) == math.lowestBitSet(value));
        };
        math.nearestPowerOfTwo = function (value) {
            if (value <= 1) {
                return 1;
            }
            var highestBit = math.highestBitSet(value);
            var roundingTest = value & (1 << (highestBit - 1));
            if (roundingTest != 0) {
                ++highestBit;
            }
            return 1 << highestBit;
        };
        math.ceilingPowerOfTwo = function (value) {
            if (value <= 1) {
                return 1;
            }
            var highestBit = math.highestBitSet(value);
            var mask = value & ((1 << highestBit) - 1);
            highestBit += mask && 1;
            return 1 << highestBit;
        };
        math.floorPowerOfTwo = function (value) {
            if (value <= 1) {
                return 1;
            }
            var highestBit = math.highestBitSet(value);
            return 1 << highestBit;
        };
        math.modulus = function (e, divisor) {
            return (e - math.floor(e / divisor) * divisor);
        };
        math.mod = math.modulus;
        math.alignUp = function (value, alignment) {
            var iRemainder = math.modulus(value, alignment);
            if (iRemainder == 0) {
                return (value);
            }
            return (value + (alignment - iRemainder));
        };
        math.alignDown = function (value, alignment) {
            var remainder = math.modulus(value, alignment);
            if (remainder == 0) {
                return (value);
            }
            return (value - remainder);
        };
        math.inverse = function (a) {
            return 1. / a;
        };
        math.log2 = function (f) {
            return math.log(f) / LN2;
        };
        math.trimFloat = function (f, precision) {
            return f;
        };
        math.realToInt32_chop = function (a) {
            return math.round(a);
        };
        math.realToInt32_floor = function (a) {
            return math.floor(a);
        };
        math.realToInt32_ceil = function (a) {
            return math.ceil(a);
        };
        math.nod = function (n, m) {
            var p = n % m;
            while(p != 0) {
                n = m;
                m = p;
                p = n % m;
            }
            return m;
        };
        math.nok = function (n, m) {
            return math.abs(n * m) / math.nod(n, m);
        };
        math.gcd = math.nod;
        math.lcm = math.nok;
        math.isRealEqual = function (a, b, tolerance) {
            if (typeof tolerance === "undefined") { tolerance = 1.19209e-007; }
            if (math.abs(b - a) <= tolerance) {
                return true;
            } else {
                return false;
            }
        };
        function calcPOTtextureSize(nPixels) {
            var w, h;
            var n = nPixels;
            w = Math.ceil(Math.log(n) / Math.LN2 / 2.0);
            h = Math.ceil(Math.log(n / Math.pow(2, w)) / Math.LN2);
            w = Math.pow(2, w);
            h = Math.pow(2, h);
            n = w * h;
            return [
                w, 
                h, 
                n
            ];
        }
        math.calcPOTtextureSize = calcPOTtextureSize;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (math) {
                                                function vec2(fValue1, fValue2) {
            var nArgumentsLength = arguments.length;
            var v2fVec = Vec2.stack[Vec2.stackPosition++];
            if (Vec2.stackPosition == Vec2.stackSize) {
                Vec2.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1:
                    v2fVec.set(arguments[0]);
                    break;
                case 2:
                    v2fVec.set(arguments[0], arguments[1]);
                    break;
                default:
                    v2fVec.x = v2fVec.y = 0.;
                    break;
            }
            return v2fVec;
        }
        math.vec2 = vec2;
        ;
                                                                function vec3(fValue1, fValue2, fValue3) {
            var nArgumentsLength = arguments.length;
            var v3fVec = Vec3.stack[Vec3.stackPosition++];
            if (Vec3.stackPosition == Vec3.stackSize) {
                Vec3.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1:
                    v3fVec.set(arguments[0]);
                    break;
                case 2:
                    v3fVec.set(arguments[0], arguments[1]);
                    break;
                case 3:
                    v3fVec.set(arguments[0], arguments[1], arguments[2]);
                    break;
                default:
                    v3fVec.x = v3fVec.y = v3fVec.z = 0.;
                    break;
            }
            return v3fVec;
        }
        math.vec3 = vec3;
        ;
                                                                                                function vec4(fValue1, fValue2, fValue3, fValue4) {
            var nArgumentsLength = arguments.length;
            var v4fVec = Vec4.stack[Vec4.stackPosition++];
            if (Vec4.stackPosition == Vec4.stackSize) {
                Vec4.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1:
                    v4fVec.set(arguments[0]);
                    break;
                case 2:
                    v4fVec.set(arguments[0], arguments[1]);
                    break;
                case 3:
                    v4fVec.set(arguments[0], arguments[1], arguments[2]);
                    break;
                case 4:
                    v4fVec.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                    break;
                default:
                    v4fVec.x = v4fVec.y = v4fVec.z = v4fVec.w = 0.;
                    break;
            }
            return v4fVec;
        }
        math.vec4 = vec4;
        ;
                                                        function quat4(fX, fY, fZ, fW) {
            var nArgumentsLength = arguments.length;
            var q4fQuat = Quat4.stack[Quat4.stackPosition++];
            if (Quat4.stackPosition == Quat4.stackSize) {
                Quat4.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1:
                    q4fQuat.set(arguments[0]);
                    break;
                case 2:
                    q4fQuat.set(arguments[0], arguments[1]);
                    break;
                case 4:
                    q4fQuat.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                    break;
                default:
                    q4fQuat.x = q4fQuat.y = q4fQuat.z = 0.;
                    q4fQuat.w = 1.;
                    break;
            }
            return q4fQuat;
        }
        math.quat4 = quat4;
        ;
                                                                                        function mat3(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9) {
            var nArgumentsLength = arguments.length;
            var m3fMat = Mat3.stack[Mat3.stackPosition++];
            if (Mat3.stackPosition == Mat3.stackSize) {
                Mat3.stackPosition = 0;
            }
            switch(nArgumentsLength) {
                case 1:
                    m3fMat.set(arguments[0]);
                    break;
                case 3:
                    m3fMat.set(arguments[0], arguments[1], arguments[2]);
                    break;
                case 9:
                    m3fMat.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
                    break;
                default:
                    m3fMat.set(0.);
                    break;
            }
            return m3fMat;
        }
        math.mat3 = mat3;
        ;
                                                                                                function mat4(fValue1, fValue2, fValue3, fValue4, fValue5, fValue6, fValue7, fValue8, fValue9, fValue10, fValue11, fValue12, fValue13, fValue14, fValue15, fValue16) {
            var nArgumentsLength = arguments.length;
            var m4fMat = Mat4.stack[Mat4.stackPosition++];
            if (Mat4.stackPosition == Mat4.stackSize) {
                Mat4.stackPosition = 0;
            }
            if (nArgumentsLength === 2) {
                if (isBoolean(arguments[1])) {
                    if (arguments[1]) {
                        m4fMat.data = arguments[0];
                    } else {
                        m4fMat.set(arguments[0]);
                    }
                } else {
                    m4fMat.set(arguments[0], arguments[1]);
                }
            } else {
                switch(nArgumentsLength) {
                    case 1:
                        if (arguments[0] instanceof Mat3) {
                            m4fMat.set(arguments[0], vec3(0.));
                        } else {
                            m4fMat.set(arguments[0]);
                        }
                        break;
                    case 4:
                        m4fMat.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;
                    case 16:
                        m4fMat.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
                        break;
                    default:
                        break;
                }
            }
            return m4fMat;
        }
        math.mat4 = mat4;
        ;
    })(akra.math || (akra.math = {}));
    var math = akra.math;
})(akra || (akra = {}));
var akra;
(function (akra) {
    akra.Vec2 = math.Vec2;
    akra.Vec3 = math.Vec3;
    akra.Vec4 = math.Vec4;
    akra.Mat3 = math.Mat3;
    akra.Mat4 = math.Mat4;
    akra.Quat4 = math.Quat4;
    akra.vec2 = math.vec2;
    akra.vec3 = math.vec3;
    akra.vec4 = math.vec4;
    akra.quat4 = math.quat4;
    akra.mat3 = math.mat3;
    akra.mat4 = math.mat4;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
        var Box = (function () {
            function Box(l, t, ff, r, b, bb) {
                if (typeof l === "undefined") { l = 0; }
                if (typeof t === "undefined") { t = 0; }
                if (typeof ff === "undefined") { ff = 0; }
                if (typeof r === "undefined") { r = 1; }
                if (typeof b === "undefined") { b = 1; }
                if (typeof bb === "undefined") { bb = 1; }
                this.left = 0;
                this.top = 0;
                this.front = 0;
                this.right = 0;
                this.bottom = 0;
                this.back = 0;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                switch(arguments.length) {
                    case 1:
                        this.left = arguments[0].left;
                        this.top = arguments[0].top;
                        this.front = arguments[0].front;
                        this.right = arguments[0].right;
                        this.bottom = arguments[0].bottom;
                        this.back = arguments[0].back;
                        break;
                    case 3:
                    case 6:
                        this.left = l;
                        this.top = t;
                        this.front = ff;
                        this.right = r;
                        this.bottom = b;
                        this.back = bb;
                        break;
                    case 4:
                        this.left = l;
                        this.top = t;
                        this.right = ff;
                        this.bottom = r;
                        this.back = 1;
                        this.front = 0;
                        break;
                    case 5:
 {
                            logger.setSourceLocation("geometry/Box.ts", 62);
                            logger.error("invalid number of arguments");
                        }
                        ;
                }
 {
                    logger.setSourceLocation("geometry/Box.ts", 65);
                    logger.assert(this.right >= this.left && this.bottom >= this.top && this.back >= this.front);
                }
                ;
            }
            Box.prototype.width = function () {
                return this.right - this.left;
            };
            Box.prototype.height = function () {
                return this.bottom - this.top;
            };
            Box.prototype.depth = function () {
                return this.back - this.front;
            };
            Box.prototype.contains = function (pDest) {
                return (pDest.left >= this.left && pDest.top >= this.top && pDest.front >= this.front && pDest.right <= this.right && pDest.bottom <= this.bottom && pDest.back <= this.back);
            };
            Box.prototype.setPosition = function (iLeft, iTop, iWidth, iHeight) {
                this.left = iLeft;
                this.top = iTop;
                this.right = iLeft + iWidth;
                this.bottom = iTop + iHeight;
            };
            Box.prototype.isEqual = function (pDest) {
                return (pDest.left == this.left && pDest.top == this.top && pDest.front == this.front && pDest.right == this.right && pDest.bottom == this.bottom && pDest.back == this.back);
            };
            return Box;
        })();
        geometry.Box = Box;        
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (pixelUtil) {
        var PixelBox = (function (_super) {
            __extends(PixelBox, _super);
            function PixelBox(iWidth, iHeight, iDepth, ePixelFormat, pPixelData) {
                if (typeof pPixelData === "undefined") { pPixelData = null; }
                if (arguments.length === 0) {
                    return;
                }
                if (arguments.length >= 4) {
                    _super.call(this, 0, 0, 0, iWidth, iHeight, iDepth);
                    this.data = isDef(arguments[4]) ? (arguments[4]) : null;
                    this.format = arguments[3];
                } else {
                    _super.call(this, arguments[0]);
                    this.data = arguments[2];
                    this.format = arguments[1];
                }
                this.setConsecutive();
            }
            PixelBox.prototype.setConsecutive = function () {
                this.rowPitch = this.width;
                this.slicePitch = this.width * this.height;
            };
            PixelBox.prototype.getRowSkip = function () {
                return this.rowPitch - this.width;
            };
            PixelBox.prototype.getSliceSkip = function () {
                return this.slicePitch - (this.height * this.rowPitch);
            };
            PixelBox.prototype.isConsecutive = function () {
                return this.rowPitch == this.width && this.slicePitch == this.width * this.height;
            };
            PixelBox.prototype.getConsecutiveSize = function () {
                return pixelUtil.getMemorySize(this.width, this.height, this.depth, this.format);
            };
            PixelBox.prototype.getSubBox = function (pDest) {
                if (pixelUtil.isCompressed(this.format)) {
                    if (pDest.left == this.left && pDest.top == this.top && pDest.front == this.front && pDest.right == this.right && pDest.bottom == this.bottom && pDest.back == this.back) {
                        return this;
                    }
 {
                        logger.setSourceLocation("PixelBox.ts", 65);
                        logger.error("Cannot return subvolume of compressed PixelBuffer", "PixelBox::getSubVolume");
                    }
                    ;
                }
                if (!this.contains(pDest)) {
 {
                        logger.setSourceLocation("PixelBox.ts", 70);
                        logger.error("Bounds out of range", "PixelBox::getSubVolume");
                    }
                    ;
                }
                var elemSize = pixelUtil.getNumElemBytes(this.format);
                var rval = new PixelBox(pDest.width, pDest.height, pDest.depth, this.format, (this.data).subarray(((pDest.left - this.left) * elemSize) + ((pDest.top - this.top) * this.rowPitch * elemSize) + ((pDest.front - this.front) * this.slicePitch * elemSize)));
                rval.rowPitch = this.rowPitch;
                rval.slicePitch = this.slicePitch;
                rval.format = this.format;
                return rval;
            };
            PixelBox.prototype.getColorAt = function (pColor, x, y, z) {
                if (typeof z === "undefined") { z = 0; }
                var pixelSize = pixelUtil.getNumElemBytes(this.format);
                var pixelOffset = pixelSize * (z * this.slicePitch + y * this.rowPitch + x);
                pixelUtil.unpackColour(pColor, this.format, this.data.subarray(pixelOffset, pixelOffset + pixelSize));
                return pColor;
            };
            PixelBox.prototype.setColorAt = function (pColor, x, y, z) {
                if (typeof z === "undefined") { z = 0; }
                var pixelSize = pixelUtil.getNumElemBytes(this.format);
                var pixelOffset = pixelSize * (z * this.slicePitch + y * this.rowPitch + x);
                pixelUtil.packColour(pColor, this.format, this.data.subarray(pixelOffset, pixelOffset + pixelSize));
            };
            PixelBox.prototype.scale = function (pDest, eFilter) {
                if (typeof eFilter === "undefined") { eFilter = EFilters.BILINEAR; }
                return false;
            };
            PixelBox.prototype.refresh = function (pExtents, ePixelFormat, pPixelData) {
                this.left = pExtents.left;
                this.top = pExtents.top;
                this.front = pExtents.front;
                this.right = pExtents.right;
                this.bottom = pExtents.bottom;
                this.back = pExtents.back;
                this.data = pPixelData;
                this.format = ePixelFormat;
            };
            return PixelBox;
        })(geometry.Box);
        pixelUtil.PixelBox = PixelBox;        
    })(akra.pixelUtil || (akra.pixelUtil = {}));
    var pixelUtil = akra.pixelUtil;
})(akra || (akra = {}));
var akra;
(function (akra) {
    function fillPixelFormats(pData) {
        var pPixelFormats = [];
        for(var i = 0; i < pData.length; ++i) {
            var pEl = pData[i];
            pPixelFormats.push({
                name: pEl[0],
                elemBytes: pEl[1],
                flags: pEl[2],
                componentType: pEl[3],
                componentCount: pEl[4],
                rbits: pEl[5],
                gbits: pEl[6],
                bbits: pEl[7],
                abits: pEl[8],
                rmask: pEl[9],
                gmask: pEl[10],
                bmask: pEl[11],
                amask: pEl[12],
                rshift: pEl[13],
                gshift: pEl[14],
                bshift: pEl[15],
                ashift: pEl[16]
            });
        }
        return pPixelFormats;
    }
    var pPixelFormats = fillPixelFormats([
        [
            "PF_UNKNOWN", 
            0, 
            0, 
            EPixelComponentTypes.BYTE, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_L8", 
            1, 
            EPixelFormatFlags.LUMINANCE | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            1, 
            8, 
            0, 
            0, 
            0, 
            0xFF, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_L16", 
            2, 
            EPixelFormatFlags.LUMINANCE | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.SHORT, 
            1, 
            16, 
            0, 
            0, 
            0, 
            0xFFFF, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_A8", 
            1, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            1, 
            0, 
            0, 
            0, 
            8, 
            0, 
            0, 
            0, 
            0xFF, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_A4L4", 
            1, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.LUMINANCE | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            2, 
            4, 
            0, 
            0, 
            4, 
            0x0F, 
            0, 
            0, 
            0xF0, 
            0, 
            0, 
            0, 
            4
        ], 
        [
            "PF_BYTE_LA", 
            2, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.LUMINANCE, 
            EPixelComponentTypes.BYTE, 
            2, 
            8, 
            0, 
            0, 
            8, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_R5G6B5", 
            2, 
            EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            3, 
            5, 
            6, 
            5, 
            0, 
            0xF800, 
            0x07E0, 
            0x001F, 
            0, 
            11, 
            5, 
            0, 
            0
        ], 
        [
            "PF_B5G6R5", 
            2, 
            EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            3, 
            5, 
            6, 
            5, 
            0, 
            0x001F, 
            0x07E0, 
            0xF800, 
            0, 
            0, 
            5, 
            11, 
            0
        ], 
        [
            "PF_A4R4G4B4", 
            2, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            4, 
            4, 
            4, 
            4, 
            4, 
            0x0F00, 
            0x00F0, 
            0x000F, 
            0xF000, 
            8, 
            4, 
            0, 
            12
        ], 
        [
            "PF_A1R5G5B5", 
            2, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            4, 
            5, 
            5, 
            5, 
            1, 
            0x7C00, 
            0x03E0, 
            0x001F, 
            0x8000, 
            10, 
            5, 
            0, 
            15, 
            
        ], 
        [
            "PF_R8G8B8", 
            3, 
            EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            3, 
            8, 
            8, 
            8, 
            0, 
            0xFF0000, 
            0x00FF00, 
            0x0000FF, 
            0, 
            16, 
            8, 
            0, 
            0
        ], 
        [
            "PF_B8G8R8", 
            3, 
            EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            3, 
            8, 
            8, 
            8, 
            0, 
            0x0000FF, 
            0x00FF00, 
            0xFF0000, 
            0, 
            0, 
            8, 
            16, 
            0
        ], 
        [
            "PF_A8R8G8B8", 
            4, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            4, 
            8, 
            8, 
            8, 
            8, 
            0x00FF0000, 
            0x0000FF00, 
            0x000000FF, 
            0xFF000000, 
            16, 
            8, 
            0, 
            24
        ], 
        [
            "PF_A8B8G8R8", 
            4, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            4, 
            8, 
            8, 
            8, 
            8, 
            0x000000FF, 
            0x0000FF00, 
            0x00FF0000, 
            0xFF000000, 
            0, 
            8, 
            16, 
            24, 
            
        ], 
        [
            "PF_B8G8R8A8", 
            4, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            4, 
            8, 
            8, 
            8, 
            8, 
            0x0000FF00, 
            0x00FF0000, 
            0xFF000000, 
            0x000000FF, 
            8, 
            16, 
            24, 
            0
        ], 
        [
            "PF_A2R10G10B10", 
            4, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            4, 
            10, 
            10, 
            10, 
            2, 
            0x3FF00000, 
            0x000FFC00, 
            0x000003FF, 
            0xC0000000, 
            20, 
            10, 
            0, 
            30
        ], 
        [
            "PF_A2B10G10R10", 
            4, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            4, 
            10, 
            10, 
            10, 
            2, 
            0x000003FF, 
            0x000FFC00, 
            0x3FF00000, 
            0xC0000000, 
            0, 
            10, 
            20, 
            30
        ], 
        [
            "PF_DXT1", 
            0, 
            EPixelFormatFlags.COMPRESSED | EPixelFormatFlags.HASALPHA, 
            EPixelComponentTypes.BYTE, 
            3, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_DXT2", 
            0, 
            EPixelFormatFlags.COMPRESSED | EPixelFormatFlags.HASALPHA, 
            EPixelComponentTypes.BYTE, 
            4, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_DXT3", 
            0, 
            EPixelFormatFlags.COMPRESSED | EPixelFormatFlags.HASALPHA, 
            EPixelComponentTypes.BYTE, 
            4, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_DXT4", 
            0, 
            EPixelFormatFlags.COMPRESSED | EPixelFormatFlags.HASALPHA, 
            EPixelComponentTypes.BYTE, 
            4, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_DXT5", 
            0, 
            EPixelFormatFlags.COMPRESSED | EPixelFormatFlags.HASALPHA, 
            EPixelComponentTypes.BYTE, 
            4, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_FLOAT16_RGB", 
            6, 
            EPixelFormatFlags.FLOAT, 
            EPixelComponentTypes.FLOAT16, 
            3, 
            16, 
            16, 
            16, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_FLOAT16_RGBA", 
            8, 
            EPixelFormatFlags.FLOAT | EPixelFormatFlags.HASALPHA, 
            EPixelComponentTypes.FLOAT16, 
            4, 
            16, 
            16, 
            16, 
            16, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_FLOAT32_RGB", 
            12, 
            EPixelFormatFlags.FLOAT, 
            EPixelComponentTypes.FLOAT32, 
            3, 
            32, 
            32, 
            32, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_FLOAT32_RGBA", 
            16, 
            EPixelFormatFlags.FLOAT | EPixelFormatFlags.HASALPHA, 
            EPixelComponentTypes.FLOAT32, 
            4, 
            32, 
            32, 
            32, 
            32, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_X8R8G8B8", 
            4, 
            EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            3, 
            8, 
            8, 
            8, 
            0, 
            0x00FF0000, 
            0x0000FF00, 
            0x000000FF, 
            0xFF000000, 
            16, 
            8, 
            0, 
            24
        ], 
        [
            "PF_X8B8G8R8", 
            4, 
            EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            3, 
            8, 
            8, 
            8, 
            0, 
            0x000000FF, 
            0x0000FF00, 
            0x00FF0000, 
            0xFF000000, 
            0, 
            8, 
            16, 
            24
        ], 
        [
            "PF_R8G8B8A8", 
            4, 
            EPixelFormatFlags.HASALPHA | EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            4, 
            8, 
            8, 
            8, 
            8, 
            0xFF000000, 
            0x00FF0000, 
            0x0000FF00, 
            0x000000FF, 
            24, 
            16, 
            8, 
            0
        ], 
        [
            "PF_FLOAT32_DEPTH", 
            4, 
            EPixelFormatFlags.DEPTH, 
            EPixelComponentTypes.FLOAT32, 
            1, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_SHORT_RGBA", 
            8, 
            EPixelFormatFlags.HASALPHA, 
            EPixelComponentTypes.SHORT, 
            4, 
            16, 
            16, 
            16, 
            16, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_R3G3B2", 
            1, 
            EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            3, 
            3, 
            3, 
            2, 
            0, 
            0xE0, 
            0x1C, 
            0x03, 
            0, 
            5, 
            2, 
            0, 
            0
        ], 
        [
            "PF_FLOAT16_R", 
            2, 
            EPixelFormatFlags.FLOAT, 
            EPixelComponentTypes.FLOAT16, 
            1, 
            16, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_FLOAT32_R", 
            4, 
            EPixelFormatFlags.FLOAT, 
            EPixelComponentTypes.FLOAT32, 
            1, 
            32, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_SHORT_GR", 
            4, 
            EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.SHORT, 
            2, 
            16, 
            16, 
            0, 
            0, 
            0x0000FFFF, 
            0xFFFF0000, 
            0, 
            0, 
            0, 
            16, 
            0, 
            0
        ], 
        [
            "PF_FLOAT16_GR", 
            4, 
            EPixelFormatFlags.FLOAT, 
            EPixelComponentTypes.FLOAT16, 
            2, 
            16, 
            16, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_FLOAT32_GR", 
            8, 
            EPixelFormatFlags.FLOAT, 
            EPixelComponentTypes.FLOAT32, 
            2, 
            32, 
            32, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_SHORT_RGB", 
            6, 
            0, 
            EPixelComponentTypes.SHORT, 
            3, 
            16, 
            16, 
            16, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_PVRTC_RGB2", 
            0, 
            EPixelFormatFlags.COMPRESSED, 
            EPixelComponentTypes.BYTE, 
            3, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_PVRTC_RGBA2", 
            0, 
            EPixelFormatFlags.COMPRESSED | EPixelFormatFlags.HASALPHA, 
            EPixelComponentTypes.BYTE, 
            4, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_PVRTC_RGB4", 
            0, 
            EPixelFormatFlags.COMPRESSED, 
            EPixelComponentTypes.BYTE, 
            3, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_PVRTC_RGBA4", 
            0, 
            EPixelFormatFlags.COMPRESSED | EPixelFormatFlags.HASALPHA, 
            EPixelComponentTypes.BYTE, 
            4, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_R8", 
            1, 
            EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            1, 
            8, 
            0, 
            0, 
            0, 
            0xFF0000, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_RG8", 
            2, 
            EPixelFormatFlags.NATIVEENDIAN, 
            EPixelComponentTypes.BYTE, 
            2, 
            8, 
            8, 
            0, 
            0, 
            0xFF0000, 
            0x00FF00, 
            0, 
            0, 
            8, 
            0, 
            0, 
            0
        ], 
        [
            "PF_DEPTH_BYTE", 
            1, 
            EPixelFormatFlags.DEPTH, 
            EPixelComponentTypes.BYTE, 
            1, 
            8, 
            0, 
            0, 
            0, 
            0xFF, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_DEPTH_SHORT", 
            2, 
            EPixelFormatFlags.DEPTH, 
            EPixelComponentTypes.SHORT, 
            1, 
            16, 
            0, 
            0, 
            0, 
            0xFFFF, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_DEPTH_INT", 
            4, 
            EPixelFormatFlags.DEPTH, 
            EPixelComponentTypes.INT, 
            1, 
            32, 
            0, 
            0, 
            0, 
            0xFFFFFFFF, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ], 
        [
            "PF_DEPTH24STENCIL8", 
            4, 
            EPixelFormatFlags.DEPTH | EPixelFormatFlags.STENCIL, 
            EPixelComponentTypes.INT, 
            1, 
            24, 
            8, 
            0, 
            0, 
            0x00FFFFFF, 
            0xFF000000, 
            0, 
            0, 
            0, 
            24, 
            0, 
            0
        ], 
        
    ]);
    var _pColorValue = {
        r: 0.,
        g: 0.,
        b: 0.,
        a: 1.
    };
    (function (pixelUtil) {
        inline;
        function getDescriptionFor(eFmt) {
            var ord = eFmt;
 {
                logger.setSourceLocation("pixelUtil/pixelUtil.ts", 736);
                logger.assert(ord >= 0 && ord < EPixelFormats.TOTAL, "getDescriptionFor:" + ord);
            }
            ;
            return pPixelFormats[ord];
        }
        inline;
        function getNumElemBytes(eFormat) {
            return getDescriptionFor(eFormat).elemBytes;
        }
        inline;
        function getNumElemBits(eFormat) {
            return getDescriptionFor(eFormat).elemBytes * 8;
        }
        function getMemorySize(iWidth, iHeight, iDepth, eFormat) {
            if (isCompressed(eFormat)) {
                switch(eFormat) {
                    case EPixelFormats.DXT1:
                        return Math.floor((iWidth + 3) / 4) * Math.floor((iHeight + 3) / 4) * 8 * iDepth;
                    case EPixelFormats.DXT2:
                    case EPixelFormats.DXT3:
                    case EPixelFormats.DXT4:
                    case EPixelFormats.DXT5:
                        return Math.floor((iWidth + 3) / 4) * Math.floor((iHeight + 3) / 4) * 16 * iDepth;
                    case EPixelFormats.PVRTC_RGB2:
                    case EPixelFormats.PVRTC_RGBA2:
 {
                            logger.setSourceLocation("pixelUtil/pixelUtil.ts", 798);
                            logger.assert(iDepth == 1);
                        }
                        ;
                        return (math.max(iWidth, 16) * math.max(iHeight, 8) * 2 + 7) / 8;
                    case EPixelFormats.PVRTC_RGB4:
                    case EPixelFormats.PVRTC_RGBA4:
 {
                            logger.setSourceLocation("pixelUtil/pixelUtil.ts", 802);
                            logger.assert(iDepth == 1);
                        }
                        ;
                        return (math.max(iWidth, 8) * math.max(iHeight, 8) * 4 + 7) / 8;
                    default:
 {
                            logger.setSourceLocation("pixelUtil/pixelUtil.ts", 805);
                            logger.error("Invalid compressed pixel format", "PixelUtil::getMemorySize");
                        }
                        ;
                }
            } else {
                return iWidth * iHeight * iDepth * getNumElemBytes(eFormat);
            }
        }
        pixelUtil.getMemorySize = getMemorySize;
        inline;
        function getFlags(eFormat) {
            return getDescriptionFor(eFormat).flags;
        }
        inline;
        function hasAlpha(eFormat) {
            return (getFlags(eFormat) & EPixelFormatFlags.HASALPHA) > 0;
        }
        inline;
        function isFloatingPoint(eFormat) {
            return (getFlags(eFormat) & EPixelFormatFlags.FLOAT) > 0;
        }
        inline;
        function isCompressed(eFormat) {
            return (getFlags(eFormat) & EPixelFormatFlags.COMPRESSED) > 0;
        }
        inline;
        function isDepth(eFormat) {
            return (getFlags(eFormat) & EPixelFormatFlags.DEPTH) > 0;
        }
        inline;
        function isNativeEndian(eFormat) {
            return (getFlags(eFormat) & EPixelFormatFlags.NATIVEENDIAN) > 0;
        }
        inline;
        function isLuminance(eFormat) {
            return (getFlags(eFormat) & EPixelFormatFlags.LUMINANCE) > 0;
        }
        function isValidExtent(iWidth, iHeight, iDepth, eFormat) {
            if (isCompressed(eFormat)) {
                switch(eFormat) {
                    case EPixelFormats.DXT1:
                    case EPixelFormats.DXT2:
                    case EPixelFormats.DXT3:
                    case EPixelFormats.DXT4:
                    case EPixelFormats.DXT5:
                        return ((iWidth & 3) == 0 && (iHeight & 3) == 0 && iDepth == 1);
                    default:
                        return true;
                }
            } else {
                return true;
            }
        }
        pixelUtil.isValidExtent = isValidExtent;
        function getBitDepths(eFormat) {
            var des = getDescriptionFor(eFormat);
            var rgba = [];
            rgba[0] = des.rbits;
            rgba[1] = des.gbits;
            rgba[2] = des.bbits;
            rgba[3] = des.abits;
            return rgba;
        }
        pixelUtil.getBitDepths = getBitDepths;
        function getBitMasks(eFormat) {
            var des = getDescriptionFor(eFormat);
            var rgba = [];
            rgba[0] = des.rmask;
            rgba[1] = des.gmask;
            rgba[2] = des.bmask;
            rgba[3] = des.amask;
            return rgba;
        }
        pixelUtil.getBitMasks = getBitMasks;
        function getBitShifts(eFormat) {
            var des = getDescriptionFor(eFormat);
            var rgba = [];
            rgba[0] = des.rshift;
            rgba[1] = des.gshift;
            rgba[2] = des.bshift;
            rgba[3] = des.ashift;
            return rgba;
        }
        pixelUtil.getBitShifts = getBitShifts;
        inline;
        function getFormatName(eSrcFormat) {
            return getDescriptionFor(eSrcFormat).name;
        }
        function isAccessible(eSrcFormat) {
            if (eSrcFormat == EPixelFormats.UNKNOWN) {
                return false;
            }
            var flags = getFlags(eSrcFormat);
            return !((flags & EPixelFormatFlags.COMPRESSED) || (flags & EPixelFormatFlags.DEPTH));
        }
        pixelUtil.isAccessible = isAccessible;
        inline;
        function getComponentType(eFmt) {
            return getDescriptionFor(eFmt).componentType;
        }
        inline;
        function getComponentCount(eFmt) {
            return getDescriptionFor(eFmt).componentCount;
        }
        inline;
        function getComponentTypeBits(eFormat) {
            var eType = getComponentType(eFormat);
            switch(eType) {
                case EPixelComponentTypes.BYTE:
                    return 8;
                case EPixelComponentTypes.SHORT:
                    return 16;
                case EPixelComponentTypes.FLOAT16:
                    return 16;
                case EPixelComponentTypes.FLOAT32:
                    return 32;
            }
            return 0;
        }
        function getFormatFromName(sName, isAccessibleOnly, isCaseSensitive) {
            if (typeof isAccessibleOnly === "undefined") { isAccessibleOnly = false; }
            if (typeof isCaseSensitive === "undefined") { isCaseSensitive = false; }
            var tmp = sName;
            if (!isCaseSensitive) {
                tmp = tmp.toUpperCase();
            }
            for(var i = 0; i < EPixelFormats.TOTAL; ++i) {
                var ePf = i;
                if (!isAccessibleOnly || isAccessible(ePf)) {
                    if (tmp == getFormatName(ePf)) {
                        return ePf;
                    }
                }
            }
            return EPixelFormats.UNKNOWN;
        }
        pixelUtil.getFormatFromName = getFormatFromName;
        function getBNFExpressionOfPixelFormats(isAccessibleOnly) {
            if (typeof isAccessibleOnly === "undefined") { isAccessibleOnly = false; }
            var formatNames = new Pair[]();
            for(var i = 0; i < EPixelFormats.TOTAL; ++i) {
                var ePf = (i);
                if (!isAccessibleOnly || isAccessible(ePf)) {
                    var formatName = getFormatName(ePf);
                    formatNames.push({
                        first: formatName.length,
                        second: formatName
                    });
                }
            }
            var result = "";
            for(var j in formatNames) {
                if (!isEmpty(result)) {
                    result += " | ";
                }
                result += "'" + formatNames[j] + "'";
            }
            return result;
        }
        pixelUtil.getBNFExpressionOfPixelFormats = getBNFExpressionOfPixelFormats;
        function getFormatForBitDepths(eFmt, iIntegerBits, iFloatBits) {
            switch(iIntegerBits) {
                case 16:
                    switch(eFmt) {
                        case EPixelFormats.R8G8B8:
                        case EPixelFormats.X8R8G8B8:
                            return EPixelFormats.R5G6B5;
                        case EPixelFormats.B8G8R8:
                        case EPixelFormats.X8B8G8R8:
                            return EPixelFormats.B5G6R5;
                        case EPixelFormats.A8R8G8B8:
                        case EPixelFormats.R8G8B8A8:
                        case EPixelFormats.A8B8G8R8:
                        case EPixelFormats.B8G8R8A8:
                            return EPixelFormats.A4R4G4B4;
                        case EPixelFormats.A2R10G10B10:
                        case EPixelFormats.A2B10G10R10:
                            return EPixelFormats.A1R5G5B5;
                        default:
                            break;
                    }
                    break;
                case 32:
                    switch(eFmt) {
                        case EPixelFormats.R5G6B5:
                            return EPixelFormats.X8R8G8B8;
                        case EPixelFormats.B5G6R5:
                            return EPixelFormats.X8B8G8R8;
                        case EPixelFormats.A4R4G4B4:
                            return EPixelFormats.A8R8G8B8;
                        case EPixelFormats.A1R5G5B5:
                            return EPixelFormats.A2R10G10B10;
                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }
            switch(iFloatBits) {
                case 16:
                    switch(eFmt) {
                        case EPixelFormats.FLOAT32_R:
                            return EPixelFormats.FLOAT16_R;
                        case EPixelFormats.FLOAT32_RGB:
                            return EPixelFormats.FLOAT16_RGB;
                        case EPixelFormats.FLOAT32_RGBA:
                            return EPixelFormats.FLOAT16_RGBA;
                        default:
                            break;
                    }
                    break;
                case 32:
                    switch(eFmt) {
                        case EPixelFormats.FLOAT16_R:
                            return EPixelFormats.FLOAT32_R;
                        case EPixelFormats.FLOAT16_RGB:
                            return EPixelFormats.FLOAT32_RGB;
                        case EPixelFormats.FLOAT16_RGBA:
                            return EPixelFormats.FLOAT32_RGBA;
                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }
            return eFmt;
        }
        pixelUtil.getFormatForBitDepths = getFormatForBitDepths;
        inline;
        function packColour(cColour, ePf, pDest) {
            packColourFloat(cColour.r, cColour.g, cColour.b, cColour.a, ePf, pDest);
        }
        function packColourUint(r, g, b, a, ePf, pDest) {
            var des = getDescriptionFor(ePf);
            if (des.flags & EPixelFormatFlags.NATIVEENDIAN) {
                var value = ((bf.fixedToFixed(r, 8, des.rbits) << des.rshift) & des.rmask) | ((bf.fixedToFixed(g, 8, des.gbits) << des.gshift) & des.gmask) | ((bf.fixedToFixed(b, 8, des.bbits) << des.bshift) & des.bmask) | ((bf.fixedToFixed(a, 8, des.abits) << des.ashift) & des.amask);
                bf.intWrite(pDest, des.elemBytes, value);
            } else {
                packColourFloat(r / 255.0, g / 255.0, b / 255.0, a / 255.0, ePf, pDest);
            }
        }
        pixelUtil.packColourUint = packColourUint;
        function packColourFloat(r, g, b, a, ePf, pDest) {
            var des = getDescriptionFor(ePf);
            if (des.flags & EPixelFormatFlags.NATIVEENDIAN) {
                var value = ((bf.floatToFixed(r, des.rbits) << des.rshift) & des.rmask) | ((bf.floatToFixed(g, des.gbits) << des.gshift) & des.gmask) | ((bf.floatToFixed(b, des.bbits) << des.bshift) & des.bmask) | ((bf.floatToFixed(a, des.abits) << des.ashift) & des.amask);
                bf.intWrite(pDest, des.elemBytes, value);
            } else {
                switch(ePf) {
                    case EPixelFormats.FLOAT32_R:
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = r;
                        break;
                    case EPixelFormats.FLOAT32_GR:
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = g;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 2))[1] = r;
                        break;
                    case EPixelFormats.FLOAT32_RGB:
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = r;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 2))[1] = g;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 3))[2] = b;
                        break;
                    case EPixelFormats.FLOAT32_RGBA:
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 1))[0] = r;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 2))[1] = g;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 3))[2] = b;
                        (new Float32Array(pDest.buffer, pDest.byteOffset, 4))[3] = a;
                        break;
                    case EPixelFormats.FLOAT16_R:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = bf.floatToHalf(r);
                        break;
                    case EPixelFormats.FLOAT16_GR:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = bf.floatToHalf(g);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = bf.floatToHalf(r);
                        break;
                    case EPixelFormats.FLOAT16_RGB:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = bf.floatToHalf(r);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = bf.floatToHalf(g);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = bf.floatToHalf(b);
                        break;
                    case EPixelFormats.FLOAT16_RGBA:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = bf.floatToHalf(r);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = bf.floatToHalf(g);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = bf.floatToHalf(b);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 4))[3] = bf.floatToHalf(a);
                        break;
                    case EPixelFormats.SHORT_RGB:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = bf.floatToFixed(r, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = bf.floatToFixed(g, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = bf.floatToFixed(b, 16);
                        break;
                    case EPixelFormats.SHORT_RGBA:
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 1))[0] = bf.floatToFixed(r, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 2))[1] = bf.floatToFixed(g, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 3))[2] = bf.floatToFixed(b, 16);
                        (new Uint16Array(pDest.buffer, pDest.byteOffset, 4))[3] = bf.floatToFixed(a, 16);
                        break;
                    case EPixelFormats.BYTE_LA:
                        pDest[0] = bf.floatToFixed(r, 8);
                        pDest[1] = bf.floatToFixed(a, 8);
                        break;
                    default:
 {
                            logger.setSourceLocation("pixelUtil/pixelUtil.ts", 1249);
                            logger.error("pack to " + getFormatName(ePf) + " not implemented", "PixelUtil::packColour");
                        }
                        ;
                        break;
                }
            }
        }
        pixelUtil.packColourFloat = packColourFloat;
        function unpackColour(cColour, ePf, pSrc) {
            unpackColourFloat(cColour, ePf, pSrc);
        }
        pixelUtil.unpackColour = unpackColour;
        function unpackColourUint(rgba, ePf, pSrc) {
            var des = getDescriptionFor(ePf);
            var r = 0, g = 0, b = 0, a = 0;
            if (des.flags & EPixelFormatFlags.NATIVEENDIAN) {
                var value = bf.intRead(pSrc, des.elemBytes);
                if (des.flags & EPixelFormatFlags.LUMINANCE) {
                    r = g = b = bf.fixedToFixed((value & des.rmask) >> des.rshift, des.rbits, 8);
                } else {
                    r = bf.fixedToFixed((value & des.rmask) >> des.rshift, des.rbits, 8);
                    g = bf.fixedToFixed((value & des.gmask) >> des.gshift, des.gbits, 8);
                    b = bf.fixedToFixed((value & des.bmask) >> des.bshift, des.bbits, 8);
                }
                if (des.flags & EPixelFormatFlags.HASALPHA) {
                    a = bf.fixedToFixed((value & des.amask) >> des.ashift, des.abits, 8);
                } else {
                    a = 255;
                }
            } else {
                var pRGBA = _pColorValue;
                unpackColourFloat(pRGBA, ePf, pSrc);
                r = bf.floatToFixed(pRGBA.r, 8);
                g = bf.floatToFixed(pRGBA.g, 8);
                b = bf.floatToFixed(pRGBA.b, 8);
                a = bf.floatToFixed(pRGBA.a, 8);
            }
            rgba[0] = r;
            rgba[1] = g;
            rgba[2] = b;
            rgba[3] = a;
        }
        pixelUtil.unpackColourUint = unpackColourUint;
        function unpackColourFloat(rgba, ePf, pSrc) {
            var des = getDescriptionFor(ePf);
            var r = 0., g = 0., b = 0., a = 0.;
            if (des.flags & EPixelFormatFlags.NATIVEENDIAN) {
                var value = bf.intRead(pSrc, des.elemBytes);
                if (des.flags & EPixelFormatFlags.LUMINANCE) {
                    r = g = b = bf.fixedToFloat((value & des.rmask) >>> des.rshift, des.rbits);
                } else {
                    r = bf.fixedToFloat((value & des.rmask) >>> des.rshift, des.rbits);
                    g = bf.fixedToFloat((value & des.gmask) >>> des.gshift, des.gbits);
                    b = bf.fixedToFloat((value & des.bmask) >>> des.bshift, des.bbits);
                }
                if (des.flags & EPixelFormatFlags.HASALPHA) {
                    a = bf.fixedToFloat((value & des.amask) >>> des.ashift, des.abits);
                } else {
                    a = 1.0;
                }
            } else {
                switch(ePf) {
                    case EPixelFormats.FLOAT32_R:
                        r = g = b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        a = 1.0;
                        break;
                    case EPixelFormats.FLOAT32_GR:
                        g = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        r = b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 2))[1];
                        a = 1.0;
                        break;
                    case EPixelFormats.FLOAT32_RGB:
                        r = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        g = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 2))[1];
                        b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 3))[2];
                        a = 1.0;
                        break;
                    case EPixelFormats.FLOAT32_RGBA:
                        r = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 1))[0];
                        g = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 2))[1];
                        b = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 3))[2];
                        a = (new Float32Array(pSrc.buffer, pSrc.byteOffset, 4))[3];
                        break;
                    case EPixelFormats.FLOAT16_R:
                        r = g = b = bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        a = 1.0;
                        break;
                    case EPixelFormats.FLOAT16_GR:
                        g = bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        r = b = bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1]);
                        a = 1.0;
                        break;
                    case EPixelFormats.FLOAT16_RGB:
                        r = bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        g = bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[1]);
                        b = bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[2]);
                        a = 1.0;
                        break;
                    case EPixelFormats.FLOAT16_RGBA:
                        r = bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0]);
                        g = bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1]);
                        b = bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 3))[2]);
                        a = bf.halfToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 4))[3]);
                        break;
                    case EPixelFormats.SHORT_RGB:
                        r = bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0], 16);
                        g = bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1], 16);
                        b = bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 3))[2], 16);
                        a = 1.0;
                        break;
                    case EPixelFormats.SHORT_RGBA:
                        r = bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 1))[0], 16);
                        g = bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 2))[1], 16);
                        b = bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 3))[2], 16);
                        a = bf.fixedToFloat((new Uint16Array(pSrc.buffer, pSrc.byteOffset, 4))[3], 16);
                        break;
                    case EPixelFormats.BYTE_LA:
                        r = g = b = bf.fixedToFloat((pSrc)[0], 8);
                        a = bf.fixedToFloat((pSrc)[1], 8);
                        break;
                    default:
 {
                            logger.setSourceLocation("pixelUtil/pixelUtil.ts", 1420);
                            logger.error("unpack from " + getFormatName(ePf) + " not implemented", "PixelUtil::unpackColour");
                        }
                        ;
                        break;
                }
            }
            rgba.r = r;
            rgba.g = g;
            rgba.b = b;
            rgba.a = a;
        }
        pixelUtil.unpackColourFloat = unpackColourFloat;
                        function bulkPixelConversion(pSrc, eSrcFormat, pDest, eDstFormat, iCount) {
            var src = null, dst = null;
            if (arguments.length > 2) {
                src = new PixelBox(iCount, 1, 1, eSrcFormat, pSrc);
                dst = new PixelBox(iCount, 1, 1, eDstFormat, pDest);
            } else {
                src = arguments[0];
                dst = arguments[1];
            }
            if (src.width !== dst.width || src.height !== dst.height || src.depth !== dst.depth) {
 {
                    logger.setSourceLocation("pixelUtil/pixelUtil.ts", 1468);
                    logger.criticalError("Size dest and src pictures is different");
                }
                ;
                return;
            }
            if (isCompressed(src.format) || isCompressed(dst.format)) {
                if (src.format == dst.format) {
                    dst.data.set(src.data.subarray(0, src.getConsecutiveSize()));
                    return;
                } else {
 {
                        logger.setSourceLocation("pixelUtil/pixelUtil.ts", 1481);
                        logger.error("This method can not be used to compress or decompress images", "PixelUtil::bulkPixelConversion");
                    }
                    ;
                }
            }
            if (src.format == dst.format) {
                if (src.isConsecutive() && dst.isConsecutive()) {
                    dst.data.set(src.data.subarray(0, src.getConsecutiveSize()));
                    return;
                }
                var srcPixelSize = getNumElemBytes(src.format);
                var dstPixelSize = getNumElemBytes(dst.format);
                var srcptr = src.data.subarray((src.left + src.top * src.rowPitch + src.front * src.slicePitch) * srcPixelSize);
                var dstptr = dst.data.subarray(+(dst.left + dst.top * dst.rowPitch + dst.front * dst.slicePitch) * dstPixelSize);
                var srcRowPitchBytes = src.rowPitch * srcPixelSize;
                var srcSliceSkipBytes = src.getSliceSkip() * srcPixelSize;
                var dstRowPitchBytes = dst.rowPitch * dstPixelSize;
                var dstSliceSkipBytes = dst.getSliceSkip() * dstPixelSize;
                var rowSize = src.width * srcPixelSize;
                for(var z = src.front; z < src.back; z++) {
                    for(var y = src.top; y < src.bottom; y++) {
                        dstptr.set(srcptr.subarray(0, rowSize));
                        srcptr = srcptr.subarray(srcRowPitchBytes);
                        dstptr = dstptr.subarray(dstRowPitchBytes);
                    }
                    srcptr = srcptr.subarray(srcSliceSkipBytes);
                    dstptr = dstptr.subarray(dstSliceSkipBytes);
                }
                return;
            }
            if (dst.format == EPixelFormats.X8R8G8B8 || dst.format == EPixelFormats.X8B8G8R8) {
                var tempdst = dst;
                tempdst.format = (dst.format == EPixelFormats.X8R8G8B8) ? EPixelFormats.A8R8G8B8 : EPixelFormats.A8B8G8R8;
                bulkPixelConversion(src, tempdst);
                return;
            }
            if ((src.format == EPixelFormats.X8R8G8B8 || src.format == EPixelFormats.X8B8G8R8) && !hasAlpha(dst.format)) {
                var tempsrc = src;
                tempsrc.format = src.format == EPixelFormats.X8R8G8B8 ? EPixelFormats.A8R8G8B8 : EPixelFormats.A8B8G8R8;
                bulkPixelConversion(tempsrc, dst);
                return;
            }
            var srcPixelSize = getNumElemBytes(src.format);
            var dstPixelSize = getNumElemBytes(dst.format);
            var srcptr = src.data.subarray((src.left + src.top * src.rowPitch + src.front * src.slicePitch) * srcPixelSize);
            var dstptr = dst.data.subarray((dst.left + dst.top * dst.rowPitch + dst.front * dst.slicePitch) * dstPixelSize);
            var srcRowSkipBytes = src.getRowSkip() * srcPixelSize;
            var srcSliceSkipBytes = src.getSliceSkip() * srcPixelSize;
            var dstRowSkipBytes = dst.getRowSkip() * dstPixelSize;
            var dstSliceSkipBytes = dst.getSliceSkip() * dstPixelSize;
            var rgba = _pColorValue;
            for(var z = src.front; z < src.back; z++) {
                for(var y = src.top; y < src.bottom; y++) {
                    for(var x = src.left; x < src.right; x++) {
                        unpackColourFloat(rgba, src.format, srcptr);
                        packColourFloat(rgba.r, rgba.g, rgba.b, rgba.a, dst.format, dstptr);
                        srcptr = srcptr.subarray(srcPixelSize);
                        dstptr = dstptr.subarray(dstPixelSize);
                    }
                    srcptr = srcptr.subarray(srcRowSkipBytes);
                    dstptr = dstptr.subarray(dstRowSkipBytes);
                }
                srcptr = srcptr.subarray(srcSliceSkipBytes);
                dstptr = dstptr.subarray(dstSliceSkipBytes);
            }
        }
        pixelUtil.bulkPixelConversion = bulkPixelConversion;
        function calculateSizeForImage(nMipLevels, nFaces, iWidth, iHeight, iDepth, eFormat) {
            var iSize = 0;
            var mip = 0;
            for(mip = 0; mip <= nMipLevels; ++mip) {
                iSize += getMemorySize(iWidth, iHeight, iDepth, eFormat) * nFaces;
                if (iWidth !== 1) {
                    iWidth /= 2;
                }
                if (iHeight !== 1) {
                    iHeight /= 2;
                }
                if (iDepth !== 1) {
                    iDepth /= 2;
                }
            }
            return iSize;
        }
        pixelUtil.calculateSizeForImage = calculateSizeForImage;
    })(akra.pixelUtil || (akra.pixelUtil = {}));
    var pixelUtil = akra.pixelUtil;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        webgl.maxTextureSize = 0;
        webgl.maxCubeMapTextureSize = 0;
        webgl.maxViewPortSize = 0;
        webgl.maxTextureImageUnits = 0;
        webgl.maxVertexAttributes = 0;
        webgl.maxVertexTextureImageUnits = 0;
        webgl.maxCombinedTextureImageUnits = 0;
        webgl.maxColorAttachments = 1;
        webgl.stencilBits = 0;
        webgl.colorBits = [
            0, 
            0, 
            0
        ];
        webgl.alphaBits = 0;
        webgl.multisampleType = 0.;
        webgl.shaderVersion = 0;
        webgl.hasNonPowerOf2Textures = false;
        webgl.isANGLE = false;
        var isSupported = false;
        webgl.pSupportedExtensionList = null;
        function makeDebugContext(pWebGLContext) {
            if (isDef((window).WebGLDebugUtils)) {
                pWebGLContext = WebGLDebugUtils.makeDebugContext(pWebGLContext, function (err, funcName, args) {
 {
                        logger.setSourceLocation("webgl/WebGL.ts", 54);
                        logger.log(("\n" + (new Error()).stack.split("\n").slice(1).join("\n")));
                    }
                    ;
                    throw WebGLDebugUtils.glEnumToString(err) + " was caused by call to: " + funcName;
                }, function (funcName, args) {
 {
                        logger.setSourceLocation("webgl/WebGL.ts", 58);
                        logger.log("gl." + funcName + "(" + WebGLDebugUtils.glFunctionArgsToString(funcName, args) + ")");
                    }
                    ;
                });
            }
            return pWebGLContext;
        }
        function loadExtension(pWebGLContext, sExtName) {
            var pWebGLExtentionList = (pWebGLContext).extentionList = (pWebGLContext).extentionList || {};
            var pWebGLExtension;
            if (!hasExtension(sExtName)) {
 {
                    logger.setSourceLocation("webgl/WebGL.ts", 70);
                    logger.warning("Extension " + sExtName + " unsupported for this platform.");
                }
                ;
                return false;
            }
            if (pWebGLExtension = pWebGLContext.getExtension(sExtName)) {
                if (isDefAndNotNull(pWebGLExtentionList[sExtName])) {
 {
                        logger.setSourceLocation("webgl/WebGL.ts", 77);
                        logger.log("Extension " + sExtName + " already loaded for this context.");
                    }
                    ;
                    return true;
                }
                pWebGLExtentionList[sExtName] = pWebGLExtension;
 {
                    logger.setSourceLocation("webgl/WebGL.ts", 83);
                    logger.log("loaded WebGL extension: ", sExtName);
                }
                ;
                for(var j in pWebGLExtension) {
                    if (isFunction(pWebGLExtension[j])) {
                        pWebGLContext[j] = function () {
                            pWebGLContext[j] = new Function("var t = this.extentionList[" + sExtName + "];" + "t." + j + ".apply(t, arguments);");
                        };
                    } else {
                        pWebGLContext[j] = pWebGLExtension[j];
                    }
                }
                return true;
            }
 {
                logger.setSourceLocation("webgl/WebGL.ts", 104);
                logger.warning("cannot load extension: ", sExtName);
            }
            ;
            return false;
        }
        webgl.loadExtension = loadExtension;
        function checkIsAngle(pWebGLContext) {
            var pProgram = pWebGLContext.createProgram();
            var sVertex = "            attribute vec3 pos;            struct S {              vec3 b[1];            };            uniform S s[1];            void main(void) {              float t = s[0].b[0].x;              gl_Position = vec4(pos, 1. + t);            }";
            var sFragment = "void main(void){}";
            var pVertexShader = pWebGLContext.createShader(0x8B31);
            var pFragmentShader = pWebGLContext.createShader(0x8B30);
            pWebGLContext.shaderSource(pVertexShader, sVertex);
            pWebGLContext.compileShader(pVertexShader);
            pWebGLContext.shaderSource(pFragmentShader, sFragment);
            pWebGLContext.compileShader(pFragmentShader);
            pWebGLContext.attachShader(pProgram, pVertexShader);
            pWebGLContext.attachShader(pProgram, pFragmentShader);
            pWebGLContext.linkProgram(pProgram);
            if (!pWebGLContext.getProgramParameter(pProgram, 0x8B82)) {
 {
                    logger.setSourceLocation("webgl/WebGL.ts", 139);
                    logger.error("cannot compile GLSL shader for ANGLE renderer");
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGL.ts", 141);
                    logger.log(pWebGLContext.getShaderInfoLog(pVertexShader));
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGL.ts", 142);
                    logger.log(pWebGLContext.getShaderSource(pVertexShader) || sVertex);
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGL.ts", 144);
                    logger.log(pWebGLContext.getShaderInfoLog(pFragmentShader));
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGL.ts", 145);
                    logger.log(pWebGLContext.getShaderSource(pFragmentShader) || sFragment);
                }
                ;
                return false;
            }
 {
                logger.setSourceLocation("webgl/WebGL.ts", 151);
                logger.assert(pWebGLContext.getProgramParameter(pProgram, 0x8B86) > 0, "no uniforms founded in angle test shader!");
            }
            ;
            return pWebGLContext.getActiveUniform(pProgram, 0).name != "s[0].b[0]";
        }
        function setupContext(pWebGLContext) {
            if (isNull(webgl.pSupportedExtensionList)) {
                return pWebGLContext;
            }
            for(var i = 0; i < webgl.pSupportedExtensionList.length; ++i) {
                if (!loadExtension(pWebGLContext, webgl.pSupportedExtensionList[i])) {
                    webgl.pSupportedExtensionList.splice(i, 1);
                }
            }
            return pWebGLContext;
        }
        webgl.isEnabled = function () {
            return isSupported;
        };
        function createContext(pCanvas, pOptions) {
            if (typeof pCanvas === "undefined") { pCanvas = document.createElement("canvas"); }
            var pWebGLContext = null;
            try  {
                pWebGLContext = pCanvas.getContext("webgl", pOptions) || pCanvas.getContext("experimental-webgl", pOptions);
            } catch (e) {
            }
            if (isDefAndNotNull(pWebGLContext)) {
                return makeDebugContext(setupContext(pWebGLContext));
            }
 {
                logger.setSourceLocation("webgl/WebGL.ts", 193);
                logger.warning("cannot get 3d device");
            }
            ;
            return null;
        }
        webgl.createContext = createContext;
        (function (pWebGLContext) {
            if (!pWebGLContext) {
                return;
            }
            webgl.maxTextureSize = pWebGLContext.getParameter(0x0D33);
            webgl.maxCubeMapTextureSize = pWebGLContext.getParameter(0x851C);
            webgl.maxViewPortSize = pWebGLContext.getParameter(0x0D3A);
            webgl.maxTextureImageUnits = pWebGLContext.getParameter(0x8872);
            webgl.maxVertexAttributes = pWebGLContext.getParameter(0x8869);
            webgl.maxVertexTextureImageUnits = pWebGLContext.getParameter(0x8B4C);
            webgl.maxCombinedTextureImageUnits = pWebGLContext.getParameter(0x8B4D);
            webgl.stencilBits = pWebGLContext.getParameter(0x0D57);
            webgl.colorBits = [
                pWebGLContext.getParameter(0x0D52), 
                pWebGLContext.getParameter(0x0D53), 
                pWebGLContext.getParameter(0x0D54)
            ];
            webgl.alphaBits = pWebGLContext.getParameter(0x0D55);
            webgl.multisampleType = pWebGLContext.getParameter(0x80AA);
            webgl.pSupportedExtensionList = pWebGLContext.getSupportedExtensions();
            isSupported = true;
            webgl.isANGLE = checkIsAngle(pWebGLContext);
        })(createContext());
        function hasExtension(sExtName) {
            for(var i = 0; i < webgl.pSupportedExtensionList.length; ++i) {
                if (webgl.pSupportedExtensionList[i].search(sExtName) != -1) {
                    return true;
                }
            }
            return false;
        }
        webgl.hasExtension = hasExtension;
        function getWebGLUsage(iFlags) {
            if ((((iFlags) & (EHardwareBufferFlags.DYNAMIC)) != 0)) {
                return 0x88E8;
            } else if ((((iFlags) & (EHardwareBufferFlags.STREAM)) != 0)) {
                return 0x88E0;
            }
            return 0x88E4;
        }
        webgl.getWebGLUsage = getWebGLUsage;
        function getWebGLFormat(eFormat) {
            switch(eFormat) {
                case EPixelFormats.L8:
                case EPixelFormats.L16:
                    return 0x1909;
                case EPixelFormats.A8:
                    return 0x1906;
                case EPixelFormats.A4L4:
                case EPixelFormats.BYTE_LA:
                    return 0x190A;
                case EPixelFormats.R5G6B5:
                    return 0;
                case EPixelFormats.B5G6R5:
                    return 0x1907;
                case EPixelFormats.R3G3B2:
                    return 0;
                case EPixelFormats.A4R4G4B4:
                case EPixelFormats.A1R5G5B5:
                    return 0x1908;
                case EPixelFormats.R8G8B8:
                case EPixelFormats.B8G8R8:
                    return 0x1907;
                case EPixelFormats.A8R8G8B8:
                case EPixelFormats.A8B8G8R8:
                    return 0x1908;
                case EPixelFormats.B8G8R8A8:
                case EPixelFormats.R8G8B8A8:
                case EPixelFormats.X8R8G8B8:
                case EPixelFormats.X8B8G8R8:
                    return 0x1908;
                case EPixelFormats.A2R10G10B10:
                    return 0;
                case EPixelFormats.A2B10G10R10:
                    return 0x1908;
                case EPixelFormats.DXT1:
                    return 0x83F1;
                case EPixelFormats.DXT2:
                    return 0;
                case EPixelFormats.DXT3:
                    return 0x83F2;
                case EPixelFormats.DXT4:
                    return 0;
                case EPixelFormats.DXT5:
                    return 0x83F3;
                case EPixelFormats.FLOAT16_R:
                    return 0;
                case EPixelFormats.FLOAT16_RGB:
                    return 0x1907;
                case EPixelFormats.FLOAT16_RGBA:
                    return 0x1908;
                case EPixelFormats.FLOAT32_R:
                    return 0;
                case EPixelFormats.FLOAT32_RGB:
                    return 0x1907;
                case EPixelFormats.FLOAT32_RGBA:
                    return 0x1908;
                case EPixelFormats.FLOAT16_GR:
                case EPixelFormats.FLOAT32_GR:
                    return 0;
                case EPixelFormats.FLOAT32_DEPTH:
                case EPixelFormats.DEPTH32:
                case EPixelFormats.DEPTH16:
                case EPixelFormats.DEPTH8:
                    return 0x1902;
                case EPixelFormats.DEPTH24STENCIL8:
                    return 0x84F9;
                case EPixelFormats.SHORT_RGBA:
                    return 0x1908;
                case EPixelFormats.SHORT_GR:
                    return 0;
                case EPixelFormats.SHORT_RGB:
                    return 0x1907;
                case EPixelFormats.PVRTC_RGB2:
                    return 0x8C01;
                case EPixelFormats.PVRTC_RGBA2:
                    return 0x8C03;
                case EPixelFormats.PVRTC_RGB4:
                    return 0x8C00;
                case EPixelFormats.PVRTC_RGBA4:
                    return 0x8C02;
                case EPixelFormats.R8:
                case EPixelFormats.RG8:
                    return 0;
                default:
 {
                        logger.setSourceLocation("webgl/WebGL.ts", 357);
                        logger.warning("getWebGLFormat unknown format", eFormat);
                    }
                    ;
                    return 0;
            }
        }
        webgl.getWebGLFormat = getWebGLFormat;
        function isWebGLFormatSupport(eFormat) {
            switch(eFormat) {
                case EPixelFormats.DXT1:
                case EPixelFormats.DXT3:
                case EPixelFormats.DXT5:
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc");
                case EPixelFormats.PVRTC_RGB2:
                case EPixelFormats.PVRTC_RGBA2:
                case EPixelFormats.PVRTC_RGB4:
                case EPixelFormats.PVRTC_RGBA4:
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc");
                case EPixelFormats.DEPTH32:
                case EPixelFormats.DEPTH16:
                case EPixelFormats.DEPTH24STENCIL8:
                    return webgl.hasExtension("WEBGL_depth_texture");
                case EPixelFormats.DEPTH32:
                case EPixelFormats.DEPTH16:
                case EPixelFormats.DEPTH24STENCIL8:
                    return webgl.hasExtension("WEBGL_depth_texture");
                case EPixelFormats.FLOAT16_RGB:
                case EPixelFormats.FLOAT16_RGBA:
                    return webgl.hasExtension("OES_texture_half_float");
                case EPixelFormats.FLOAT32_RGB:
                case EPixelFormats.FLOAT32_RGBA:
                    return webgl.hasExtension("OES_texture_float");
            }
            if (getWebGLFormat(eFormat) && getWebGLDataType(eFormat)) {
                switch(eFormat) {
                    case EPixelFormats.FLOAT32_DEPTH:
                    case EPixelFormats.L16:
                        return false;
                }
                return true;
            }
            return false;
        }
        webgl.isWebGLFormatSupport = isWebGLFormatSupport;
        function getWebGLDataType(eFormat) {
            switch(eFormat) {
                case EPixelFormats.L8:
                    return 0x1401;
                case EPixelFormats.L16:
                    return 0x1403;
                case EPixelFormats.A8:
                    return 0x1401;
                case EPixelFormats.A4L4:
                    return 0;
                case EPixelFormats.BYTE_LA:
                    return 0x1401;
                case EPixelFormats.R5G6B5:
                case EPixelFormats.B5G6R5:
                    return 0x8363;
                case EPixelFormats.R3G3B2:
                    return 0;
                case EPixelFormats.A4R4G4B4:
                    return 0x8033;
                case EPixelFormats.A1R5G5B5:
                    return 0x8034;
                case EPixelFormats.R8G8B8:
                case EPixelFormats.B8G8R8:
                case EPixelFormats.A8R8G8B8:
                case EPixelFormats.A8B8G8R8:
                case EPixelFormats.B8G8R8A8:
                case EPixelFormats.R8G8B8A8:
                case EPixelFormats.X8R8G8B8:
                case EPixelFormats.X8B8G8R8:
                    return 0x1401;
                case EPixelFormats.A2R10G10B10:
                    return 0;
                case EPixelFormats.A2B10G10R10:
                    return 0;
                case EPixelFormats.DXT1:
                case EPixelFormats.DXT2:
                case EPixelFormats.DXT3:
                case EPixelFormats.DXT4:
                case EPixelFormats.DXT5:
                    return 0;
                case EPixelFormats.FLOAT16_R:
                case EPixelFormats.FLOAT16_RGB:
                case EPixelFormats.FLOAT16_RGBA:
                    return 0x8D61;
                case EPixelFormats.FLOAT32_R:
                case EPixelFormats.FLOAT32_RGB:
                case EPixelFormats.FLOAT32_RGBA:
                case EPixelFormats.FLOAT16_GR:
                case EPixelFormats.FLOAT32_GR:
                    return 0x1406;
                case EPixelFormats.FLOAT32_DEPTH:
                    return 0x1406;
                case EPixelFormats.DEPTH8:
                    return 0x1401;
                case EPixelFormats.DEPTH16:
                    return 0x1403;
                case EPixelFormats.DEPTH32:
                    return 0x1405;
                case EPixelFormats.DEPTH24STENCIL8:
                    return 0x8367;
                case EPixelFormats.SHORT_RGBA:
                case EPixelFormats.SHORT_GR:
                case EPixelFormats.SHORT_RGB:
                    return 0x1403;
                case EPixelFormats.PVRTC_RGB2:
                case EPixelFormats.PVRTC_RGBA2:
                case EPixelFormats.PVRTC_RGB4:
                case EPixelFormats.PVRTC_RGBA4:
                    return 0;
                case EPixelFormats.R8:
                case EPixelFormats.RG8:
                    return 0x1401;
                default:
 {
                        logger.setSourceLocation("webgl/WebGL.ts", 496);
                        logger.criticalError("getWebGLFormat unknown format");
                    }
                    ;
                    return 0;
            }
        }
        webgl.getWebGLDataType = getWebGLDataType;
        function getWebGLInternalFormat(eFormat) {
            if (!pixelUtil.isCompressed(eFormat)) {
                return getWebGLFormat(eFormat);
            } else {
                switch(eFormat) {
                    case EPixelFormats.DXT1:
                        return 0x83F1;
                    case EPixelFormats.DXT2:
                        return 0;
                    case EPixelFormats.DXT3:
                        return 0x83F2;
                    case EPixelFormats.DXT4:
                        return 0;
                    case EPixelFormats.DXT5:
                        return 0x83F3;
                    case EPixelFormats.PVRTC_RGB2:
                        return 0x8C01;
                    case EPixelFormats.PVRTC_RGBA2:
                        return 0x8C03;
                    case EPixelFormats.PVRTC_RGB4:
                        return 0x8C00;
                    case EPixelFormats.PVRTC_RGBA4:
                        return 0x8C02;
                }
            }
        }
        webgl.getWebGLInternalFormat = getWebGLInternalFormat;
        function getWebGLPrimitiveType(eType) {
            switch(eType) {
                case EPrimitiveTypes.POINTLIST:
                    return 0x0000;
                case EPrimitiveTypes.LINELIST:
                    return 0x0001;
                case EPrimitiveTypes.LINELOOP:
                    return 0x0002;
                case EPrimitiveTypes.LINESTRIP:
                    return 0x0003;
                case EPrimitiveTypes.TRIANGLELIST:
                    return 0x0004;
                case EPrimitiveTypes.TRIANGLESTRIP:
                    return 0x0005;
                case EPrimitiveTypes.TRIANGLEFAN:
                    return 0x0006;
            }
            return 0x0000;
        }
        webgl.getWebGLPrimitiveType = getWebGLPrimitiveType;
        function getClosestWebGLInternalFormat(eFormat, isHWGamma) {
            if (typeof isHWGamma === "undefined") { isHWGamma = false; }
            var iGLFormat = webgl.getWebGLInternalFormat(eFormat);
            if (iGLFormat === 0) {
                if (isHWGamma) {
                    return 0;
                } else {
                    return 0x1908;
                }
            } else {
                return iGLFormat;
            }
        }
        webgl.getClosestWebGLInternalFormat = getClosestWebGLInternalFormat;
        function getClosestAkraFormat(iGLFormat, iGLDataType) {
            switch(iGLFormat) {
                case 0x8C01:
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? EPixelFormats.PVRTC_RGB2 : EPixelFormats.A8R8G8B8;
                case 0x8C03:
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? EPixelFormats.PVRTC_RGBA2 : EPixelFormats.A8R8G8B8;
                case 0x8C00:
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? EPixelFormats.PVRTC_RGB4 : EPixelFormats.A8R8G8B8;
                case 0x8C02:
                    return webgl.hasExtension("WEBGL_compressed_texture_pvrtc") ? EPixelFormats.PVRTC_RGBA4 : EPixelFormats.A8R8G8B8;
                case 0x1909:
                    return EPixelFormats.L8;
                case 0x1906:
                    return EPixelFormats.A8;
                case 0x190A:
                    return EPixelFormats.BYTE_LA;
                case 0x1907:
                    switch(iGLDataType) {
                        case 0x8363:
                            return EPixelFormats.B5G6R5;
                        default:
                            return EPixelFormats.R8G8B8;
                    }
                case 0x1908:
                    switch(iGLDataType) {
                        case 0x8034:
                            return EPixelFormats.A1R5G5B5;
                        case 0x8033:
                            return EPixelFormats.A4R4G4B4;
                        case 0x1406:
                            return EPixelFormats.FLOAT32_RGBA;
                        default:
                            return EPixelFormats.A8B8G8R8;
                    }
                case 0x80E1:
                    return EPixelFormats.A8B8G8R8;
                case 0x83F0:
                case 0x83F1:
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? EPixelFormats.DXT1 : EPixelFormats.A8R8G8B8;
                case 0x83F2:
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? EPixelFormats.DXT3 : EPixelFormats.A8R8G8B8;
                case 0x83F3:
                    return webgl.hasExtension("WEBGL_compressed_texture_s3tc") ? EPixelFormats.DXT5 : EPixelFormats.A8R8G8B8;
                case 0x8229:
                    return webgl.hasExtension("EXT_texture_rg") ? EPixelFormats.R8 : EPixelFormats.A8R8G8B8;
                case 0x822B:
                    return webgl.hasExtension("EXT_texture_rg") ? EPixelFormats.RG8 : EPixelFormats.A8R8G8B8;
                case 0x1902:
                    switch(iGLDataType) {
                        case 0x1406:
                            return EPixelFormats.FLOAT32_DEPTH;
                        case 0x1405:
                            return EPixelFormats.DEPTH32;
                        case 0x1403:
                            return EPixelFormats.DEPTH16;
                        case 0x1401:
                            return EPixelFormats.DEPTH8;
                    }
                case 0x84F9:
                    return EPixelFormats.DEPTH24STENCIL8;
                default:
                    return EPixelFormats.A8R8G8B8;
            }
        }
        webgl.getClosestAkraFormat = getClosestAkraFormat;
        function optionalPO2(iValue) {
            if (webgl.hasNonPowerOf2Textures) {
                return iValue;
            } else {
                return math.ceilingPowerOfTwo(iValue);
            }
        }
        webgl.optionalPO2 = optionalPO2;
        function convertToWebGLformat(pSource, pDest) {
            if (pDest.format == EPixelFormats.A4R4G4B4) {
                var iSrcPtr = (pSource.left + pSource.top * pSource.rowPitch + pSource.front * pSource.slicePitch);
                var iDstPtr = (pDest.left + pDest.top * pDest.rowPitch + pDest.front * pDest.slicePitch);
                var iSrcSliceSkip = pSource.getSliceSkip();
                var iDstSliceSkip = pDest.getSliceSkip();
                var k = pSource.right - pSource.left;
                var x = 0, y = 0, z = 0;
                for(z = pSource.front; z < pSource.back; z++) {
                    for(y = pSource.top; y < pSource.bottom; y++) {
                        for(x = 0; x < k; x++) {
                            pDest[iDstPtr + x] = ((pSource[iSrcPtr + x] & 0x000F) << 12) | ((pSource[iSrcPtr + x] & 0x00F0) << 4) | ((pSource[iSrcPtr + x] & 0x0F00) >> 4) | ((pSource[iSrcPtr + x] & 0xF000) >> 12);
                        }
                        iSrcPtr += pSource.rowPitch;
                        iDstPtr += pDest.rowPitch;
                    }
                    iSrcPtr += iSrcSliceSkip;
                    iDstPtr += iDstSliceSkip;
                }
            }
        }
        webgl.convertToWebGLformat = convertToWebGLformat;
        function checkFBOAttachmentFormat(eFormat) {
            if (eFormat == EPixelFormats.A8B8G8R8) {
                return true;
            } else if (eFormat == EPixelFormats.FLOAT32_RGBA) {
                return hasExtension("WEBGL_color_buffer_float");
            } else if (eFormat == EPixelFormats.FLOAT16_RGBA) {
                return hasExtension("EXT_color_buffer_half_float");
            } else if (eFormat === EPixelFormats.DEPTH32) {
                return true;
            } else {
                return false;
            }
        }
        webgl.checkFBOAttachmentFormat = checkFBOAttachmentFormat;
        function checkReadPixelFormat(eFormat) {
            if (eFormat == EPixelFormats.A8B8G8R8) {
                return true;
            } else if (eFormat == EPixelFormats.FLOAT32_RGBA) {
                return hasExtension("WEBGL_color_buffer_float") || hasExtension("EXT_color_buffer_half_float");
            } else {
                return false;
            }
        }
        webgl.checkReadPixelFormat = checkReadPixelFormat;
        function getSupportedAlternative(eFormat) {
            if (checkFBOAttachmentFormat(eFormat)) {
                return eFormat;
            }
            var pct = pixelUtil.getComponentType(eFormat);
            switch(pct) {
                case EPixelComponentTypes.BYTE:
                    eFormat = EPixelFormats.A8R8G8B8;
                    break;
                case EPixelComponentTypes.SHORT:
                    eFormat = EPixelFormats.SHORT_RGBA;
                    break;
                case EPixelComponentTypes.FLOAT16:
                    eFormat = EPixelFormats.FLOAT16_RGBA;
                    break;
                case EPixelComponentTypes.FLOAT32:
                    eFormat = EPixelFormats.FLOAT32_RGBA;
                    break;
                case EPixelComponentTypes.COUNT:
                default:
                    break;
            }
            if (checkFBOAttachmentFormat(eFormat)) {
                return eFormat;
            }
            return EPixelFormats.A8R8G8B8;
        }
        webgl.getSupportedAlternative = getSupportedAlternative;
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var ApiInfo = (function (_super) {
            __extends(ApiInfo, _super);
            function ApiInfo() {
                _super.call(this);
                this.bWebGL = false;
                this.bWebAudio = false;
                this.bFile = false;
                this.bFileSystem = false;
                this.bWebWorker = false;
                this.bTransferableObjects = false;
                this.bLocalStorage = false;
                this.bWebSocket = false;
                this.bGamepad = false;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                var pApi = {};
                this.bWebAudio = ((window).AudioContext && (window).webkitAudioContext ? true : false);
                this.bFile = ((window).File && (window).FileReader && (window).FileList && (window).Blob ? true : false);
                this.bFileSystem = (this.bFile && (window).URL && (window).requestFileSystem ? true : false);
                this.bWebWorker = isDef((window).Worker);
                this.bLocalStorage = isDef((window).localStorage);
                this.bWebSocket = isDef((window).WebSocket);
                this.bGamepad = !!(navigator).webkitGetGamepads || !!(navigator).webkitGamepads || (navigator.userAgent.indexOf('Firefox/') != -1);
            }
            ApiInfo.prototype.webGL = function () {
                return webgl.isEnabled();
            };
            Object.defineProperty(ApiInfo.prototype, "transferableObjects", {
                get: function () {
                    if (!this.bTransferableObjects) {
                        this.bTransferableObjects = (this.bWebWorker && this.chechTransferableObjects() ? true : false);
                    }
                    return this.bTransferableObjects;
                },
                enumerable: true,
                configurable: true
            });
            ApiInfo.prototype.file = function () {
                return this.bFile;
            };
            ApiInfo.prototype.fileSystem = function () {
                return this.bFileSystem;
            };
            ApiInfo.prototype.webAudio = function () {
                return this.bWebAudio;
            };
            ApiInfo.prototype.webWorker = function () {
                return this.bWebWorker;
            };
            ApiInfo.prototype.localStorage = function () {
                return this.bLocalStorage;
            };
            ApiInfo.prototype.webSocket = function () {
                return this.bWebSocket;
            };
            ApiInfo.prototype.gamepad = function () {
                return this.bGamepad;
            };
            ApiInfo.prototype.chechTransferableObjects = function () {
                var pBlob = new Blob([
                    "onmessage = function(e) { postMessage(true); }"
                ], {
                    "type": "text\/javascript"
                });
                var sBlobURL = (window).URL.createObjectURL(pBlob);
                var pWorker = new Worker(sBlobURL);
                var pBuffer = new ArrayBuffer(1);
                try  {
                    pWorker.postMessage(pBuffer, [
                        pBuffer
                    ]);
                } catch (e) {
 {
                        logger.setSourceLocation("util/ApiInfo.ts", 85);
                        logger.log('transferable objects not supported in your browser...');
                    }
                    ;
                }
                pWorker.terminate();
                if (pBuffer.byteLength) {
                    return false;
                }
                return true;
            };
            return ApiInfo;
        })(Singleton);
        util.ApiInfo = ApiInfo;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (info) {
                        function canvas(id) {
            var pCanvas = isString(id) ? document.getElementById(id) : id;
            return {
                width: isInt(pCanvas.width) ? pCanvas.width : parseInt(pCanvas.style.width),
                height: isInt(pCanvas.height) ? pCanvas.height : parseInt(pCanvas.style.height),
                id: pCanvas.id
            };
        }
        info.canvas = canvas;
        info.browser = new util.BrowserInfo();
        info.api = new util.ApiInfo();
        info.screen = new util.ScreenInfo();
        info.uri = util.uri(document.location.href);
        var is;
        (function (is) {
            is.online;
            is.mobile = (/mobile|iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i).test(navigator.userAgent.toLowerCase());
            is.linux = info.browser.os === 'Linux';
            is.windows = info.browser.os === 'Windows';
            is.mac = info.browser.os === 'Mac';
            is.iPhone = info.browser.os === 'iPhone';
        })(is || (is = {}));
        Object.defineProperty(is, 'online', {
            get: function () {
                return navigator.onLine;
            }
        });
    })(akra.info || (akra.info = {}));
    var info = akra.info;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        (function (EThreadStatuses) {
            EThreadStatuses._map = [];
            EThreadStatuses._map[0] = "k_WorkerBusy";
            EThreadStatuses.k_WorkerBusy = 0;
            EThreadStatuses._map[1] = "k_WorkerFree";
            EThreadStatuses.k_WorkerFree = 1;
        })(util.EThreadStatuses || (util.EThreadStatuses = {}));
        var EThreadStatuses = util.EThreadStatuses;
        var ThreadManager = (function () {
            function ThreadManager(sScript) {
                if (typeof sScript === "undefined") { sScript = null; }
                var _this = this;
                this._pWorkerList = [];
                this._pStatsList = [];
                this._sDefaultScript = sScript;
                setInterval(function () {
                    var pStats;
                    var iNow = now();
                    for(var i = 0, n = _this._pStatsList.length; i < n; ++i) {
                        pStats = _this._pStatsList[i];
                        if (pStats.releaseTime > 0 && iNow - pStats.releaseTime > 30 * 1000) {
                            if (_this.terminateThread(i)) {
 {
                                    logger.setSourceLocation("util/ThreadManager.ts", 45);
                                    logger.log("thread with id - " + i + " terminated. (" + i + "/" + n + ")");
                                }
                                ;
                                return;
                            }
 {
                                logger.setSourceLocation("util/ThreadManager.ts", 49);
                                logger.warning("thread must be removed: " + i);
                            }
                            ;
                        }
                    }
                    ;
                }, 30000);
            }
            ThreadManager.prototype.createThread = function () {
                if (this._pWorkerList.length === 32) {
 {
                        logger.setSourceLocation("util/ThreadManager.ts", 58);
                        logger.error("Reached limit the number of threads");
                    }
                    ;
                    return false;
                }
                if (!info.api.webWorker) {
 {
                        logger.setSourceLocation("util/ThreadManager.ts", 63);
                        logger.error("WebWorkers unsupprted..");
                    }
                    ;
                    return false;
                }
                var pWorker = (new Worker(this._sDefaultScript));
                pWorker.id = this._pWorkerList.length;
                pWorker.send = (pWorker).postMessage;
                this._pWorkerList.push(pWorker);
                this._pStatsList.push({
                    status: EThreadStatuses.k_WorkerFree,
                    creationTime: now(),
                    releaseTime: now()
                });
                return true;
            };
            ThreadManager.prototype.occupyThread = function () {
                var pStats;
                for(var i = 0, n = this._pWorkerList.length; i < n; ++i) {
                    pStats = this._pStatsList[i];
                    if (pStats.status == EThreadStatuses.k_WorkerFree) {
                        pStats.status = EThreadStatuses.k_WorkerBusy;
                        pStats.releaseTime = 0;
                        return this._pWorkerList[i];
                    }
                }
                if (this.createThread()) {
                    return this.occupyThread();
                } else {
 {
                        logger.setSourceLocation("util/ThreadManager.ts", 99);
                        logger.error("cannot occupy thread");
                    }
                    ;
                    return null;
                }
            };
            ThreadManager.prototype.terminateThread = function (iThread) {
                var pStats = this._pStatsList[iThread];
                var pWorker = this._pWorkerList[iThread];
                if (!isDefAndNotNull(pWorker) && pStats.status != EThreadStatuses.k_WorkerFree) {
                    return false;
                }
                (pWorker).terminate();
                this._pStatsList.splice(iThread);
                this._pWorkerList.splice(iThread);
                return true;
            };
            ThreadManager.prototype.releaseThread = function (pThread) {
                var iThread;
                var pStats;
                if (!isInt(pThread)) {
                    iThread = pThread.id;
                } else {
                    iThread = pThread;
                }
                if (isDef(this._pStatsList[iThread])) {
                    pStats = this._pStatsList[iThread];
                    pStats.status = EThreadStatuses.k_WorkerFree;
                    pStats.releaseTime = now();
                }
                return false;
            };
            ThreadManager.prototype.initialize = function () {
                return true;
            };
            ThreadManager.prototype.destroy = function () {
            };
            return ThreadManager;
        })();
        util.ThreadManager = ThreadManager;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        (function (EFileActions) {
            EFileActions._map = [];
            EFileActions.k_Open = 1;
            EFileActions.k_Read = 2;
            EFileActions._map[3] = "k_Write";
            EFileActions.k_Write = 3;
            EFileActions._map[4] = "k_Clear";
            EFileActions.k_Clear = 4;
            EFileActions._map[5] = "k_Exists";
            EFileActions.k_Exists = 5;
            EFileActions._map[6] = "k_Remove";
            EFileActions.k_Remove = 6;
        })(io.EFileActions || (io.EFileActions = {}));
        var EFileActions = io.EFileActions;
        ;
        (function (EFileTransferModes) {
            EFileTransferModes._map = [];
            EFileTransferModes._map[0] = "k_Normal";
            EFileTransferModes.k_Normal = 0;
            EFileTransferModes._map[1] = "k_Fast";
            EFileTransferModes.k_Fast = 1;
            EFileTransferModes._map[2] = "k_Slow";
            EFileTransferModes.k_Slow = 2;
        })(io.EFileTransferModes || (io.EFileTransferModes = {}));
        var EFileTransferModes = io.EFileTransferModes;
        var pLocalFileThreadManager = new util.ThreadManager("LocalFile.t.js");
        var pRemoteFileThreadManager = new util.ThreadManager("RemoteFile.t.js");
        io.getLocalFileThreadManager = function () {
            return pLocalFileThreadManager;
        };
        io.getRemoteFileThreadManager = function () {
            return pRemoteFileThreadManager;
        };
        var TFile = (function () {
            function TFile(sFilename, sMode, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                this._pUri = null;
                this._nCursorPosition = 0;
                this._bOpened = false;
                this._eTransferMode = EFileTransferModes.k_Normal;
                this._pFileMeta = null;
                this._isLocal = false;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = set;
                this.inline = get;
                this.inline = get;
                this.inline = isLocal();
                this.bool = {
                    return: this._isLocal
                };
                if (isDef(sMode)) {
                    this._iMode = isString(sMode) ? filemode(sMode) : sMode;
                }
                this.setAndValidateUri(util.uri(sFilename));
                if (info.api.transferableObjects) {
                    this._eTransferMode = EFileTransferModes.k_Fast;
                }
                if (arguments.length > 2) {
                    this.open(sFilename, sMode, fnCallback);
                }
            }
            TFile.prototype.path = function () {
 {
                    logger.setSourceLocation("TFile.ts", 82);
                    logger.assert(isDefAndNotNull(this._pFileMeta), "There is no file handle open.");
                }
                ;
                return this._pUri.toString();
            };
            TFile.prototype.name = function () {
                return util.pathinfo(this._pUri.path).basename;
            };
            TFile.prototype.mode = function () {
                return this._iMode;
            };
            Object.defineProperty(TFile.prototype, "mode", {
                set: function (sMode) {
                    this._iMode = isString(sMode) ? filemode(sMode) : sMode;
                },
                enumerable: true,
                configurable: true
            });
            TFile.prototype.onread = function (fnCallback) {
                this.read(fnCallback);
            };
            TFile.prototype.onopen = function (fnCallback) {
                this.open(fnCallback);
            };
            TFile.prototype.position = function () {
 {
                    logger.setSourceLocation("TFile.ts", 109);
                    logger.assert(isDefAndNotNull(this._pFileMeta), 'There is no file handle open.');
                }
                ;
                return this._nCursorPosition;
            };
            Object.defineProperty(TFile.prototype, "position", {
                set: function (iOffset) {
 {
                        logger.setSourceLocation("TFile.ts", 114);
                        logger.assert(isDefAndNotNull(this._pFileMeta), 'There is no file handle open.');
                    }
                    ;
                    this._nCursorPosition = iOffset;
                },
                enumerable: true,
                configurable: true
            });
            TFile.prototype.byteLength = function () {
                return this._pFileMeta ? this._pFileMeta.size : 0;
            };
            TFile.prototype.open = function (sFilename, iMode, fnCallback) {
                var pFile = this;
                var hasMode = !isFunction(iMode);
                if (arguments.length < 3) {
                    if (isString(arguments[0])) {
                        this.setAndValidateUri(util.uri(sFilename));
                        fnCallback = arguments[1];
                    } else if (isInt(arguments[0])) {
                        this._iMode = arguments[0];
                        fnCallback = arguments[1];
                    } else {
                        fnCallback = arguments[0];
                    }
 {
                        logger.setSourceLocation("TFile.ts", 166);
                        logger.assert(isDefAndNotNull(this._pUri), "No filename provided.");
                    }
                    ;
                    this.open(this._pUri.toString(), this._iMode, fnCallback);
                    return;
                }
                fnCallback = arguments[hasMode ? 2 : 1];
                fnCallback = fnCallback || TFile.defaultCallback;
                if (this.isOpened()) {
 {
                        logger.setSourceLocation("TFile.ts", 178);
                        logger.warning("file already opened: " + this.name);
                    }
                    ;
                    (fnCallback)(null, this._pFileMeta);
                }
                this.setAndValidateUri(util.uri(arguments[0]));
                if (hasMode) {
                    this._iMode = (isString(arguments[1]) ? filemode(arguments[1]) : arguments[1]);
                }
                this.update(function (err) {
                    if (err) {
 {
                            logger.setSourceLocation("TFile.ts", 190);
                            logger.warning("file update err", err);
                        }
                        ;
                        fnCallback.call(pFile, err);
                        return;
                    }
                    if (((this._iMode & (1 << (3))) != 0)) {
                        this.position = this.size;
                    }
                    fnCallback.call(pFile, null, pFile);
                });
            };
            TFile.prototype.close = function () {
                this._pUri = null;
                this._iMode = EIO.IN | EIO.OUT;
                this._nCursorPosition = 0;
                this._pFileMeta = null;
            };
            TFile.prototype.clear = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.clear.apply(this, _pArgv);
                    });
                    return;
                }
                ;
                var pCommand = {
                    act: EFileActions.k_Clear,
                    name: this.path,
                    mode: this._iMode
                };
                this.execCommand(pCommand, fnCallback);
            };
            TFile.prototype.read = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.read.apply(this, _pArgv);
                    });
                    return;
                }
                ;
                var pFile = this;
                var eTransferMode = this._eTransferMode;
 {
                    logger.setSourceLocation("TFile.ts", 229);
                    logger.assert(((this._iMode & (1 << (0))) != 0), "The file is not readable.");
                }
                ;
                var pCommand = {
                    act: EFileActions.k_Read,
                    name: this.path,
                    mode: this._iMode,
                    pos: this._nCursorPosition,
                    transfer: this._eTransferMode
                };
                var fnCallbackSystem = function (err, pData) {
                    if (err) {
                        fnCallback.call(pFile, err);
                        return;
                    }
                    if (eTransferMode == EFileTransferModes.k_Slow && ((this._iMode & (1 << (5))) != 0)) {
                        pData = new Uint8Array(pData).buffer;
                    }
                    pFile.atEnd();
                    fnCallback.call(pFile, null, pData);
                };
                this.execCommand(pCommand, fnCallbackSystem);
            };
            TFile.prototype.write = function (pData, fnCallback, sContentType) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.write.apply(this, _pArgv);
                    });
                    return;
                }
                ;
                var pFile = this;
                var iMode = this._iMode;
                var pCommand;
                var fnCallbackSystem = function (err, pMeta) {
                    if (err) {
                        fnCallback.call(pFile, err);
                        return;
                    }
                    pFile.position += isString(pData) ? pData.length : pData.byteLength;
                    (pFile)._pFileMeta = pMeta;
                    fnCallback.call(pFile, null, pMeta);
                };
 {
                    logger.setSourceLocation("TFile.ts", 278);
                    logger.assert(((iMode & (1 << (1))) != 0), "The file is not writable.");
                }
                ;
                sContentType = sContentType || (((iMode & (1 << (5))) != 0) ? "application/octet-stream" : "text/plain");
                pCommand = {
                    act: EFileActions.k_Write,
                    name: this.path,
                    mode: this._iMode,
                    data: pData,
                    contentType: sContentType,
                    pos: this._nCursorPosition
                };
                if (!isString(pData)) {
                    this.execCommand(pCommand, fnCallbackSystem, [
                        pData
                    ]);
                } else {
                    this.execCommand(pCommand, fnCallbackSystem);
                }
            };
            TFile.prototype.move = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                var pFile = this;
                this.copy(sFilename, function (err) {
                    if (err) {
                        fnCallback(err);
                        return;
                    }
                    pFile.remove(fnCallback);
                });
            };
            TFile.prototype.copy = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                var iMode = EIO.IN | EIO.OUT | EIO.TRUNC;
                var pFile = this;
                var pFileCopy;
                if (((this._iMode & (1 << (5))) != 0)) {
                    iMode |= EIO.BIN;
                }
                pFileCopy = new TFile(sFilename, iMode, function (err) {
                    if (err) {
                        fnCallback(err);
                    }
                    pFile.read(function (pData) {
                        pFile.write(pData, fnCallback);
                    });
                });
            };
            TFile.prototype.rename = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                var pName = util.pathinfo(sFilename);
 {
                    logger.setSourceLocation("TFile.ts", 336);
                    logger.assert(!pName.dirname, 'only filename can be specified.');
                }
                ;
                this.move(util.pathinfo(this._pUri.path).dirname + "/" + pName.basename, fnCallback);
            };
            TFile.prototype.remove = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.remove.apply(this, _pArgv);
                    });
                    return;
                }
                ;
                var pFile = this;
                var pCommand = {
                    act: EFileActions.k_Remove,
                    name: this.path,
                    mode: this._iMode
                };
                var fnCallbackSystem = function (err, pData) {
                    pFile.close();
                    if (isDef(fnCallback)) {
                        fnCallback.call(pFile, err, pData);
                    }
                };
                this.execCommand(pCommand, fnCallbackSystem);
            };
            TFile.prototype.atEnd = function () {
                this.position = this.byteLength;
                return this._nCursorPosition;
            };
            TFile.prototype.seek = function (iOffset) {
 {
                    logger.setSourceLocation("TFile.ts", 368);
                    logger.assert(isDefAndNotNull(this._pFileMeta), "There is no file handle open.");
                }
                ;
                var nSeek = this._nCursorPosition + iOffset;
                if (nSeek < 0) {
                    nSeek = this.byteLength - (math.abs(nSeek) % this.byteLength);
                }
 {
                    logger.setSourceLocation("TFile.ts", 375);
                    logger.assert(nSeek >= 0 && nSeek <= this.byteLength, "Invalid offset parameter");
                }
                ;
                this._nCursorPosition = nSeek;
                return this._nCursorPosition;
            };
            TFile.prototype.isOpened = function () {
                return this._pFileMeta !== null;
            };
            TFile.prototype.isExists = function (fnCallback) {
                var pCommand = {
                    act: EFileActions.k_Exists,
                    name: this.path,
                    mode: this._iMode
                };
                this.execCommand(pCommand, fnCallback);
            };
            TFile.prototype.getMetaData = function (fnCallback) {
 {
                    logger.setSourceLocation("TFile.ts", 400);
                    logger.assert(isDefAndNotNull(this._pFileMeta), 'There is no file handle open.');
                }
                ;
                fnCallback(null, {
                    lastModifiedDate: this._pFileMeta.lastModifiedDate
                });
            };
            TFile.prototype.setAndValidateUri = function (sFilename) {
                var pUri = util.uri(sFilename);
                var pUriLocal;
                if (pUri.protocol === "filesystem") {
                    pUriLocal = util.uri(pUri.path);
 {
                        logger.setSourceLocation("TFile.ts", 415);
                        logger.assert(!(pUriLocal.protocol && pUriLocal.host != info.uri.host), "Поддерживаются только локальные файлы в пределах текущего домена.");
                    }
                    ;
                    var pFolders = pUriLocal.path.split('/');
                    if (pFolders[0] == "" || pFolders[0] == ".") {
                        pFolders = pFolders.slice(1);
                    }
 {
                        logger.setSourceLocation("TFile.ts", 424);
                        logger.assert(pUri.host === "temporary", "Поддерживаются только файловые системы типа \"temporary\".");
                    }
                    ;
                    this._pUri = util.uri(pFolders.join("/"));
                    this._isLocal = true;
                } else {
                    this._pUri = pUri;
                }
            };
            TFile.prototype.update = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                var pFile = this;
                var pCommand = {
                    act: EFileActions.k_Open,
                    name: this._pUri.toString(),
                    mode: this._iMode
                };
                var fnCallbackSystem = function (err, pMeta) {
                    (pFile)._pFileMeta = pMeta;
                    fnCallback.call(pFile, err, pFile);
                };
                this.execCommand(pCommand, fnCallbackSystem);
            };
            TFile.prototype.execCommand = function (pCommand, fnCallback, pTransferables) {
                TFile.execCommand(this.isLocal(), pCommand, fnCallback);
            };
            TFile.defaultCallback = function (err) {
                if (err) {
                    throw err;
                }
            };
            TFile.execCommand = function execCommand(isLocal, pCommand, fnCallback, pTransferables) {
                var pFile = this;
                var pManager = isLocal ? io.getLocalFileThreadManager() : io.getRemoteFileThreadManager();
                var pThread = pManager.occupyThread();
                pThread.onmessage = function (e) {
                    pManager.releaseThread(pThread);
                    pThread.onmessage = null;
                    fnCallback.call(pFile, null, e.data);
                };
                pThread.onerror = function (e) {
                    pManager.releaseThread(pThread);
                    pThread.onmessage = null;
                    fnCallback.call(pFile, e);
                };
                if (isDef(pTransferables)) {
                    pThread.send(pCommand, pTransferables);
                } else {
                    pThread.send(pCommand);
                }
            };
            return TFile;
        })();
        io.TFile = TFile;        
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        var LocalFileSystem = (function () {
            function LocalFileSystem() {
                this._pFileSystem = null;
                this._pCallbackQueue = [];
            }
            LocalFileSystem.prototype.setFileSystem = function (pFS) {
                this._pFileSystem = pFS;
            };
            LocalFileSystem.prototype.get = function (fnCallback) {
                if (this._pFileSystem) {
                    fnCallback(this._pFileSystem);
                    return;
                }
                var pFileSystem = this;
                var pQueue = this._pCallbackQueue;
                pQueue.push(fnCallback);
                if (pQueue.length > 1) {
                    return;
                }
                window.storageInfo.requestQuota(window.TEMPORARY, (32 * 1024 * 1024), function (nGrantedBytes) {
                    window.requestFileSystem(window.TEMPORARY, nGrantedBytes, function (pFs) {
                        pFileSystem.setFileSystem(pFs);
                        if (pQueue.length) {
                            for(var i = 0; i < pQueue.length; ++i) {
                                pQueue[i](pFs);
                            }
                        }
                    }, LocalFileSystem.errorHandler);
                });
            };
            LocalFileSystem.errorHandler = function errorHandler(e) {
                var sMesg = "init filesystem: ";
                switch(e.code) {
                    case FileError.QUOTA_EXCEEDED_ERR:
                        sMesg += 'QUOTA_EXCEEDED_ERR';
                        break;
                    case FileError.NOT_FOUND_ERR:
                        sMesg += 'NOT_FOUND_ERR';
                        break;
                    case FileError.SECURITY_ERR:
                        sMesg += 'SECURITY_ERR';
                        break;
                    case FileError.INVALID_MODIFICATION_ERR:
                        sMesg += 'INVALID_MODIFICATION_ERR';
                        break;
                    case FileError.INVALID_STATE_ERR:
                        sMesg += 'INVALID_STATE_ERR';
                        break;
                    default:
                        sMesg += 'Unknown Error';
                        break;
                }
 {
                    logger.setSourceLocation("LocalFile.ts", 102);
                    logger.error(sMesg);
                }
                ;
            };
            return LocalFileSystem;
        })();        
        var pLocalFileSystem = new LocalFileSystem();
        function getFileSystem(fnCallback) {
            pLocalFileSystem.get(fnCallback);
        }
        io.getFileSystem = getFileSystem;
        var LocalFile = (function () {
            function LocalFile(sFilename, sMode, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                this._nCursorPosition = 0;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = set;
                this.inline = get;
                this.inline = get;
                if (isDef(sMode)) {
                    this._iMode = isString(sMode) ? filemode(sMode) : sMode;
                }
                this.setAndValidateUri(util.uri(sFilename));
                if (arguments.length > 2) {
                    this.open(sFilename, sMode, fnCallback);
                }
            }
            LocalFile.prototype.path = function () {
 {
                    logger.setSourceLocation("LocalFile.ts", 126);
                    logger.assert(isDefAndNotNull(this._pFile), "There is no file handle open.");
                }
                ;
                return this._pUri.toString();
            };
            LocalFile.prototype.name = function () {
                return util.pathinfo(this._pUri.path).basename;
            };
            LocalFile.prototype.mode = function () {
                return this._iMode;
            };
            Object.defineProperty(LocalFile.prototype, "mode", {
                set: function (sMode) {
                    this._iMode = isString(sMode) ? filemode(sMode) : sMode;
                },
                enumerable: true,
                configurable: true
            });
            LocalFile.prototype.onread = function (fnCallback) {
                this.read(fnCallback);
            };
            LocalFile.prototype.onopen = function (fnCallback) {
                this.open(fnCallback);
            };
            LocalFile.prototype.position = function () {
 {
                    logger.setSourceLocation("LocalFile.ts", 153);
                    logger.assert(isDefAndNotNull(this._pFile), "There is no file handle open.");
                }
                ;
                return this._nCursorPosition;
            };
            Object.defineProperty(LocalFile.prototype, "position", {
                set: function (iOffset) {
 {
                        logger.setSourceLocation("LocalFile.ts", 158);
                        logger.assert(isDefAndNotNull(this._pFile), "There is no file handle open.");
                    }
                    ;
                    this._nCursorPosition = iOffset;
                },
                enumerable: true,
                configurable: true
            });
            LocalFile.prototype.byteLength = function () {
                return this._pFile ? this._pFile.size : 0;
            };
            LocalFile.prototype.open = function (sFilename, iMode, fnCallback) {
                var pFile = this;
                var hasMode = !isFunction(iMode);
                if (arguments.length < 3) {
                    if (isString(arguments[0])) {
                        this.setAndValidateUri(util.uri(sFilename));
                        fnCallback = arguments[1];
                    } else if (isInt(arguments[0])) {
                        this._iMode = arguments[0];
                        fnCallback = arguments[1];
                    } else {
                        fnCallback = arguments[0];
                    }
 {
                        logger.setSourceLocation("LocalFile.ts", 204);
                        logger.assert(isDefAndNotNull(this._pUri), "No filename provided.");
                    }
                    ;
                    this.open(this._pUri.toString(), this._iMode, fnCallback);
                    return;
                }
                fnCallback = arguments[hasMode ? 2 : 1];
                fnCallback = fnCallback || LocalFile.defaultCallback;
                if (this.isOpened()) {
 {
                        logger.setSourceLocation("LocalFile.ts", 216);
                        logger.warning("file already opened: " + this.name);
                    }
                    ;
                    (fnCallback)(null, this._pFile);
                }
                this.setAndValidateUri(util.uri(arguments[0]));
                if (hasMode) {
                    this._iMode = (isString(arguments[1]) ? filemode(arguments[1]) : arguments[1]);
                }
                var fnFSInited;
                var pFile = this;
                var pFileSystem = null;
                var fnErrorHandler = function (e) {
                    if (e.code == FileError.NOT_FOUND_ERR && ((pFile.mode & (1 << (1))) != 0)) {
                        LocalFile.createDir(pFileSystem.root, util.pathinfo(pFile.path).dirname.split('/'), function (e) {
                            if (!isNull(e)) {
                                fnCallback.call(pFile, e);
                            } else {
                                fnFSInited.call(pFile, pFileSystem);
                            }
                        });
                    } else {
                        fnCallback.call(pFile, e);
                    }
                };
                fnFSInited = function (pFs) {
 {
                        logger.setSourceLocation("LocalFile.ts", 250);
                        logger.assert(isDefAndNotNull(pFs), "local file system not initialized");
                    }
                    ;
                    pFileSystem = pFs;
                    pFs.root.getFile(this.path, {
                        create: ((this._iMode & (1 << (1))) != 0),
                        exclusive: false
                    }, function (fileEntry) {
                        (pFile).setFileEntry(fileEntry);
                        (fileEntry).file(function (file) {
                            (pFile).setFile(file);
                            if (((pFile.mode & (1 << (4))) != 0) && pFile.byteLength) {
                                pFile.clear(function (err) {
                                    if (err) {
                                        fnCallback(err);
                                    } else {
                                        fnCallback.call(pFile, null, file);
                                    }
                                });
                                return;
                            }
                            if (((pFile.mode & (1 << (3))) != 0)) {
                                pFile.position = pFile.byteLength;
                            }
                            fnCallback.call(pFile, null, file);
                        }, fnErrorHandler);
                    }, fnErrorHandler);
                };
                getFileSystem(function (pFileSystem) {
                    fnFSInited.call(pFile, pFileSystem);
                });
            };
            LocalFile.prototype.close = function () {
                this._pUri = null;
                this._iMode = EIO.IN | EIO.OUT;
                this._nCursorPosition = 0;
                this._pFile = null;
            };
            LocalFile.prototype.clear = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.clear.apply(this, _pArgv);
                    });
                    return;
                }
                ;
 {
                    logger.setSourceLocation("LocalFile.ts", 303);
                    logger.assert(isDefAndNotNull(this._pFile), 'There is no file handle open');
                }
                ;
                var pFile = this;
                var pFileEntry = this._pFileEntry;
                pFileEntry.createWriter(function (pWriter) {
                    pWriter.seek(0);
                    pWriter.onwriteend = function () {
                        fnCallback.call(pFile, null);
                    };
                    pWriter.truncate(0);
                }, function (e) {
                    fnCallback.call(pFile, e);
                });
            };
            LocalFile.prototype.read = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.read.apply(this, _pArgv);
                    });
                    return;
                }
                ;
                var pFile = this;
                var eTransferMode = this._iMode;
 {
                    logger.setSourceLocation("LocalFile.ts", 330);
                    logger.assert(((this._iMode & (1 << (0))) != 0), "The file is not readable.");
                }
                ;
                var pReader = this._pFileReader;
                var pFileObject = this._pFile;
                pReader.onloadend = function (e) {
                    var pData = ((e.target)).result;
                    var nPos = pFile.position;
                    if (nPos) {
                        if (((pFile.mode & (1 << (5))) != 0)) {
                            pData = (new Uint8Array((new Uint8Array(pData)).subarray(nPos))).buffer;
                        } else {
                            pData = pData.substr(nPos);
                        }
                    }
                    pFile.atEnd();
                    fnCallback.call(pFile, null, pData);
                };
                if (((pFile.mode & (1 << (5))) != 0)) {
                    pReader.readAsArrayBuffer(pFileObject);
                } else {
                    pReader.readAsText(pFileObject);
                }
            };
            LocalFile.prototype.write = function (pData, fnCallback, sContentType) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.write.apply(this, _pArgv);
                    });
                    return;
                }
                ;
                var pFile = this;
                var iMode = this._iMode;
 {
                    logger.setSourceLocation("LocalFile.ts", 369);
                    logger.assert(((iMode & (1 << (1))) != 0), "The file is not writable.");
                }
                ;
                sContentType = sContentType || (((iMode & (1 << (5))) != 0) ? "application/octet-stream" : "text/plain");
                var pFile = this;
                var pFileEntry = this._pFileEntry;
                pFileEntry.createWriter(function (pWriter) {
                    pWriter.seek(pFile.position);
                    pWriter.onerror = function (e) {
                        fnCallback.call(pFileEntry, e);
                    };
                    pWriter.onwriteend = function () {
                        if (((iMode & (1 << (5))) != 0)) {
                            pFile.seek(pData.byteLength);
                        } else {
                            pFile.seek(pData.length);
                        }
                        fnCallback.call(pFile, null);
                    };
                    pWriter.write((new (Blob)(pData, {
                        type: sContentType
                    })));
                }, function (e) {
                    fnCallback.call(pFile, e);
                });
            };
            LocalFile.prototype.move = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                var pFile = this;
                this.copy(sFilename, function (err) {
                    if (err) {
                        fnCallback(err);
                        return;
                    }
                    pFile.remove(fnCallback);
                });
            };
            LocalFile.prototype.copy = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                var iMode = EIO.IN | EIO.OUT | EIO.TRUNC;
                var pFile = this;
                var pFileCopy;
                if (((this._iMode & (1 << (5))) != 0)) {
                    iMode |= EIO.BIN;
                }
                pFileCopy = new LocalFile(sFilename, iMode, function (err) {
                    if (err) {
                        fnCallback(err);
                    }
                    pFile.read(function (pData) {
                        pFile.write(pData, fnCallback);
                    });
                });
            };
            LocalFile.prototype.rename = function (sFilename, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                var pName = util.pathinfo(sFilename);
 {
                    logger.setSourceLocation("LocalFile.ts", 441);
                    logger.assert(!pName.dirname, 'only filename can be specified.');
                }
                ;
                this.move(util.pathinfo(this._pUri.path).dirname + "/" + pName.basename, fnCallback);
            };
            LocalFile.prototype.remove = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = LocalFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.remove.apply(this, _pArgv);
                    });
                    return;
                }
                ;
                var pFile = this;
                this._pFileEntry.remove(function () {
                    pFile.close();
                    fnCallback.call(pFile, null);
                }, fnCallback);
            };
            LocalFile.prototype.atEnd = function () {
                this.position = this.byteLength;
                return this._nCursorPosition;
            };
            LocalFile.prototype.seek = function (iOffset) {
 {
                    logger.setSourceLocation("LocalFile.ts", 464);
                    logger.assert(isDefAndNotNull(this._pFile), "There is no file handle open.");
                }
                ;
                var nSeek = this._nCursorPosition + iOffset;
                if (nSeek < 0) {
                    nSeek = this.byteLength - (math.abs(nSeek) % this.byteLength);
                }
 {
                    logger.setSourceLocation("LocalFile.ts", 471);
                    logger.assert(nSeek >= 0 && nSeek <= this.byteLength, "Invalid offset parameter");
                }
                ;
                this._nCursorPosition = nSeek;
                return this._nCursorPosition;
            };
            LocalFile.prototype.isOpened = function () {
                return this._pFile !== null;
            };
            LocalFile.prototype.isExists = function (fnCallback) {
                this.open(function (e) {
                    fnCallback(isNull(e) ? true : false);
                });
            };
            LocalFile.prototype.isLocal = function () {
                return true;
            };
            LocalFile.prototype.getMetaData = function (fnCallback) {
 {
                    logger.setSourceLocation("LocalFile.ts", 493);
                    logger.assert(isDefAndNotNull(this._pFile), 'There is no file handle open.');
                }
                ;
                fnCallback(null, {
                    lastModifiedDate: this._pFile.lastModifiedDate
                });
            };
            LocalFile.prototype.setFileEntry = function (pFileEntry) {
                if (!isNull(this._pFileEntry)) {
                    return false;
                }
                this._pFileEntry = pFileEntry;
                return true;
            };
            LocalFile.prototype.setFile = function (pFile) {
                if (!isNull(this._pFile)) {
                    return false;
                }
                this._pFile = pFile;
                return true;
            };
            LocalFile.prototype.setAndValidateUri = function (sFilename) {
                var pUri = util.uri(sFilename);
                var pUriLocal;
                if (pUri.protocol === "filesystem") {
                    pUriLocal = util.uri(pUri.path);
 {
                        logger.setSourceLocation("LocalFile.ts", 528);
                        logger.assert(!(pUriLocal.protocol && pUriLocal.host != info.uri.host), "Поддерживаются только локальные файлы в пределах текущего домена.");
                    }
                    ;
                    var pFolders = pUriLocal.path.split('/');
                    if (pFolders[0] == "" || pFolders[0] == ".") {
                        pFolders = pFolders.slice(1);
                    }
 {
                        logger.setSourceLocation("LocalFile.ts", 537);
                        logger.assert(pUri.host === "temporary", "Поддерживаются только файловые системы типа \"temporary\".");
                    }
                    ;
                    this._pUri = util.uri(pFolders.join("/"));
                } else {
 {
                        logger.setSourceLocation("LocalFile.ts", 542);
                        logger.error("used non local uri");
                    }
                    ;
                }
            };
            LocalFile.errorHandler = function errorHandler(e) {
                var sMesg = "";
                switch(e.code) {
                    case FileError.QUOTA_EXCEEDED_ERR:
                        sMesg += 'QUOTA_EXCEEDED_ERR';
                        break;
                    case FileError.NOT_FOUND_ERR:
                        sMesg += 'NOT_FOUND_ERR';
                        break;
                    case FileError.SECURITY_ERR:
                        sMesg += 'SECURITY_ERR';
                        break;
                    case FileError.INVALID_MODIFICATION_ERR:
                        sMesg += 'INVALID_MODIFICATION_ERR';
                        break;
                    case FileError.INVALID_STATE_ERR:
                        sMesg += 'INVALID_STATE_ERR';
                        break;
                    default:
                        sMesg += 'Unknown Error';
                        break;
                }
 {
                    logger.setSourceLocation("LocalFile.ts", 570);
                    logger.error(sMesg);
                }
                ;
            };
            LocalFile.createDir = function createDir(pRootDirEntry, pFolders, fnCallback) {
                if (pFolders[0] == "." || pFolders[0] == "") {
                    pFolders = pFolders.slice(1);
                }
                pRootDirEntry.getDirectory(pFolders[0], {
                    create: true
                }, function (dirEntry) {
                    if (pFolders.length) {
                        LocalFile.createDir(dirEntry, pFolders.slice(1), fnCallback);
                    } else {
                        fnCallback(null);
                    }
                }, fnCallback);
            };
            LocalFile.defaultCallback = function (err) {
                if (err) {
                    LocalFile.errorHandler(err);
                }
            };
            return LocalFile;
        })();
        io.LocalFile = LocalFile;        
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        var StorageFile = (function (_super) {
            __extends(StorageFile, _super);
            function StorageFile(sFilename, sMode, fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                _super.call(this, sFilename, sMode, fnCallback);
            }
            StorageFile.prototype.clear = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.clear.apply(this, _pArgv);
                    });
                    return;
                }
                ;
                localStorage.setItem(this.path, "");
                this._pFileMeta.size = 0;
                fnCallback(null, this);
            };
            StorageFile.prototype.read = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.read.apply(this, _pArgv);
                    });
                    return;
                }
                ;
 {
                    logger.setSourceLocation("StorageFile.ts", 36);
                    logger.assert(((this._iMode & (1 << (1))) != 0), "The file is not readable.");
                }
                ;
                var pData = this.readData();
                var nPos = this._nCursorPosition;
                if (nPos) {
                    if (((this._iMode & (1 << (5))) != 0)) {
                        pData = (new Uint8Array((new Uint8Array(pData)).subarray(nPos))).buffer;
                    } else {
                        pData = pData.substr(nPos);
                    }
                }
                this.atEnd();
                if (fnCallback) {
                    fnCallback.call(this, null, pData);
                }
            };
            StorageFile.prototype.write = function (pData, fnCallback, sContentType) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                if (!this.isOpened()) {
                    var _pArgv = arguments;
                    this.open(function (err) {
                        if (err) {
                            fnCallback(err);
                        }
                        this.write.apply(this, _pArgv);
                    });
                    return;
                }
                ;
                var iMode = this._iMode;
                var nSeek;
                var pCurrentData;
 {
                    logger.setSourceLocation("StorageFile.ts", 66);
                    logger.assert(((iMode & (1 << (1))) != 0), "The file is not writable.");
                }
                ;
                sContentType = sContentType || (((iMode & (1 << (5))) != 0) ? "application/octet-stream" : "text/plain");
                pCurrentData = this.readData();
                if (!isString(pCurrentData)) {
                    pCurrentData = util.abtos(pCurrentData);
                }
                nSeek = (isString(pData) ? pData.length : pData.byteLength);
                if (!isString(pData)) {
                    pData = util.abtos(pData);
                }
                pData = (pCurrentData).substr(0, this._nCursorPosition) + (pData) + (pCurrentData).substr(this._nCursorPosition + (pData).length);
                try  {
                    localStorage.setItem(this.path, pData);
                } catch (e) {
                    fnCallback(e);
                }
                this._pFileMeta.size = pData.length;
                this._nCursorPosition += nSeek;
                fnCallback(null);
            };
            StorageFile.prototype.isExists = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                fnCallback.call(this, null, localStorage.getItem(this.path) == null);
            };
            StorageFile.prototype.remove = function (fnCallback) {
                if (typeof fnCallback === "undefined") { fnCallback = TFile.defaultCallback; }
                localStorage.removeItem(this.path);
                fnCallback.call(this, null);
            };
            StorageFile.prototype.readData = function () {
                var pFileMeta = this._pFileMeta;
                var pData = localStorage.getItem(this.path);
                var pDataBin;
                if (pData == null) {
                    pData = "";
                    if (((this._iMode & (1 << (1))) != 0)) {
                        localStorage.setItem(this.path, pData);
                    }
                }
                if (((this._iMode & (1 << (5))) != 0)) {
                    pDataBin = util.stoab(pData);
                    pFileMeta.size = pDataBin.byteLength;
                    return pDataBin;
                } else {
                    pFileMeta.size = pData.length;
                    return pData;
                }
            };
            StorageFile.prototype.update = function (fnCallback) {
                this._pFileMeta = null;
                this.readData();
                fnCallback.call(this, null);
            };
            return StorageFile;
        })(TFile);
        io.StorageFile = StorageFile;        
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        (function (EIO) {
            EIO._map = [];
            EIO.IN = 0x01;
            EIO.OUT = 0x02;
            EIO.ATE = 0x04;
            EIO.APP = 0x08;
            EIO.TRUNC = 0x10;
            EIO.BINARY = 0x20;
            EIO.BIN = 0x20;
            EIO.TEXT = 0x40;
        })(io.EIO || (io.EIO = {}));
        var EIO = io.EIO;
        ;
        function filemode(sMode) {
            switch(sMode.toLowerCase()) {
                case "a+t":
                    return EIO.IN | EIO.OUT | EIO.APP | EIO.TEXT;
                case "w+t":
                    return EIO.IN | EIO.OUT | EIO.TRUNC | EIO.TEXT;
                case "r+t":
                    return EIO.IN | EIO.OUT | EIO.TEXT;
                case "at":
                    return EIO.APP | EIO.TEXT;
                case "wt":
                    return EIO.OUT | EIO.TEXT;
                case "rt":
                    return EIO.IN | EIO.TEXT;
                case "a+b":
                    return EIO.IN | EIO.OUT | EIO.APP | EIO.BIN;
                case "w+b":
                    return EIO.IN | EIO.OUT | EIO.TRUNC | EIO.BIN;
                case "r+b":
                    return EIO.IN | EIO.OUT | EIO.BIN;
                case "ab":
                    return EIO.APP | EIO.BIN;
                case "wb":
                    return EIO.OUT | EIO.BIN;
                case "rb":
                    return EIO.IN | EIO.BIN;
                case "a+":
                    return EIO.IN | EIO.OUT | EIO.APP;
                case "w+":
                    return EIO.IN | EIO.OUT | EIO.TRUNC;
                case "r+":
                    return EIO.IN | EIO.OUT;
                case "a":
                    return EIO.APP | EIO.OUT;
                case "w":
                    return EIO.OUT;
                case "r":
                default:
                    return EIO.IN;
            }
        }
        io.filemode = filemode;
        function _fopen(sUri, pMode) {
            if (typeof pMode === "undefined") { pMode = EIO.IN; }
            if (info.api.webWorker) {
                return new TFile(sUri, pMode);
            } else if (info.api.fileSystem) {
                return new LocalFile(sUri, pMode);
            } else {
                return new StorageFile(sUri, pMode);
            }
        }
        io.fopen = _fopen;
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    var Codec = (function () {
        function Codec() { }
        Codec._pMapCodecs = {};
        Codec.registerCodec = function registerCodec(pCodec) {
            if (!isDef(Codec._pMapCodecs[pCodec.getType()])) {
                Codec._pMapCodecs[pCodec.getType()] = pCodec;
            } else {
 {
                    logger.setSourceLocation("Codec.ts", 28);
                    logger.criticalError(pCodec.getType() + " already has a registered codec. ");
                }
                ;
            }
        };
        Codec.isCodecRegistered = function isCodecRegistered(pCodec) {
            return isDef(Codec._pMapCodecs[pCodec.getType()]);
        };
        Codec.unRegisterCodec = function unRegisterCodec(pCodec) {
            delete Codec._pMapCodecs[pCodec.getType()];
        };
        Codec.getExtension = function getExtension() {
            var pExt = Array();
            var sExt = "";
            for(sExt in Codec._pMapCodecs) {
                pExt.push(sExt);
            }
            return pExt;
        };
        Codec.getCodec = function getCodec(pMagicNumber) {
            var sExt = "";
            if (isString(pMagicNumber)) {
                if (isDef(Codec._pMapCodecs[pMagicNumber])) {
                    return Codec._pMapCodecs[pMagicNumber];
                } else {
 {
                        logger.setSourceLocation("Codec.ts", 66);
                        logger.criticalError("Can not find codec for " + pMagicNumber);
                    }
                    ;
                    return null;
                }
            } else {
                for(sExt in Codec._pMapCodecs) {
                    var sExt1 = Codec._pMapCodecs[sExt].magicNumberToFileExt(pMagicNumber);
                    if (sExt1) {
                        if (sExt1 == Codec._pMapCodecs[sExt].getType()) {
                            return Codec._pMapCodecs[sExt];
                        } else {
                            return Codec.getCodec(sExt1);
                        }
                    }
                }
            }
            return null;
        };
        Codec.prototype.magicNumberMatch = function (pMagicNumber) {
            return !(this.magicNumberToFileExt(pMagicNumber).length == 0);
        };
        Codec.prototype.magicNumberToFileExt = function (pMagicNumber) {
 {
                logger.setSourceLocation("Codec.ts", 100);
                logger.criticalError("Codec.magicNumberToFileExt is virtual");
            }
            ;
            return null;
        };
        Codec.prototype.getType = function () {
 {
                logger.setSourceLocation("Codec.ts", 106);
                logger.criticalError("Codec.getType is virtual");
            }
            ;
            return null;
        };
        Codec.prototype.getDataType = function () {
 {
                logger.setSourceLocation("Codec.ts", 112);
                logger.criticalError("Codec.getDataType is virtual");
            }
            ;
            return null;
        };
        Codec.prototype.code = function (pInput, pData) {
 {
                logger.setSourceLocation("Codec.ts", 118);
                logger.criticalError("Codec.code is virtual");
            }
            ;
            return null;
        };
        Codec.prototype.decode = function (pData, pCodecData) {
 {
                logger.setSourceLocation("Codec.ts", 123);
                logger.criticalError("Codec.decode is virtual");
            }
            ;
            return null;
        };
        return Codec;
    })();
    akra.Codec = Codec;    
    var CodecData = (function () {
        function CodecData() {
            this.inline = get;
        }
        CodecData.prototype.dataType = function () {
 {
                logger.setSourceLocation("Codec.ts", 135);
                logger.criticalError("CodecData.dataType is virtual");
            }
            ;
            return "CodecData";
        };
        return CodecData;
    })();
    akra.CodecData = CodecData;    
})(akra || (akra = {}));
var akra;
(function (akra) {
    var ImgCodec = (function (_super) {
        __extends(ImgCodec, _super);
        function ImgCodec() {
            _super.apply(this, arguments);

        }
        ImgCodec.prototype.getDataType = function () {
            return "ImgData";
        };
        return ImgCodec;
    })(Codec);
    akra.ImgCodec = ImgCodec;    
    var ImgData = (function (_super) {
        __extends(ImgData, _super);
        function ImgData() {
            _super.apply(this, arguments);

            this._iHeight = 0;
            this._iWidth = 0;
            this._iDepth = 1;
            this._iSize = 0;
            this._nMipMaps = 0;
            this._iFlags = 0;
            this._eFormat = EPixelFormats.UNKNOWN;
            this.inline = get;
            this.inline = set;
            this.inline = get;
            this.inline = set;
            this.inline = get;
            this.inline = set;
            this.inline = get;
            this.inline = get;
            this.inline = set;
            this.inline = get;
            this.inline = set;
            this.inline = get;
            this.inline = set;
            this.inline = get;
            this.inline = set;
            this.inline = get;
            this.inline = get;
        }
        ImgData.prototype.width = function () {
            return this._iWidth;
        };
        ImgData.prototype.width = function (iWidth) {
            this._iWidth = iWidth;
        };
        ImgData.prototype.height = function () {
            return this._iHeight;
        };
        ImgData.prototype.height = function (iHeight) {
            this._iHeight = iHeight;
        };
        ImgData.prototype.depth = function () {
            return this._iDepth;
        };
        ImgData.prototype.depth = function (iDepth) {
            this._iDepth = iDepth;
        };
        ImgData.prototype.size = function () {
            return core.pool.resources.Img.calculateSize(this.numMipMaps, this.numFace, this.width, this.height, this.depth, this.format);
        };
        ImgData.prototype.numMipMaps = function () {
            return this._nMipMaps;
        };
        ImgData.prototype.numMipMaps = function (nNumMipMaps) {
            this._nMipMaps = nNumMipMaps;
        };
        ImgData.prototype.format = function () {
            return this._eFormat;
        };
        ImgData.prototype.format = function (ePixelFormat) {
            this._eFormat = ePixelFormat;
        };
        ImgData.prototype.flags = function () {
            return this._iFlags;
        };
        ImgData.prototype.flags = function (iFlags) {
            this._iFlags = iFlags;
        };
        ImgData.prototype.cubeFlags = function () {
            return this._iCubeFlags;
        };
        ImgData.prototype.cubeFlags = function (iFlags) {
            this._iCubeFlags = iFlags;
        };
        ImgData.prototype.numFace = function () {
            if (this._iFlags & EImageFlags.CUBEMAP) {
                var nFace = 0;
                for(var i = 0; i < 32; i++) {
                    nFace++;
                }
                return nFace;
            } else {
                return 1;
            }
        };
        ImgData.prototype.dataType = function () {
            return "ImgData";
        };
        return ImgData;
    })(CodecData);
    akra.ImgData = ImgData;    
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var Img = (function (_super) {
                    __extends(Img, _super);
                    function Img() {
                        _super.call(this);
                        this._iWidth = 0;
                        this._iHeight = 0;
                        this._iDepth = 0;
                        this._nMipMaps = 0;
                        this._iFlags = 0;
                        this._iCubeFlags = 0;
                        this._eFormat = EPixelFormats.UNKNOWN;
                        this._pBuffer = null;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                    }
                    Img.prototype.byteLength = function () {
                        return this._pBuffer.buffer.byteLength;
                    };
                    Img.prototype.width = function () {
                        return this._iWidth;
                    };
                    Img.prototype.height = function () {
                        return this._iHeight;
                    };
                    Img.prototype.depth = function () {
                        return this._iDepth;
                    };
                    Img.prototype.numFaces = function () {
                        if (this._iFlags & EImageFlags.CUBEMAP) {
                            var nFace = 0;
                            for(var i = 0; i < 6; i++) {
                                if (this._iCubeFlags & (1 << i)) {
                                    nFace++;
                                }
                            }
                            return nFace;
                        } else {
                            return 1;
                        }
                    };
                    Img.prototype.numMipMaps = function () {
                        return this._nMipMaps;
                    };
                    Img.prototype.format = function () {
                        return this._eFormat;
                    };
                    Img.prototype.flags = function () {
                        return this._iFlags;
                    };
                    Img.prototype.cubeFlags = function () {
                        return this._iCubeFlags;
                    };
                    Img.prototype.createResource = function () {
 {
                            logger.setSourceLocation("resources/Img.ts", 87);
                            logger.assert(!this.isResourceCreated(), "The resource has already been created.");
                        }
                        ;
                        this.notifyCreated();
                        this.notifyDisabled();
                        return true;
                    };
                    Img.prototype.destroyResource = function () {
                        if (this.isResourceCreated()) {
                            this.disableResource();
                            this.freeMemory();
                            this.notifyUnloaded();
                            this.notifyDestroyed();
                            return (true);
                        }
                        return (false);
                    };
                    Img.prototype.restoreResource = function () {
 {
                            logger.setSourceLocation("resources/Img.ts", 119);
                            logger.assert(this.isResourceCreated(), "The resource has not been created.");
                        }
                        ;
                        this.notifyRestored();
                        return true;
                    };
                    Img.prototype.disableResource = function () {
 {
                            logger.setSourceLocation("resources/Img.ts", 127);
                            logger.assert(this.isResourceCreated(), "The resource has not been created.");
                        }
                        ;
                        this.notifyDisabled();
                        return true;
                    };
                    Img.prototype.loadResource = function (sFilename) {
                        return !isNull(this.load(sFilename));
                    };
                    Img.prototype.saveResource = function (sFilename) {
                        return false;
                    };
                    Img.prototype.create = function (iWidth, iHeight, iDepth, eFormat, nFaces, nMipMaps) {
                        if (typeof iDepth === "undefined") { iDepth = 1; }
                        if (typeof eFormat === "undefined") { eFormat = EPixelFormats.BYTE_ABGR; }
                        if (typeof nFaces === "undefined") { nFaces = 1; }
                        if (typeof nMipMaps === "undefined") { nMipMaps = 0; }
                        var iSize = Img.calculateSize(nMipMaps, nFaces, iWidth, iHeight, iDepth, eFormat);
                        var pBuffer = new Uint8Array(iSize);
                        return this.loadDynamicImage(pBuffer, iWidth, iHeight, iDepth, eFormat, nFaces, nMipMaps);
                    };
                    Img.prototype.freeMemory = function () {
                        this._iWidth = 0;
                        this._iHeight = 0;
                        this._iDepth = 0;
                        this._pBuffer = null;
                    };
                    Img.prototype.set = function (pSrc) {
                        this.freeMemory();
                        this._iWidth = pSrc.width;
                        this._iHeight = pSrc.height;
                        this._iDepth = pSrc.depth;
                        this._eFormat = pSrc.format;
                        this._iFlags = pSrc.flags;
                        this._nMipMaps = pSrc.numMipMaps;
                        this._pBuffer = new Uint8Array(pSrc.getData());
                        return this;
                    };
                    Img.prototype.flipY = function (pDest) {
                        return this;
                    };
                    Img.prototype.flipX = function (pDest) {
                        return this;
                    };
                    Img.prototype.load = function (pData, sType, fnCallBack) {
                        var pMe = this;
                        if (pData instanceof HTMLCanvasElement) {
                            var pTempContext = pData.getContext('2d');
                            if (!pTempContext) {
                                if (isDefAndNotNull(sType)) {
                                    sType(false);
                                }
                                return this;
                            }
                            var pImageData = pTempContext.getImageData(0, 0, pData.width, pData.height);
                            this.loadDynamicImage(new Uint8Array(pImageData.data.buffer.slice(0, pImageData.data.buffer.byteLength)), pData.width, pData.height);
                            if (isDefAndNotNull(sType)) {
                                sType(true);
                            }
                            return this;
                        } else if (isString(pData)) {
                            var sExt = (new Pathinfo(pData)).ext;
                            if (sExt == "png" || sExt == "jpg" || sExt == "jpeg" || sExt == "gif" || sExt == "bmp") {
                                var pImg = new Image();
                                pImg.onload = function () {
                                    var pTempCanvas = document.createElement("canvas");
                                    pTempCanvas.width = pImg.width;
                                    pTempCanvas.height = pImg.height;
                                    var pTempContext = ((pTempCanvas).getContext("2d"));
                                    pTempContext.drawImage(pImg, 0, 0);
                                    var pImageData = pTempContext.getImageData(0, 0, pImg.width, pImg.height);
                                    pMe.loadDynamicImage(new Uint8Array(pImageData.data.buffer.slice(0, pImageData.data.buffer.byteLength)), pImg.width, pImg.height, 1, EPixelFormats.BYTE_ABGR);
                                    if (isDefAndNotNull(sType)) {
                                        sType(true);
                                    }
                                };
                                pImg.onerror = function () {
                                    if (isDefAndNotNull(sType)) {
                                        sType(false);
                                    }
                                };
                                pImg.onabort = function () {
                                    if (isDefAndNotNull(sType)) {
                                        sType(false);
                                    }
                                };
                                pImg.src = pData;
                            } else {
                                io.fopen(pData, "rb").onread = function (pError, pDataInFile) {
                                    pMe.load(new Uint8Array(pDataInFile), sExt, sType);
                                };
                            }
                            return this;
                        } else {
                            var pCodec = undefined;
                            if (sType) {
                                pCodec = Codec.getCodec(sType);
                            }
                            if (!pCodec) {
                                var iMagicLen = Math.min(32, pData.buffer.byteLength);
                                pCodec = Codec.getCodec(pData.buffer.slice(0, iMagicLen));
                            }
                            if (!pCodec) {
 {
                                    logger.setSourceLocation("resources/Img.ts", 286);
                                    logger.criticalError("Unable to load image: Image format is unknown. Unable to identify codec. Check it or specify format explicitly.\n" + "Img.load");
                                }
                                ;
                                if (fnCallBack) {
                                    fnCallBack(false);
                                }
                                return this;
                            }
                            var pImgData = new ImgData();
                            this._pBuffer = pCodec.decode(pData, pImgData);
                            this._iWidth = pImgData.width;
                            this._iHeight = pImgData.height;
                            this._iDepth = pImgData.depth;
                            this._nMipMaps = pImgData.numMipMaps;
                            this._iFlags = pImgData.flags;
                            this._iCubeFlags = pImgData.cubeFlags;
                            this._eFormat = pImgData.format;
                            this.notifyLoaded();
                            if (fnCallBack) {
                                fnCallBack(true);
                            }
                            return this;
                        }
                    };
                    Img.prototype.loadRawData = function (pData, iWidth, iHeight, iDepth, eFormat, nFaces, nMipMaps) {
                        if (typeof iDepth === "undefined") { iDepth = 1; }
                        if (typeof eFormat === "undefined") { eFormat = EPixelFormats.BYTE_BGR; }
                        if (typeof nFaces === "undefined") { nFaces = 1; }
                        if (typeof nMipMaps === "undefined") { nMipMaps = 0; }
                        var iSize = Img.calculateSize(nMipMaps, nFaces, iWidth, iHeight, iDepth, eFormat);
                        if (iSize != pData.buffer.byteLength) {
 {
                                logger.setSourceLocation("resources/Img.ts", 333);
                                logger.criticalError("Stream size does not match calculated image size\n" + "Img.loadRawData");
                            }
                            ;
                        }
                        var pBuffer = new Uint8Array(iSize);
                        pBuffer.set(pData);
                        return this.loadDynamicImage(pBuffer, iWidth, iHeight, iDepth, eFormat, nFaces, nMipMaps);
                    };
                    Img.prototype.loadDynamicImage = function (pData, iWidth, iHeight, iDepth, eFormat, nFaces, nMipMaps) {
                        if (typeof iDepth === "undefined") { iDepth = 1; }
                        if (typeof eFormat === "undefined") { eFormat = EPixelFormats.BYTE_BGR; }
                        if (typeof nFaces === "undefined") { nFaces = 1; }
                        if (typeof nMipMaps === "undefined") { nMipMaps = 0; }
                        this._iWidth = iWidth;
                        this._iHeight = iHeight;
                        this._iDepth = iDepth;
                        this._eFormat = eFormat;
                        this._nMipMaps = nMipMaps;
                        this._iFlags = 0;
                        if (pixelUtil.isCompressed(this._eFormat)) {
                            this._iFlags |= EImageFlags.COMPRESSED;
                        }
                        if (this._iDepth != 1) {
                            this._iFlags |= EImageFlags.TEXTURE_3D;
                        }
                        if (nFaces == 6) {
                            this._iFlags |= EImageFlags.CUBEMAP;
                        }
                        if (nFaces != 6 && nFaces != 1) {
 {
                                logger.setSourceLocation("resources/Img.ts", 371);
                                logger.criticalError("Number of faces currently must be 6 or 1.\n" + "Img.loadDynamicImage");
                            }
                            ;
                        }
                        this._pBuffer = pData;
                        this.notifyLoaded();
                        return this;
                    };
                    Img.prototype.convert = function (eFormat) {
                        return false;
                    };
                    Img.prototype.getRawSpan = function () {
                        return this._iWidth * this.getPixelSize();
                    };
                    Img.prototype.getBPP = function () {
                        return this.getPixelSize() * 8;
                    };
                    Img.prototype.getPixelSize = function () {
                        return pixelUtil.getNumElemBytes(this._eFormat);
                    };
                    Img.prototype.getData = function () {
                        return this._pBuffer;
                    };
                    Img.prototype.hasFlag = function (eFlag) {
                        if (this._iFlags & eFlag) {
                            return true;
                        } else {
                            return false;
                        }
                    };
                    Img.prototype.hasAlpha = function () {
                        return pixelUtil.hasAlpha(this._eFormat);
                    };
                    Img.prototype.isCompressed = function () {
                        return pixelUtil.isCompressed(this._eFormat);
                    };
                    Img.prototype.isLuminance = function () {
                        return pixelUtil.isLuminance(this._eFormat);
                    };
                    Img.prototype.getColorAt = function (pColor, x, y, z) {
                        if (typeof z === "undefined") { z = 0; }
                        var iStart = this.getPixelSize() * (z * this._iWidth * this._iHeight + this._iWidth * y + x);
                        pixelUtil.unpackColour(pColor, this._eFormat, this._pBuffer.subarray(iStart, iStart + this.getPixelSize()));
                        return pColor;
                    };
                    Img.prototype.setColorAt = function (pColor, x, y, z) {
                        if (typeof z === "undefined") { z = 0; }
                        var iStart = this.getPixelSize() * (z * this._iWidth * this._iHeight + this._iWidth * y + x);
                        pixelUtil.packColour(pColor, this._eFormat, this._pBuffer.subarray(iStart, iStart + this.getPixelSize()));
                    };
                    Img.prototype.getPixels = function (iFace, iMipMap) {
                        if (iMipMap > this.numMipMaps) {
 {
                                logger.setSourceLocation("resources/Img.ts", 454);
                                logger.warning("Mipmap index out of range", iMipMap, this.numMipMaps);
                            }
                            ;
                            return null;
                        }
                        if (iFace >= this.numFaces) {
 {
                                logger.setSourceLocation("resources/Img.ts", 459);
                                logger.warning("Face index out of range", iFace, this.numFaces);
                            }
                            ;
                            return null;
                        }
                        var pData = this.getData();
                        var iWidth = this._iWidth;
                        var iHeight = this._iHeight;
                        var iDepth = this._iDepth;
                        var iFullFaceSize = 0;
                        var iFinalFaceSize = 0;
                        var iFinalWidth = 0;
                        var iFinalHeight = 0;
                        var iFinalDepth = 0;
                        var iMipSize = 0;
                        var iOffset = 0;
                        for(var iMip = 0; iMip <= this.numMipMaps; ++iMip) {
                            if (iMip == iMipMap) {
                                iFinalFaceSize = iFullFaceSize;
                                iFinalWidth = iWidth;
                                iFinalHeight = iHeight;
                                iFinalDepth = iDepth;
                                iMipSize = pixelUtil.getMemorySize(iWidth, iHeight, iDepth, this.format);
                            }
                            iFullFaceSize += pixelUtil.getMemorySize(iWidth, iHeight, iDepth, this.format);
                            if (iWidth != 1) {
                                iWidth /= 2;
                            }
                            if (iHeight != 1) {
                                iHeight /= 2;
                            }
                            if (iDepth != 1) {
                                iDepth /= 2;
                            }
                        }
                        iOffset += iFace * iFullFaceSize;
                        iOffset += iFinalFaceSize;
                        var pSrc = new pixelUtil.PixelBox(iFinalWidth, iFinalHeight, iFinalDepth, this.format, pData.subarray(iOffset, iOffset + iMipSize));
                        return pSrc;
                    };
                    Img.prototype.scale = function (pDest, eFilter) {
                        return null;
                    };
                    Img.prototype.resize = function (iWidth, iHeight, eFilter) {
                        return null;
                    };
                    Img.prototype.generatePerlinNoise = function (fScale, iOctaves, fFalloff) {
                    };
                    Img.prototype.randomChannelNoise = function (iChannel, iMinRange, iMaxRange) {
                    };
                    Img.calculateSize = function calculateSize(nMipMaps, nFaces, iWidth, iHeight, iDepth, eFormat) {
                        var iSize = 0;
                        var iMip = 0;
                        for(iMip = 0; iMip <= nMipMaps; iMip++) {
                            iSize += pixelUtil.getMemorySize(iWidth, iHeight, iDepth, eFormat) * nFaces;
                            if (iWidth != 1) {
                                iWidth = Math.floor(iWidth / 2);
                            }
                            if (iHeight != 1) {
                                iHeight = Math.floor(iHeight / 2);
                            }
                            if (iDepth != 1) {
                                iDepth = Math.floor(iDepth / 2);
                            }
                        }
                        return iSize;
                    };
                    Img.getMaxMipmaps = function getMaxMipmaps(iWidth, iHeight, iDepth, eFormat) {
                        var iCount = 0;
                        if ((iWidth > 0) && (iHeight > 0)) {
                            do {
                                if (iWidth > 1) {
                                    iWidth = iWidth >>> 1;
                                }
                                if (iHeight > 1) {
                                    iHeight = iHeight >>> 1;
                                }
                                if (iDepth > 1) {
                                    iDepth = iDepth >>> 1;
                                }
                                iCount++;
                            } while(!(iWidth === 1 && iHeight === 1 && iDepth === 1));
                        }
                        return iCount;
                    };
                    return Img;
                })(ResourcePoolItem);
                resources.Img = Img;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var Component = (function (_super) {
                    __extends(Component, _super);
                    function Component() {
                        _super.call(this);
                        this._pTechnique = null;
                        this._pComposer = null;
                        this.inline = getTechnique();
                        this.IAFXTechniqueInstruction = {
                            return: this._pTechnique
                        };
                        this.inline = setTechnique(pTechnique, IAFXTechniqueInstruction);
                    }
                    Component.prototype.create = function () {
                        this._pComposer = this.manager.getEngine().getComposer();
                    };
                    return Component;
                })(ResourcePoolItem);
                resources.Component = Component;                
                void {
                    this: ,
                    _pTechnique:  = pTechnique
                };
                inline;
                getName();
                string;
 {
                    return this._pTechnique.getName();
                }
                inline;
                getTotalPasses();
                number;
 {
                    return this._pTechnique.totalOwnPasses();
                }
                inline;
                getHash(iShift, number, iPass, number);
                string;
 {
                    return this.getGuid() + ">" + iShift.toString() + ">" + (iPass === 0xffffff ? "A" : iPass.toString());
                }
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    (function (ERenderDataTypes) {
        ERenderDataTypes._map = [];
        ERenderDataTypes.ISOLATED = 0;
        ERenderDataTypes._map[1] = "INDEXED";
        ERenderDataTypes.INDEXED = 1;
        ERenderDataTypes._map[2] = "I2I";
        ERenderDataTypes.I2I = 2;
        ERenderDataTypes._map[3] = "DIRECT";
        ERenderDataTypes.DIRECT = 3;
    })(akra.ERenderDataTypes || (akra.ERenderDataTypes = {}));
    var ERenderDataTypes = akra.ERenderDataTypes;
    ;
    (function (ERenderDataOptions) {
        ERenderDataOptions._map = [];
        ERenderDataOptions.ADVANCED_INDEX = (1 << (0x10));
        ERenderDataOptions.SINGLE_INDEX = (1 << (0x11));
        ERenderDataOptions.RENDERABLE = (1 << (0x12));
    })(akra.ERenderDataOptions || (akra.ERenderDataOptions = {}));
    var ERenderDataOptions = akra.ERenderDataOptions;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    (function (EMeshOptions) {
        EMeshOptions._map = [];
        EMeshOptions.HB_READABLE = EHardwareBufferFlags.READABLE;
        EMeshOptions.RD_ADVANCED_INDEX = ERenderDataOptions.ADVANCED_INDEX;
    })(akra.EMeshOptions || (akra.EMeshOptions = {}));
    var EMeshOptions = akra.EMeshOptions;
    ;
    (function (EMeshCloneOptions) {
        EMeshCloneOptions._map = [];
        EMeshCloneOptions.GEOMETRY_ONLY = 0x00;
        EMeshCloneOptions.SHARED_GEOMETRY = 0x01;
    })(akra.EMeshCloneOptions || (akra.EMeshCloneOptions = {}));
    var EMeshCloneOptions = akra.EMeshCloneOptions;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    (function (ERenderDataBufferOptions) {
        ERenderDataBufferOptions._map = [];
        ERenderDataBufferOptions.VB_READABLE = EHardwareBufferFlags.READABLE;
        ERenderDataBufferOptions.RD_ADVANCED_INDEX = ERenderDataOptions.ADVANCED_INDEX;
        ERenderDataBufferOptions.RD_SINGLE_INDEX = ERenderDataOptions.SINGLE_INDEX;
        ERenderDataBufferOptions.RD_RENDERABLE = ERenderDataOptions.RENDERABLE;
    })(akra.ERenderDataBufferOptions || (akra.ERenderDataBufferOptions = {}));
    var ERenderDataBufferOptions = akra.ERenderDataBufferOptions;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    (function (EEntityTypes) {
        EEntityTypes._map = [];
        EEntityTypes._map[0] = "UNKNOWN";
        EEntityTypes.UNKNOWN = 0;
        EEntityTypes._map[1] = "NODE";
        EEntityTypes.NODE = 1;
        EEntityTypes._map[2] = "JOINT";
        EEntityTypes.JOINT = 2;
        EEntityTypes._map[3] = "SCENE_NODE";
        EEntityTypes.SCENE_NODE = 3;
        EEntityTypes._map[4] = "CAMERA";
        EEntityTypes.CAMERA = 4;
        EEntityTypes._map[5] = "SHADOW_CASTER";
        EEntityTypes.SHADOW_CASTER = 5;
        EEntityTypes._map[6] = "MODEL_ENTRY";
        EEntityTypes.MODEL_ENTRY = 6;
        EEntityTypes.LIGHT = 37;
        EEntityTypes.SCENE_OBJECT = 64;
        EEntityTypes._map[65] = "MODEL";
        EEntityTypes.MODEL = 65;
        EEntityTypes._map[66] = "TERRAIN";
        EEntityTypes.TERRAIN = 66;
        EEntityTypes._map[67] = "TERRAIN_ROAM";
        EEntityTypes.TERRAIN_ROAM = 67;
        EEntityTypes._map[68] = "TERRAIN_SECTION";
        EEntityTypes.TERRAIN_SECTION = 68;
        EEntityTypes._map[69] = "TERRAIN_SECTION_ROAM";
        EEntityTypes.TERRAIN_SECTION_ROAM = 69;
        EEntityTypes._map[70] = "TEXT3D";
        EEntityTypes.TEXT3D = 70;
        EEntityTypes._map[71] = "SPRITE";
        EEntityTypes.SPRITE = 71;
        EEntityTypes._map[72] = "EMITTER";
        EEntityTypes.EMITTER = 72;
        EEntityTypes.UI_NODE = 100;
        EEntityTypes.OBJECTS_LIMIT = 128;
    })(akra.EEntityTypes || (akra.EEntityTypes = {}));
    var EEntityTypes = akra.EEntityTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    (function (ENodeInheritance) {
        ENodeInheritance._map = [];
        ENodeInheritance.POSITION = 0;
        ENodeInheritance._map[1] = "ROTSCALE";
        ENodeInheritance.ROTSCALE = 1;
        ENodeInheritance._map[2] = "ALL";
        ENodeInheritance.ALL = 2;
    })(akra.ENodeInheritance || (akra.ENodeInheritance = {}));
    var ENodeInheritance = akra.ENodeInheritance;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        (function (EEntityStates) {
            EEntityStates._map = [];
            EEntityStates.k_Updated = 0x01;
            EEntityStates.k_DescendantsUpdtated = 0x02;
            EEntityStates.k_SiblingsUpdated = 0x04;
        })(util.EEntityStates || (util.EEntityStates = {}));
        var EEntityStates = util.EEntityStates;
        var Entity = (function (_super) {
            __extends(Entity, _super);
            function Entity(eType) {
                _super.call(this);
                this._sName = null;
                this._pParent = null;
                this._pSibling = null;
                this._pChild = null;
                this._eType = EEntityTypes.UNKNOWN;
                this._iStateFlags = 0;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = isUpdated();
                this.bool = {
                    return: (((this._iStateFlags) & (EEntityStates.k_Updated)) == (EEntityStates.k_Updated))
                };
                this.inline = hasUpdatedSubNodes();
                this.bool = {
                    return: (((this._iStateFlags) & (EEntityStates.k_DescendantsUpdtated)) == (EEntityStates.k_DescendantsUpdtated))
                };
                this.inline = hasParent();
                this.bool = {
                    return: isDefAndNotNull(this._pParent)
                };
                this.inline = hasChild();
                this.bool = {
                    return: isDefAndNotNull(this._pChild)
                };
                this.inline = hasSibling();
                this.bool = {
                    return: isDefAndNotNull(this._pSibling)
                };
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.inline = getEventTable();
                this.IEventTable = {
                    return: Entity._pEventTable
                };
                this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = _syncTable(pFrom, IEventProvider);
                this._eType = eType;
            }
            Entity.prototype.name = function () {
                return this._sName;
            };
            Entity.prototype.name = function (sName) {
                this._sName = sName;
            };
            Entity.prototype.parent = function () {
                return this._pParent;
            };
            Entity.prototype.parent = function (pParent) {
                this.attachToParent(pParent);
            };
            Entity.prototype.sibling = function () {
                return this._pSibling;
            };
            Entity.prototype.sibling = function (pSibling) {
                this._pSibling = pSibling;
            };
            Entity.prototype.child = function () {
                return this._pChild;
            };
            Entity.prototype.child = function (pChild) {
                this._pChild = pChild;
            };
            Entity.prototype.type = function () {
                return this._eType;
            };
            Object.defineProperty(Entity.prototype, "rightSibling", {
                get: function () {
                    var pSibling = this.sibling;
                    if (pSibling) {
                        while(pSibling.sibling) {
                            pSibling = pSibling.sibling;
                        }
                        return pSibling;
                    }
                    return this;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "depth", {
                get: function () {
                    var iDepth = -1;
                    for(var pEntity = this; pEntity; pEntity = pEntity.parent, ++iDepth) {
                    }
                    ;
                    return iDepth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Entity.prototype, "root", {
                get: function () {
                    for(var pEntity = this, iDepth = -1; pEntity.parent; pEntity = pEntity.parent, ++iDepth) {
                    }
                    ;
                    return pEntity;
                },
                enumerable: true,
                configurable: true
            });
            Entity.prototype.destroy = function (bRecursive, bPromoteChildren) {
                if (typeof bRecursive === "undefined") { bRecursive = false; }
                if (typeof bPromoteChildren === "undefined") { bPromoteChildren = true; }
                if (bRecursive) {
                    if (this._pSibling) {
                        this._pSibling.destroy(true);
                    }
                    if (this._pChild) {
                        this._pChild.destroy(true);
                    }
                }
                if (bPromoteChildren && !bRecursive) {
                    this.promoteChildren();
                }
                this.detachFromParent();
 {
                    logger.setSourceLocation("util/Entity.ts", 93);
                    logger.assert(this.referenceCount() == 0, "Attempting to delete a scene node which is still in use");
                }
                ;
 {
                    logger.setSourceLocation("util/Entity.ts", 94);
                    logger.assert(this._pSibling == null, "Failure Destroying Node");
                }
                ;
 {
                    logger.setSourceLocation("util/Entity.ts", 95);
                    logger.assert(this._pChild == null, "Failure Destroying Node");
                }
                ;
            };
            Entity.prototype.findEntity = function (sName) {
                var pEntity = null;
                if (this._sName === sName) {
                    return this;
                }
                if (this._pSibling) {
                    pEntity = this._pSibling.findEntity(sName);
                }
                if (pEntity == null && this._pChild) {
                    pEntity = this._pChild.findEntity(sName);
                }
                return pEntity;
            };
            Entity.prototype.explore = function (fn) {
                if (fn(this) === false) {
                    return;
                }
                if (this._pSibling) {
                    this._pSibling.explore(fn);
                }
                if (this._pChild) {
                    this._pChild.explore(fn);
                }
            };
            Entity.prototype.childOf = function (pParent) {
                for(var pEntity = this; pEntity; pEntity = pEntity.parent) {
                    if (pEntity.parent === pParent) {
                        return true;
                    }
                }
                return false;
            };
            Entity.prototype.children = function () {
                var pChildren = [];
                var pChild = this.child;
                while(!isNull(pChild)) {
                    pChildren.push(pChild);
                    pChild = pChild.sibling;
                }
                return pChildren;
            };
            Entity.prototype.childAt = function (i) {
                var pChild = this.child;
                var n = 0;
                while(!isNull(pChild)) {
                    if (n == i) {
                        return pChild;
                    }
                    n++;
                    pChild = pChild.sibling;
                }
                return pChild;
            };
            Entity.prototype.siblingCount = function () {
                var iCount = 0;
                if (this._pParent) {
                    var pNextSibling = this._pParent.child;
                    if (pNextSibling) {
                        while(pNextSibling) {
                            pNextSibling = pNextSibling.sibling;
                            ++iCount;
                        }
                    }
                }
                return iCount;
            };
            Entity.prototype.descCount = function () {
                var n = this.childCount();
                var pChild = this.child;
                while(!isNull(pChild)) {
                    n += pChild.descCount();
                    pChild = pChild.sibling;
                }
                return n;
            };
            Entity.prototype.childCount = function () {
                var iCount = 0;
                var pChild = this.child;
                while(!isNull(pChild)) {
                    iCount++;
                    pChild = pChild.sibling;
                }
                return iCount;
            };
            Entity.prototype.recursiveUpdate = function () {
                if (this.update()) {
                    ((this._iStateFlags) |= (EEntityStates.k_Updated));
                }
                if (this._pSibling && this._pSibling.recursiveUpdate()) {
                    ((this._iStateFlags) |= (EEntityStates.k_SiblingsUpdated));
                }
                if (this._pChild && this._pChild.recursiveUpdate()) {
                    ((this._iStateFlags) |= (EEntityStates.k_DescendantsUpdtated));
                }
                return (this._iStateFlags != 0);
            };
            Entity.prototype.recursivePreUpdate = function () {
                this.prepareForUpdate();
                if (this._pSibling) {
                    this._pSibling.recursivePreUpdate();
                }
                if (this._pChild) {
                    this._pChild.recursivePreUpdate();
                }
            };
            Entity.prototype.prepareForUpdate = function () {
                this._iStateFlags = 0;
            };
            Entity.prototype.isASibling = function (pSibling) {
                if (!pSibling) {
                    return false;
                }
                if (this == pSibling || this._pSibling == pSibling) {
                    return true;
                }
                if (this._pSibling) {
                    return this._pSibling.isASibling(pSibling);
                }
                return false;
            };
            Entity.prototype.isAChild = function (pChild) {
                if (!pChild) {
                    return (false);
                }
                if (this._pChild == pChild) {
                    return (true);
                }
                if (this._pChild) {
                    return (this._pChild.isASibling(pChild));
                }
                return (false);
            };
            Entity.prototype.isInFamily = function (pEntity, bSearchEntireTree) {
                if (!pEntity) {
                    return (false);
                }
                if (this == pEntity || this._pChild == pEntity || this._pSibling == pEntity) {
                    return (true);
                }
                if (!bSearchEntireTree) {
                    if (this.isASibling(pEntity)) {
                        return (true);
                    }
                    if (this._pChild && this._pChild.isASibling(pEntity)) {
                        return (true);
                    }
                } else {
                    if (this._pSibling && this._pSibling.isInFamily(pEntity, bSearchEntireTree)) {
                        return (true);
                    }
                    if (this._pChild && this._pChild.isInFamily(pEntity, bSearchEntireTree)) {
                        return (true);
                    }
                }
                return (false);
            };
            Entity.prototype.addSibling = function (pSibling) {
                if (pSibling) {
                    pSibling.sibling = this._pSibling;
                    this.sibling = pSibling;
                }
                return pSibling;
            };
            Entity.prototype.addChild = function (pChild) {
                if (pChild) {
                    pChild.sibling = this._pChild;
                    this._pChild = pChild;
                    this.childAdded(pChild);
                }
                return pChild;
            };
            Entity.prototype.removeChild = function (pChild) {
                if (this._pChild && pChild) {
                    if (this._pChild == pChild) {
                        this._pChild = pChild.sibling;
                        pChild.sibling = null;
                    } else {
                        var pTempNode = this._pChild;
                        while(pTempNode && (pTempNode.sibling != pChild)) {
                            pTempNode = pTempNode.sibling;
                        }
                        if (pTempNode) {
                            pTempNode.sibling = pChild.sibling;
                            pChild.sibling = null;
                        }
                    }
                    this.childRemoved(pChild);
                }
                return pChild;
            };
            Entity.prototype.removeAllChildren = function () {
                while(!isNull(this._pChild)) {
                    var pNextSibling = this._pChild.sibling;
                    this._pChild.detachFromParent();
                    this._pChild = pNextSibling;
                }
            };
            Entity.prototype.attachToParent = function (pParent) {
                var pParentPrev = this.parent;
                if (pParent != this._pParent) {
                    this.detachFromParent();
                    if (pParent) {
                        if (pParent.addChild(this)) {
                            this._pParent = pParent;
                            this._pParent.addRef();
                            this.attached();
                            return true;
                        }
                        return this.attachToParent(pParentPrev);
                    }
                }
                return false;
            };
            Entity.prototype.detachFromParent = function () {
                if (this._pParent) {
                    this._pParent.removeChild(this);
                    if (this._pParent) {
                        this._pParent.release();
                    }
                    this._pParent = null;
                    this.detached();
                    return true;
                }
                return false;
            };
            Entity.prototype.promoteChildren = function () {
                while(!isNull(this._pChild)) {
                    var pNextSibling = this._pChild.sibling;
                    this._pChild.attachToParent(this._pParent);
                    this._pChild = pNextSibling;
                }
            };
            Entity.prototype.relocateChildren = function (pParent) {
                if (pParent != this) {
                    while(!isNull(this._pChild)) {
                        var pNextSibling = this._pChild.sibling;
                        this._pChild.attachToParent(pParent);
                        this._pChild = pNextSibling;
                    }
                }
            };
            Entity.prototype.update = function () {
                return false;
            };
            Entity.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<entity' + (this._sName ? ' ' + this._sName : "") + '>';
                }
                var pSibling = this.sibling;
                var pChild = this.child;
                var s = "";
                for(var i = 0; i < iDepth; ++i) {
                    s += ':  ';
                }
                s += '+----[depth: ' + this.depth + ']' + this.toString() + '\n';
                if (pChild) {
                    s += pChild.toString(true, iDepth + 1);
                }
                if (pSibling) {
                    s += pSibling.toString(true, iDepth);
                }
                return s;
            };
            Entity._pEventTable = new events.EventTable();
            return Entity;
        })(ReferenceCounter);
        util.Entity = Entity;        
        void {
            this: ,
            getEventTable: ._sync(this, pFrom)
        };
        attached();
        void {
            var: _recivier,
            any:  = this
        };
        this._pUnicastSlotMap = this._pUnicastSlotMap || (this.getEventTable()).findUnicastList(this._iGuid);
        var _unicast = (this._pUnicastSlotMap).attached;
        if (isDef(_unicast)) {
            _unicast.target ? _unicast.target[_unicast.callback](_recivier) : _unicast.listener(_recivier);
        }
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
;
;
detached();
void {
    var: _recivier,
    any:  = this
};
this._pUnicastSlotMap = this._pUnicastSlotMap || (this.getEventTable()).findUnicastList(this._iGuid);
var _unicast = (this._pUnicastSlotMap).detached;
if (isDef(_unicast)) {
    _unicast.target ? _unicast.target[_unicast.callback](_recivier) : _unicast.listener(_recivier);
}
;
;
childAdded(child);
void {
    var: _recivier,
    any:  = this
};
this._pUnicastSlotMap = this._pUnicastSlotMap || (this.getEventTable()).findUnicastList(this._iGuid);
var _unicast = (this._pUnicastSlotMap).childAdded;
if (isDef(_unicast)) {
    _unicast.target ? _unicast.target[_unicast.callback](_recivier, child) : _unicast.listener(_recivier, child);
}
;
;
childRemoved(child);
void {
    var: _recivier,
    any:  = this
};
this._pUnicastSlotMap = this._pUnicastSlotMap || (this.getEventTable()).findUnicastList(this._iGuid);
var _unicast = (this._pUnicastSlotMap).childRemoved;
if (isDef(_unicast)) {
    _unicast.target ? _unicast.target[_unicast.callback](_recivier, child) : _unicast.listener(_recivier, child);
}
;
;
var akra;
(function (akra) {
    (function (scene) {
        (function (ENodeUpdateFlags) {
            ENodeUpdateFlags._map = [];
            ENodeUpdateFlags.k_SetForDestruction = 0;
            ENodeUpdateFlags._map[1] = "k_NewOrientation";
            ENodeUpdateFlags.k_NewOrientation = 1;
            ENodeUpdateFlags._map[2] = "k_NewWorldMatrix";
            ENodeUpdateFlags.k_NewWorldMatrix = 2;
            ENodeUpdateFlags._map[3] = "k_NewLocalMatrix";
            ENodeUpdateFlags.k_NewLocalMatrix = 3;
            ENodeUpdateFlags._map[4] = "k_RebuildInverseWorldMatrix";
            ENodeUpdateFlags.k_RebuildInverseWorldMatrix = 4;
            ENodeUpdateFlags._map[5] = "k_RebuildNormalMatrix";
            ENodeUpdateFlags.k_RebuildNormalMatrix = 5;
        })(scene.ENodeUpdateFlags || (scene.ENodeUpdateFlags = {}));
        var ENodeUpdateFlags = scene.ENodeUpdateFlags;
        ;
        var Node = (function (_super) {
            __extends(Node, _super);
            function Node() {
                _super.apply(this, arguments);

                this._m4fLocalMatrix = null;
                this._m4fWorldMatrix = null;
                this._m4fInverseWorldMatrix = null;
                this._m3fNormalMatrix = null;
                this._v3fWorldPosition = null;
                this._qRotation = null;
                this._v3fTranslation = null;
                this._v3fScale = null;
                this._iUpdateFlags = 0;
                this._eInheritance = ENodeInheritance.POSITION;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = get;
                this.inline = setInheritance(eInheritance, ENodeInheritance);
            }
            Node.prototype.create = function () {
                return true;
            };
            Node.prototype.localOrientation = function () {
                return this._qRotation;
            };
            Node.prototype.localOrientation = function (qOrient) {
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
                this._qRotation.set(qOrient);
            };
            Node.prototype.localPosition = function () {
                return this._v3fTranslation;
            };
            Node.prototype.localPosition = function (v3fPosition) {
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
                this._v3fTranslation.set(v3fPosition);
            };
            Node.prototype.localScale = function () {
                return this._v3fScale;
            };
            Node.prototype.localScale = function (v3fScale) {
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
                this._v3fScale.set(v3fScale);
            };
            Node.prototype.localMatrix = function () {
                return this._m4fLocalMatrix;
            };
            Node.prototype.localMatrix = function (m4fLocalMatrix) {
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewLocalMatrix)));
                this._m4fLocalMatrix.set(m4fLocalMatrix);
            };
            Node.prototype.worldMatrix = function () {
                return this._m4fWorldMatrix;
            };
            Node.prototype.worldPosition = function () {
                return this._v3fWorldPosition;
            };
            Object.defineProperty(Node.prototype, "inverseWorldMatrix", {
                get: function () {
                    if (((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_RebuildInverseWorldMatrix))) != 0)) {
                        this._m4fWorldMatrix.inverse(this._m4fInverseWorldMatrix);
                        ((this._iUpdateFlags) &= ~(1 << (ENodeUpdateFlags.k_RebuildInverseWorldMatrix)));
                    }
                    return this._m4fInverseWorldMatrix;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "normalMatrix", {
                get: function () {
                    if (((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_RebuildNormalMatrix))) != 0)) {
                        this._m4fWorldMatrix.toMat3(this._m3fNormalMatrix).inverse().transpose();
                        ((this._iUpdateFlags) &= ~(1 << (ENodeUpdateFlags.k_RebuildNormalMatrix)));
                    }
                    return this._m3fNormalMatrix;
                },
                enumerable: true,
                configurable: true
            });
            Node.prototype.update = function () {
                return this.recalcWorldMatrix();
            };
            Node.prototype.prepareForUpdate = function () {
                _super.prototype.prepareForUpdate.call(this);
                ((this._iUpdateFlags) &= ~((1 << (ENodeUpdateFlags.k_NewLocalMatrix)) | (1 << (ENodeUpdateFlags.k_NewOrientation)) | (1 << (ENodeUpdateFlags.k_NewWorldMatrix))));
            };
            return Node;
        })(util.Entity);
        scene.Node = Node;        
 {
            this._eInheritance = eInheritance;
        }
        inline;
        getInheritance();
        ENodeInheritance;
 {
            return this._eInheritance;
        }
        inline;
        isWorldMatrixNew();
        bool;
 {
            return ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewWorldMatrix))) != 0);
        }
        inline;
        isLocalMatrixNew();
        bool;
 {
            return ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewLocalMatrix))) != 0);
        }
        recalcWorldMatrix();
        bool;
 {
            var isParentMoved = this._pParent && (this._pParent).isWorldMatrixNew();
            var isOrientModified = ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewOrientation))) != 0);
            var isLocalModified = ((this._iUpdateFlags & (1 << (ENodeUpdateFlags.k_NewLocalMatrix))) != 0);
            if (isOrientModified || isParentMoved || isLocalModified) {
                var m4fLocal = this._m4fLocalMatrix;
                var m4fWorld = this._m4fWorldMatrix;
                var m4fOrient = Node._m4fTemp;
                var v3fTemp = Node._v3fTemp;
                var pWorldData = m4fWorld.data;
                var pOrientData = m4fOrient.data;
                this._qRotation.toMat4(m4fOrient);
                m4fOrient.setTranslation(this._v3fTranslation);
                m4fOrient.scaleLeft(this._v3fScale);
                m4fOrient.multiply(m4fLocal);
                if (this._pParent) {
                    var m4fParent = (this._pParent).worldMatrix;
                    var pParentData = m4fParent.data;
                    if (this._eInheritance === ENodeInheritance.ALL) {
                        m4fParent.multiply(m4fOrient, m4fWorld);
                    } else if (this._eInheritance === ENodeInheritance.POSITION) {
                        m4fWorld.set(m4fOrient);
                        pWorldData[12] = pParentData[12] + pOrientData[12];
                        pWorldData[13] = pParentData[13] + pOrientData[13];
                        pWorldData[14] = pParentData[14] + pOrientData[14];
                    } else if (this._eInheritance === ENodeInheritance.ROTSCALE) {
                        var p11 = pParentData[0], p12 = pParentData[4], p13 = pParentData[8];
                        var p21 = pParentData[1], p22 = pParentData[5], p23 = pParentData[9];
                        var p31 = pParentData[2], p32 = pParentData[6], p33 = pParentData[10];
                        var l11 = pOrientData[0], l12 = pOrientData[4], l13 = pOrientData[8];
                        var l21 = pOrientData[1], l22 = pOrientData[5], l23 = pOrientData[9];
                        var l31 = pOrientData[2], l32 = pOrientData[6], l33 = pOrientData[10];
                        pWorldData[0] = p11 * l11 + p12 * l21 + p13 * l31;
                        pWorldData[4] = p11 * l12 + p12 * l22 + p13 * l32;
                        pWorldData[8] = p11 * l13 + p12 * l23 + p13 * l33;
                        pWorldData[12] = pOrientData[12];
                        pWorldData[1] = p21 * l11 + p22 * l21 + p23 * l31;
                        pWorldData[5] = p21 * l12 + p22 * l22 + p23 * l32;
                        pWorldData[9] = p21 * l13 + p22 * l23 + p23 * l33;
                        pWorldData[13] = pOrientData[13];
                        pWorldData[2] = p31 * l11 + p32 * l21 + p33 * l31;
                        pWorldData[6] = p31 * l12 + p32 * l22 + p33 * l32;
                        pWorldData[10] = p31 * l13 + p32 * l23 + p33 * l33;
                        pWorldData[14] = pOrientData[14];
                        pWorldData[3] = pOrientData[3];
                        pWorldData[7] = pOrientData[7];
                        pWorldData[11] = pOrientData[11];
                        pWorldData[15] = pOrientData[15];
                    }
                } else {
                    m4fWorld.set(m4fOrient);
                }
                this._v3fWorldPosition.x = pWorldData[12];
                this._v3fWorldPosition.y = pWorldData[13];
                this._v3fWorldPosition.z = pWorldData[14];
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewWorldMatrix)));
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_RebuildInverseWorldMatrix)));
                ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_RebuildNormalMatrix)));
                return true;
            }
            return false;
        }
        setPosition(v3fPosition, IVec3);
        void ;
        setPosition(fX, number, fY, number, fZ, number);
        void ;
        setPosition(fX ?  : any, fY ?  : any, fZ ?  : any);
        void {
            var: pPos,
            IVec3:  = arguments.length === 1 ? arguments[0] : vec3(fX, fY, fZ)
        };
        var v3fTranslation = this._v3fTranslation;
        v3fTranslation.set(pPos);
        ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
addPosition(v3fPosition, IVec3);
void ;
addPosition(fX, number, fY, number, fZ, number);
void ;
addPosition(fX ?  : any, fY ?  : any, fZ ?  : any);
void {
    var: pPos,
    IVec3:  = arguments.length === 1 ? arguments[0] : vec3(fX, fY, fZ)
};
var v3fTranslation = this._v3fTranslation;
v3fTranslation.add(pPos);
((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
addRelPosition(v3fPosition, IVec3);
void ;
addRelPosition(fX, number, fY, number, fZ, number);
void ;
addRelPosition(fX ?  : any, fY ?  : any, fZ ?  : any);
void {
    var: pPos,
    IVec3:  = arguments.length === 1 ? arguments[0] : vec3(fX, fY, fZ)
};
var v3fTranslation = this._v3fTranslation;
this._qRotation.multiplyVec3(pPos);
v3fTranslation.add(pPos);
((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
setRotationByMatrix(m3fRotation, IMat3);
void ;
setRotationByMatrix(m4fRotation, IMat4);
void ;
setRotationByMatrix(matrix, any);
void {
    matrix: ,
    toQuat4: (this._qRotation)
}((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
setRotationByAxisAngle(v3fAxis, IVec3, fAngle, number);
void {
    Quat4: ,
    fromAxisAngle: (v3fAxis, 
fAngle, 
this._qRotation)
}((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
setRotationByForwardUp(v3fForward, IVec3, v3fUp, IVec3);
void {
    Quat4: ,
    fromForwardUp: (v3fForward, 
v3fUp, 
this._qRotation)
}((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
setRotationByEulerAngles(fYaw, number, fPitch, number, fRoll, number);
void {
    Quat4: ,
    fromYawPitchRoll: (fYaw, 
fPitch, 
fRoll, 
this._qRotation)
}((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
setRotationByXYZAxis(fX, number, fY, number, fZ, number);
void {
    Quat4: ,
    fromYawPitchRoll: (fY, 
fX, 
fZ, 
this._qRotation)
}((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
setRotation(q4fRotation, IQuat4);
void {
    this: ,
    _qRotation: ,
    set: (q4fRotation)
}((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
addRelRotationByMatrix(m3fRotation, IMat3);
void ;
addRelRotationByMatrix(m4fRotation, IMat4);
void ;
addRelRotationByMatrix(matrix, any);
void {
    this: ,
    addRelRotation: (arguments[0].toQuat4(Node._q4fTemp))
};
addRelRotationByAxisAngle(v3fAxis, IVec3, fAngle, number);
void {
    this: ,
    addRelRotation: (Quat4.fromAxisAngle(v3fAxis, fAngle, Node._q4fTemp))
};
addRelRotationByForwardUp(v3fForward, IVec3, v3fUp, IVec3);
void {
    this: ,
    addRelRotation: (Quat4.fromForwardUp(v3fForward, v3fUp, Node._q4fTemp))
};
addRelRotationByEulerAngles(fYaw, number, fPitch, number, fRoll, number);
void {
    this: ,
    addRelRotation: (Quat4.fromYawPitchRoll(fYaw, fPitch, fRoll, Node._q4fTemp))
};
addRelRotationByXYZAxis(fX, number, fY, number, fZ, number);
void {
    this: ,
    addRelRotation: (Quat4.fromYawPitchRoll(fY, fX, fZ, Node._q4fTemp))
};
addRelRotation(q4fRotation, IQuat4);
void {
    this: ,
    _qRotation: ,
    multiply: (q4fRotation)
}((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
addRotationByMatrix(m3fRotation, IMat3);
void ;
addRotationByMatrix(m4fRotation, IMat4);
void ;
addRotationByMatrix(matrix, any);
void {
    this: ,
    addRotation: (arguments[0].toQuat4(Node._q4fTemp))
};
addRotationByAxisAngle(v3fAxis, IVec3, fAngle, number);
void {
    this: ,
    addRotation: (Quat4.fromAxisAngle(v3fAxis, fAngle, Node._q4fTemp))
};
addRotationByForwardUp(v3fForward, IVec3, v3fUp, IVec3);
void {
    this: ,
    addRotation: (Quat4.fromForwardUp(v3fForward, v3fUp, Node._q4fTemp))
};
addRotationByEulerAngles(fYaw, number, fPitch, number, fRoll, number);
void {
    this: ,
    addRotation: (Quat4.fromYawPitchRoll(fYaw, fPitch, fRoll, Node._q4fTemp))
};
addRotationByXYZAxis(fX, number, fY, number, fZ, number);
void {
    this: ,
    addRotation: (Quat4.fromYawPitchRoll(fY, fX, fZ, Node._q4fTemp))
};
addRotation(q4fRotation, IQuat4);
void {
    q4fRotation: ,
    multiplyVec3: (this._v3fTranslation),
    q4fRotation: ,
    multiply: (this._qRotation, 
this._qRotation)
}((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
scale(fScale, number);
void ;
scale(v3fScale, IVec3);
void ;
scale(fX, number, fY, number, fZ, number);
void ;
scale(fX, any, fY ?  : any, fZ ?  : any);
void {
    var: pScale,
    IVec3:  = arguments.length === 1 ? (isNumber(arguments[0]) ? vec3(fX) : arguments[0]) : vec3(fX, fY, fZ)
};
var v3fScale = this._v3fScale;
v3fScale.scale(pScale);
((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewOrientation)));
attachToParent(pParent, IEntity);
bool;
 {
    if (_super.prototype.attachToParent.call(this, pParent)) {
        var m4fInvertedParentMatrix = mat4();
        (this._pParent)._m4fWorldMatrix.inverse(m4fInvertedParentMatrix);
        ((this._iUpdateFlags) |= (1 << (ENodeUpdateFlags.k_NewWorldMatrix)));
        return true;
    }
    return false;
}
detachFromParent();
bool;
 {
    if (_super.prototype.detachFromParent.call(this)) {
        this._m4fWorldMatrix.identity();
        return true;
    }
    return false;
}
toString(isRecursive, bool = false, iDepth, number = 0);
string;
 {
    if (!isRecursive) {
        return '<node' + (this.name ? " " + this.name : "") + '>';
    }
    var pSibling = this.sibling;
    var pChild = this.child;
    var s = "";
    for(var i = 0; i < iDepth; ++i) {
        s += ':  ';
    }
    s += '+----[depth: ' + this.depth + ']' + this.toString() + '\n';
    if (pChild) {
        s += pChild.toString(true, iDepth + 1);
    }
    if (pSibling) {
        s += pSibling.toString(true, iDepth);
    }
    return s;
}
;
_v3fTemp:
IVec3 = vec3()
_v4fTemp:
IVec4 = vec4()
_m3fTemp:
IMat3 = mat3()
_m4fTemp:
IMat4 = mat4()
_q4fTemp:
IQuat4 = quat4()
var akra;
(function (akra) {
    (function (scene) {
        var SceneNode = (function (_super) {
            __extends(SceneNode, _super);
            function SceneNode(pScene, eType) {
                if (typeof eType === "undefined") { eType = EEntityTypes.SCENE_NODE; }
                _super.call(this, eType);
                this._pScene = null;
                this.inline = get;
                this.inline = set;
                this.scene = pScene;
            }
            SceneNode.prototype.scene = function () {
                return this._pScene;
            };
            SceneNode.prototype.scene = function (pScene) {
                this._pScene = pScene;
            };
            SceneNode.prototype.create = function () {
                _super.prototype.create.call(this);
                this._m4fLocalMatrix = new Mat4(1);
                this._m4fWorldMatrix = new Mat4(1);
                this._m4fInverseWorldMatrix = new Mat4(1);
                this._m3fNormalMatrix = new Mat3(1);
                this._v3fWorldPosition = new Vec3();
                this._v3fTranslation = new Vec3(0);
                this._v3fScale = new Vec3(1);
                this._qRotation = new Quat4(0, 1);
                return true;
            };
            SceneNode.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
            };
            SceneNode.prototype.attachToParent = function (pParent) {
                if ((pParent).scene !== this._pScene) {
 {
                        logger.setSourceLocation("SceneNode.ts", 46);
                        logger.warning("transfer of the scene node between trees scene - forbidden");
                    }
                    ;
                    return false;
                }
                return _super.prototype.attachToParent.call(this, pParent);
            };
            SceneNode.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return "<scene_node" + (this.name ? " " + this.name : "") + ">";
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return SceneNode;
        })(Node);
        scene.SceneNode = SceneNode;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        var Joint = (function (_super) {
            __extends(Joint, _super);
            function Joint(pScene) {
                _super.call(this, pScene, EEntityTypes.JOINT);
                this._sBone = null;
                this.inline = get;
                this.inline = set;
            }
            Joint.prototype.boneName = function () {
                return this._sBone;
            };
            Joint.prototype.boneName = function (sBone) {
                this._sBone = sBone;
            };
            Joint.prototype.create = function () {
                this._m4fLocalMatrix = new Mat4(1);
                this._m4fWorldMatrix = new Mat4(1);
                this._v3fWorldPosition = new Vec3();
                this._v3fTranslation = new Vec3(0, 0, 0);
                this._v3fScale = new Vec3(1);
                this._qRotation = new Quat4(0, 1);
                this.setInheritance(ENodeInheritance.ALL);
                return true;
            };
            Joint.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                isRecursive = isRecursive || false;
                if (!isRecursive) {
                    return "<joint" + (this._sName ? (' ' + this._sName) : "") + ">";
                }
                return Node.prototype.toString.call(this, isRecursive, iDepth);
            };
            return Joint;
        })(SceneNode);
        scene.Joint = Joint;        
        inline;
        function isJoint(pEntity) {
            return pEntity.type == EEntityTypes.JOINT;
        }
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (model) {
        var Skeleton = (function () {
            function Skeleton(sName) {
                if (typeof sName === "undefined") { sName = null; }
                this._pRootJoints = [];
                this._pJointMap = null;
                this._pNodeList = null;
                this._pMeshNode = null;
                this._iFlags = false;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = getRootJoint();
                this.IJoint = {
                    return: this.getRootJoints()[0]
                };
                this.inline = getRootJoints();
                this.IJoint = [];
                this._sName = sName;
            }
            Skeleton.prototype.totalBones = function () {
                return Object.keys(this._pJointMap).length;
            };
            Skeleton.prototype.totalNodes = function () {
                return this._pNodeList.length;
            };
            Skeleton.prototype.name = function () {
                return this._sName;
            };
            Skeleton.prototype.root = function () {
                return this._pRootJoints[0] || null;
            };
            return Skeleton;
        })();        
 {
            return this._pRootJoints;
        }
        inline;
        getJointMap();
        IJointMap;
 {
            return this._pJointMap;
        }
        inline;
        getNodeList();
        ISceneNode[];
 {
            return this._pNodeList;
        }
        addRootJoint(pJoint, IJoint);
        bool;
 {
 {
                logger.setSourceLocation("model/Skeleton.ts", 56);
                logger.assert(pJoint instanceof scene.Joint, 'node must be joint');
            }
            ;
            var pRootJoints = this._pRootJoints;
            for(var i = 0; i < pRootJoints.length; i++) {
                if (pJoint.childOf(pRootJoints[i])) {
                    return false;
                } else if (pRootJoints[i].childOf(pJoint)) {
                    pRootJoints.splice(i, 1);
                }
            }
            ;
            this._pRootJoints.push(pJoint);
            return this.update();
        }
        update();
        bool;
 {
            var pRootJoints = this.getRootJoints();
            var pJointMap = this._pJointMap = {};
            var pNodeList = this._pNodeList = [];
            function findNodes(pNode) {
                var sJoint = null;
                if (!isNull(pNode)) {
                    if (scene.isJoint(pNode)) {
                        sJoint = (pNode).boneName;
                    }
                    if (!isNull(sJoint)) {
 {
                            logger.setSourceLocation("model/Skeleton.ts", 90);
                            logger.assert(!pJointMap[sJoint], 'joint with name<' + sJoint + '> already exists in skeleton <' + this._sName + '>');
                        }
                        ;
                        pJointMap[sJoint] = pNode;
                    }
                    pNodeList.push(pNode);
                    findNodes(pNode.sibling);
                    findNodes(pNode.child);
                }
            }
            for(var i = 0; i < pRootJoints.length; i++) {
                findNodes(pRootJoints[i]);
            }
            ;
            return true;
        }
        findJoint(sName, string);
        IJoint;
 {
            return this._pJointMap[sName];
        }
        findJointByName(sName, string);
        IJoint;
 {
            for(var s in this._pJointMap) {
                if (this._pJointMap[s].name === sName) {
                    return this._pJointMap[s];
                }
            }
            return null;
        }
        attachMesh(pMesh, IMesh);
        bool;
 {
            if (isNull(this.root)) {
                return false;
            }
            if (this._pMeshNode == null) {
                this._pMeshNode = this.root.scene.createModel();
                this._pMeshNode.setInheritance(ENodeInheritance.ALL);
                this._pMeshNode.attachToParent(this.root);
            }
            this._pMeshNode.name = this.name + "[mesh-container]";
            this._pMeshNode.mesh = (pMesh);
            return true;
        }
        detachMesh();
        void {};
    })(akra.model || (akra.model = {}));
    var model = akra.model;
})(akra || (akra = {}));
function createSkeleton(sName) {
    if (typeof sName === "undefined") { sName = null; }
    return new Skeleton(sName);
}
exports.createSkeleton = createSkeleton;
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    (function (EAnimationInterpolations) {
        EAnimationInterpolations._map = [];
        EAnimationInterpolations._map[0] = "MATRIX_LINEAR";
        EAnimationInterpolations.MATRIX_LINEAR = 0;
        EAnimationInterpolations._map[1] = "LINEAR";
        EAnimationInterpolations.LINEAR = 1;
    })(akra.EAnimationInterpolations || (akra.EAnimationInterpolations = {}));
    var EAnimationInterpolations = akra.EAnimationInterpolations;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (animation) {
        var Frame = (function () {
            function Frame(fTime, pMatrix, fWeight) {
                this.time = 0.0;
                this.weight = 1.0;
                this.matrix = null;
                this.rotation = new Quat4();
                this.scale = new Vec3();
                this.translation = new Vec3();
                switch(arguments.length) {
                    case 0:
                        this.matrix = new Mat4();
                        return;
                    case 3:
                        this.weight = fWeight;
                    case 2:
                        this.matrix = pMatrix;
                    case 1:
                        this.time = fTime;
                }
                ;
                this.matrix.decompose(this.rotation, this.scale, this.translation);
            }
            Frame.prototype.toMatrix = function () {
                return this.rotation.toMat4(this.matrix).setTranslation(this.translation).scaleRight(this.scale);
            };
            Frame.prototype.toMatrixFromMatrix = function () {
                return this.matrix;
            };
            Frame.prototype.reset = function () {
                this.weight = 0.0;
                this.time = 0.0;
                var pData = this.matrix.data;
                pData[0] = pData[4] = pData[8] = pData[12] = pData[1] = pData[5] = pData[9] = pData[13] = pData[2] = pData[6] = pData[10] = pData[14] = pData[3] = pData[7] = pData[11] = pData[15] = 0;
                this.rotation.x = this.rotation.y = this.rotation.z = 0;
                this.rotation.w = 1.0;
                this.translation.x = this.translation.y = this.translation.z = 0;
                this.scale.x = this.scale.y = this.scale.z = 0;
                return this;
            };
            Frame.prototype.set = function (pFrame) {
                this.matrix.set(pFrame.matrix);
                this.rotation.set(pFrame.rotation);
                this.scale.set(pFrame.scale);
                this.translation.set(pFrame.translation);
                this.time = pFrame.time;
                this.weight = pFrame.weight;
            };
            Frame.prototype.add = function (pFrame, isFirst) {
                var fWeight = pFrame.weight;
                this.scale.x += pFrame.scale.x * fWeight;
                this.scale.y += pFrame.scale.y * fWeight;
                this.scale.z += pFrame.scale.z * fWeight;
                this.translation.x += pFrame.translation.x * fWeight;
                this.translation.y += pFrame.translation.y * fWeight;
                this.translation.z += pFrame.translation.z * fWeight;
                this.weight += fWeight;
                if (!isFirst) {
                    this.rotation.smix(pFrame.rotation, fWeight / this.weight);
                } else {
                    this.rotation.set(pFrame.rotation);
                }
                return this;
            };
            Frame.prototype.addMatrix = function (pFrame) {
                var pMatData = pFrame.matrix.data;
                var fWeight = pFrame.weight;
                var pResData = this.matrix.data;
                for(var i = 0; i < 16; ++i) {
                    pResData[i] += pMatData[i] * fWeight;
                }
                this.weight += fWeight;
                return this;
            };
            Frame.prototype.mult = function (fScalar) {
                this.weight *= fScalar;
                return this;
            };
            Frame.prototype.normilize = function () {
                var fScalar = 1.0 / this.weight;
                this.scale.x *= fScalar;
                this.scale.y *= fScalar;
                this.scale.z *= fScalar;
                this.translation.x *= fScalar;
                this.translation.y *= fScalar;
                this.translation.z *= fScalar;
                return this;
            };
            Frame.prototype.normilizeMatrix = function () {
                var fScalar = 1.0 / this.weight;
                var pData = this.matrix.data;
                pData[0] *= fScalar;
                pData[4] *= fScalar;
                pData[8] *= fScalar;
                pData[12] *= fScalar;
                pData[1] *= fScalar;
                pData[5] *= fScalar;
                pData[9] *= fScalar;
                pData[13] *= fScalar;
                pData[2] *= fScalar;
                pData[6] *= fScalar;
                pData[10] *= fScalar;
                pData[14] *= fScalar;
                pData[3] *= fScalar;
                pData[7] *= fScalar;
                pData[11] *= fScalar;
                pData[15] *= fScalar;
                return this;
            };
            Frame.prototype.interpolate = function (pStartFrame, pEndFrame, fBlend) {
                pStartFrame.translation.mix(pEndFrame.translation, fBlend, this.translation);
                pStartFrame.scale.mix(pEndFrame.scale, fBlend, this.scale);
                pStartFrame.rotation.smix(pEndFrame.rotation, fBlend, this.rotation);
            };
            Frame.prototype.interpolateMatrix = function (pStartFrame, pEndFrame, fBlend) {
                var pResultData = this.matrix.data;
                var pStartData = pStartFrame.matrix.data;
                var pEndData = pEndFrame.matrix.data;
                var fBlendInv = 1. - fBlend;
                for(var i = 0; i < 16; i++) {
                    pResultData[i] = pEndData[i] * fBlend + pStartData[i] * fBlendInv;
                }
                ;
            };
            Object.defineProperty(Frame, "stackCeil", {
                get: function () {
                    Frame.stackPosition = Frame.stackPosition === Frame.stackSize - 1 ? 0 : Frame.stackPosition;
                    return Frame.stack[Frame.stackPosition++];
                }
,
                enumerable: true,
                configurable: true
            });
            Frame.stackSize = 4 * 4096;
            Frame.stackPosition = 0;
            Frame.stack = (function () {
                var pStack = new Array(Frame.stackSize);
                for(var i = 0; i < Frame.stackSize; i++) {
                    pStack[i] = new Frame();
                }
                return pStack;
            })();
            return Frame;
        })();
        animation.Frame = Frame;        
        inline;
        function animationFrame() {
            return Frame.stackCeil;
        }
        function createFrame(fTime, pMatrix, fWeight) {
            if (typeof fTime === "undefined") { fTime = 0.0; }
            if (typeof pMatrix === "undefined") { pMatrix = null; }
            if (typeof fWeight === "undefined") { fWeight = 1.0; }
            return new Frame(fTime, pMatrix, fWeight);
        }
        animation.createFrame = createFrame;
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (animation) {
        var Track = (function () {
            function Track(sTarget) {
                if (typeof sTarget === "undefined") { sTarget = null; }
                this._sTarget = null;
                this._pTarget = null;
                this._pKeyFrames = [];
                this._eInterpolationType = EAnimationInterpolations.MATRIX_LINEAR;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this._sTarget = sTarget;
            }
            Track.prototype.totalFrames = function () {
                return this._pKeyFrames.length;
            };
            Track.prototype.target = function () {
                return this._pTarget;
            };
            Track.prototype.targetName = function () {
                return this._sTarget;
            };
            Track.prototype.targetName = function (sValue) {
                this._sTarget = sValue;
            };
            Track.prototype.duration = function () {
                return ((this._pKeyFrames.last)).time;
            };
            Track.prototype.keyFrame = function (fTime, pMatrix) {
                var pFrame;
                var iFrame;
                var pKeyFrames = this._pKeyFrames;
                var nTotalFrames = pKeyFrames.length;
                if (arguments.length > 1) {
                    pFrame = createFrame(fTime, pMatrix);
                } else {
                    pFrame = arguments[0];
                }
                if (nTotalFrames && (iFrame = this.findKeyFrame(pFrame.time)) >= 0) {
                    pKeyFrames.splice(iFrame, 0, pFrame);
                } else {
                    pKeyFrames.push(pFrame);
                }
                return true;
            };
            Track.prototype.getKeyFrame = function (iFrame) {
 {
                    logger.setSourceLocation("animation/Track.ts", 72);
                    logger.assert(iFrame < this.totalFrames, 'iFrame must be less then number of total jey frames.');
                }
                ;
                return this._pKeyFrames[iFrame];
            };
            Track.prototype.findKeyFrame = function (fTime) {
                var pKeyFrames = this._pKeyFrames;
                var nTotalFrames = pKeyFrames.length;
                if (pKeyFrames[nTotalFrames - 1].time == fTime) {
                    return nTotalFrames - 1;
                } else {
                    for(var i = nTotalFrames - 1; i >= 0; i--) {
                        if (pKeyFrames[i].time > fTime && pKeyFrames[i - 1].time <= fTime) {
                            return i - 1;
                        }
                    }
                }
                return -1;
            };
            Track.prototype.bind = function (pJoint, pSkeleton) {
                var pNode = null, pRootNode;
                var sJoint;
                switch(arguments.length) {
                    case 2:
                        sJoint = pJoint;
                        this._sTarget = sJoint;
                        pNode = (pSkeleton).findJoint(sJoint);
                        break;
                    default:
                        if (!isDef(arguments[0].type)) {
                            if (this._sTarget == null) {
                                return false;
                            }
                            pSkeleton = arguments[0];
                            pNode = (pSkeleton).findJoint(this._sTarget);
                        } else {
                            pRootNode = arguments[0];
                            pNode = pRootNode.findEntity(this.targetName);
                        }
                }
                this._pTarget = pNode;
                return isDefAndNotNull(pNode);
            };
            Track.prototype.frame = function (fTime) {
                var iKey1 = 0, iKey2 = 0;
                var fScalar;
                var fTimeDiff;
                var pKeys = this._pKeyFrames;
                var nKeys = pKeys.length;
                var pFrame = animationFrame();
 {
                    logger.setSourceLocation("animation/Track.ts", 144);
                    logger.assert(nKeys > 0, 'no frames :(');
                }
                ;
                if (nKeys === 1) {
                    pFrame.set(pKeys[0]);
                } else {
                    for(var i = 0; i < nKeys; i++) {
                        if (fTime >= this._pKeyFrames[i].time) {
                            iKey1 = i;
                        }
                    }
                    iKey2 = (iKey1 >= (nKeys - 1)) ? iKey1 : iKey1 + 1;
                    fTimeDiff = pKeys[iKey2].time - pKeys[iKey1].time;
                    if (!fTimeDiff) {
                        fTimeDiff = 1;
                    }
                    fScalar = (fTime - pKeys[iKey1].time) / fTimeDiff;
                    pFrame.interpolate(this._pKeyFrames[iKey1], this._pKeyFrames[iKey2], fScalar);
                }
                pFrame.time = fTime;
                pFrame.weight = 1.0;
                return pFrame;
            };
            Track.prototype.toString = function () {
                var s = "target: " + this.targetName + ", duration: " + this.duration + ", frames: " + this.totalFrames;
                return s;
            };
            return Track;
        })();        
        function createTrack(sTarget) {
            if (typeof sTarget === "undefined") { sTarget = null; }
            return new Track(sTarget);
        }
        animation.createTrack = createTrack;
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    (function (EAnimationTypes) {
        EAnimationTypes._map = [];
        EAnimationTypes._map[0] = "ANIMATION";
        EAnimationTypes.ANIMATION = 0;
        EAnimationTypes._map[1] = "LIST";
        EAnimationTypes.LIST = 1;
        EAnimationTypes._map[2] = "CLIP";
        EAnimationTypes.CLIP = 2;
        EAnimationTypes._map[3] = "CONTAINER";
        EAnimationTypes.CONTAINER = 3;
        EAnimationTypes._map[4] = "BLEND";
        EAnimationTypes.BLEND = 4;
    })(akra.EAnimationTypes || (akra.EAnimationTypes = {}));
    var EAnimationTypes = akra.EAnimationTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (animation) {
        var Base = (function () {
            function Base(eType, sName) {
                if (typeof sName === "undefined") { sName = null; }
                this._pTargetMap = {};
                this._pTargetList = [];
                this._fDuration = 0.0;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = play(fRealTime, number);
                this._sName = sName || ("animation-" + "-" + this.getGuid());
                this._eType = eType;
            }
            Base.prototype.type = function () {
                return this._eType;
            };
            Base.prototype.duration = function () {
                return this._fDuration;
            };
            Base.prototype.duration = function (fValue) {
 {
                    logger.setSourceLocation("Base.ts", 40);
                    logger.log("new duration(", this.name, ") > " + fValue);
                }
                ;
                this._fDuration = fValue;
            };
            Base.prototype.name = function () {
                return this._sName;
            };
            Base.prototype.name = function (sName) {
                this._sName = sName;
            };
            return Base;
        })();
        animation.Base = Base;        
        void {
            this: ,
            played: (fRealTime)
        };
        inline;
        stop(fRealTime, number);
        void {
            this: ,
            stoped: (fRealTime)
        };
        attach(pTarget, ISceneNode);
        void {};
 {
            logger.setSourceLocation("Base.ts", 62);
            logger.error("method AnimationBase::attach() must be overwritten.");
        }
        ;
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
frame(sName, string, fRealTime, number);
IAnimationFrame;
 {
    return null;
}
apply(fRealTime, number);
void {
    var: pTargetList,
    IAnimationTarget: [] = this._pTargetList
};
var pTarget = null;
var pFrame = null;
var pTransform = null;
for(var i = 0; i < pTargetList.length; ++i) {
    pFrame = this.frame(pTargetList[i].name, fRealTime);
    pTarget = pTargetList[i].target;
    if (!pFrame || !pTarget) {
        continue;
    }
    pTransform = pFrame.toMatrix();
    pTarget.localMatrix = pTransform;
}
;
addTarget(sName, string, pTarget, ISceneNode = null);
IAnimationTarget;
 {
    var pPointer = this._pTargetMap[sName];
    if (pPointer) {
        pPointer.target = pTarget || pPointer.target || null;
        return pPointer;
    }
    pPointer = {
        target: pTarget,
        index: this._pTargetList.length,
        name: sName
    };
    this._pTargetList.push(pPointer);
    this._pTargetMap[sName] = pPointer;
    return pPointer;
}
setTarget(sName, string, pTarget, ISceneNode);
IAnimationTarget;
 {
    var pPointer = this._pTargetMap[sName];
    pPointer.target = pTarget;
    return pPointer;
}
getTarget(sTargetName, string);
IAnimationTarget;
 {
    return this._pTargetMap[sTargetName];
}
inline;
getTargetList();
IAnimationTarget[];
 {
    return this._pTargetList;
}
inline;
getTargetByName(sName, string);
IAnimationTarget;
 {
    return this._pTargetMap[sName];
}
targetNames();
string[];
 {
    var pTargets = this._pTargetList;
    var pTargetNames = [];
    for(var i = 0; i < pTargets.length; ++i) {
        pTargetNames.push(pTargets[i].name);
    }
    return pTargetNames;
}
targetList();
ISceneNode[];
 {
    var pTargets = this._pTargetList;
    var pTargetList = [];
    for(var i = 0; i < pTargets.length; ++i) {
        pTargetList.push(pTargets[i].target);
    }
    return pTargetList;
}
jointList();
IJoint[];
 {
    var pTargets = this._pTargetList;
    var pJointList = [];
    for(var i = 0; i < pTargets.length; ++i) {
        if (scene.isJoint(pTargets[i].target)) {
            pJointList.push(pTargets[i].target);
        }
    }
    return pJointList;
}
grab(pAnimationBase, IAnimationBase, bRewrite, bool = true);
void {
    var: pAdoptTargets,
    IAnimationTarget: [] = pAnimationBase.getTargetList()
};
for(var i = 0; i < pAdoptTargets.length; ++i) {
    if (!pAdoptTargets[i].target) {
        continue;
    }
    if (bRewrite || !this.getTarget(pAdoptTargets[i].name)) {
        this.addTarget(pAdoptTargets[i].name, pAdoptTargets[i].target);
    }
}
;
createAnimationMask();
FloatMap;
 {
    var pTargets = this.targetNames();
    var pMask = {};
    for(var i = 0; i < pTargets.length; ++i) {
        pMask[pTargets[i]] = 1.0;
    }
    return pMask;
}
toString();
string;
 {
    var s = "\n";
    s += "name         : " + this.name + "\n";
    s += "duration     : " + this.duration + " sec\n";
    s += "total targets: " + this.targetList().length.toString() + "\n";
    return s;
}
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return Base._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
played(fRealTime);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).played;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, fRealTime) : _broadcast[i].listener(_recivier, fRealTime);
    }
}
;
;
stoped(fRealTime);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).stoped;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, fRealTime) : _broadcast[i].listener(_recivier, fRealTime);
    }
}
;
;
var akra;
(function (akra) {
    (function (animation) {
        var Animation = (function (_super) {
            __extends(Animation, _super);
            function Animation(sName) {
                _super.call(this, EAnimationTypes.ANIMATION, sName);
                this._pTracks = [];
                this.inline = get;
                this.inline = getTracks();
                this.IAnimationTrack = [];
            }
            Animation.prototype.totalTracks = function () {
                return this._pTracks.length;
            };
            Animation.prototype.push = function (pTrack) {
                this._pTracks.push(pTrack);
                this._fDuration = Math.max(this._fDuration, pTrack.duration);
                this.addTarget(pTrack.targetName);
            };
            Animation.prototype.attach = function (pTarget) {
                var pPointer;
                var pTracks = this._pTracks;
                for(var i = 0; i < pTracks.length; ++i) {
                    if (!pTracks[i].bind(pTarget)) {
 {
                            logger.setSourceLocation("animation/Animation.ts", 35);
                            logger.log("cannot bind animation track [", i, "] to joint <", pTracks[i].target, ">");
                        }
                        ;
                    } else {
                        pPointer = this.setTarget(pTracks[i].targetName, pTracks[i].target);
                        pPointer.track = pTracks[i];
                    }
                }
            };
            return Animation;
        })(Base);        
 {
            return this._pTracks;
        }
        inline;
        getTrack(i, number);
        IAnimationTrack;
 {
            return this._pTracks[i];
        }
        frame(sName, string, fTime, number);
        IAnimationFrame;
 {
            var pPointer = this.getTargetByName(sName);
            if (!pPointer || !pPointer.track) {
                return null;
            }
            return pPointer.track.frame(math.clamp(fTime, 0, this._fDuration));
        }
        extend(pAnimation, IAnimation);
        void {
            var: pTracks,
            IAnimationTrack: [] = pAnimation.getTracks()
        };
        for(var i = 0; i < pTracks.length; ++i) {
            if (!this.getTarget(pTracks[i].targetName)) {
                this.push(pTracks[i]);
            }
        }
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
toString();
string;
 {
    var s = _super.prototype.toString.call(this);
    s += "total tracks : " + this.totalTracks + "\n";
    for(var i = 0; i < this.totalTracks; ++i) {
        s += "\t" + i + ". " + this.getTrack(i) + "\n";
    }
    return s;
}
inline;
function isAnimation(pAnimation) {
    return pAnimation.type === EAnimationTypes.ANIMATION;
}
function createAnimation(sName) {
    return new Animation(sName);
}
exports.createAnimation = createAnimation;
var akra;
(function (akra) {
    (function (animation) {
        var Controller = (function () {
            function Controller(iOptions) {
                if (typeof iOptions === "undefined") { iOptions = 0; }
                this._pAnimations = [];
                this._iOptions = 0;
                this._pActiveAnimation = null;
                this.inline = get;
                this.inline = get;
                this.inline = getAnimation(iAnim, number);
                this.IAnimationBase = {
                    return: this._pAnimations[iAnim]
                };
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.inline = getEventTable();
                this.IEventTable = {
                    return: Controller._pEventTable
                };
                this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = _syncTable(pFrom, IEventProvider);
                this.setOptions(iOptions);
            }
            Controller.prototype.totalAnimations = function () {
                return this._pAnimations.length;
            };
            Controller.prototype.active = function () {
                return this._pActiveAnimation;
            };
            Controller.prototype.setOptions = function (iOptions) {
            };
            Controller.prototype.addAnimation = function (pAnimation) {
                if (this.findAnimation(pAnimation.name)) {
 {
                        logger.setSourceLocation("animation/Controller.ts", 34);
                        logger.warning("Animation with name <" + pAnimation.name + "> already exists in this controller");
                    }
                    ;
                    return false;
                }
                this._pAnimations.push(pAnimation);
                this._pActiveAnimation = pAnimation;
                this.animationAdded(pAnimation);
            };
            Controller.prototype.removeAnimation = function (pAnimation) {
                var pAnimation = this.findAnimation(arguments[0]);
                var pAnimations = this._pAnimations;
                for(var i = 0; i < pAnimations.length; ++i) {
                    if (pAnimations[i] === pAnimation) {
                        pAnimations.splice(i, 1);
 {
                            logger.setSourceLocation("animation/Controller.ts", 56);
                            logger.log("animation controller :: remove animation >> ", pAnimation.name);
                        }
                        ;
                        return true;
                    }
                }
                return false;
            };
            Controller.prototype.findAnimation = function (pAnimation) {
                var pAnimations = this._pAnimations;
                var iAnimation;
                var sAnimation;
                if (isString(arguments[0])) {
                    sAnimation = arguments[0];
                    for(var i = 0; i < pAnimations.length; ++i) {
                        if (pAnimations[i].name === sAnimation) {
                            return pAnimations[i];
                        }
                    }
                    return null;
                }
                if (typeof arguments[0] === 'number') {
                    iAnimation = arguments[0];
                    return pAnimations[iAnimation] || null;
                }
                return arguments[0];
            };
            Controller.prototype.setAnimation = function (iAnimation, pAnimation) {
 {
                    logger.setSourceLocation("animation/Controller.ts", 97);
                    logger.assert(iAnimation < this._pAnimations.length, 'invalid animation slot');
                }
                ;
                this._pAnimations[iAnimation] = pAnimation;
            };
            Controller.prototype.attach = function (pTarget) {
                var pAnimations = this._pAnimations;
                for(var i = 0; i < pAnimations.length; ++i) {
                    pAnimations[i].attach(pTarget);
                }
            };
            Controller.prototype.play = function (pAnimation, fRealTime) {
                var pAnimationNext = this.findAnimation(arguments[0]);
                var pAnimationPrev = this._pActiveAnimation;
                if (pAnimationNext && pAnimationNext !== pAnimationPrev) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).play;
                    var _recivier = this;
                    if (isDef(_broadcast)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pAnimationNext, fRealTime) : _broadcast[i].listener(_recivier, pAnimationNext, fRealTime);
                        }
                    }
                    ;
                    if (pAnimationPrev) {
                        pAnimationPrev.stop(fRealTime);
                    }
                    pAnimationNext.play(fRealTime);
                    this._pActiveAnimation = pAnimationNext;
                    return true;
                }
                return false;
            };
            Controller.prototype.update = function (fTime) {
                if (this._pActiveAnimation) {
                    this._pActiveAnimation.apply(fTime);
                }
            };
            Controller.prototype.toString = function (bFullInfo) {
                if (typeof bFullInfo === "undefined") { bFullInfo = false; }
                var s = "\n";
                s += "ANIMATION CONTROLLER (total: " + this.totalAnimations + " animations)\n";
                s += "-----------------------------------------------------\n";
                for(var i = 0; i < this.totalAnimations; ++i) {
                    s += this.getAnimation(i).toString();
                }
                return s;
            };
            Controller._pEventTable = new events.EventTable();
            return Controller;
        })();
        animation.Controller = Controller;        
        void {
            this: ,
            getEventTable: ._sync(this, pFrom)
        };
        animationAdded(pAnimation);
        void {
            this: ,
            _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
        };
        var _broadcast = (this._pBroadcastSlotList).animationAdded;
        var _recivier = this;
        if (isDef(_broadcast)) {
            for(var i = 0; i < _broadcast.length; ++i) {
                _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pAnimation) : _broadcast[i].listener(_recivier, pAnimation);
            }
        }
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
;
;
function createController(iOptions) {
    return new Controller(iOptions);
}
exports.createController = createController;
var akra;
(function (akra) {
    (function (animation) {
        var Blend = (function (_super) {
            __extends(Blend, _super);
            function Blend(sName) {
                _super.call(this, EAnimationTypes.BLEND, sName);
                this.duration = 0;
                this._pAnimationList = [];
                this.inline = get;
            }
            Blend.prototype.totalAnimations = function () {
                return this._pAnimationList.length;
            };
            Blend.prototype.play = function (fRealTime) {
                var pAnimationList = this._pAnimationList;
                var n = pAnimationList.length;
                for(var i = 0; i < n; ++i) {
                    pAnimationList[i].realTime = fRealTime;
                    pAnimationList[i].time = fRealTime * pAnimationList[i].acceleration;
                }
                this.played(fRealTime);
            };
            Blend.prototype.stop = function () {
                this.stoped(0.);
            };
            Blend.prototype.attach = function (pTarget) {
                var pAnimationList = this._pAnimationList;
                for(var i = 0; i < pAnimationList.length; ++i) {
                    var pAnim = pAnimationList[i].animation;
                    pAnim.attach(pTarget);
                    this.grab(pAnim, true);
                }
            };
            Blend.prototype.addAnimation = function (pAnimation, fWeight, pMask) {
 {
                    logger.setSourceLocation("animation/Blend.ts", 50);
                    logger.assert(isDef(pAnimation), 'animation must be setted.');
                }
                ;
                this._pAnimationList.push(null);
                return this.setAnimation(this._pAnimationList.length - 1, pAnimation, fWeight, pMask);
            };
            Blend.prototype.setAnimation = function (iAnimation, pAnimation, fWeight, pMask) {
                if (typeof fWeight === "undefined") { fWeight = 1.0; }
                if (typeof pMask === "undefined") { pMask = null; }
 {
                    logger.setSourceLocation("animation/Blend.ts", 58);
                    logger.assert(iAnimation <= this._pAnimationList.length, 'invalid animation slot: ' + iAnimation + '/' + this._pAnimationList.length);
                }
                ;
                var pPointer = this._pAnimationList[iAnimation];
                var pAnimationList = this._pAnimationList;
                if (!pAnimation) {
                    pAnimationList[iAnimation] = null;
                    return iAnimation;
                }
                if (!pPointer) {
                    pPointer = {
                        animation: pAnimation,
                        weight: fWeight,
                        mask: pMask,
                        acceleration: 1.0,
                        time: 0.0,
                        realTime: 0.0
                    };
                    this.connect(pAnimation, "durationUpdated", "_onDurationUpdate");
                    if (iAnimation == this._pAnimationList.length) {
                        pAnimationList.push(pPointer);
                    } else {
                        pAnimationList[iAnimation] = pPointer;
                    }
                }
                this.grab(pAnimation);
                this.updateDuration();
                return iAnimation;
            };
            Blend.prototype._onDurationUpdate = function (pAnimation, fDuration) {
                this.updateDuration();
            };
            Blend.prototype.updateDuration = function () {
                var fWeight = 0;
                var fSumm = 0;
                var pAnimationList = this._pAnimationList;
                var n = pAnimationList.length;
                for(var i = 0; i < n; ++i) {
                    if (pAnimationList[i] === null) {
                        continue;
                    }
                    fSumm += pAnimationList[i].weight * pAnimationList[i].animation.duration;
                    fWeight += pAnimationList[i].weight;
                }
                if (fWeight === 0) {
                    this.duration = 0;
                } else {
                    this.duration = fSumm / fWeight;
                    for(var i = 0; i < n; ++i) {
                        if (pAnimationList[i] === null) {
                            continue;
                        }
                        pAnimationList[i].acceleration = pAnimationList[i].animation.duration / this.duration;
                    }
                }
                this.durationUpdated(this.duration);
            };
            Blend.prototype.getAnimationIndex = function (sName) {
                var pAnimationList = this._pAnimationList;
                for(var i = 0; i < pAnimationList.length; i++) {
                    if (pAnimationList[i].animation.name === sName) {
                        return i;
                    }
                }
                ;
                return -1;
            };
            Blend.prototype.getAnimation = function (animation) {
                var iAnimation = isString(animation) ? this.getAnimationIndex(animation) : animation;
                return this._pAnimationList[iAnimation].animation;
            };
            Blend.prototype.getAnimationWeight = function (animation) {
                var iAnimation = animation;
                if (isString(animation)) {
                    iAnimation = this.getAnimationIndex(animation);
                }
                return this._pAnimationList[iAnimation].weight;
            };
            Blend.prototype.setWeights = function () {
                var pWeight = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    pWeight[_i] = arguments[_i + 0];
                }
                var fWeight;
                var isModified = false;
                var pAnimationList = this._pAnimationList;
                for(var i = 0; i < arguments.length; ++i) {
                    fWeight = arguments[i];
                    if (fWeight < 0 || fWeight === null || !pAnimationList[i]) {
                        continue;
                    }
                    if (pAnimationList[i].weight !== fWeight) {
                        pAnimationList[i].weight = fWeight;
                        isModified = true;
                    }
                }
                if (isModified) {
                    this.updateDuration();
                }
                return true;
            };
            Blend.prototype.setWeightSwitching = function (fWeight, iAnimationFrom, iAnimationTo) {
                var pAnimationList = this._pAnimationList;
                var isModified = false;
                var fWeightInv = 1. - fWeight;
                if (!pAnimationList[iAnimationFrom] || !pAnimationList[iAnimationTo]) {
                    return false;
                }
                if (pAnimationList[iAnimationFrom].weight !== fWeightInv) {
                    pAnimationList[iAnimationFrom].weight = fWeightInv;
                    isModified = true;
                }
                if (pAnimationList[iAnimationTo].weight !== fWeight) {
                    pAnimationList[iAnimationTo].weight = fWeight;
                    isModified = true;
                }
                if (isModified) {
                    this.updateDuration();
                }
                return true;
            };
            Blend.prototype.setAnimationWeight = function (animation, fWeight) {
                var pAnimationList = this._pAnimationList;
                var isModified = false;
                if (arguments.length === 1) {
                    fWeight = arguments[0];
                    for(var i = 0; i < pAnimationList.length; i++) {
                        pAnimationList[i].weight = fWeight;
                    }
                    ;
                    isModified = true;
                } else {
                    var iAnimation = isString(animation) ? this.getAnimationIndex(animation) : animation;
                    if (pAnimationList[iAnimation].weight !== fWeight) {
                        pAnimationList[iAnimation].weight = fWeight;
                        isModified = true;
                    }
                }
                if (isModified) {
                    this.updateDuration();
                }
                return true;
            };
            Blend.prototype.setAnimationMask = function (animation, pMask) {
                var iAnimation = isString(animation) ? this.getAnimationIndex(animation) : animation;
                this._pAnimationList[iAnimation].mask = pMask;
                return true;
            };
            Blend.prototype.getAnimationMask = function (animation) {
                var iAnimation = isString(animation) ? this.getAnimationIndex(animation) : animation;
                return this._pAnimationList[iAnimation].mask;
            };
            Blend.prototype.getAnimationAcceleration = function (animation) {
                var iAnimation = isString(animation) ? this.getAnimationIndex(animation) : animation;
                return this._pAnimationList[iAnimation].acceleration;
            };
            Blend.prototype.createAnimationMask = function (iAnimation) {
                if (arguments.length === 0) {
                    return _super.prototype.createAnimationMask.call(this);
                }
                if (typeof arguments[0] === 'string') {
                    iAnimation = this.getAnimationIndex(arguments[0]);
                }
                var pAnimation = this._pAnimationList[iAnimation].animation;
                return pAnimation.createAnimationMask();
            };
            Blend.prototype.frame = function (sName, fRealTime) {
                var pAnimationList = this._pAnimationList;
                var pResultFrame = animationFrame().reset();
                var pFrame;
                var pMask;
                var pPointer;
                var fAcceleration;
                var fBoneWeight;
                var fWeight;
                var iAnim = 0;
                for(var i = 0; i < pAnimationList.length; i++) {
                    pPointer = pAnimationList[i];
                    if (!pPointer) {
                        continue;
                    }
                    fAcceleration = pPointer.acceleration;
                    pMask = pPointer.mask;
                    fBoneWeight = 1.0;
                    pPointer.time = pPointer.time + (fRealTime - pPointer.realTime) * fAcceleration;
                    pPointer.realTime = fRealTime;
                    if (pMask) {
                        fBoneWeight = isDef(pMask[sName]) ? pMask[sName] : 1.0;
                    }
                    fWeight = fBoneWeight * pPointer.weight;
                    if (fWeight > 0.0) {
                        pFrame = pPointer.animation.frame(sName, pPointer.time);
                        if (pFrame) {
                            iAnim++;
                            pResultFrame.add(pFrame.mult(fWeight), iAnim === 1);
                        }
                    }
                }
                if (pResultFrame.weight === 0.0) {
                    return null;
                }
                return pResultFrame.normilize();
            };
            Blend.prototype.durationUpdated = function (fDuration) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).durationUpdated;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, fDuration) : _broadcast[i].listener(_recivier, fDuration);
                    }
                }
            };
            return Blend;
        })(Base);        
        inline;
        function isBlend(pAnimation) {
            return pAnimation.type === EAnimationTypes.BLEND;
        }
        function createBlend(sName) {
            return new Blend(sName);
        }
        animation.createBlend = createBlend;
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                                                                                                                                                                                                                                                                                var pSupportedVertexFormat;
                var pSupportedTextureFormat;
                var pSupportedColorFormat;
                var pSupportedWeightFormat;
                var pSupportedJointFormat;
                var pSupportedInvBindMatrixFormat;
                var pSupportedInterpolationFormat;
                var pSupportedInputFormat;
                var pSupportedOutputFormat;
                var pSupportedTangentFormat;
                var pFormatStrideTable;
                var pConvFormats;
                var Collada = (function (_super) {
                    __extends(Collada, _super);
                    function Collada() {
                        _super.call(this);
                        this._pModel = null;
                        this._pOptions = null;
                        this._pLinks = {};
                        this._pLib = {};
                        this._pCache = {
                            meshMap: {},
                            sharedBuffer: null
                        };
                        this._pAsset = null;
                        this._pVisualScene = null;
                        this._pAnimations = [];
                        this._sFilename = null;
                        this._pXMLRoot = null;
                        this.inline = polygonToTriangles(pXML, Element, iStride, number);
                        this.number = [];
                    }
                    Collada.DEFAULT_OPTIONS = {
                        drawJoints: false,
                        wireframe: false,
                        sharedBuffer: false,
                        animation: {
                            pose: true
                        },
                        scene: true,
                        extractPoses: true,
                        skeletons: null,
                        images: {
                            flipY: false
                        }
                    };
                    Collada.SCENE_TEMPLATE = [
                        {
                            lib: 'library_images',
                            element: 'image',
                            loader: "COLLADAImage"
                        }, 
                        {
                            lib: 'library_effects',
                            element: 'effect',
                            loader: "COLLADAEffect"
                        }, 
                        {
                            lib: 'library_materials',
                            element: 'material',
                            loader: "COLLADAMaterial"
                        }, 
                        {
                            lib: 'library_geometries',
                            element: 'geometry',
                            loader: "COLLADAGeometrie"
                        }, 
                        {
                            lib: 'library_controllers',
                            element: 'controller',
                            loader: "COLLADAController"
                        }, 
                        {
                            lib: 'library_visual_scenes',
                            element: 'visual_scene',
                            loader: "COLLADAVisualScene"
                        }
                    ];
                    Collada.ANIMATION_TEMPLATE = [
                        {
                            lib: 'library_animations',
                            element: 'animation',
                            loader: "COLLADAAnimation"
                        }
                    ];
                    Collada.COLLADA_MATERIAL_NAMES = [
                        "emission", 
                        "ambient", 
                        "diffuse", 
                        "shininess", 
                        "reflective", 
                        "reflectivity", 
                        "transparent", 
                        "transparency", 
                        "specular"
                    ];
                    Collada.prototype.trifanToTriangles = function (pXML, iStride) {
                        var pFans2Tri = [
                            0, 
                            0, 
                            0
                        ];
                        var pData = [];
                        var tmp = new Array(iStride), n;
                        var pIndexes = [];
                        this.eachByTag(pXML, "p", function (pXMLData) {
                            n = string2IntArray(stringData(pXMLData), pData);
                            for(var i = 0; i < 3; i++) {
                                retrieve(pData, tmp, iStride, i, 1);
                                for(var j = 0; j < iStride; ++j) {
                                    pIndexes.push(tmp[j]);
                                }
                            }
                            for(var i = 3, m = n / iStride; i < m; i++) {
                                pFans2Tri[1] = i - 1;
                                pFans2Tri[2] = i;
                                for(var j = 0; j < pFans2Tri.length; ++j) {
                                    for(var k = 0; k < iStride; ++k) {
                                        pIndexes.push(pData[pFans2Tri[j] * iStride + k]);
                                    }
                                }
                            }
                        });
                        return pIndexes;
                    };
                    return Collada;
                })(ResourcePoolItem);
                resources.Collada = Collada;                
 {
                    return this.trifanToTriangles(pXML, iStride);
                }
                tristripToTriangles(pXML, Element, iStride, number);
                number[];
 {
                    var pStrip2Tri = [
                        0, 
                        0, 
                        0
                    ];
                    var pData = [];
                    var tmp = new Array(iStride), n;
                    var pIndexes = [];
                    this.eachByTag(pXML, "p", function (pXMLData) {
                        n = string2IntArray(stringData(pXMLData), pData);
                        for(var i = 0; i < 3; i++) {
                            retrieve(pData, tmp, iStride, i, 1);
                            for(var j = 0; j < iStride; ++j) {
                                pIndexes.push(tmp[j]);
                            }
                        }
                        for(var i = 3, m = n / iStride; i < m; i++) {
                            pStrip2Tri[0] = i - 1;
                            pStrip2Tri[1] = i - 2;
                            pStrip2Tri[2] = i;
                            for(var j = 0; j < pStrip2Tri.length; ++j) {
                                for(var k = 0; k < iStride; ++k) {
                                    pIndexes.push(pData[pStrip2Tri[j] * iStride + k]);
                                }
                            }
                        }
                    });
                    return pIndexes;
                }
                polylistToTriangles(pXML, Element, iStride, number);
                number[];
 {
                    var pXMLvcount = firstChild(pXML, "vcount");
                    var pXMLp = firstChild(pXML, "p");
                    var pVcount = new Array(parseInt(attr(pXML, "count")));
                    var pData, pIndexes;
                    var n, h = 0;
                    var tmp = new Array(128);
                    var buf = new Array(256);
                    var pPoly2Tri = [
                        0, 
                        0, 
                        0
                    ];
                    string2IntArray(stringData(pXMLvcount), pVcount);
                    var nElements = 0, nTotalElement = 0;
                    for(var i = 0; i < pVcount.length; i++) {
                        nElements += pVcount[i];
                        nTotalElement += (pVcount[i] - 2) * 3;
                    }
                    pIndexes = new Array(iStride * nTotalElement);
                    pData = new Array(iStride * nElements);
                    string2IntArray(stringData(pXMLp), pData);
                    for(var i = 0, m = 0; i < pVcount.length; i++) {
                        n = retrieve(pData, tmp, iStride, m, pVcount[i]);
                        for(var j = 0; j < 3; j++) {
                            retrieve(tmp, buf, iStride, j, 1);
                            for(var k = 0; k < iStride; ++k) {
                                pIndexes[h++] = buf[k];
                            }
                        }
                        for(var x = 3, t = n / iStride; x < t; x++) {
                            pPoly2Tri[1] = x - 1;
                            pPoly2Tri[2] = x;
                            for(var j = 0; j < pPoly2Tri.length; ++j) {
                                for(var k = 0; k < iStride; ++k) {
                                    pIndexes[h++] = pData[(m + pPoly2Tri[j]) * iStride + k];
                                }
                            }
                        }
                        m += pVcount[i];
                    }
                    return pIndexes;
                }
                eachNode(pXMLList, NodeList, fnCallback, IXMLExplorer, nMax ?  : number);
                void {
                    var: n,
                    number:  = pXMLList.length,
                    i: number,
                    nMax:  = (isNumber(nMax) ? (nMax < n ? nMax : n) : n),
                    n:  = 0,
                    i:  = 0
                };
                while(n < pXMLList.length) {
                    if (pXMLList[n++].nodeType === Node.TEXT_NODE) {
                        continue;
                    }
                    var pXMLData = pXMLList[n - 1];
                    fnCallback.call(this, pXMLData, pXMLData.nodeName);
                    i++;
                    if (nMax === i) {
                        break;
                    }
                }
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
eachChild(pXML, Element, fnCallback, IXMLExplorer);
void {
    this: ,
    eachNode: (pXML.childNodes, 
fnCallback)
};
inline;
eachByTag(pXML, Element, sTag, string, fnCallback, IXMLExplorer, nMax ?  : number);
void {
    this: ,
    eachNode: (pXML.getElementsByTagName(sTag), 
fnCallback, 
nMax)
};
findNode(pNodes, IColladaNode[], sNode, string = null, fnNodeCallback, function (pNode) {
    return void  = null;
});
IColladaNode;
 {
    var pNode = null;
    var pRootJoint = null;
    for(var i = pNodes.length - 1; i >= 0; i--) {
        pNode = pNodes[i];
        if (pNode === null) {
            continue;
        }
        if (sNode && "#" + pNode.id === sNode) {
            return pNode;
        }
        if (!isNull(fnNodeCallback)) {
            fnNodeCallback.call(this, pNode);
        }
        if (pNode.childNodes) {
            pRootJoint = this.findNode(pNode.childNodes, sNode, fnNodeCallback);
            if (!isNull(pRootJoint)) {
                return pRootJoint;
            }
        }
    }
    return null;
}
COLLADATranslateMatrix(pXML, Element);
IMat4;
 {
    var pData = new Array(3);
    string2FloatArray(stringData(pXML), pData);
    return (vec3(pData)).toTranslationMatrix();
}
COLLADARotateMatrix(pXML, Element);
IMat4;
 {
    var pData = new Array(4);
    string2FloatArray(stringData(pXML), pData);
    return (new Mat4(1)).rotateLeft(pData[3] * Math.PI / 180.0, vec3(pData[0], pData[1], pData[2]));
}
COLLADAScaleMatrix(pXML, Element);
IMat4;
 {
    var pData = new Array(3);
    string2FloatArray(stringData(pXML), pData);
    return new Mat4(pData[0], pData[1], pData[2], 1.0);
}
COLLADAData(pXML, Element);
any;
 {
    var sName = pXML.nodeName;
    var sData = stringData(pXML);
    switch(sName) {
        case "bool":
            return string2Any(sData, 1, "bool");
        case "int":
            return string2Any(sData, 1, "int");
        case "float":
            return string2Any(sData, 1, "float");
        case "float2":
            return string2Any(sData, 2, "float");
        case "float3":
            return string2Any(sData, 3, "float");
        case "float4":
        case "color":
            return string2Any(sData, 4, "float");
        case "rotate":
            return this.COLLADARotateMatrix(pXML);
        case "translate":
            return this.COLLADATranslateMatrix(pXML);
        case "scale":
            return this.COLLADAScaleMatrix(pXML);
        case "bind_shape_matrix":
        case "matrix":
            return (new Mat4(string2Any(sData, 16, "float"), true)).transpose();
        case "float_array":
            return string2Any(sData, parseInt(attr(pXML, "count")), "float", true);
        case "int_array":
            return string2Any(sData, parseInt(attr(pXML, "count")), "int", true);
        case "bool_array":
            return string2Any(sData, parseInt(attr(pXML, "count")), "bool", true);
        case "Name_array":
        case "name_array":
        case "IDREF_array":
            return string2Any(sData, parseInt(attr(pXML, "count")), "string", true);
        case "sampler2D":
            return this.COLLADASampler2D(pXML);
        case "surface":
            return this.COLLADASurface(pXML);
        default:
 {
                logger.setSourceLocation("resources/Collada.ts", 597);
                logger.error("unsupported COLLADA data type <" + sName + " />");
            }
            ;
    }
}
COLLADAGetSourceData(pSource, IColladaSource, pFormat, IColladaUnknownFormat[]);
IColladaArray;
 {
 {
        logger.setSourceLocation("resources/Collada.ts", 605);
        logger.assert(isDefAndNotNull(pSource), "<source /> with expected format ", pFormat, " not founded");
    }
    ;
    var nStride = calcFormatStride(pFormat);
    var pTech = pSource.techniqueCommon;
 {
        logger.setSourceLocation("resources/Collada.ts", 610);
        logger.assert(isDefAndNotNull(pTech), "<source /> with id <" + pSource.id + "> has no <technique_common />");
    }
    ;
    var pAccess = pTech.accessor;
    var isFormatSupported;
    if (!(pAccess.stride <= nStride)) {
 {
            logger.setSourceLocation("resources/Collada.ts", 617);
            logger.log(pAccess.stride, "/", nStride);
        }
        ;
    }
 {
        logger.setSourceLocation("resources/Collada.ts", 622);
        logger.assert(pAccess.stride <= nStride, "<source /> width id" + pSource.id + " has unsupported stride: " + pAccess.stride);
    }
    ;
    var fnUnsupportedFormatError = function () {
 {
            logger.setSourceLocation("resources/Collada.ts", 625);
            logger.log("expected format: ", pFormat);
        }
        ;
 {
            logger.setSourceLocation("resources/Collada.ts", 626);
            logger.log("given format: ", pAccess.params);
        }
        ;
 {
            logger.setSourceLocation("resources/Collada.ts", 627);
            logger.error("accessor of <" + pSource.id + "> has unsupported format");
        }
        ;
    };
    for(var i = 0; i < pAccess.params.length; ++i) {
        isFormatSupported = false;
        for(var f = 0; f < pFormat[i].name.length; ++f) {
            if ((pAccess.params[i].name || "").toLowerCase() == (pFormat[i].name[f] || "").toLowerCase()) {
                isFormatSupported = true;
            }
        }
        if (!isFormatSupported) {
            fnUnsupportedFormatError();
        }
        isFormatSupported = false;
        for(var f = 0; f < pFormat[i].type.length; ++f) {
            if (pAccess.params[i].type.toLowerCase() == pFormat[i].type[f].toLowerCase()) {
                isFormatSupported = true;
            }
        }
        if (!isFormatSupported) {
            fnUnsupportedFormatError();
        }
    }
    return pAccess.data;
}
COLLADATransform(pXML, Element, id ?  : string);
IColladaTransform;
 {
    var pTransform = {
        sid: attr(pXML, "sid"),
        transform: String(pXML.nodeName),
        value: null
    };
    if (isString(id) && isDefAndNotNull(pTransform.sid)) {
        this.link(id + "/" + pTransform.sid, pTransform);
    } else {
        this.link(id + "/" + pTransform.transform, pTransform);
    }
    var v4f, m4f;
    var pData;
    switch(pTransform.transform) {
        case "rotate":
            pData = new Array(4);
            string2FloatArray(stringData(pXML), pData);
            v4f = new Vec4(pData);
            v4f.w *= Math.PI / 180.0;
            pTransform.value = v4f;
            break;
        case "translate":
        case "scale":
            pData = new Array(3);
            string2FloatArray(stringData(pXML), pData);
            pTransform.value = new Vec3(pData);
            break;
        case "matrix":
            m4f = new Mat4();
            string2FloatArray(stringData(pXML), m4f.data);
            m4f.transpose();
            pTransform.value = m4f;
            break;
        default:
 {
                logger.setSourceLocation("resources/Collada.ts", 714);
                logger.error("unsupported transform detected: " + pTransform.transform);
            }
            ;
    }
    return pTransform;
}
COLLADANewParam(pXML, Element);
IColladaNewParam;
 {
    var pParam = {
        sid: attr(pXML, "sid"),
        annotate: null,
        semantics: null,
        modifier: null,
        value: null,
        type: null
    };
    this.eachChild(pXML, function (pXMLData, sName) {
        switch(sName) {
            case "semantic":
                pParam.semantics = stringData(pXMLData);
                break;
            case "modifier":
                pParam.modifier = stringData(pXMLData);
            case "annotate":
                pParam.annotate = {
                    name: attr(pXMLData, "name"),
                    value: stringData(pXMLData)
                };
            case "float":
            case "float2":
            case "float3":
            case "float4":
            case "surface":
            case "sampler2D":
                pParam.type = sName;
                pParam.value = _this.COLLADAData(pXMLData);
                break;
            default:
                pParam.value = _this.COLLADAData(pXMLData);
        }
    });
    this.link(pParam.sid, pParam);
    return pParam;
}
COLLADAAsset(pXML, Element);
IColladaAsset;
 {
    var pAsset = {
        unit: {
            meter: 1.0,
            name: "meter"
        },
        upAxis: "Y_UP",
        title: null,
        created: null,
        modified: null,
        contributor: {
            author: null,
            authoringTool: null,
            comments: null,
            copyright: null,
            sourceData: null
        }
    };
    this.eachChild(pXML, function (pXMLNode, sName) {
        var sValue = stringData(pXMLNode);
        switch(sName) {
            case "up_axis":
                pAsset.upAxis = sValue;
                break;
            case "created":
                pAsset.created = sValue;
                break;
            case "modified":
                pAsset.modified = sValue;
                break;
            case "title":
                pAsset.title = sValue;
                break;
            case "contributor":
                break;
            case "unit":
                pAsset.unit.meter = parseFloat(attr(pXMLNode, "meter"));
                pAsset.unit.name = attr(pXMLNode, "name");
                break;
        }
    });
    return this._pAsset = pAsset;
}
COLLADALibrary(pXML, Element, pTemplate, IColladaLibraryTemplate);
IColladaLibrary;
 {
    if (!isDefAndNotNull(pXML)) {
        return null;
    }
    var pLib = {};
    var pData;
    var sTag = pTemplate.element;
    var iAutoId = 0;
    pLib[sTag] = {};
    this.eachChild(pXML, function (pXMLData, sName) {
        if (sTag !== sName) {
            return;
        }
        pData = (((_this)[pTemplate.loader]))(pXMLData);
        if (isNull(pData)) {
            return;
        }
        pLib[sTag][attr(pXMLData, 'id') || (sTag + "_" + (iAutoId++))] = pData;
    });
    return pLib;
}
COLLADAAccessor(pXML, Element);
IColladaAccessor;
 {
    var pAccessor = {
        data: this.source(attr(pXML, "source")),
        count: parseInt(attr(pXML, "count")),
        stride: parseInt(attr(pXML, "stride") || 1),
        params: []
    };
    this.eachChild(pXML, function (pXMLData, sName) {
        pAccessor.params.push({
            name: attr(pXMLData, "name"),
            type: attr(pXMLData, "type")
        });
    });
    return pAccessor;
}
COLLADAInput(pXML, Element, iOffset, number = 0);
IColladaInput;
 {
    var pInput = {
        semantics: attr(pXML, "semantic"),
        source: this.source(attr(pXML, "source")),
        offset: -1,
        set: attr(pXML, "set")
    };
    if (!isNull(attr(pXML, "offset"))) {
        pInput.offset = parseInt(attr(pXML, "offset"));
    }
    if (isInt(iOffset) && pInput.offset === -1) {
        pInput.offset = iOffset;
    }
 {
        logger.setSourceLocation("resources/Collada.ts", 891);
        logger.assert(isInt(pInput.offset) && pInput.offset >= 0, "invalid offset detected");
    }
    ;
    return pInput;
}
COLLADATechniqueCommon(pXML, Element);
IColladaTechniqueCommon;
 {
    var pTechniqueCommon = {
        accessor: null
    };
    this.eachChild(pXML, function (pXMLData, sName) {
        switch(sName) {
            case "accessor":
                pTechniqueCommon.accessor = _this.COLLADAAccessor(pXMLData);
                break;
        }
    });
    return pTechniqueCommon;
}
COLLADASource(pXML, Element);
IColladaSource;
 {
    var pSource = {
        id: attr(pXML, "id"),
        name: attr(pXML, "name"),
        array: {},
        techniqueCommon: null
    };
    this.link(pSource);
    this.eachChild(pXML, function (pXMLData, sName) {
        var pColladaArray;
        var id;
        switch(sName.toLowerCase()) {
            case "int_array":
            case "bool_array":
            case "float_array":
            case "idref_array":
            case "name_array":
                pColladaArray = _this.COLLADAData(pXMLData);
                id = attr(pXMLData, "id");
                pSource.array[id] = pColladaArray;
                _this.link(id, pColladaArray);
                break;
            case "technique_common":
                pSource.techniqueCommon = _this.COLLADATechniqueCommon(pXMLData);
                break;
        }
    });
    return pSource;
}
COLLADAVertices(pXML, Element);
IColladaVertices;
 {
    var pVertices = {
        id: attr(pXML, "id"),
        inputs: {}
    };
    this.eachByTag(pXML, "input", function (pXMLData) {
        var sSemantic = attr(pXMLData, "semantic");
        pVertices.inputs[sSemantic] = this.COLLADAInput(pXMLData);
    });
 {
        logger.setSourceLocation("resources/Collada.ts", 963);
        logger.assert(isDefAndNotNull(pVertices.inputs["POSITION"]), "semantics POSITION must be in the <vertices /> tag");
    }
    ;
    this.link(pVertices);
    return pVertices;
}
COLLADAJoints(pXML, Element);
IColladaJoints;
 {
    var pJoints = {
        inputs: {}
    };
    var pMatrixArray;
    var iCount;
    var pInvMatrixArray;
    this.eachByTag(pXML, "input", function (pXMLData) {
        switch(attr(pXMLData, "semantic")) {
            case "JOINT":
                pJoints.inputs["JOINT"] = _this.COLLADAInput(pXMLData);
                break;
            case "INV_BIND_MATRIX":
                pJoints.inputs["INV_BIND_MATRIX"] = _this.COLLADAInput(pXMLData);
                break;
            default:
 {
                    logger.setSourceLocation("resources/Collada.ts", 990);
                    logger.error("semantics are different from JOINT/INV_BIND_MATRIX is not supported in the <joints /> tag");
                }
                ;
        }
    });
    for(var sInput in pJoints.inputs) {
        this.prepareInput(pJoints.inputs[sInput]);
        if (sInput === "INV_BIND_MATRIX") {
            pInvMatrixArray = new Float32Array(pJoints.inputs[sInput].array);
            iCount = pInvMatrixArray.length / 16;
            pMatrixArray = new Array(iCount);
            for(var j = 0, n = 0; j < pInvMatrixArray.length; j += 16) {
                pMatrixArray[n++] = (new Mat4(new Float32Array(pInvMatrixArray.buffer, j * Float32Array.BYTES_PER_ELEMENT, 16), true)).transpose();
            }
            pJoints.inputs[sInput].array = pMatrixArray;
        }
    }
    return pJoints;
}
COLLADAPolygons(pXML, Element, sType, string);
IColladaPolygons;
 {
    var pPolygons = {
        inputs: [],
        p: null,
        material: attr(pXML, "material"),
        name: null,
        count: parseInt(attr(pXML, "count"))
    };
    var iOffset = 0, n = 0;
    var iCount = parseInt(attr(pXML, "count"));
    var iStride = 0;
    this.eachByTag(pXML, "input", function (pXMLData) {
        pPolygons.inputs.push(_this.COLLADAInput(pXMLData, iOffset));
        iOffset++;
    });
    sortArrayByProperty(pPolygons.inputs, "iOffset");
    for(var i = 0; i < pPolygons.inputs.length; ++i) {
        iStride = math.max((pPolygons.inputs[i]).offset + 1, iStride);
    }
 {
        logger.setSourceLocation("resources/Collada.ts", 1042);
        logger.assert(iStride > 0, "Invalid offset detected.");
    }
    ;
    switch(sType) {
        case "polylist":
            pPolygons.p = this.polylistToTriangles(pXML, iStride);
            break;
        case "polygons":
            pPolygons.p = this.polygonToTriangles(pXML, iStride);
            this.eachByTag(pXML, "ph", function (pXMLData) {
 {
                    logger.setSourceLocation("resources/Collada.ts", 1053);
                    logger.error("unsupported polygon[polygon] subtype founded: <ph>");
                }
                ;
            });
            break;
        case "triangles":
            pPolygons.p = new Array(3 * iCount * iStride);
            this.eachByTag(pXML, "p", function (pXMLData) {
                n += string2IntArray(stringData(pXMLData), pPolygons.p, n);
            });
            break;
        case "trifans":
            pPolygons.p = this.trifanToTriangles(pXML, iStride);
            break;
        case "tristrips":
            pPolygons.p = this.tristripToTriangles(pXML, iStride);
            break;
        default:
 {
                logger.setSourceLocation("resources/Collada.ts", 1075);
                logger.error("unsupported polygon[" + sType + "] type founded");
            }
            ;
    }
    if (!isDef(pPolygons.type)) {
        pPolygons.type = EPrimitiveTypes.TRIANGLELIST;
    }
    return pPolygons;
}
COLLADAVertexWeights(pXML, Element);
IColladaVertexWeights;
 {
    var pVertexWeights = {
        count: parseInt(attr(pXML, "count")),
        inputs: [],
        weightInput: null,
        vcount: null,
        v: null
    };
    var iOffset = 0;
    var pInput;
    this.eachByTag(pXML, "input", function (pXMLData) {
        pInput = _this.COLLADAInput(pXMLData, iOffset);
        if (pInput.semantics === "WEIGHT") {
            pVertexWeights.weightInput = pInput;
        }
        pVertexWeights.inputs.push(pInput);
        iOffset++;
    });
    var pVcountData, pVData;
    pVcountData = new Array(pVertexWeights.count);
    string2IntArray(stringData(firstChild(pXML, "vcount")), pVcountData);
    pVertexWeights.vcount = pVcountData;
    var n = 0;
    for(var i = 0; i < pVcountData.length; ++i) {
        n += pVcountData[i];
    }
    n *= pVertexWeights.inputs.length;
 {
        logger.setSourceLocation("resources/Collada.ts", 1125);
        logger.assert(pVertexWeights.inputs.length === 2, "more than 2 inputs in <vertex_weights/> not supported currently");
    }
    ;
    pVData = new Array(n);
    string2IntArray(stringData(firstChild(pXML, "v")), pVData);
    pVertexWeights.v = pVData;
    return pVertexWeights;
}
COLLADAMesh(pXML, Element);
IColladaMesh;
 {
    var pMesh = {
        sources: [],
        polygons: []
    };
    var id;
    var pPolygons, pVertices, pPos;
    this.eachChild(pXML, function (pXMLData, sName) {
        switch(sName) {
            case "source":
                pMesh.sources.push(_this.COLLADASource(pXMLData));
                break;
            case "vertices":
                pVertices = _this.COLLADAVertices(pXMLData);
                break;
            case "lines":
            case "linestrips":
            case "tristrips":
            case "trifans":
            case "triangles":
            case "polygons":
            case "polylist":
                pPolygons = _this.COLLADAPolygons(pXMLData, sName);
                for(var i = 0; i < pPolygons.inputs.length; ++i) {
                    pPos = null;
                    if (pPolygons.inputs[i].semantics == "VERTEX") {
                        if (pPolygons.inputs[i].source.id == pVertices.id) {
                            pPos = pVertices.inputs["POSITION"];
                            pPolygons.inputs[i].source = pPos.source;
                            pPolygons.inputs[i].semantics = pPos.semantics;
                        } else {
 {
                                logger.setSourceLocation("resources/Collada.ts", 1175);
                                logger.error("<input /> with semantic VERTEX must refer to <vertices /> tag in same mesh.");
                            }
                            ;
                        }
                    }
                    _this.prepareInput(pPolygons.inputs[i]);
                }
                pMesh.polygons.push(pPolygons);
                break;
        }
    });
    return pMesh;
}
COLLADAGeometrie(pXML, Element);
IColladaGeometrie;
 {
    var pGeometrie = {
        id: attr(pXML, "id"),
        name: attr(pXML, "name"),
        mesh: null,
        convexMesh: null,
        spline: null
    };
    var pXMLData = firstChild(pXML);
    var sName = pXMLData.nodeName;
    if (sName == "mesh") {
        pGeometrie.mesh = this.COLLADAMesh(pXMLData);
    }
    this.link(pGeometrie);
    return pGeometrie;
}
COLLADASkin(pXML, Element);
IColladaSkin;
 {
    var pSkin = {
        shapeMatrix: this.COLLADAData(firstChild(pXML, "bind_shape_matrix")),
        sources: [],
        geometry: this.source(attr(pXML, "source")),
        joints: null,
        vertexWeights: null
    };
    var pVertexWeights, pInput;
    this.eachChild(pXML, function (pXMLData, sName) {
        switch(sName) {
            case "source":
                pSkin.sources.push(_this.COLLADASource(pXMLData));
                break;
            case "joints":
                pSkin.joints = _this.COLLADAJoints(pXMLData);
                break;
            case "vertex_weights":
                pVertexWeights = _this.COLLADAVertexWeights(pXMLData);
                for(var i = 0; i < pVertexWeights.inputs.length; ++i) {
                    pInput = _this.prepareInput(pVertexWeights.inputs[i]);
                }
                pSkin.vertexWeights = pVertexWeights;
                break;
        }
    });
    return pSkin;
}
COLLADAController(pXML, Element);
IColladaController;
 {
    var pController = {
        name: attr(pXML, "name"),
        id: attr(pXML, "id"),
        skin: null,
        morph: null
    };
    var pXMLData = firstChild(pXML, "skin");
    if (!isNull(pXMLData)) {
        pController.skin = this.COLLADASkin(pXMLData);
    } else {
 {
            logger.setSourceLocation("resources/Collada.ts", 1264);
            logger.warning("Founded controller without skin element!");
        }
        ;
        return null;
    }
    this.link(pController);
    return pController;
}
COLLADAImage(pXML, Element);
IColladaImage;
 {
    var pImage = {
        id: attr(pXML, "id"),
        name: attr(pXML, "name"),
        format: attr(pXML, "format"),
        height: parseInt(attr(pXML, "height") || -1),
        width: parseInt(attr(pXML, "width") || -1),
        depth: 1,
        data: null,
        path: null
    };
    var sFilename = this.getFilename();
    var sPath = null;
    var pXMLInitData = firstChild(pXML, "init_from"), pXMLData;
    if (isDefAndNotNull(pXMLInitData)) {
        sPath = stringData(pXMLInitData);
        if (!isNull(sFilename)) {
            if (!util.pathinfo(sPath).isAbsolute()) {
                sPath = util.pathinfo(sFilename).dirname + "/" + sPath;
            }
        }
        pImage.path = sPath;
    } else if (isDefAndNotNull(pXMLData = firstChild(pXML, "data"))) {
 {
            logger.setSourceLocation("resources/Collada.ts", 1307);
            logger.error("image loading from <data /> tag unsupported yet.");
        }
        ;
    } else {
 {
            logger.setSourceLocation("resources/Collada.ts", 1310);
            logger.error("image with id: " + pImage.id + " has no data.");
        }
        ;
    }
    this.link(pImage);
    return pImage;
}
COLLADASurface(pXML, Element);
IColladaSurface;
 {
    var pSurface = {
        initFrom: stringData(firstChild(pXML, "init_from"))
    };
    return pSurface;
}
COLLADATexture(pXML, Element);
IColladaTexture;
 {
    if (!isDefAndNotNull(pXML)) {
        return null;
    }
    var pTexture = {
        texcoord: attr(pXML, "texcoord"),
        sampler: this.source(attr(pXML, "texture")),
        surface: null,
        image: null
    };
    if (!isNull(pTexture.sampler) && isDefAndNotNull(pTexture.sampler.value)) {
        pTexture.surface = this.source((pTexture.sampler.value).source);
    }
    if (!isNull(pTexture.surface)) {
        pTexture.image = this.source((pTexture.surface.value).initFrom);
    }
    return pTexture;
}
COLLADASampler2D(pXML, Element);
IColladaSampler2D;
 {
    var pSampler = {
        source: stringData(firstChild(pXML, "source")),
        wrapS: stringData(firstChild(pXML, "wrap_s")),
        wrapT: stringData(firstChild(pXML, "wrap_t")),
        minFilter: stringData(firstChild(pXML, "minfilter")),
        mipFilter: stringData(firstChild(pXML, "mipfilter")),
        magFilter: stringData(firstChild(pXML, "magfilter"))
    };
    return pSampler;
}
COLLADAPhong(pXML, Element);
IColladaPhong;
 {
    var pMat = {
        diffuse: new Color(0.),
        specular: new Color(0.),
        ambient: new Color(0.),
        emissive: new Color(0.),
        shininess: 0.0,
        reflective: new Color(0.),
        reflectivity: 0.0,
        transparent: new Color(0.),
        transparency: 0.0,
        indexOfRefraction: 0.0,
        textures: {
            diffuse: null,
            specular: null,
            ambient: null,
            emissive: null,
            normal: null
        }
    };
    var pXMLData;
    var pList = Collada.COLLADA_MATERIAL_NAMES;
    for(var i = 0; i < pList.length; i++) {
        var csComponent = pList[i];
        pXMLData = firstChild(pXML, csComponent);
        if (csComponent === "emission") {
            csComponent = "emissive";
        }
        if (pXMLData) {
            this.eachChild(pXMLData, function (pXMLData, sName) {
                switch(sName) {
                    case "float":
                        pMat[csComponent] = _this.COLLADAData(pXMLData);
                        break;
                    case "color":
                        pMat[csComponent].set(_this.COLLADAData(pXMLData));
                        break;
                    case "texture":
                        pMat.textures[csComponent] = _this.COLLADATexture(pXMLData);
                }
            });
        }
    }
    pMat.shininess *= 10.0;
    return pMat;
}
COLLADAEffectTechnique(pXML, Element);
IColladaEffectTechnique;
 {
    var pTech = {
        sid: attr(pXML, "sid"),
        type: null,
        value: null
    };
    var pValue = firstChild(pXML);
    pTech.type = pValue.nodeName;
    switch(pTech.type) {
        case "blinn":
        case "lambert":
 {
                logger.setSourceLocation("resources/Collada.ts", 1445);
                logger.warning("<blinn /> or <lambert /> material interprated as phong");
            }
            ;
        case "phong":
            pTech.value = this.COLLADAPhong(pValue);
            break;
        default:
 {
                logger.setSourceLocation("resources/Collada.ts", 1451);
                logger.error("unsupported technique <" + pTech.type + " /> founded");
            }
            ;
    }
    var pXMLExtra = firstChild(pXML, "extra");
    if (isDefAndNotNull(pXMLExtra)) {
        var pXMLTech = firstChild(pXMLExtra, "technique");
        if (isDefAndNotNull(pXMLTech)) {
            var pXMLBump = firstChild(pXMLTech, "bump");
            if (isDefAndNotNull(pXMLBump) && attr(pXMLBump, "bumptype") === "HEIGHTFIELD") {
                (pTech.value).textures.normal = this.COLLADATexture(firstChild(pXMLBump, "texture"));
            }
        }
    }
    this.link(pTech.sid, pTech);
    return pTech;
}
COLLADAProfileCommon(pXML, Element);
IColladaProfileCommon;
 {
    var pProfile = {
        technique: null,
        newParam: {}
    };
    this.eachByTag(pXML, "newparam", function (pXMLData) {
        pProfile.newParam[attr(pXMLData, "sid")] = _this.COLLADANewParam(pXMLData);
    });
    pProfile.technique = this.COLLADAEffectTechnique(firstChild(pXML, "technique"));
    return pProfile;
}
COLLADAEffect(pXML, Element);
IColladaEffect;
 {
    var pEffect = {
        id: attr(pXML, "id"),
        profileCommon: null
    };
    this.eachChild(pXML, function (pXMLData, sName) {
        switch(sName) {
            case "profile_COMMON":
                pEffect.profileCommon = _this.COLLADAProfileCommon(pXMLData);
                pEffect.profileCommon.technique.value.name = pEffect.id;
                break;
            default:
 {
                    logger.setSourceLocation("resources/Collada.ts", 1509);
                    logger.warning("<" + sName + " /> unsupported in effect section");
                }
                ;
        }
    });
    this.link(pEffect);
    return pEffect;
}
COLLADAMaterial(pXML, Element);
IColladaMaterial;
 {
    var pMaterial = {
        id: attr(pXML, "id"),
        name: attr(pXML, "name"),
        instanceEffect: this.COLLADAInstanceEffect(firstChild(pXML, "instance_effect"))
    };
    this.link(pMaterial);
    return pMaterial;
}
COLLADANode(pXML, Element, iDepth, number = 0);
IColladaNode;
 {
    var pNode = {
        id: attr(pXML, "id"),
        sid: attr(pXML, "sid"),
        name: attr(pXML, "name") || "unknown",
        type: attr(pXML, "type"),
        layer: attr(pXML, "layer"),
        transform: new Mat4(1),
        geometry: [],
        controller: [],
        childNodes: [],
        depth: iDepth,
        transforms: [],
        constructedNode: null
    };
    var m4fMatrix;
    var sType;
    var id, sid;
    this.link(pNode);
    this.eachChild(pXML, function (pXMLData, sName) {
        switch(sName) {
            case "rotate":
            case "matrix":
            case "translate":
            case "scale":
                pNode.transforms.push(_this.COLLADATransform(pXMLData, pNode.id));
                pNode.transform.multiply(_this.COLLADAData(pXMLData));
                break;
            case "instance_geometry":
                pNode.geometry.push(_this.COLLADAInstanceGeometry(pXMLData));
                break;
            case "instance_controller":
                pNode.controller.push(_this.COLLADAInstanceController(pXMLData));
                break;
            case "node":
                pNode.childNodes.push(_this.COLLADANode(pXMLData, iDepth + 1));
                break;
        }
    });
    return pNode;
}
COLLADAVisualScene(pXML, Element);
IColladaVisualScene;
 {
    var pNode;
    var pScene = {
        id: attr(pXML, "id"),
        name: attr(pXML, "name"),
        nodes: []
    };
    this.link(pScene);
    this.eachChild(pXML, function (pXMLData, sName) {
        switch(sName) {
            case "node":
                pNode = _this.COLLADANode(pXMLData);
                if (isDefAndNotNull(pNode)) {
                    pScene.nodes.push(pNode);
                }
                break;
        }
    });
    return pScene;
}
COLLADABindMaterial(pXML, Element);
IColladaBindMaterial;
 {
    if (!isDefAndNotNull(pXML)) {
        return null;
    }
    var pMaterials = {};
    var pMat = null;
    var pSourceMat = null;
    var pTech = firstChild(pXML, "technique_common");
    this.eachByTag(pTech, "instance_material", function (pInstMat) {
        pSourceMat = _this.source(attr(pInstMat, "target"));
        pMat = {
            target: attr(pInstMat, "target"),
            symbol: attr(pInstMat, "symbol"),
            material: pSourceMat,
            vertexInput: {}
        };
        _this.eachByTag(pInstMat, "bind_vertex_input", function (pXMLVertexInput) {
            var sInputSemantic = attr(pXMLVertexInput, "input_semantic");
            if (sInputSemantic !== "TEXCOORD") {
 {
                    logger.setSourceLocation("resources/Collada.ts", 1643);
                    logger.error("unsupported vertex input semantics founded: " + sInputSemantic);
                }
                ;
            }
            var sSemantic = attr(pXMLVertexInput, "semantic");
            var iInputSet = parseInt(attr(pXMLVertexInput, "input_set"));
            pMat.vertexInput[sSemantic] = {
                semantics: sSemantic,
                inputSet: iInputSet,
                inputSemantic: sInputSemantic
            };
        });
        pMaterials[pMat.symbol] = pMat;
    });
    return pMaterials;
}
COLLADAInstanceEffect(pXML, Element);
IColladaInstanceEffect;
 {
    var pInstance = {
        parameters: {},
        techniqueHint: {},
        effect: null
    };
    pInstance.effect = this.source(attr(pXML, "url"));
    this.eachByTag(pXML, "technique_hint", function (pXMLData) {
        pInstance.techniqueHint[attr(pXMLData, "platform")] = attr(pXMLData, "ref");
 {
            logger.setSourceLocation("resources/Collada.ts", 1685);
            logger.warning("<technique_hint /> used, but will be ignored!");
        }
        ;
    });
    this.eachByTag(pXML, "setparam", function (pXMLData) {
        pInstance.parameters[attr(pXMLData, "ref")] = _this.COLLADAData(pXMLData);
 {
            logger.setSourceLocation("resources/Collada.ts", 1691);
            logger.warning("<setparam /> used, but will be ignored!");
        }
        ;
    });
    return pInstance;
}
COLLADAInstanceController(pXML, Element);
IColladaInstanceController;
 {
    var pInst = {
        controller: this.source(attr(pXML, "url")),
        material: this.COLLADABindMaterial(firstChild(pXML, "bind_material")),
        skeletons: []
    };
    this.eachByTag(pXML, "skeleton", function (pXMLData) {
        pInst.skeletons.push(stringData(pXMLData).substr(1));
    });
    return pInst;
}
COLLADAInstanceGeometry(pXML, Element);
IColladaInstanceGeometry;
 {
    var pInst = {
        geometry: this.source(attr(pXML, "url")),
        material: this.COLLADABindMaterial(firstChild(pXML, "bind_material"))
    };
    return pInst;
}
COLLADAScene(pXML, Element);
IColladaVisualScene;
 {
    var pXMLData = firstChild(pXML, "instance_visual_scene");
    var pScene = this.source(attr(pXMLData, "url"));
    if (isNull(pXMLData) || isNull(pScene)) {
 {
            logger.setSourceLocation("resources/Collada.ts", 1727);
            logger.warning("collada model: <" + this.getBasename() + "> has no visual scenes.");
        }
        ;
    }
    return this._pVisualScene = pScene;
}
COLLADAAnimationSampler(pXML, Element);
IColladaAnimationSampler;
 {
    var pSampler = {
        inputs: {},
        id: attr(pXML, "id")
    };
    var pInput;
    var sSemantic;
    this.link(pSampler);
    this.eachByTag(pXML, "input", function (pXMLData) {
        sSemantic = attr(pXMLData, "semantic");
        switch(sSemantic) {
            case "INPUT":
            case "OUTPUT":
            case "INTERPOLATION":
            case "IN_TANGENT":
            case "OUT_TANGENT":
                pInput = _this.prepareInput(_this.COLLADAInput(pXMLData));
                pSampler.inputs[sSemantic] = pInput;
                break;
            default:
 {
                    logger.setSourceLocation("resources/Collada.ts", 1761);
                    logger.error("semantics are different from OUTPUT/INTERPOLATION/IN_TANGENT/OUT_TANGENT is not supported in the <sampler /> tag");
                }
                ;
        }
    });
    return pSampler;
}
COLLADAAnimationChannel(pXML, Element);
IColladaAnimationChannel;
 {
    var pChannel = {
        sampler: this.source(attr(pXML, "source")),
        target: this.target(attr(pXML, "target"))
    };
    if (isNull(pChannel.target) || isNull(pChannel.target.object)) {
 {
            logger.setSourceLocation("resources/Collada.ts", 1776);
            logger.warning("cound not setup animation channel for <" + attr(pXML, "target") + ">");
        }
        ;
        return null;
    }
    return pChannel;
}
COLLADAAnimation(pXML, Element);
IColladaAnimation;
 {
    var pAnimation = {
        id: attr(pXML, "id"),
        name: attr(pXML, "name"),
        sources: [],
        samplers: [],
        channels: [],
        animations: []
    };
    var pChannel;
    var pSubAnimation;
    this.link(pAnimation);
    this.eachChild(pXML, function (pXMLData, sName) {
        switch(sName) {
            case "source":
                pAnimation.sources.push(_this.COLLADASource(pXMLData));
                break;
            case "sampler":
                pAnimation.samplers.push(_this.COLLADAAnimationSampler(pXMLData));
                break;
            case "channel":
                pChannel = _this.COLLADAAnimationChannel(pXMLData);
                if (isDefAndNotNull(pChannel)) {
                    pAnimation.channels.push(pChannel);
                }
                break;
            case "animation":
                pSubAnimation = _this.COLLADAAnimation(pXMLData);
                if (isDefAndNotNull(pSubAnimation)) {
                    pAnimation.animations.push(pSubAnimation);
                }
        }
    });
    if (pAnimation.channels.length == 0 && pAnimation.animations.length == 0) {
 {
            logger.setSourceLocation("resources/Collada.ts", 1828);
            logger.warning("animation with id \"" + pAnimation.id + "\" skipped, because channels/sub animation are empty");
        }
        ;
        return null;
    }
 {
        logger.setSourceLocation("resources/Collada.ts", 1833);
        logger.assert(pXML.parentNode === firstChild(this.getXMLRoot(), "library_animations"), "sub animations not supported");
    }
    ;
    this._pAnimations.push(pAnimation);
    return pAnimation;
}
source(sUrl, string);
IColladaEntry;
 {
    if (sUrl.charAt(0) !== "#") {
        sUrl = "#" + sUrl;
    }
    var pElement = this._pLinks[sUrl];
    if (!isDefAndNotNull(pElement)) {
 {
            logger.setSourceLocation("resources/Collada.ts", 1850);
            logger.warning("cannot find element with id: " + sUrl + ("\n" + (new Error()).stack.split("\n").slice(1).join("\n")));
        }
        ;
    }
    return pElement || null;
}
link(el, any, pTarget ?  : IColladaEntry);
void {
    var: sId,
    string: 
};
if (!isString(arguments[0])) {
    pTarget = arguments[0];
    sId = pTarget.id;
} else {
    sId = arguments[0];
}
this._pLinks["#" + sId] = pTarget;
target(sPath, string);
IColladaTarget;
 {
    var pObject = {
        value: null
    };
    var pSource;
    var pMatches;
    var sValue;
    var iPos;
    var jPos = 0;
    iPos = sPath.lastIndexOf("/");
    if (iPos >= 0) {
        pObject.source = this.source(sPath.substr(0, iPos));
    }
    iPos = sPath.lastIndexOf(".");
    if (iPos < 0) {
        iPos = sPath.indexOf("(");
        jPos = -1;
    }
    if (iPos < 0) {
        pObject.object = this.source(sPath);
        return pObject;
    }
    pSource = this.source(sPath.substr(0, iPos));
    sValue = sPath.substr(iPos + jPos + 1);
    pObject.object = pSource;
    if (!pSource) {
        return null;
    }
    switch(sValue) {
        case "X":
            pObject.value = (pSource.value).x;
            break;
        case "Y":
            pObject.value = (pSource.value).y;
            break;
        case "Z":
            pObject.value = (pSource.value).z;
            break;
        case "W":
            pObject.value = (pSource.value).w;
            break;
        case "ANGLE":
            pObject.value = (pSource.value).w;
            break;
    }
    if (isDefAndNotNull(pObject.value)) {
        return pObject;
    }
    pMatches = sValue.match(/^\((\d+)\)$/);
    if (pMatches) {
        pObject.value = Number(pMatches[1]);
    }
    pMatches = sValue.match(/^\((\d+)\)\((\d+)\)$/);
    if (pMatches) {
        pObject.value = Number(pMatches[1]) * 4 + Number(pMatches[2]);
    }
 {
        logger.setSourceLocation("resources/Collada.ts", 1956);
        logger.assert(isDefAndNotNull(pObject.value), "unsupported target value founded: " + sValue);
    }
    ;
    return pObject;
}
buildAnimationTrack(pChannel, IColladaAnimationChannel);
IAnimationTrack;
 {
    var sNodeId = pChannel.target.source.id;
    var sJoint = this.source(sNodeId).sid || null;
    var pTrack = null;
    var pSampler = pChannel.sampler;
 {
        logger.setSourceLocation("resources/Collada.ts", 1969);
        logger.assert(isDefAndNotNull(pSampler), "could not find sampler for animation channel");
    }
    ;
    var pInput = pSampler.inputs["INPUT"];
    var pOutput = pSampler.inputs["OUTPUT"];
    var pInterpolation = pSampler.inputs["INTERPOLATION"];
    var pTimeMarks = pInput.array;
    var pOutputValues = pOutput.array;
    var pFloatArray;
    var pTransform = pChannel.target.object;
    var sTransform = pTransform.transform;
    var v4f;
    var pValue;
    var nMatrices;
    switch(sTransform) {
        case "translate":
 {
                logger.setSourceLocation("resources/Collada.ts", 2000);
                logger.criticalError("TODO: implement animation translation");
            }
            ;
            break;
        case "rotate":
 {
                logger.setSourceLocation("resources/Collada.ts", 2013);
                logger.criticalError("TODO: implement animation rotation");
            }
            ;
            break;
        case "matrix":
            pValue = pChannel.target.value;
            if (isNull(pValue)) {
                pTrack = animation.createTrack(sJoint);
                nMatrices = pOutputValues.length / 16;
                pFloatArray = new Float32Array(pOutputValues);
 {
                    logger.setSourceLocation("resources/Collada.ts", 2024);
                    logger.assert(nMatrices % 1 === 0.0, "incorrect output length of transformation data (" + pFloatArray.length + ")");
                }
                ;
                for(var i = 0; i < nMatrices; i++) {
                    pTrack.keyFrame(pTimeMarks[i], (new Mat4(pFloatArray.subarray(i * 16, i * 16 + 16), true)).transpose());
                }
            } else {
 {
                    logger.setSourceLocation("resources/Collada.ts", 2042);
                    logger.criticalError("TODO: implement animation matrix modification");
                }
                ;
            }
            break;
        default:
 {
                logger.setSourceLocation("resources/Collada.ts", 2046);
                logger.error("unsupported animation typed founeed: " + sTransform);
            }
            ;
    }
    if (!isNull(pTrack)) {
        pTrack.targetName = sNodeId;
    }
    return pTrack;
}
buildAnimationTrackList(pAnimationData, IColladaAnimation);
IAnimationTrack[];
 {
    var pSubAnimations = pAnimationData.animations;
    var pSubTracks;
    var pTrackList = [];
    var pTrack;
    var pChannels = pAnimationData.channels;
    for(var i = 0; i < pChannels.length; ++i) {
        pTrack = this.buildAnimationTrack(pChannels[i]);
        pTrackList.push(pTrack);
    }
    if (isDefAndNotNull(pSubAnimations)) {
        for(var i = 0; i < pSubAnimations.length; ++i) {
            pSubTracks = this.buildAnimationTrackList(pSubAnimations[i]);
            pTrackList = pTrackList.concat(pSubTracks);
        }
    }
    return pTrackList;
}
buildAnimation(pAnimationData, IColladaAnimation);
IAnimation;
 {
    var pTracks = this.buildAnimationTrackList(pAnimationData);
    var sAnimation = null;
    var pAnimation = animation.createAnimation(sAnimation || this.getBasename());
    for(var i = 0; i < pTracks.length; i++) {
        pAnimation.push(pTracks[i]);
    }
    return pAnimation;
}
buildAnimations(pAnimationsList, IAnimation[] = []);
IAnimation[];
 {
    var pAnimations = this.getAnimations();
    if (isNull(pAnimations)) {
        return null;
    }
    for(var i = 0; i < pAnimations.length; ++i) {
        var pAnimation = this.buildAnimation(pAnimations[i]);
        pAnimationsList.push(pAnimation);
    }
    return pAnimationsList;
}
buildAssetTransform(pNode, ISceneNode, pAsset, IColladaAsset = null);
ISceneNode;
 {
    pAsset = pAsset || this.getAsset();
    if (isDefAndNotNull(pAsset)) {
        var fUnit = pAsset.unit.meter;
        var sUPaxis = pAsset.upAxis;
        pNode.localScale = vec3(fUnit);
        if (sUPaxis.toUpperCase() == "Z_UP") {
            pNode.addRelRotationByEulerAngles(0, -.5 * math.PI, 0);
        }
    }
    return pNode;
}
buildDeclarationFromAccessor(sSemantic, string, pAccessor, IColladaAccessor);
IVertexElementInterface[];
 {
    var pDecl = [];
    for(var i = 0; i < pAccessor.params.length; ++i) {
        var sUsage = pAccessor.params[i].name;
        var sType = pAccessor.params[i].type;
 {
            logger.setSourceLocation("resources/Collada.ts", 2135);
            logger.assert(sType === "float", "Only float type supported for construction declaration from accessor");
        }
        ;
        pDecl.push(VE_FLOAT(sUsage));
    }
    pDecl.push(VE_CUSTOM(sSemantic, EDataTypes.FLOAT, pAccessor.params.length, 0));
 {
        logger.setSourceLocation("resources/Collada.ts", 2142);
        logger.log("Automatically constructed declaration: ", createVertexDeclaration(pDecl).toString());
    }
    ;
    return pDecl;
}
buildDefaultMaterials(pMesh, IMesh);
IMesh;
 {
    var pDefaultMaterial = material.create("default");
    for(var j = 0; j < pMesh.length; ++j) {
        var pSubMesh = pMesh.getSubset(j);
        pSubMesh.material.set(pDefaultMaterial);
        pSubMesh.renderMethod.effect.addComponent("akra.system.mesh_texture");
    }
    return pMesh;
}
buildMaterials(pMesh, IMesh, pGeometryInstance, IColladaInstanceGeometry);
IMesh;
 {
    var pMaterials = pGeometryInstance.material;
    var pEffects = this.getLibrary("library_effects");
    if (isNull(pEffects) || isNull(pMaterials)) {
        return this.buildDefaultMaterials(pMesh);
    }
    for(var sMaterial in pMaterials) {
        var pMaterialInst = pMaterials[sMaterial];
        var pInputMap = pMaterialInst.vertexInput;
        var sEffectId = pMaterialInst.material.instanceEffect.effect.id;
        var pEffect = pEffects.effect[sEffectId];
        var pPhongMaterial = pEffect.profileCommon.technique.value;
        var pMaterial = material.create(sEffectId);
        pMaterial.set(pPhongMaterial);
        for(var j = 0; j < pMesh.length; ++j) {
            var pSubMesh = pMesh.getSubset(j);
            if (pSubMesh.material.name === sMaterial) {
                pSubMesh.material.set(pMaterial);
                pSubMesh.renderMethod.effect.addComponent("akra.system.mesh_texture");
                for(var sTextureType in pPhongMaterial.textures) {
                    var pColladaTexture = pPhongMaterial.textures[sTextureType];
                    if (isNull(pColladaTexture)) {
                        continue;
                    }
                    var pInput = pInputMap[pColladaTexture.texcoord];
                    if (!isDefAndNotNull(pInput)) {
                        continue;
                    }
                    var sInputSemantics = pInputMap[pColladaTexture.texcoord].inputSemantic;
                    var pColladaImage = pColladaTexture.image;
                    var pSurfaceMaterial = pSubMesh.surfaceMaterial;
                    var pTexture = this.getManager().texturePool.loadResource(pColladaImage.path);
                    if (this.getImageOptions().flipY === true) {
 {
                            logger.setSourceLocation("resources/Collada.ts", 2217);
                            logger.error("TODO: flipY for image unsupported!");
                        }
                        ;
                    }
                    var pMatches = sInputSemantics.match(/^(.*?\w)(\d+)$/i);
                    var iTexCoord = (pMatches ? parseInt(pMatches[2]) : 0);
                    var iTexture = ESurfaceMaterialTextures[sTextureType.toUpperCase()];
                    if (!isDef(iTexture)) {
                        continue;
                    }
                    pSurfaceMaterial.setTexture(iTexture, pTexture, iTexCoord);
                }
            }
        }
    }
    return pMesh;
}
buildSkeleton(pSkeletonsList, string[]);
ISkeleton;
 {
    var pSkeleton = null;
    pSkeleton = model.createSkeleton(pSkeletonsList[0]);
    for(var i = 0; i < pSkeletonsList.length; ++i) {
        var pJoint = (this.source(pSkeletonsList[i])).constructedNode;
 {
            logger.setSourceLocation("resources/Collada.ts", 2250);
            logger.assert(scene.isJoint(pJoint), "skeleton node must be joint");
        }
        ;
        pSkeleton.addRootJoint(pJoint);
    }
    return pSkeleton;
}
buildMesh(pGeometryInstance, IColladaInstanceGeometry);
IMesh;
 {
    var pMesh = null;
    var pGeometry = pGeometryInstance.geometry;
    var pNodeData = pGeometry.mesh;
    var sMeshName = pGeometry.id;
    if (isNull(pNodeData)) {
        return null;
    }
    if ((pMesh = this.findMesh(sMeshName))) {
        return this.buildMaterials(pMesh.clone(EMeshCloneOptions.GEOMETRY_ONLY | EMeshCloneOptions.SHARED_GEOMETRY), pGeometryInstance);
    }
    var iBegin = now();
    pMesh = this.getEngine().createMesh(sMeshName, (EMeshOptions.HB_READABLE), this.sharedBuffer());
    var pPolyGroup = pNodeData.polygons;
    var pMeshData = pMesh.data;
    for(var i = 0; i < pPolyGroup.length; ++i) {
        pMesh.createSubset("submesh-" + i, this.isWireframeEnabled() ? EPrimitiveTypes.LINELIST : pPolyGroup[i].type);
    }
    for(var i = 0, pUsedSemantics = {}; i < pPolyGroup.length; ++i) {
        var pPolygons = pPolyGroup[i];
        for(var j = 0; j < pPolygons.inputs.length; ++j) {
            var pInput = pPolygons.inputs[j];
            var sSemantic = pInput.semantics;
            var pData = pInput.array;
            var pDecl;
            var pDataExt;
            if (!pUsedSemantics[sSemantic]) {
                pUsedSemantics[sSemantic] = true;
                switch(sSemantic) {
                    case DeclUsages.POSITION:
                    case DeclUsages.NORMAL:
                        pDataExt = new Float32Array((pData).length / 3 * 4);
                        for(var y = 0, n = 0, m = 0, l = (pData).length / 3; y < l; y++, n++) {
                            pDataExt[n++] = pData[m++];
                            pDataExt[n++] = pData[m++];
                            pDataExt[n++] = pData[m++];
                        }
                        pData = pDataExt;
                        pDecl = [
                            VE_FLOAT3(sSemantic), 
                            VE_END(16)
                        ];
                        break;
                    case DeclUsages.TEXCOORD:
                    case DeclUsages.TEXCOORD1:
                    case DeclUsages.TEXCOORD2:
                    case DeclUsages.TEXCOORD3:
                    case DeclUsages.TEXCOORD4:
                    case DeclUsages.TEXCOORD5:
                        if (sSemantic === "TEXCOORD") {
                            sSemantic = "TEXCOORD0";
                        }
                        pDecl = [
                            VE_CUSTOM(sSemantic, EDataTypes.FLOAT, pInput.accessor.stride)
                        ];
                        break;
                    default:
                        pDecl = this.buildDeclarationFromAccessor(sSemantic, pInput.accessor);
 {
                            logger.setSourceLocation("resources/Collada.ts", 2340);
                            logger.warning("unsupported semantics used: " + sSemantic);
                        }
                        ;
                }
                pMeshData.allocateData(pDecl, pData);
            }
        }
    }
    for(var i = 0; i < pPolyGroup.length; ++i) {
        var pPolygons = pPolyGroup[i];
        var pSubMesh = pMesh.getSubset(i);
        var pSubMeshData = pSubMesh.data;
        var pIndexDecl = createVertexDeclaration();
        var pSurfaceMaterial = null;
        var pSurfacePool = null;
        for(var j = 0; j < pPolygons.inputs.length; ++j) {
            var iOffset = pPolygons.inputs[j].offset;
            var sIndexSemantic = DeclUsages.INDEX + iOffset;
            if (!pIndexDecl.hasSemantics(sIndexSemantic)) {
                pIndexDecl.append(VE_FLOAT(sIndexSemantic));
            }
        }
        pSubMeshData.allocateIndex(pIndexDecl, new Float32Array(pPolygons.p));
        for(var j = 0; j < pPolygons.inputs.length; ++j) {
            var sSemantic = pPolygons.inputs[j].semantics;
            var sIndexSemantics = DeclUsages.INDEX + pPolygons.inputs[j].offset;
            pSubMeshData.index(sSemantic, sIndexSemantics);
        }
        pSubMesh.material.name = pPolygons.material;
    }
 {
        logger.setSourceLocation("resources/Collada.ts", 2389);
        logger.assert(pMesh.addFlexMaterial("default"), "Could not add flex material to mesh <" + pMesh.name + ">");
    }
    ;
 {
        logger.setSourceLocation("resources/Collada.ts", 2390);
        logger.assert(pMesh.setFlexMaterial("default"), "Could not set flex material to mesh <" + pMesh.name + ">");
    }
    ;
    this.addMesh(pMesh);
    return this.buildMaterials(pMesh, pGeometryInstance);
}
buildSkinMesh(pControllerInstance, IColladaInstanceController);
IMesh;
 {
    var pController = pControllerInstance.controller;
    var pMaterials = pControllerInstance.material;
    var pSkinData = pController.skin;
    var pBoneList = pSkinData.joints.inputs["JOINT"].array;
    var pBoneOffsetMatrices = pSkinData.joints.inputs["INV_BIND_MATRIX"].array;
    var m4fBindMatrix = pSkinData.shapeMatrix;
    var pVertexWeights = pSkinData.vertexWeights;
    var pGeometry = pSkinData.geometry;
    var pMesh;
    var pSkeleton;
    var pSkin;
    pSkeleton = this.buildSkeleton(pControllerInstance.skeletons);
    pMesh = this.buildMesh({
        geometry: pGeometry,
        material: pMaterials
    });
    pSkin = pMesh.createSkin();
    pSkin.setBindMatrix(m4fBindMatrix);
    pSkin.setBoneNames(pBoneList);
    pSkin.setBoneOffsetMatrices(pBoneOffsetMatrices);
 {
        logger.setSourceLocation("resources/Collada.ts", 2426);
        logger.assert(pSkin.setSkeleton(pSkeleton), "Could not set skeleton to skin.");
    }
    ;
    if (!pSkin.setVertexWeights(pVertexWeights.vcount, new Float32Array(pVertexWeights.v), new Float32Array(pVertexWeights.weightInput.array))) {
 {
            logger.setSourceLocation("resources/Collada.ts", 2432);
            logger.error("cannot set vertex weight info to skin");
        }
        ;
    }
    pMesh.setSkin(pSkin);
    pMesh.setSkeleton(pSkeleton);
    pSkeleton.attachMesh(pMesh);
    return pMesh;
}
buildSkinMeshInstance(pControllers, IColladaInstanceController[], pSceneNode, ISceneModel = null);
IMesh[];
 {
    var pMesh = null;
    var pMeshList = [];
    for(var m = 0; m < pControllers.length; ++m) {
        pMesh = this.buildSkinMesh(pControllers[m]);
        pMeshList.push(pMesh);
 {
            logger.setSourceLocation("resources/Collada.ts", 2451);
            logger.assert(isDefAndNotNull(pMesh), "cannot find instance <" + pControllers[m].url + ">\"s data");
        }
        ;
        if (!isNull(pSceneNode)) {
            pSceneNode.mesh = pMesh;
        }
    }
    return pMeshList;
}
buildMeshInstance(pGeometries, IColladaInstanceGeometry[], pSceneNode, ISceneModel = null);
IMesh[];
 {
    var pMesh = null;
    var pMeshList = [];
    for(var m = 0; m < pGeometries.length; ++m) {
        pMesh = this.buildMesh(pGeometries[m]);
        pMeshList.push(pMesh);
 {
            logger.setSourceLocation("resources/Collada.ts", 2469);
            logger.assert(isDefAndNotNull(pMesh), "cannot find instance <" + pGeometries[m].url + ">\"s data");
        }
        ;
        if (!isNull(pSceneNode)) {
            pSceneNode.mesh = pMesh;
        }
    }
    return pMeshList;
}
buildMeshes();
IMesh[];
 {
    var pScene = this.getVisualScene();
    var pMeshes = [];
    this.findNode(pScene.nodes, null, function (pNode) {
        var pModelNode = pNode.constructedNode;
        if (isNull(pModelNode)) {
 {
                logger.setSourceLocation("resources/Collada.ts", 2487);
                logger.error("you must call buildScene() before call buildMeshes() or file corrupt");
            }
            ;
            return;
        }
        if (pNode.controller.length == 0 && pNode.geometry.length == 0) {
            return;
        }
        if (!scene.isModel(pModelNode) && pNode.geometry.length > 0) {
            pModelNode = pModelNode.scene.createModel(".joint-to-model-link-" + sid());
            pModelNode.attachToParent(pNode.constructedNode);
        }
        pMeshes.insert(this.buildSkinMeshInstance(pNode.controller));
        pMeshes.insert(this.buildMeshInstance(pNode.geometry, pModelNode));
    });
    return pMeshes;
}
buildSceneNode(pNode, IColladaNode, pParentNode, ISceneNode);
ISceneNode;
 {
    var pSceneNode = pNode.constructedNode;
    var pScene = pParentNode.scene;
    if (isDefAndNotNull(pSceneNode)) {
        return pSceneNode;
    }
    if (pNode.geometry.length > 0) {
        pSceneNode = pScene.createModel();
    } else {
        pSceneNode = pScene.createNode();
    }
 {
        logger.setSourceLocation("resources/Collada.ts", 2526);
        logger.assert(pSceneNode.create(), "Can not initialize scene node!");
    }
    ;
    pSceneNode.attachToParent(pParentNode);
    return pSceneNode;
}
buildJointNode(pNode, IColladaNode, pParentNode, ISceneNode);
IJoint;
 {
    var pJointNode = pNode.constructedNode;
    var sJointSid = pNode.sid;
    var sJointName = pNode.id;
    var pSkeleton;
 {
        logger.setSourceLocation("resources/Collada.ts", 2539);
        logger.assert(isDefAndNotNull(pParentNode), "parent node is null");
    }
    ;
    if (isDefAndNotNull(pJointNode)) {
        return pJointNode;
    }
    if (isNull(pParentNode)) {
        return null;
    }
    pJointNode = pParentNode.scene.createJoint();
 {
        logger.setSourceLocation("resources/Collada.ts", 2551);
        logger.assert(pJointNode.create(), "Can not initialize joint node!");
    }
    ;
    pJointNode.boneName = sJointSid;
    pJointNode.attachToParent(pParentNode);
    if (this.isJointsVisualizationNeeded()) {
 {
            logger.setSourceLocation("resources/Collada.ts", 2564);
            logger.criticalError("TODO: visualize joints...");
        }
        ;
    }
    return pJointNode;
}
buildNodes(pNodes, IColladaNode[], pParentNode, ISceneNode = null);
ISceneNode;
 {
    if (isNull(pNodes)) {
        return null;
    }
    var pNode = null;
    var pHierarchyNode = null;
    var m4fLocalMatrix = null;
    for(var i = pNodes.length - 1; i >= 0; i--) {
        pNode = pNodes[i];
        if (!isDefAndNotNull(pNode)) {
            continue;
        }
        if (pNode.type === "JOINT") {
            pHierarchyNode = this.buildJointNode(pNode, pParentNode);
        } else {
            pHierarchyNode = this.buildSceneNode(pNode, pParentNode);
        }
        pHierarchyNode.name = (pNode.id || pNode.name);
        pHierarchyNode.setInheritance(ENodeInheritance.ALL);
        pNode.constructedNode = pHierarchyNode;
        pHierarchyNode.localMatrix = pNode.transform;
        this.buildNodes(pNode.childNodes, pHierarchyNode);
    }
    return pHierarchyNode;
}
buildScene(pRootNode, ISceneNode);
ISceneNode[];
 {
    var pScene = this.getVisualScene();
    var pAsset = this.getAsset();
    var pNodes = [];
    var pNode = null;
    for(var i = 0; i < pScene.nodes.length; i++) {
        pNode = pScene.nodes[i];
        pNodes.push(this.buildNodes([
            pNode
        ], pRootNode));
    }
    for(var i = 0; i < pNodes.length; i++) {
        pNodes[i] = this.buildAssetTransform(pNodes[i]);
    }
    return pNodes;
}
buildInititalPose(pNodes, IColladaNode[], pSkeleton, ISkeleton);
IAnimation;
 {
    var sPose = "Pose-" + this.getBasename() + "-" + pSkeleton.name;
    var pPose = animation.createAnimation(sPose);
    var pNodeList = pSkeleton.getNodeList();
    var pNodeMap = {};
    var pTrack;
    for(var i = 0; i < pNodeList.length; ++i) {
        pNodeMap[pNodeList[i].name] = pNodeList[i];
    }
    this.findNode(pNodes, null, function (pNode) {
        var sJoint = pNode.sid;
        var sNodeId = pNode.id;
        if (!isDefAndNotNull(pNodeMap[sNodeId])) {
            return;
        }
        pTrack = animation.createTrack(sJoint);
        pTrack.targetName = sNodeId;
        pTrack.keyFrame(0.0, pNode.transform);
        pPose.push(pTrack);
    });
    return pPose;
}
buildInitialPoses(pPoseSkeletons, ISkeleton[] = null);
IAnimation[];
 {
    pPoseSkeletons = pPoseSkeletons || this.getSkeletonsOutput();
    if (isNull(pPoseSkeletons)) {
        return null;
    }
    var pScene = this.getVisualScene();
    var pSkeleton;
    var pPoses = [];
    for(var i = 0; i < pPoseSkeletons.length; ++i) {
        pSkeleton = pPoseSkeletons[i];
        pPoses.push(this.buildInititalPose(pScene.nodes, pSkeleton));
    }
    return pPoses;
}
buildComplete();
void {
    var: pScene,
    IColladaVisualScene:  = this.getVisualScene()
};
if (isNull(pScene)) {
 {
        logger.setSourceLocation("resources/Collada.ts", 2688);
        logger.warning("build complete, but visual scene not parsed correctly!");
    }
    ;
    return;
}
this.findNode(pScene.nodes, null, function (pNode) {
    pNode.constructedNode = null;
});
setOptions(pOptions, IColladaLoadOptions);
void {
    if: (isNull(pOptions))
};
 {
    pOptions = Collada.DEFAULT_OPTIONS;
}
for(var i in Collada.DEFAULT_OPTIONS) {
    if (isDef(pOptions[i])) {
        continue;
    }
    pOptions[i] = Collada.DEFAULT_OPTIONS[i];
}
this._pOptions = pOptions;
setXMLRoot(pXML, Element);
void {
    this: ,
    _pXMLRoot:  = pXML
};
getXMLRoot();
Element;
 {
    return this._pXMLRoot;
}
findMesh(sName, string);
IMesh;
 {
    return this._pCache.meshMap[sName] || null;
}
addMesh(pMesh, IMesh);
void {
    this: ,
    _pCache: ,
    meshMap: [
        pMesh.name
    ] = pMesh
};
this.sharedBuffer(pMesh.data);
sharedBuffer(pBuffer ?  : IRenderDataCollection);
IRenderDataCollection;
 {
    if (isDefAndNotNull(pBuffer)) {
        this._pCache.sharedBuffer = pBuffer;
    }
    return null;
}
prepareInput(pInput, IColladaInput);
IColladaInput;
 {
    var pSupportedFormat = getSupportedFormat(pInput.semantics);
 {
        logger.setSourceLocation("resources/Collada.ts", 2742);
        logger.assert(isDefAndNotNull(pSupportedFormat), "unsupported semantic used <" + pInput.semantics + ">");
    }
    ;
    pInput.array = this.COLLADAGetSourceData(pInput.source, pSupportedFormat);
    pInput.accessor = pInput.source.techniqueCommon.accessor;
    return pInput;
}
inline;
isJointsVisualizationNeeded();
bool;
 {
    return this._pOptions.drawJoints === true;
}
inline;
isVisualSceneLoaded();
bool;
 {
    return isDefAndNotNull(this._pVisualScene);
}
inline;
isAnimationLoaded();
bool;
 {
    return this._pAnimations.length > 0;
}
inline;
isSceneNeeded();
bool;
 {
    return this._pOptions.scene === true;
}
inline;
isAnimationNeeded();
bool;
 {
    return isDefAndNotNull(this._pOptions.animation) && this._pOptions.animation !== false;
}
inline;
isPoseExtractionNeeded();
bool;
 {
    return this._pOptions.extractPoses === true;
}
inline;
isWireframeEnabled();
bool;
 {
    return this._pOptions.wireframe === true;
}
inline;
getSkeletonsOutput();
ISkeleton[];
 {
    return this._pOptions.skeletons || null;
}
inline;
getImageOptions();
IColladaImageLoadOptions;
 {
    return this._pOptions.images;
}
inline;
getVisualScene();
IColladaVisualScene;
 {
    return this._pVisualScene;
}
inline;
getAnimations();
IColladaAnimation[];
 {
    return this._pAnimations;
}
inline;
getAsset();
IColladaAsset;
 {
    return this._pAsset;
}
inline;
isLibraryLoaded(sLib, string);
bool;
 {
    return isDefAndNotNull(this._pLib[sLib]);
}
inline;
isLibraryExists(sLib, string);
bool;
 {
    return !isNull(firstChild(this.getXMLRoot(), "library_animations"));
}
inline;
getLibrary(sLib, string);
IColladaLibrary;
 {
    return this._pLib[sLib] || null;
}
inline;
getBasename();
string;
 {
    return util.pathinfo(this._sFilename).basename || "unknown";
}
inline;
getFilename();
string;
 {
    return this._sFilename;
}
inline;
setFilename(sName, string);
void {
    this: ,
    _sFilename:  = sName
};
readLibraries(pXML, Element, pTemplates, IColladaLibraryTemplate[]);
void {
    var: pLibraries,
    IColladaLibraryMap:  = this._pLib
};
for(var i = 0; i < pTemplates.length; i++) {
    var sLib = pTemplates[i].lib;
    pLibraries[sLib] = this.COLLADALibrary(firstChild(pXML, sLib), pTemplates[i]);
}
checkLibraries(pXML, Element, pTemplates, IColladaLibraryTemplate[]);
void {
    var: pLibraries,
    IColladaLibraryMap:  = this._pLib
};
for(var i = 0; i < pTemplates.length; i++) {
    var sLib = pTemplates[i].lib;
    if (isDefAndNotNull(firstChild(pXML, sLib))) {
        pLibraries[sLib] = null;
    }
}
parse(sXMLData, string, pOptions, IColladaLoadOptions = null);
bool;
 {
    if (isNull(sXMLData)) {
 {
            logger.setSourceLocation("resources/Collada.ts", 2844);
            logger.error("must be specified collada content.");
        }
        ;
        return false;
    }
    var pParser = new DOMParser();
    var pXMLDocument = pParser.parseFromString(sXMLData, "application/xml");
    var pXMLRoot = pXMLDocument.getElementsByTagName("COLLADA")[0];
    this.setOptions(pOptions);
    this.setXMLRoot(pXMLRoot);
    this.checkLibraries(pXMLRoot, Collada.SCENE_TEMPLATE);
    this.checkLibraries(pXMLRoot, Collada.ANIMATION_TEMPLATE);
    this.readLibraries(pXMLRoot, Collada.SCENE_TEMPLATE);
    this.COLLADAAsset(firstChild(pXMLRoot, "asset"));
    this.COLLADAScene(firstChild(pXMLRoot, "scene"));
    if (this.isAnimationNeeded()) {
        this.readLibraries(pXMLRoot, Collada.ANIMATION_TEMPLATE);
    }
    return true;
}
loadResource(sFilename, string = null, pOptions, IColladaLoadOptions = null);
bool;
 {
    if (isNull(sFilename)) {
        sFilename = this.findResourceName();
    }
    if (this.isResourceLoaded()) {
 {
            logger.setSourceLocation("resources/Collada.ts", 2876);
            logger.warning("collada model already loaded");
        }
        ;
        return false;
    }
    var pModel = this;
    this.setFilename(sFilename);
    this.notifyDisabled();
    this.notifyUnloaded();
    io.fopen(sFilename).read(function (pErr, sXML) {
        if (!isNull(pErr)) {
 {
                logger.setSourceLocation("resources/Collada.ts", 2889);
                logger.error(pErr);
            }
            ;
        }
        pModel.notifyRestored();
        if (pModel.parse(sXML, pOptions)) {
            pModel.notifyLoaded();
        }
    });
}
attachToScene(pScene, IScene3d, pController ?  : IAnimationController);
IModelEntry;
attachToScene(pNode, ISceneNode, pController ?  : IAnimationController);
IModelEntry;
attachToScene(parent, pController, IAnimationController = null);
IModelEntry;
 {
    var pSkeletons, pSkeleton;
    var pPoses;
    var pScene;
    var pNode;
    var pRoot;
    var pSceneOutput = null;
    var pAnimationOutput = null;
    var pMeshOutput = null;
    var pInitialPosesOutput = null;
    if (isNull(parent)) {
        return null;
    }
    if (parent instanceof scene.Node) {
        pNode = parent;
        pScene = pNode.scene;
    } else {
        pScene = parent;
        pNode = pScene.getRootNode();
    }
    pRoot = pScene._createModelEntry(this);
    pRoot.create();
    pRoot.name = this.getBasename();
    pRoot.setInheritance(ENodeInheritance.ALL);
    if (!pRoot.attachToParent(pNode)) {
        return null;
    }
    if (this.isVisualSceneLoaded() && this.isSceneNeeded()) {
        pSceneOutput = this.buildScene(pRoot);
        pMeshOutput = this.buildMeshes();
    }
    if (this.isPoseExtractionNeeded()) {
        pInitialPosesOutput = this.buildInitialPoses();
    }
    if (!isNull(pController) && this.isAnimationNeeded() && this.isLibraryExists("library_animations")) {
        pAnimationOutput = this.buildAnimations();
        if (this.isPoseExtractionNeeded()) {
            pSkeletons = this.getSkeletonsOutput() || [];
            pPoses = this.buildInitialPoses(pSkeletons);
            for(var i = 0; i < pAnimationOutput.length; ++i) {
                for(var j = 0; j < pPoses.length; ++j) {
                    pAnimationOutput[i].extend(pPoses[j]);
                }
            }
        }
    }
    this.buildComplete();
    if (!isNull(pController) && !isNull(pAnimationOutput)) {
        for(var i = 0; i < pAnimationOutput.length; ++i) {
            pController.addAnimation(pAnimationOutput[i]);
        }
        pController.attach(pRoot);
        pRoot.controller = pController;
    }
    return pRoot;
}
pSupportedVertexFormat = [
    {
        name: [
            "X"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "Y"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "Z"
        ],
        type: [
            "float"
        ]
    }
];
pSupportedTextureFormat = [
    {
        name: [
            "S"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "T"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "P"
        ],
        type: [
            "float"
        ]
    }
];
pSupportedColorFormat = [
    {
        name: [
            "R"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "G"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "B"
        ],
        type: [
            "float"
        ]
    }
];
pSupportedWeightFormat = [
    {
        name: [
            "WEIGHT"
        ],
        type: [
            "float"
        ]
    }
];
pSupportedJointFormat = [
    {
        name: [
            "JOINT"
        ],
        type: [
            "Name", 
            "IDREF"
        ]
    }
];
pSupportedInvBindMatrixFormat = [
    {
        name: [
            "TRANSFORM"
        ],
        type: [
            "float4x4"
        ]
    }
];
pSupportedInterpolationFormat = [
    {
        name: [
            "INTERPOLATION"
        ],
        type: [
            "Name"
        ]
    }
];
pSupportedInputFormat = [
    {
        name: [
            "TIME"
        ],
        type: [
            "float"
        ]
    }
];
pSupportedOutputFormat = [
    {
        name: [
            "TRANSFORM", 
            "X", 
            "ANGLE", 
            null
        ],
        type: [
            "float4x4", 
            "float"
        ]
    }, 
    {
        name: [
            "Y"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "Z"
        ],
        type: [
            "float"
        ]
    }
];
pSupportedTangentFormat = [
    {
        name: [
            "X"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "Y"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "X"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "Y"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "X"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "Y"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "X"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "Y"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "X"
        ],
        type: [
            "float"
        ]
    }, 
    {
        name: [
            "Y"
        ],
        type: [
            "float"
        ]
    }
];
pFormatStrideTable = {
    "float": 1,
    "float2": 2,
    "float3": 3,
    "float4": 4,
    "float3x3": 9,
    "float4x4": 16,
    "int": 1,
    "name": 1,
    "Name": 1,
    "IDREF": 1
};
pConvFormats = {
    "int": {
        type: Int32Array,
        converter: string2IntArray
    },
    "float": {
        type: Float32Array,
        converter: string2FloatArray
    },
    "bool": {
        type: Array,
        converter: string2BoolArray
    },
    "string": {
        type: Array,
        converter: string2StringArray
    }
};
function getSupportedFormat(sSemantics) {
    switch(sSemantics) {
        case "TEXTANGENT":
        case "TEXBINORMAL":
        case "VERTEX":
        case "NORMAL":
        case "TANGENT":
        case "BINORMAL":
        case "POSITION":
            return pSupportedVertexFormat;
        case "TEXCOORD":
            return pSupportedTextureFormat;
        case "WEIGHT":
            return pSupportedWeightFormat;
        case "JOINT":
            return pSupportedJointFormat;
        case "INV_BIND_MATRIX":
            return pSupportedInvBindMatrixFormat;
        case "INTERPOLATION":
            return pSupportedInterpolationFormat;
        case "IN_TANGENT":
            return pSupportedTangentFormat;
        case "INPUT":
            return pSupportedInputFormat;
        case "OUT_TANGENT":
            return pSupportedTangentFormat;
        case "OUTPUT":
            return pSupportedOutputFormat;
        case "COLOR":
            return pSupportedColorFormat;
        case "UV":
        case "MORPH_WEIGHT":
        case "MORPH_TARGET":
        case "LINEAR_STEPS":
        case "IMAGE":
        case "CONTINUITY":
            return null;
    }
 {
        logger.setSourceLocation("resources/Collada.ts", 3135);
        logger.error("unknown semantics founded: " + sSemantics);
    }
    ;
    return null;
}
function calcFormatStride(pFormat) {
    var iStride = 0;
    var s = null;
    for(var i = 0; i < pFormat.length; ++i) {
        s = pFormat[i].type[0];
        iStride += pFormatStrideTable[s];
    }
    return iStride;
}
inline;
function parseBool(sValue) {
    return (sValue === "true");
}
inline;
function parseString(sValue) {
    return String(sValue);
}
function retrieve(pSrc, pDst, iStride, iFrom, iCount, iOffset, iLen) {
    if (typeof iStride === "undefined") { iStride = 1; }
    if (typeof iFrom === "undefined") { iFrom = 0; }
    if (typeof iOffset === "undefined") { iOffset = 0; }
    if (typeof iLen === "undefined") { iLen = iStride - iOffset; }
    if (!isDef(iCount)) {
        iCount = (pSrc.length / iStride - iFrom);
    }
    if (iOffset + iLen > iStride) {
        iLen = iStride - iOffset;
    }
    var iBegin = iFrom * iStride;
    var n = 0;
    for(var i = 0; i < iCount; ++i) {
        for(var j = 0; j < iLen; ++j) {
            pDst[n++] = (pSrc[iBegin + i * iStride + iOffset + j]);
        }
    }
    return n;
}
function string2Array(sData, ppData, fnConv, iFrom) {
    if (typeof fnConv === "undefined") { fnConv = parseFloat; }
    if (typeof iFrom === "undefined") { iFrom = 0; }
    var pData = sData.split(/[\s]+/g);
    for(var i = 0, n = pData.length, j = 0; i < n; ++i) {
        if (pData[i] != "") {
            ppData[iFrom + j] = fnConv(pData[i]);
            j++;
        }
    }
    return j;
}
inline;
function string2IntArray(sData, ppData, iFrom) {
    return string2Array(sData, ppData, parseInt, iFrom);
}
inline;
function string2FloatArray(sData, ppData, iFrom) {
    return string2Array(sData, ppData, parseFloat, iFrom);
}
inline;
function string2BoolArray(sData, ppData, iFrom) {
    return string2Array(sData, ppData, parseBool, iFrom);
}
inline;
function string2StringArray(sData, ppData, iFrom) {
    return string2Array(sData, ppData, parseString, iFrom);
}
function string2Any(sData, n, sType, isArray) {
    if (typeof isArray === "undefined") { isArray = false; }
    var ppData = new (pConvFormats[sType].type)(n);
    pConvFormats[sType].converter(sData, ppData);
    if (n == 1 && !isArray) {
        return ppData[0];
    }
    return ppData;
}
;
function printArray(pArr, nRow, nCol) {
    var s = "\n";
    for(var i = 0; i < pArr.length; ++i) {
        if (i % nCol == 0) {
            s += "  ";
        }
        s += pArr[i] + ", ";
        if ((i + 1) % nRow == 0) {
            s += '\n';
        }
    }
    return s;
}
function sortArrayByProperty(pData, sProperty) {
    var tmp;
    for(var i = pData.length - 1; i > 0; i--) {
        for(var j = 0; j < i; j++) {
            if (pData[j][sProperty] > pData[j + 1][sProperty]) {
                tmp = pData[j];
                pData[j] = pData[j + 1];
                pData[j + 1] = tmp;
            }
        }
    }
    return pData;
}
inline;
function stringData(pXML) {
    return (isDefAndNotNull(pXML) ? pXML.textContent : null);
}
inline;
function attr(pXML, sName) {
    return pXML.getAttribute(sName);
}
function firstChild(pXML, sTag) {
    if (isString(sTag)) {
        return pXML.getElementsByTagName(sTag)[0];
    }
    for(var i = 0; i < pXML.childNodes.length; i++) {
        if (pXML.childNodes[i].nodeType === Node.ELEMENT_NODE) {
            return pXML.childNodes[i];
        }
    }
    return null;
}
var akra;
(function (akra) {
    (function (util) {
        akra.logger.registerCode(2001, "Grammar not LALR(1)! Cannot to generate syntax table. Add operation error.\n" + "Conflict in state with index: {stateIndex}. With grammar symbol: \"{grammarSymbol}\"\n" + "Old operation: {oldOperation}\n" + "New operation: {newOperation}\n" + "For more info init parser in debug-mode and see syntax table and list of states.");
        akra.logger.registerCode(2002, "Grammar not LALR(1)! Cannot to generate syntax table. Add state link error.\n" + "Conflict in state with index: {stateIndex}. With grammar symbol: \"{grammarSymbol}\"\n" + "Old next state: {oldNextStateIndex}\n" + "New next state: {newNextStateIndex}\n" + "For more info init parser in debug-mode and see syntax table and list of states.");
        akra.logger.registerCode(2003, "Grammar error. Can`t generate rules from grammar\n" + "Unexpected symbol: {unexpectedSymbol}\n" + "Expected: {expectedSymbol}");
        akra.logger.registerCode(2004, "Grammar error. Empty additional function name.");
        akra.logger.registerCode(2005, "Grammar error. Bad keyword: {badKeyword}\n" + "All keyword must be define in lexer rule block.");
        akra.logger.registerCode(2051, "Syntax error during parsing. Token: {tokenValue}\n" + "Line: {line}. Column: {column}.");
        akra.logger.registerCode(2101, "Unknown token: {tokenValue}");
        akra.logger.registerCode(2102, "Bad token: {tokenValue}");
        function sourceLocationToString(pLocation) {
            var sLocation = "[" + pLocation.file + ":" + pLocation.line.toString() + "]: ";
            return sLocation;
        }
        function syntaxErrorLogRoutine(pLogEntity) {
            var sPosition = sourceLocationToString(pLogEntity.location);
            var sError = "Code: " + pLogEntity.code.toString() + ". ";
            var pParseMessage = pLogEntity.message.split(/\{(\w+)\}/);
            var pInfo = pLogEntity.info;
            for(var i = 0; i < pParseMessage.length; i++) {
                if (isDef(pInfo[pParseMessage[i]])) {
                    pParseMessage[i] = pInfo[pParseMessage[i]];
                }
            }
            var sMessage = sPosition + sError + pParseMessage.join("");
            console["error"].call(console, sMessage);
        }
        akra.logger.setCodeFamilyRoutine("ParserSyntaxErrors", syntaxErrorLogRoutine, ELogLevel.ERROR);
        var Item = (function () {
            function Item(pRule, iPos, pExpected) {
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = end();
                this.string = {
                    return: this._pRule.right[this._pRule.right.length - 1] || "EMPTY"
                };
                this.inline = nextMarked();
                this.string = {
                    return: this._pRule.right[this._iPos + 1] || "END"
                };
                this.inline = isExpected(sSymbol, string);
                this.bool = {
                    return: !!(this._pExpected[sSymbol])
                };
                this._pRule = pRule;
                this._iPos = iPos;
                this._iIndex = 0;
                this._pState = null;
                this._isNewExpected = true;
                this._iLength = 0;
                this._pExpected = {};
                if (arguments.length === 3) {
                    var i = null;
                    for(i in arguments[2]) {
                        this.addExpected(i);
                    }
                }
            }
            Item.prototype.rule = function () {
                return this._pRule;
            };
            Item.prototype.rule = function (pRule) {
                this._pRule = pRule;
            };
            Item.prototype.position = function () {
                return this._iPos;
            };
            Item.prototype.position = function (iPos) {
                this._iPos = iPos;
            };
            Item.prototype.state = function () {
                return this._pState;
            };
            Item.prototype.state = function (pState) {
                this._pState = pState;
            };
            Item.prototype.index = function () {
                return this._iIndex;
            };
            Item.prototype.index = function (iIndex) {
                this._iIndex = iIndex;
            };
            Item.prototype.expectedSymbols = function () {
                return this._pExpected;
            };
            Item.prototype.length = function () {
                return this._iLength;
            };
            Item.prototype.isNewExpected = function () {
                return this._isNewExpected;
            };
            Item.prototype.isNewExpected = function (_isNewExpected) {
                this._isNewExpected = _isNewExpected;
            };
            Item.prototype.isEqual = function (pItem, eType) {
                if (typeof eType === "undefined") { eType = EParserType.k_LR0; }
                if (eType === EParserType.k_LR0) {
                    return (this._pRule === pItem.rule && this._iPos === pItem.position);
                } else if (eType === EParserType.k_LR1) {
                    if (!(this._pRule === pItem.rule && this._iPos === pItem.position && this._iLength === (pItem).length)) {
                        return false;
                    }
                    var i = null;
                    for(i in this._pExpected) {
                        if (!(pItem).isExpected(i)) {
                            return false;
                        }
                    }
                    return true;
                }
            };
            Item.prototype.isParentItem = function (pItem) {
                return (this._pRule === pItem.rule && this._iPos === pItem.position + 1);
            };
            Item.prototype.isChildItem = function (pItem) {
                return (this._pRule === pItem.rule && this._iPos === pItem.position - 1);
            };
            Item.prototype.mark = function () {
                var pRight = this._pRule.right;
                if (this._iPos === pRight.length) {
                    return "END";
                }
                return pRight[this._iPos];
            };
            Item.prototype.addExpected = function (sSymbol) {
                if (this._pExpected[sSymbol]) {
                    return false;
                }
                this._pExpected[sSymbol] = true;
                this._isNewExpected = true;
                this._iLength++;
                return true;
            };
            Item.prototype.toString = function () {
                var sMsg = this._pRule.left + " -> ";
                var sExpected = "";
                var pRight = this._pRule.right;
                for(var k = 0; k < pRight.length; k++) {
                    if (k === this._iPos) {
                        sMsg += ". ";
                    }
                    sMsg += pRight[k] + " ";
                }
                if (this._iPos === pRight.length) {
                    sMsg += ". ";
                }
                if (isDef(this._pExpected)) {
                    sExpected = ", ";
                    for(var l in this._pExpected) {
                        sExpected += l + "/";
                    }
                    if (sExpected !== ", ") {
                        sMsg += sExpected;
                    }
                }
                sMsg = sMsg.slice(0, sMsg.length - 1);
                return sMsg;
            };
            return Item;
        })();        
        var State = (function () {
            function State() {
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = isEmpty();
                this.bool = {
                    return: !(this._pItemList.length)
                };
                this.inline = deleteNotBase();
                this._pItemList = [];
                this._pNextStates = {};
                this._iIndex = 0;
                this._nBaseItems = 0;
            }
            State.prototype.items = function () {
                return this._pItemList;
            };
            State.prototype.numBaseItems = function () {
                return this._nBaseItems;
            };
            State.prototype.index = function () {
                return this._iIndex;
            };
            State.prototype.index = function (iIndex) {
                this._iIndex = iIndex;
            };
            State.prototype.nextStates = function () {
                return this._pNextStates;
            };
            State.prototype.hasItem = function (pItem, eType) {
                var i;
                var pItems = this._pItemList;
                for(i = 0; i < pItems.length; i++) {
                    if (pItems[i].isEqual(pItem, eType)) {
                        return pItems[i];
                    }
                }
                return null;
            };
            State.prototype.hasParentItem = function (pItem) {
                var i;
                var pItems = this._pItemList;
                for(i = 0; i < pItems.length; i++) {
                    if (pItems[i].isParentItem(pItem)) {
                        return pItems[i];
                    }
                }
                return null;
            };
            State.prototype.hasChildItem = function (pItem) {
                var i;
                var pItems = this._pItemList;
                for(i = 0; i < pItems.length; i++) {
                    if (pItems[i].isChildItem(pItem)) {
                        return pItems[i];
                    }
                }
                return null;
            };
            State.prototype.hasRule = function (pRule, iPos) {
                var i = 0;
                var pItemList = this._pItemList;
                var pItem;
                for(i = 0; i < this._nBaseItems; i++) {
                    pItem = pItemList[i];
                    if (pItem.rule === pRule && pItem.position === iPos) {
                        return true;
                    }
                }
                return false;
            };
            State.prototype.isEqual = function (pState, eType) {
                var pItemsA = this._pItemList;
                var pItemsB = pState.items;
                if (this._nBaseItems !== pState.numBaseItems) {
                    return false;
                }
                var nItems = this._nBaseItems;
                var i, j;
                var isEqual;
                for(i = 0; i < nItems; i++) {
                    isEqual = false;
                    for(j = 0; j < nItems; j++) {
                        if (pItemsA[i].isEqual(pItemsB[j], eType)) {
                            isEqual = true;
                            break;
                        }
                    }
                    if (!isEqual) {
                        return false;
                    }
                }
                return true;
            };
            State.prototype.push = function (pItem) {
                if (this._pItemList.length === 0 || pItem.position > 0) {
                    this._nBaseItems += 1;
                }
                pItem.state = this;
                this._pItemList.push(pItem);
            };
            State.prototype.tryPush_LR0 = function (pRule, iPos) {
                var i;
                var pItems = this._pItemList;
                for(i = 0; i < pItems.length; i++) {
                    if (pItems[i].rule === pRule && pItems[i].position === iPos) {
                        return false;
                    }
                }
                var pItem = new Item(pRule, iPos);
                this.push(pItem);
                return true;
            };
            State.prototype.tryPush_LR = function (pRule, iPos, sExpectedSymbol) {
                var i;
                var pItems = (this._pItemList);
                for(i = 0; i < pItems.length; i++) {
                    if (pItems[i].rule === pRule && pItems[i].position === iPos) {
                        return pItems[i].addExpected(sExpectedSymbol);
                    }
                }
                var pExpected = {};
                pExpected[sExpectedSymbol] = true;
                var pItem = new Item(pRule, iPos, pExpected);
                this.push(pItem);
                return true;
            };
            State.prototype.getNextStateBySymbol = function (sSymbol) {
                if (isDef(this._pNextStates[sSymbol])) {
                    return this._pNextStates[sSymbol];
                } else {
                    return null;
                }
            };
            State.prototype.addNextState = function (sSymbol, pState) {
                if (isDef(this._pNextStates[sSymbol])) {
                    return false;
                } else {
                    this._pNextStates[sSymbol] = pState;
                    return true;
                }
            };
            return State;
        })();        
        void {
            this: ,
            _pItemList: ,
            length:  = this._nBaseItems
        };
        toString(isBase, bool);
        string;
 {
            var len = 0;
            var sMsg;
            var pItemList = this._pItemList;
            sMsg = "State " + this._iIndex + ":\n";
            len = isBase ? this._nBaseItems : pItemList.length;
            for(var j = 0; j < len; j++) {
                sMsg += "\t\t";
                sMsg += pItemList[j].toString();
                sMsg += "\n";
            }
            return sMsg;
        }
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var ParseTree = (function () {
    function ParseTree() {
        this.inline = get;
        this.inline = set;
        this.inline = getNodes();
        this.IParseNode = [];
        this._pRoot = null;
        this._pNodes = [];
        this._pNodesCountStack = [];
        this._isOptimizeMode = false;
    }
    ParseTree.prototype.root = function () {
        return this._pRoot;
    };
    ParseTree.prototype.root = function (pRoot) {
        this._pRoot = pRoot;
    };
    ParseTree.prototype.setRoot = function () {
        this._pRoot = this._pNodes.pop();
    };
    ParseTree.prototype.setOptimizeMode = function (isOptimize) {
        this._isOptimizeMode = isOptimize;
    };
    ParseTree.prototype.addNode = function (pNode) {
        this._pNodes.push(pNode);
        this._pNodesCountStack.push(1);
    };
    ParseTree.prototype.reduceByRule = function (pRule, eCreate) {
        if (typeof eCreate === "undefined") { eCreate = ENodeCreateMode.k_Default; }
        var iReduceCount = 0;
        var pNodesCountStack = this._pNodesCountStack;
        var pNode;
        var iRuleLength = pRule.right.length;
        var pNodes = this._pNodes;
        var nOptimize = this._isOptimizeMode ? 1 : 0;
        while(iRuleLength) {
            iReduceCount += pNodesCountStack.pop();
            iRuleLength--;
        }
        if ((eCreate === ENodeCreateMode.k_Default && iReduceCount > nOptimize) || (eCreate === ENodeCreateMode.k_Necessary)) {
            pNode = {
                name: pRule.left,
                children: null,
                parent: null,
                value: "",
                isAnalyzed: false,
                position: this._pNodes.length
            };
            while(iReduceCount) {
                this.addLink(pNode, pNodes.pop());
                iReduceCount -= 1;
            }
            pNodes.push(pNode);
            pNodesCountStack.push(1);
        } else {
            pNodesCountStack.push(iReduceCount);
        }
    };
    ParseTree.prototype.toString = function () {
        if (this._pRoot) {
            return this.toStringNode(this._pRoot);
        } else {
            return "";
        }
    };
    ParseTree.prototype.clone = function () {
        var pTree = new ParseTree();
        pTree.root = this.cloneNode(this._pRoot);
        return pTree;
    };
    return ParseTree;
})();
exports.ParseTree = ParseTree;
 {
    return this._pNodes;
}
inline;
getLastNode();
IParseNode;
 {
    return this._pNodes[this._pNodes.length - 1];
}
addLink(pParent, IParseNode, pNode, IParseNode);
void {
    if: (!pParent.children)
};
 {
    pParent.children = [];
}
pParent.children.push(pNode);
pNode.parent = pParent;
cloneNode(pNode, IParseNode);
IParseNode;
 {
    var pNewNode;
    pNewNode = {
        name: pNode.name,
        value: pNode.value,
        children: null,
        parent: null,
        isAnalyzed: pNode.isAnalyzed,
        position: pNode.position
    };
    var pChildren = pNode.children;
    for(var i = 0; pChildren && i < pChildren.length; i++) {
        this.addLink(pNewNode, this.cloneNode(pChildren[i]));
    }
    return pNewNode;
}
toStringNode(pNode, IParseNode, sPadding, string = "");
string;
 {
    var sRes = sPadding + "{\n";
    var sOldPadding = sPadding;
    var sDefaultPadding = "  ";
    sPadding += sDefaultPadding;
    if (pNode.value) {
        sRes += sPadding + "name : \"" + pNode.name + "\"" + ",\n";
        sRes += sPadding + "value : \"" + pNode.value + "\"" + "\n";
    } else {
        sRes += sPadding + "name : \"" + pNode.name + "\"" + "\n";
        sRes += sPadding + "children : [";
        var pChildren = pNode.children;
        if (pChildren) {
            sRes += "\n";
            sPadding += sDefaultPadding;
            for(var i = pChildren.length - 1; i >= 0; i--) {
                sRes += this.toStringNode(pChildren[i], sPadding);
                sRes += ",\n";
            }
            sRes = sRes.slice(0, sRes.length - 2);
            sRes += "\n";
            sRes += sOldPadding + sDefaultPadding + "]\n";
        } else {
            sRes += " ]\n";
        }
    }
    sRes += sOldPadding + "}";
    return sRes;
}
var Lexer = (function () {
    function Lexer(pParser) {
        this.inline = _getIndex();
        this.number = {
            return: this._iIndex
        };
        this.inline = _setSource(sSource, string);
        this._iLineNumber = 0;
        this._iColumnNumber = 0;
        this._sSource = "";
        this._iIndex = 0;
        this._pParser = pParser;
        this._pPunctuatorsMap = {};
        this._pKeywordsMap = {};
        this._pPunctuatorsFirstSymbols = {};
    }
    Lexer.prototype.addPunctuator = function (sValue, sName) {
        if (sName === undefined && sValue.length === 1) {
            sName = "T_PUNCTUATOR_" + sValue.charCodeAt(0);
        }
        this._pPunctuatorsMap[sValue] = sName;
        this._pPunctuatorsFirstSymbols[sValue[0]] = true;
        return sName;
    };
    Lexer.prototype.addKeyword = function (sValue, sName) {
        this._pKeywordsMap[sValue] = sName;
        return sName;
    };
    Lexer.prototype.getTerminalValueByName = function (sName) {
        var sValue = null;
        for(sValue in this._pPunctuatorsMap) {
            if (this._pPunctuatorsMap[sValue] === sName) {
                return sValue;
            }
        }
        for(sValue in this._pKeywordsMap) {
            if (this._pKeywordsMap[sValue] === sName) {
                return sValue;
            }
        }
        return sName;
    };
    Lexer.prototype.init = function (sSource) {
        this._sSource = sSource;
        this._iLineNumber = 0;
        this._iColumnNumber = 0;
        this._iIndex = 0;
    };
    Lexer.prototype.getNextToken = function () {
        var ch = this.currentChar();
        if (!ch) {
            return {
                name: "$",
                value: "$",
                start: this._iColumnNumber,
                end: this._iColumnNumber,
                line: this._iLineNumber
            };
        }
        var eType = this.identityTokenType();
        var pToken;
        switch(eType) {
            case ETokenType.k_NumericLiteral:
                pToken = this.scanNumber();
                break;
            case ETokenType.k_CommentLiteral:
                this.scanComment();
                pToken = this.getNextToken();
                break;
            case ETokenType.k_StringLiteral:
                pToken = this.scanString();
                break;
            case ETokenType.k_PunctuatorLiteral:
                pToken = this.scanPunctuator();
                break;
            case ETokenType.k_IdentifierLiteral:
                pToken = this.scanIdentifier();
                break;
            case ETokenType.k_WhitespaceLiteral:
                this.scanWhiteSpace();
                pToken = this.getNextToken();
                break;
            default:
                this._error(2101, {
                    name: "UNNOWN",
                    value: ch + this._sSource[this._iIndex + 1],
                    start: this._iColumnNumber,
                    end: this._iColumnNumber + 1,
                    line: this._iLineNumber
                });
        }
        return pToken;
    };
    return Lexer;
})();
void {
    this: ,
    _sSource:  = sSource
};
inline;
_setIndex(iIndex, number);
void {
    this: ,
    _iIndex:  = iIndex
};
_error(eCode, number, pToken, IToken);
void {
    var: pLocation,
    ISourceLocation:  = {
        file: this._pParser.getParseFileName(),
        line: this._iLineNumber
    }
};
var pInfo = {
    tokenValue: pToken.value,
    tokenType: pToken.type
};
var pLogEntity = {
    code: eCode,
    info: pInfo,
    location: pLocation
};
akra.logger["error"](pLogEntity);
throw new Error(eCode.toString());
identityTokenType();
ETokenType;
 {
    if (this.isIdentifierStart()) {
        return ETokenType.k_IdentifierLiteral;
    }
    if (this.isWhiteSpaceStart()) {
        return ETokenType.k_WhitespaceLiteral;
    }
    if (this.isStringStart()) {
        return ETokenType.k_StringLiteral;
    }
    if (this.isCommentStart()) {
        return ETokenType.k_CommentLiteral;
    }
    if (this.isNumberStart()) {
        return ETokenType.k_NumericLiteral;
    }
    if (this.isPunctuatorStart()) {
        return ETokenType.k_PunctuatorLiteral;
    }
    return ETokenType.k_Unknown;
}
isNumberStart();
bool;
 {
    var ch = this.currentChar();
    if ((ch >= '0') && (ch <= '9')) {
        return true;
    }
    var ch1 = this.nextChar();
    if (ch === "." && (ch1 >= '0') && (ch1 <= '9')) {
        return true;
    }
    return false;
}
isCommentStart();
bool;
 {
    var ch = this.currentChar();
    var ch1 = this.nextChar();
    if (ch === "/" && (ch1 === "/" || ch1 === "*")) {
        return true;
    }
    return false;
}
isStringStart();
bool;
 {
    var ch = this.currentChar();
    if (ch === "\"" || ch === "'") {
        return true;
    }
    return false;
}
isPunctuatorStart();
bool;
 {
    var ch = this.currentChar();
    if (this._pPunctuatorsFirstSymbols[ch]) {
        return true;
    }
    return false;
}
isWhiteSpaceStart();
bool;
 {
    var ch = this.currentChar();
    if (ch === ' ' || ch === '\n' || ch === '\r' || ch === '\t') {
        return true;
    }
    return false;
}
isIdentifierStart();
bool;
 {
    var ch = this.currentChar();
    if ((ch === '_') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {
        return true;
    }
    return false;
}
isLineTerminator(sSymbol, string);
bool;
 {
    return (sSymbol === '\n' || sSymbol === '\r' || sSymbol === '\u2028' || sSymbol === '\u2029');
}
isWhiteSpace(sSymbol, string);
bool;
 {
    return (sSymbol === ' ') || (sSymbol === '\t');
}
inline;
isKeyword(sValue, string);
bool;
 {
    return !!(this._pKeywordsMap[sValue]);
}
inline;
isPunctuator(sValue, string);
bool;
 {
    return !!(this._pPunctuatorsMap[sValue]);
}
inline;
nextChar();
string;
 {
    return this._sSource[this._iIndex + 1];
}
inline;
currentChar();
string;
 {
    return this._sSource[this._iIndex];
}
inline;
readNextChar();
string;
 {
    this._iIndex++;
    this._iColumnNumber++;
    return this._sSource[this._iIndex];
}
scanString();
IToken;
 {
    var chFirst = this.currentChar();
    var sValue = chFirst;
    var ch = null;
    var chPrevious = chFirst;
    var isGoodFinish = false;
    var iStart = this._iColumnNumber;
    while(true) {
        ch = this.readNextChar();
        if (!ch) {
            break;
        }
        sValue += ch;
        if (ch === chFirst && chPrevious !== '\\') {
            isGoodFinish = true;
            this.readNextChar();
            break;
        }
        chPrevious = ch;
    }
    if (isGoodFinish) {
        return {
            name: "T_STRING",
            value: sValue,
            start: iStart,
            end: this._iColumnNumber - 1,
            line: this._iLineNumber
        };
    } else {
        if (!ch) {
            ch = "EOF";
        }
        sValue += ch;
        this._error(2102, {
            type: ETokenType.k_StringLiteral,
            value: sValue,
            start: iStart,
            end: this._iColumnNumber,
            line: this._iLineNumber
        });
        return null;
    }
}
scanPunctuator();
IToken;
 {
    var sValue = this.currentChar();
    var ch;
    var iStart = this._iColumnNumber;
    while(true) {
        ch = this.readNextChar();
        if (ch) {
            sValue += ch;
            this._iColumnNumber++;
            if (!this.isPunctuator(sValue)) {
                sValue = sValue.slice(0, sValue.length - 1);
                break;
            }
        } else {
            break;
        }
    }
    return {
        name: this._pPunctuatorsMap[sValue],
        value: sValue,
        start: iStart,
        end: this._iColumnNumber - 1,
        line: this._iLineNumber
    };
}
scanNumber();
IToken;
 {
    var ch = this.currentChar();
    var sValue = "";
    var isFloat = false;
    var chPrevious = ch;
    var isGoodFinish = false;
    var iStart = this._iColumnNumber;
    var isE = false;
    if (ch === '.') {
        sValue += 0;
        isFloat = true;
    }
    sValue += ch;
    while(true) {
        ch = this.readNextChar();
        if (ch === '.') {
            if (isFloat) {
                break;
            } else {
                isFloat = true;
            }
        } else if (ch === 'e') {
            if (isE) {
                break;
            } else {
                isE = true;
            }
        } else if (((ch === '+' || ch === '-') && chPrevious === 'e')) {
            sValue += ch;
            chPrevious = ch;
            continue;
        } else if (ch === 'f' && isFloat) {
            ch = this.readNextChar();
            if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {
                break;
            }
            isGoodFinish = true;
            break;
        } else if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {
            break;
        } else if (!((ch >= '0') && (ch <= '9')) || !ch) {
            if ((isE && chPrevious !== '+' && chPrevious !== '-' && chPrevious !== 'e') || !isE) {
                isGoodFinish = true;
            }
            break;
        }
        sValue += ch;
        chPrevious = ch;
    }
    if (isGoodFinish) {
        var sName = isFloat ? "T_FLOAT" : "T_UINT";
        return {
            name: sName,
            value: sValue,
            start: iStart,
            end: this._iColumnNumber - 1,
            line: this._iLineNumber
        };
    } else {
        if (!ch) {
            ch = "EOF";
        }
        sValue += ch;
        this._error(2102, {
            type: ETokenType.k_NumericLiteral,
            value: sValue,
            start: iStart,
            end: this._iColumnNumber,
            line: this._iLineNumber
        });
        return null;
    }
}
scanIdentifier();
IToken;
 {
    var ch = this.currentChar();
    var sValue = ch;
    var iStart = this._iColumnNumber;
    var isGoodFinish = false;
    while(true) {
        ch = this.readNextChar();
        if (!ch) {
            isGoodFinish = true;
            break;
        }
        if (!((ch === '_') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9'))) {
            isGoodFinish = true;
            break;
        }
        sValue += ch;
    }
    if (isGoodFinish) {
        if (this.isKeyword(sValue)) {
            return {
                name: this._pKeywordsMap[sValue],
                value: sValue,
                start: iStart,
                end: this._iColumnNumber - 1,
                line: this._iLineNumber
            };
        } else {
            var sName = this._pParser.isTypeId(sValue) ? "T_TYPE_ID" : "T_NON_TYPE_ID";
            return {
                name: sName,
                value: sValue,
                start: iStart,
                end: this._iColumnNumber - 1,
                line: this._iLineNumber
            };
        }
    } else {
        if (!ch) {
            ch = "EOF";
        }
        sValue += ch;
        this._error(2102, {
            type: ETokenType.k_IdentifierLiteral,
            value: sValue,
            start: iStart,
            end: this._iColumnNumber,
            line: this._iLineNumber
        });
        return null;
    }
}
scanWhiteSpace();
bool;
 {
    var ch = this.currentChar();
    while(true) {
        if (!ch) {
            break;
        }
        if (this.isLineTerminator(ch)) {
            if (ch === "\r" && this.nextChar() === "\n") {
                this._iLineNumber--;
            }
            this._iLineNumber++;
            ch = this.readNextChar();
            this._iColumnNumber = 0;
            continue;
        } else if (ch === '\t') {
            this._iColumnNumber += 3;
        } else if (ch !== ' ') {
            break;
        }
        ch = this.readNextChar();
    }
    return true;
}
scanComment();
bool;
 {
    var sValue = this.currentChar();
    var ch = this.readNextChar();
    sValue += ch;
    if (ch === '/') {
        while(true) {
            ch = this.readNextChar();
            if (!ch) {
                break;
            }
            if (this.isLineTerminator(ch)) {
                if (ch === "\r" && this.nextChar() === "\n") {
                    this._iLineNumber--;
                }
                this._iLineNumber++;
                this.readNextChar();
                this._iColumnNumber = 0;
                break;
            }
            sValue += ch;
        }
        return true;
    } else {
        var chPrevious = ch;
        var isGoodFinish = false;
        var iStart = this._iColumnNumber;
        while(true) {
            ch = this.readNextChar();
            if (!ch) {
                break;
            }
            sValue += ch;
            if (ch === '/' && chPrevious === '*') {
                isGoodFinish = true;
                this.readNextChar();
                break;
            }
            if (this.isLineTerminator(ch)) {
                if (ch === "\r" && this.nextChar() === "\n") {
                    this._iLineNumber--;
                }
                this._iLineNumber++;
                this._iColumnNumber = -1;
            }
            chPrevious = ch;
        }
        if (isGoodFinish) {
            return true;
        } else {
            if (!ch) {
                ch = "EOF";
            }
            sValue += ch;
            this._error(2102, {
                type: ETokenType.k_CommentLiteral,
                value: sValue,
                start: iStart,
                end: this._iColumnNumber,
                line: this._iLineNumber
            });
        }
    }
}
var Parser = (function () {
    function Parser() {
        this.inline = getSyntaxTree();
        this.IParseTree = {
            return: this._pSyntaxTree
        };
        this._sSource = "";
        this._iIndex = 0;
        this._pSyntaxTree = null;
        this._pTypeIdMap = null;
        this._pLexer = null;
        this._pStack = [];
        this._pToken = null;
        this._fnFinishCallback = null;
        this._pCaller = null;
        this._pSymbolMap = {
            "$": true
        };
        this._pSyntaxTable = null;
        this._pReduceOperationsMap = null;
        this._pShiftOperationsMap = null;
        this._pSuccessOperation = null;
        this._pFirstTerminalsDMap = null;
        this._pFollowTerminalsDMap = null;
        this._pRulesDMap = null;
        this._pStateList = null;
        this._nRules = 0;
        this._pAdditionalFuncInfoList = null;
        this._pAdditionalFunctionsMap = null;
        this._pAdidtionalFunctByStateDMap = null;
        this._eType = EParserType.k_LR0;
        this._pRuleCreationModeMap = null;
        this._eParseMode = EParseMode.k_AllNode;
        this._pStatesTempMap = null;
        this._pBaseItemList = null;
        this._pExpectedExtensionDMap = null;
        this._sFileName = "stdin";
        ;
    }
    Parser.prototype.isTypeId = function (sValue) {
        return !!(this._pTypeIdMap[sValue]);
    };
    Parser.prototype.returnCode = function (pNode) {
        if (pNode) {
            if (pNode.value) {
                return pNode.value + " ";
            } else if (pNode.children) {
                var sCode = "";
                var i = 0;
                for(i = pNode.children.length - 1; i >= 0; i--) {
                    sCode += this.returnCode(pNode.children[i]);
                }
                return sCode;
            }
        }
        return "";
    };
    Parser.prototype.init = function (sGrammar, eMode, eType) {
        if (typeof eMode === "undefined") { eMode = EParseMode.k_AllNode; }
        if (typeof eType === "undefined") { eType = EParserType.k_LALR; }
        try  {
            this._eType = eType;
            this._pLexer = new Lexer(this);
            this._eParseMode = eMode;
            this.generateRules(sGrammar);
            this.buildSyntaxTable();
            this.generateFunctionByStateMap();
            if (!bf.testAll(eMode, EParseMode.k_DebugMode)) {
                this.clearMem();
            }
            return true;
        } catch (e) {
 {
                logger.setSourceLocation("util/Parser.ts", 1397);
                logger.log(e.stack);
            }
            ;
            return false;
        }
    };
    Parser.prototype.parse = function (sSource, fnFinishCallback, pCaller) {
        if (typeof fnFinishCallback === "undefined") { fnFinishCallback = null; }
        if (typeof pCaller === "undefined") { pCaller = null; }
        try  {
            this.defaultInit();
            this._sSource = sSource;
            this._pLexer.init(sSource);
            this._fnFinishCallback = fnFinishCallback;
            this._pCaller = pCaller;
            var pTree = this._pSyntaxTree;
            var pStack = this._pStack;
            var pSyntaxTable = this._pSyntaxTable;
            var isStop = false;
            var isError = false;
            var isPause = false;
            var pToken = this.readToken();
            var pOperation;
            var iRuleLength;
            var eAdditionalOperationCode;
            var iStateIndex = 0;
            while(!isStop) {
                pOperation = pSyntaxTable[pStack[pStack.length - 1]][pToken.name];
                if (isDef(pOperation)) {
                    switch(pOperation.type) {
                        case EOperationType.k_Success:
                            isStop = true;
                            break;
                        case EOperationType.k_Shift:
                            iStateIndex = pOperation.index;
                            pStack.push(iStateIndex);
                            pTree.addNode(pToken);
                            eAdditionalOperationCode = this.operationAdditionalAction(iStateIndex, pToken.name);
                            if (eAdditionalOperationCode === EOperationType.k_Error) {
                                isError = true;
                                isStop = true;
                            } else if (eAdditionalOperationCode === EOperationType.k_Pause) {
                                this._pToken = null;
                                isStop = true;
                                isPause = true;
                            } else if (eAdditionalOperationCode === EOperationType.k_Ok) {
                                pToken = this.readToken();
                            }
                            break;
                        case EOperationType.k_Reduce:
                            iRuleLength = pOperation.rule.right.length;
                            pStack.length -= iRuleLength;
                            iStateIndex = pSyntaxTable[pStack[pStack.length - 1]][pOperation.rule.left].index;
                            pStack.push(iStateIndex);
                            pTree.reduceByRule(pOperation.rule, this._pRuleCreationModeMap[pOperation.rule.left]);
                            eAdditionalOperationCode = this.operationAdditionalAction(iStateIndex, pOperation.rule.left);
                            if (eAdditionalOperationCode === EOperationType.k_Error) {
                                isError = true;
                                isStop = true;
                            } else if (eAdditionalOperationCode === EOperationType.k_Pause) {
                                this._pToken = pToken;
                                isStop = true;
                                isPause = true;
                            }
                            break;
                    }
                } else {
                    isError = true;
                    isStop = true;
                }
            }
        } catch (e) {
            this._sFileName = "stdin";
            return EParserCode.k_Error;
        }
        if (isPause) {
            return EParserCode.k_Pause;
        }
        if (!isError) {
            pTree.setRoot();
            if (!isNull(this._fnFinishCallback)) {
                this._fnFinishCallback.call(this._pCaller, EParserCode.k_Ok, this.getParseFileName());
            }
            this._sFileName = "stdin";
            return EParserCode.k_Ok;
        } else {
            this._error(2051, pToken);
            if (!isNull(this._fnFinishCallback)) {
                this._fnFinishCallback.call(this._pCaller, EParserCode.k_Error, this.getParseFileName());
            }
            this._sFileName = "stdin";
            return EParserCode.k_Error;
        }
    };
    Parser.prototype.setParseFileName = function (sFileName) {
        this._sFileName = sFileName;
    };
    Parser.prototype.getParseFileName = function () {
        return this._sFileName;
    };
    Parser.prototype.pause = function () {
        return EParserCode.k_Pause;
    };
    Parser.prototype.resume = function () {
        return this.resumeParse();
    };
    Parser.prototype.printStates = function (isBaseOnly) {
        if (typeof isBaseOnly === "undefined") { isBaseOnly = true; }
        if (!isDef(this._pStateList)) {
 {
                logger.setSourceLocation("util/Parser.ts", 1535);
                logger.log("It`s impossible to print states. You must init parser in debug-mode");
            }
            ;
            return;
        }
        var sMsg = "\n" + this.statesToString(isBaseOnly);
 {
            logger.setSourceLocation("util/Parser.ts", 1539);
            logger.log(sMsg);
        }
        ;
    };
    Parser.prototype.printState = function (iStateIndex, isBaseOnly) {
        if (typeof isBaseOnly === "undefined") { isBaseOnly = true; }
        if (!isDef(this._pStateList)) {
 {
                logger.setSourceLocation("util/Parser.ts", 1544);
                logger.log("It`s impossible to print states. You must init parser in debug-mode");
            }
            ;
            return;
        }
        var pState = this._pStateList[iStateIndex];
        if (!isDef(pState)) {
 {
                logger.setSourceLocation("util/Parser.ts", 1550);
                logger.log("Can not print stete with index: " + iStateIndex.toString());
            }
            ;
            return;
        }
        var sMsg = "\n" + pState.toString(isBaseOnly);
 {
            logger.setSourceLocation("util/Parser.ts", 1555);
            logger.log(sMsg);
        }
        ;
    };
    Parser.prototype.getGrammarSymbols = function () {
        return this._pGrammarSymbols;
    };
    Parser.prototype._saveState = function () {
        return {
            source: this._sSource,
            index: this._pLexer._getIndex(),
            fileName: this._sFileName,
            tree: this._pSyntaxTree,
            types: this._pTypeIdMap,
            stack: this._pStack,
            token: this._pToken,
            fnCallback: this._fnFinishCallback,
            caller: this._pCaller
        };
    };
    Parser.prototype._loadState = function (pState) {
        this._sSource = pState.source;
        this._iIndex = pState.index;
        this._sFileName = pState.fileName;
        this._pSyntaxTree = pState.tree;
        this._pTypeIdMap = pState.types;
        this._pStack = pState.stack;
        this._pToken = pState.token;
        this._fnFinishCallback = pState.fnCallback;
        this._pCaller = pState.caller;
        this._pLexer._setSource(pState.source);
        this._pLexer._setIndex(pState.index);
    };
    Parser.prototype.addAdditionalFunction = function (sFuncName, fnRuleFunction) {
        if (isNull(this._pAdditionalFunctionsMap)) {
            this._pAdditionalFunctionsMap = {};
        }
        this._pAdditionalFunctionsMap[sFuncName] = fnRuleFunction;
    };
    Parser.prototype.addTypeId = function (sIdentifier) {
        if (isNull(this._pTypeIdMap)) {
            this._pTypeIdMap = {};
        }
        this._pTypeIdMap[sIdentifier] = true;
    };
    Parser.prototype.defaultInit = function () {
        this._iIndex = 0;
        this._pStack = [
            0
        ];
        this._pSyntaxTree = new ParseTree();
        this._pTypeIdMap = {};
        this._pSyntaxTree.setOptimizeMode(bf.testAll(this._eParseMode, EParseMode.k_Optimize));
    };
    Parser.prototype._error = function (eCode, pErrorInfo) {
        var pLocation = {};
        var pInfo = {
            tokenValue: null,
            line: null,
            column: null,
            stateIndex: null,
            oldNextStateIndex: null,
            newNextStateIndex: null,
            grammarSymbol: null,
            newOperation: null,
            oldOperation: null,
            expectedSymbol: null,
            unexpectedSymbol: null,
            badKeyword: null
        };
        var pLogEntity = {
            code: eCode,
            info: pInfo,
            location: pLocation
        };
        if (eCode === 2051) {
            var pToken = pErrorInfo;
            var iLine = pToken.line;
            var iColumn = pToken.start;
            pInfo.tokenValue = pToken.value;
            pInfo.line = iLine;
            pInfo.column = iColumn;
            pLocation.file = this.getParseFileName();
            pLocation.line = iLine;
        } else if (eCode === 2001) {
            var iStateIndex = pErrorInfo.stateIndex;
            var sSymbol = pErrorInfo.grammarSymbol;
            var pOldOperation = pErrorInfo.oldOperation;
            var pNewOperation = pErrorInfo.newOperation;
            pInfo.stateIndex = iStateIndex;
            pInfo.grammarSymbol = sSymbol;
            pInfo.oldOperation = this.operationToString(pOldOperation);
            pInfo.newOperation = this.operationToString(pNewOperation);
            pLocation.file = "GRAMMAR";
            pLocation.line = 0;
        } else if (eCode === 2002) {
            var iStateIndex = pErrorInfo.stateIndex;
            var sSymbol = pErrorInfo.grammarSymbol;
            var iOldNextStateIndex = pErrorInfo.oldNextStateIndex;
            var iNewNextStateIndex = pErrorInfo.newNextStateIndex;
            pInfo.stateIndex = iStateIndex;
            pInfo.grammarSymbol = sSymbol;
            pInfo.oldNextStateIndex = iOldNextStateIndex;
            pInfo.newNextStateIndex = iNewNextStateIndex;
            pLocation.file = "GRAMMAR";
            pLocation.line = 0;
        } else if (eCode === 2003) {
            var iLine = pErrorInfo.grammarLine;
            var sExpectedSymbol = pErrorInfo.expectedSymbol;
            var sUnexpectedSymbol = pErrorInfo.unexpectedSymbol;
            pInfo.expectedSymbol = sExpectedSymbol;
            pInfo.unexpectedSymbol = sExpectedSymbol;
            pLocation.file = "GRAMMAR";
            pLocation.line = iLine || 0;
        } else if (eCode === 2004) {
            var iLine = pErrorInfo.grammarLine;
            pLocation.file = "GRAMMAR";
            pLocation.line = iLine || 0;
        } else if (eCode === 2005) {
            var iLine = pErrorInfo.grammarLine;
            var sBadKeyword = pErrorInfo.badKeyword;
            pInfo.badKeyword = sBadKeyword;
            pLocation.file = "GRAMMAR";
            pLocation.line = iLine || 0;
        }
        akra.logger["error"](pLogEntity);
        throw new Error(eCode.toString());
    };
    Parser.prototype.clearMem = function () {
        delete this._pFirstTerminalsDMap;
        delete this._pFollowTerminalsDMap;
        delete this._pRulesDMap;
        delete this._pStateList;
        delete this._pReduceOperationsMap;
        delete this._pShiftOperationsMap;
        delete this._pSuccessOperation;
        delete this._pStatesTempMap;
        delete this._pBaseItemList;
        delete this._pExpectedExtensionDMap;
    };
    Parser.prototype.hasState = function (pState, eType) {
        var pStateList = this._pStateList;
        var i = 0;
        for(i = 0; i < pStateList.length; i++) {
            if (pStateList[i].isEqual(pState, eType)) {
                return pStateList[i];
            }
        }
        return null;
    };
    Parser.prototype.isTerminal = function (sSymbol) {
        return !(this._pRulesDMap[sSymbol]);
    };
    Parser.prototype.pushState = function (pState) {
        pState.index = this._pStateList.length;
        this._pStateList.push(pState);
    };
    Parser.prototype.pushBaseItem = function (pItem) {
        pItem.index = this._pBaseItemList.length;
        this._pBaseItemList.push(pItem);
    };
    Parser.prototype.tryAddState = function (pState, eType) {
        var pRes = this.hasState(pState, eType);
        if (isNull(pRes)) {
            if (eType === EParserType.k_LR0) {
                var pItems = pState.items;
                for(var i = 0; i < pItems.length; i++) {
                    this.pushBaseItem(pItems[i]);
                }
            }
            this.pushState(pState);
            this.closure(pState, eType);
            return pState;
        }
        return pRes;
    };
    Parser.prototype.hasEmptyRule = function (sSymbol) {
        if (this.isTerminal(sSymbol)) {
            return false;
        }
        var pRulesDMap = this._pRulesDMap;
        for(var i in pRulesDMap[sSymbol]) {
            if (pRulesDMap[sSymbol][i].right.length === 0) {
                return true;
            }
        }
        return false;
    };
    Parser.prototype.pushInSyntaxTable = function (iIndex, sSymbol, pOperation) {
        var pSyntaxTable = this._pSyntaxTable;
        if (!pSyntaxTable[iIndex]) {
            pSyntaxTable[iIndex] = {};
        }
        if (isDef(pSyntaxTable[iIndex][sSymbol])) {
            this._error(2001, {
                stateIndex: iIndex,
                grammarSymbol: this.convertGrammarSymbol(sSymbol),
                oldOperation: this._pSyntaxTable[iIndex][sSymbol],
                newOperation: pOperation
            });
        }
        pSyntaxTable[iIndex][sSymbol] = pOperation;
    };
    Parser.prototype.addStateLink = function (pState, pNextState, sSymbol) {
        var isAddState = pState.addNextState(sSymbol, pNextState);
        if (!isAddState) {
            this._error(2002, {
                stateIndex: pState.index,
                oldNextStateIndex: pState.getNextStateBySymbol(sSymbol),
                newNextStateIndex: pNextState.index,
                grammarSymbol: this.convertGrammarSymbol(sSymbol)
            });
        }
    };
    Parser.prototype.firstTerminal = function (sSymbol) {
        if (this.isTerminal(sSymbol)) {
            return null;
        }
        if (isDef(this._pFirstTerminalsDMap[sSymbol])) {
            return this._pFirstTerminalsDMap[sSymbol];
        }
        var i = null, j = 0, k = null;
        var pRulesMap = this._pRulesDMap[sSymbol];
        var pTempRes = {};
        var pRes;
        var pRight;
        var isFinish;
        pRes = this._pFirstTerminalsDMap[sSymbol] = {};
        if (this.hasEmptyRule(sSymbol)) {
            pRes["EMPTY"] = true;
        }
        for(i in pRulesMap) {
            isFinish = false;
            pRight = pRulesMap[i].right;
            for(j = 0; j < pRight.length; j++) {
                if (pRight[j] === sSymbol) {
                    if (pRes["EMPTY"]) {
                        continue;
                    }
                    isFinish = true;
                    break;
                }
                pTempRes = this.firstTerminal(pRight[j]);
                if (isNull(pTempRes)) {
                    pRes[pRight[j]] = true;
                } else {
                    for(k in pTempRes) {
                        pRes[k] = true;
                    }
                }
                if (!this.hasEmptyRule(pRight[j])) {
                    isFinish = true;
                    break;
                }
            }
            if (!isFinish) {
                pRes["EMPTY"] = true;
            }
        }
        return pRes;
    };
    Parser.prototype.followTerminal = function (sSymbol) {
        if (isDef(this._pFollowTerminalsDMap[sSymbol])) {
            return this._pFollowTerminalsDMap[sSymbol];
        }
        var i = null, j = null, k = 0, l = 0, m = null;
        var pRulesDMap = this._pRulesDMap;
        var pTempRes;
        var pRes;
        var pRight;
        var isFinish;
        pRes = this._pFollowTerminalsDMap[sSymbol] = {};
        for(i in pRulesDMap) {
            for(j in pRulesDMap[i]) {
                pRight = pRulesDMap[i][j].right;
                for(k = 0; k < pRight.length; k++) {
                    if (pRight[k] === sSymbol) {
                        if (k === pRight.length - 1) {
                            pTempRes = this.followTerminal(pRulesDMap[i][j].left);
                            for(m in pTempRes) {
                                pRes[m] = true;
                            }
                        } else {
                            isFinish = false;
                            for(l = k + 1; l < pRight.length; l++) {
                                pTempRes = this.firstTerminal(pRight[l]);
                                if (isNull(pTempRes)) {
                                    pRes[pRight[l]] = true;
                                    isFinish = true;
                                    break;
                                } else {
                                    for(m in pTempRes) {
                                        pRes[m] = true;
                                    }
                                }
                                if (!pTempRes["EMPTY"]) {
                                    isFinish = true;
                                    break;
                                }
                            }
                            if (!isFinish) {
                                pTempRes = this.followTerminal(pRulesDMap[i][j].left);
                                for(m in pTempRes) {
                                    pRes[m] = true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return pRes;
    };
    Parser.prototype.firstTerminalForSet = function (pSet, pExpected) {
        var i = 0, j = null;
        var pTempRes;
        var pRes = {};
        var isEmpty;
        for(i = 0; i < pSet.length; i++) {
            pTempRes = this.firstTerminal(pSet[i]);
            if (isNull(pTempRes)) {
                pRes[pSet[i]] = true;
            }
            isEmpty = false;
            for(j in pTempRes) {
                if (j === "EMPTY") {
                    isEmpty = true;
                    continue;
                }
                pRes[j] = true;
            }
            if (!isEmpty) {
                return pRes;
            }
        }
        for(j in pExpected) {
            pRes[j] = true;
        }
        return pRes;
    };
    Parser.prototype.generateRules = function (sGrammarSource) {
        var pAllRuleList = sGrammarSource.split(/\r?\n/);
        var pTempRule;
        var pRule;
        var isLexerBlock = false;
        this._pRulesDMap = {};
        this._pAdditionalFuncInfoList = [];
        this._pRuleCreationModeMap = {};
        this._pGrammarSymbols = {};
        var i = 0, j = 0;
        var isAllNodeMode = bf.testAll(this._eParseMode, EParseMode.k_AllNode);
        var isNegateMode = bf.testAll(this._eParseMode, EParseMode.k_Negate);
        var isAddMode = bf.testAll(this._eParseMode, EParseMode.k_Add);
        var pSymbolsWithNodeMap = this._pRuleCreationModeMap;
        for(i = 0; i < pAllRuleList.length; i++) {
            if (pAllRuleList[i] === "" || pAllRuleList[i] === "\r") {
                continue;
            }
            pTempRule = pAllRuleList[i].split(/\s* \s*/);
            if (isLexerBlock) {
                if ((pTempRule.length === 3 || (pTempRule.length === 4 && pTempRule[3] === "")) && ((pTempRule[2][0] === "\"" || pTempRule[2][0] === "'") && pTempRule[2].length > 3)) {
                    if (pTempRule[2][0] !== pTempRule[2][pTempRule[2].length - 1]) {
                        this._error(2003, {
                            unexpectedSymbol: pTempRule[2][pTempRule[2].length - 1],
                            expectedSymbol: pTempRule[2][0],
                            grammarLine: i
                        });
                    }
                    pTempRule[2] = pTempRule[2].slice(1, pTempRule[2].length - 1);
                    var ch = pTempRule[2][0];
                    var sName;
                    if ((ch === "_") || (ch >= "a" && ch <= "z") || (ch >= "A" && ch <= "Z")) {
                        sName = this._pLexer.addKeyword(pTempRule[2], pTempRule[0]);
                    } else {
                        sName = this._pLexer.addPunctuator(pTempRule[2], pTempRule[0]);
                    }
                    this._pGrammarSymbols[sName] = pTempRule[2];
                }
                continue;
            }
            if (pTempRule[0] === "--LEXER--") {
                isLexerBlock = true;
                continue;
            }
            if (isDef(this._pRulesDMap[pTempRule[0]]) === false) {
                this._pRulesDMap[pTempRule[0]] = {};
            }
            pRule = {
                left: pTempRule[0],
                right: [],
                index: 0
            };
            this._pSymbolMap[pTempRule[0]] = true;
            this._pGrammarSymbols[pTempRule[0]] = pTempRule[0];
            if (isAllNodeMode) {
                pSymbolsWithNodeMap[pTempRule[0]] = ENodeCreateMode.k_Default;
            } else if (isNegateMode && !isDef(pSymbolsWithNodeMap[pTempRule[0]])) {
                pSymbolsWithNodeMap[pTempRule[0]] = ENodeCreateMode.k_Default;
            } else if (isAddMode && !isDef(pSymbolsWithNodeMap[pTempRule[0]])) {
                pSymbolsWithNodeMap[pTempRule[0]] = ENodeCreateMode.k_Not;
            }
            for(j = 2; j < pTempRule.length; j++) {
                if (pTempRule[j] === "") {
                    continue;
                }
                if (pTempRule[j] === "--AN") {
                    if (isAddMode) {
                        pSymbolsWithNodeMap[pTempRule[0]] = ENodeCreateMode.k_Necessary;
                    }
                    continue;
                }
                if (pTempRule[j] === "--NN") {
                    if (isNegateMode && !isAllNodeMode) {
                        pSymbolsWithNodeMap[pTempRule[0]] = ENodeCreateMode.k_Not;
                    }
                    continue;
                }
                if (pTempRule[j] === "--F") {
                    if ((!pTempRule[j + 1] || pTempRule[j + 1].length === 0)) {
                        this._error(2004, {
                            grammarLine: i
                        });
                    }
                    var pFuncInfo = {
                        name: pTempRule[j + 1],
                        position: pRule.right.length,
                        rule: pRule
                    };
                    this._pAdditionalFuncInfoList.push(pFuncInfo);
                    j++;
                    continue;
                }
                if (pTempRule[j][0] === "'" || pTempRule[j][0] === "\"") {
                    if (pTempRule[j].length !== 3) {
                        this._error(2005, {
                            badKeyword: pTempRule[j],
                            grammarLine: i
                        });
                    }
                    if (pTempRule[j][0] !== pTempRule[j][2]) {
                        this._error(2003, {
                            unexpectedSymbol: pTempRule[j][2],
                            expectedSymbol: pTempRule[j][0],
                            grammarLine: i
                        });
                    }
                    var sName = this._pLexer.addPunctuator(pTempRule[j][1]);
                    pRule.right.push(sName);
                    this._pSymbolMap[sName] = true;
                } else {
                    pRule.right.push(pTempRule[j]);
                    this._pSymbolMap[pTempRule[j]] = true;
                }
            }
            pRule.index = this._nRules;
            this._pRulesDMap[pTempRule[0]][pRule.index] = pRule;
            this._nRules += 1;
        }
    };
    Parser.prototype.generateFunctionByStateMap = function () {
        if (isNull(this._pAdditionalFunctionsMap)) {
            return;
        }
        var pStateList = this._pStateList;
        var pFuncInfoList = this._pAdditionalFuncInfoList;
        var pFuncInfo;
        var pRule;
        var iPos = 0;
        var pFunc;
        var sGrammarSymbol;
        var i = 0, j = 0;
        var pFuncByStateDMap = {};
        pFuncByStateDMap = this._pAdidtionalFunctByStateDMap = {};
        for(i = 0; i < pFuncInfoList.length; i++) {
            pFuncInfo = pFuncInfoList[i];
            pFunc = this._pAdditionalFunctionsMap[pFuncInfo.name];
            if (!isDef(pFunc)) {
                continue;
            }
            pRule = pFuncInfo.rule;
            iPos = pFuncInfo.position;
            sGrammarSymbol = pRule.right[iPos - 1];
            for(j = 0; j < pStateList.length; j++) {
                if (pStateList[j].hasRule(pRule, iPos)) {
                    if (!isDef(pFuncByStateDMap[pStateList[j].index])) {
                        pFuncByStateDMap[pStateList[j].index] = {};
                    }
                    pFuncByStateDMap[pStateList[j].index][sGrammarSymbol] = pFunc;
                }
            }
        }
    };
    Parser.prototype.generateFirstState = function (eType) {
        if (eType === EParserType.k_LR0) {
            this.generateFirstState_LR0();
        } else {
            this.generateFirstState_LR();
        }
    };
    Parser.prototype.generateFirstState_LR0 = function () {
        var pState = new State();
        var pItem = new Item(this._pRulesDMap["S"][0], 0);
        this.pushBaseItem(pItem);
        pState.push(pItem);
        this.closure_LR0(pState);
        this.pushState(pState);
    };
    Parser.prototype.generateFirstState_LR = function () {
        var pState = new State();
        var pExpected = {};
        pExpected["$"] = true;
        pState.push(new Item(this._pRulesDMap["S"][0], 0, pExpected));
        this.closure_LR(pState);
        this.pushState(pState);
    };
    Parser.prototype.closure = function (pState, eType) {
        if (eType === EParserType.k_LR0) {
            return this.closure_LR0(pState);
        } else {
            this.closure_LR(pState);
        }
    };
    Parser.prototype.closure_LR0 = function (pState) {
        var pItemList = pState.items;
        var i = 0, j = null;
        var sSymbol;
        for(i = 0; i < pItemList.length; i++) {
            sSymbol = pItemList[i].mark();
            if (sSymbol !== "END" && (!this.isTerminal(sSymbol))) {
                for(j in this._pRulesDMap[sSymbol]) {
                    pState.tryPush_LR0(this._pRulesDMap[sSymbol][j], 0);
                }
            }
        }
        return pState;
    };
    Parser.prototype.closure_LR = function (pState) {
        var pItemList = (pState.items);
        var i = 0, j = null, k = null;
        var sSymbol;
        var pSymbols;
        var pTempSet;
        var isNewExpected = false;
        while(true) {
            if (i === pItemList.length) {
                if (!isNewExpected) {
                    break;
                }
                i = 0;
                isNewExpected = false;
            }
            sSymbol = pItemList[i].mark();
            if (sSymbol !== "END" && (!this.isTerminal(sSymbol))) {
                pTempSet = pItemList[i].rule.right.slice(pItemList[i].position + 1);
                pSymbols = this.firstTerminalForSet(pTempSet, pItemList[i].expectedSymbols);
                for(j in this._pRulesDMap[sSymbol]) {
                    for(k in pSymbols) {
                        if (pState.tryPush_LR(this._pRulesDMap[sSymbol][j], 0, k)) {
                            isNewExpected = true;
                        }
                    }
                }
            }
            i++;
        }
        return pState;
    };
    Parser.prototype.nexeState = function (pState, sSymbol, eType) {
        if (eType === EParserType.k_LR0) {
            return this.nextState_LR0(pState, sSymbol);
        } else {
            return this.nextState_LR(pState, sSymbol);
        }
    };
    Parser.prototype.nextState_LR0 = function (pState, sSymbol) {
        var pItemList = pState.items;
        var i = 0;
        var pNewState = new State();
        for(i = 0; i < pItemList.length; i++) {
            if (sSymbol === pItemList[i].mark()) {
                pNewState.push(new Item(pItemList[i].rule, pItemList[i].position + 1));
            }
        }
        return pNewState;
    };
    Parser.prototype.nextState_LR = function (pState, sSymbol) {
        var pItemList = pState.items;
        var i = 0;
        var pNewState = new State();
        for(i = 0; i < pItemList.length; i++) {
            if (sSymbol === pItemList[i].mark()) {
                pNewState.push(new Item(pItemList[i].rule, pItemList[i].position + 1, pItemList[i].expectedSymbols));
            }
        }
        return pNewState;
    };
    Parser.prototype.deleteNotBaseItems = function () {
        var i = 0;
        for(i = 0; i < this._pStateList.length; i++) {
            this._pStateList[i].deleteNotBase();
        }
    };
    Parser.prototype.closureForItem = function (pRule, iPos) {
        var sIndex = "";
        sIndex += pRule.index + "_" + iPos;
        var pState = this._pStatesTempMap[sIndex];
        if (isDef(pState)) {
            return pState;
        } else {
            var pExpected = {};
            pExpected["##"] = true;
            pState = new State();
            pState.push(new Item(pRule, iPos, pExpected));
            this.closure_LR(pState);
            this._pStatesTempMap[sIndex] = pState;
            return pState;
        }
    };
    Parser.prototype.addLinkExpected = function (pItem, pItemX) {
        var pTable = this._pExpectedExtensionDMap;
        var iIndex = pItem.index;
        if (!isDef(pTable[iIndex])) {
            pTable[iIndex] = {};
        }
        pTable[iIndex][pItemX.index] = true;
    };
    Parser.prototype.determineExpected = function (pTestState, sSymbol) {
        var pStateX = pTestState.getNextStateBySymbol(sSymbol);
        if (isNull(pStateX)) {
            return;
        }
        var pItemListX = pStateX.items;
        var pItemList = pTestState.items;
        var pState;
        var pItem;
        var i = 0, j = 0, k = null;
        var nBaseItemTest = pTestState.numBaseItems;
        var nBaseItemX = pStateX.numBaseItems;
        for(i = 0; i < nBaseItemTest; i++) {
            pState = this.closureForItem(pItemList[i].rule, pItemList[i].position);
            for(j = 0; j < nBaseItemX; j++) {
                pItem = pState.hasChildItem(pItemListX[j]);
                if (pItem) {
                    var pExpected = pItem.expectedSymbols;
                    for(k in pExpected) {
                        if (k === "##") {
                            this.addLinkExpected(pItemList[i], pItemListX[j]);
                        } else {
                            pItemListX[j].addExpected(k);
                        }
                    }
                }
            }
        }
    };
    Parser.prototype.generateLinksExpected = function () {
        var i = 0, j = null;
        var pStates = this._pStateList;
        for(i = 0; i < pStates.length; i++) {
            for(j in this._pSymbolMap) {
                this.determineExpected(pStates[i], j);
            }
        }
    };
    Parser.prototype.expandExpected = function () {
        var pItemList = this._pBaseItemList;
        var pTable = this._pExpectedExtensionDMap;
        var i = 0, j = null;
        var sSymbol = null;
        var isNewExpected = false;
        pItemList[0].addExpected("$");
        pItemList[0].isNewExpected = true;
        while(true) {
            if (i === pItemList.length) {
                if (!isNewExpected) {
                    break;
                }
                isNewExpected = false;
                i = 0;
            }
            if (pItemList[i].isNewExpected) {
                var pExpected = pItemList[i].expectedSymbols;
                for(sSymbol in pExpected) {
                    for(j in pTable[i]) {
                        if (pItemList[j].addExpected(sSymbol)) {
                            isNewExpected = true;
                        }
                    }
                }
            }
            pItemList[i].isNewExpected = false;
            i++;
        }
    };
    Parser.prototype.generateStates = function (eType) {
        if (eType === EParserType.k_LR0) {
            this.generateStates_LR0();
        } else if (eType === EParserType.k_LR1) {
            this.generateStates_LR();
        } else if (eType === EParserType.k_LALR) {
            this.generateStates_LALR();
        }
    };
    Parser.prototype.generateStates_LR0 = function () {
        this.generateFirstState_LR0();
        var i = 0;
        var pStateList = this._pStateList;
        var sSymbol = null;
        var pState;
        for(i = 0; i < pStateList.length; i++) {
            for(sSymbol in this._pSymbolMap) {
                pState = this.nextState_LR0(pStateList[i], sSymbol);
                if (!pState.isEmpty()) {
                    pState = this.tryAddState(pState, EParserType.k_LR0);
                    this.addStateLink(pStateList[i], pState, sSymbol);
                }
            }
        }
    };
    Parser.prototype.generateStates_LR = function () {
        this._pFirstTerminalsDMap = {};
        this.generateFirstState_LR();
        var i = 0;
        var pStateList = this._pStateList;
        var sSymbol = null;
        var pState;
        for(i = 0; i < pStateList.length; i++) {
            for(sSymbol in this._pSymbolMap) {
                pState = this.nextState_LR(pStateList[i], sSymbol);
                if (!pState.isEmpty()) {
                    pState = this.tryAddState(pState, EParserType.k_LR1);
                    this.addStateLink(pStateList[i], pState, sSymbol);
                }
            }
        }
    };
    Parser.prototype.generateStates_LALR = function () {
        this._pStatesTempMap = {};
        this._pBaseItemList = [];
        this._pExpectedExtensionDMap = {};
        this._pFirstTerminalsDMap = {};
        this.generateStates_LR0();
        this.deleteNotBaseItems();
        this.generateLinksExpected();
        this.expandExpected();
        var i = 0;
        var pStateList = this._pStateList;
        for(i = 0; i < pStateList.length; i++) {
            this.closure_LR(pStateList[i]);
        }
    };
    Parser.prototype.calcBaseItem = function () {
        var num = 0;
        var i = 0;
        for(i = 0; i < this._pStateList.length; i++) {
            num += this._pStateList[i].numBaseItems;
        }
        return num;
    };
    Parser.prototype.printExpectedTable = function () {
        var i = null, j = null;
        var sMsg = "";
        for(i in this._pExpectedExtensionDMap) {
            sMsg += "State " + this._pBaseItemList[i].state.index + ":   ";
            sMsg += this._pBaseItemList[i].toString() + "  |----->\n";
            for(j in this._pExpectedExtensionDMap[i]) {
                sMsg += "\t\t\t\t\t" + "State " + this._pBaseItemList[j].state.index + ":   ";
                sMsg += this._pBaseItemList[j].toString() + "\n";
            }
            sMsg += "\n";
        }
        return sMsg;
    };
    Parser.prototype.addReducing = function (pState) {
        var i = 0, j = null;
        var pItemList = pState.items;
        for(i = 0; i < pItemList.length; i++) {
            if (pItemList[i].mark() === "END") {
                if (pItemList[i].rule.left === "S") {
                    this.pushInSyntaxTable(pState.index, "$", this._pSuccessOperation);
                } else {
                    var pExpected = pItemList[i].expectedSymbols;
                    for(j in pExpected) {
                        this.pushInSyntaxTable(pState.index, j, this._pReduceOperationsMap[pItemList[i].rule.index]);
                    }
                }
            }
        }
    };
    Parser.prototype.addShift = function (pState) {
        var i = null;
        var pStateMap = pState.nextStates;
        for(i in pStateMap) {
            this.pushInSyntaxTable(pState.index, i, this._pShiftOperationsMap[pStateMap[i].index]);
        }
    };
    Parser.prototype.buildSyntaxTable = function () {
        this._pStateList = [];
        var pStateList = this._pStateList;
        var pState;
        this.generateStates(this._eType);
        this._pSyntaxTable = {};
        this._pReduceOperationsMap = {};
        this._pShiftOperationsMap = {};
        this._pSuccessOperation = {
            type: EOperationType.k_Success
        };
        var i = 0, j = null, k = null;
        for(i = 0; i < pStateList.length; i++) {
            this._pShiftOperationsMap[pStateList[i].index] = {
                type: EOperationType.k_Shift,
                index: pStateList[i].index
            };
        }
        for(j in this._pRulesDMap) {
            for(k in this._pRulesDMap[j]) {
                this._pReduceOperationsMap[k] = {
                    type: EOperationType.k_Reduce,
                    rule: this._pRulesDMap[j][k]
                };
            }
        }
        for(var i = 0; i < pStateList.length; i++) {
            pState = pStateList[i];
            this.addReducing(pState);
            this.addShift(pState);
        }
    };
    Parser.prototype.readToken = function () {
        return this._pLexer.getNextToken();
    };
    Parser.prototype.operationAdditionalAction = function (iStateIndex, sGrammarSymbol) {
        var pFuncDMap = this._pAdidtionalFunctByStateDMap;
        if (!isNull(this._pAdidtionalFunctByStateDMap) && isDef(pFuncDMap[iStateIndex]) && isDef(pFuncDMap[iStateIndex][sGrammarSymbol])) {
            return pFuncDMap[iStateIndex][sGrammarSymbol].call(this);
        }
        return EOperationType.k_Ok;
    };
    Parser.prototype.resumeParse = function () {
        try  {
            var pTree = this._pSyntaxTree;
            var pStack = this._pStack;
            var pSyntaxTable = this._pSyntaxTable;
            var isStop = false;
            var isError = false;
            var isPause = false;
            var pToken = isNull(this._pToken) ? this.readToken() : this._pToken;
            var pOperation;
            var iRuleLength;
            var eAdditionalOperationCode;
            var iStateIndex = 0;
            while(!isStop) {
                pOperation = pSyntaxTable[pStack[pStack.length - 1]][pToken.name];
                if (isDef(pOperation)) {
                    switch(pOperation.type) {
                        case EOperationType.k_Success:
                            isStop = true;
                            break;
                        case EOperationType.k_Shift:
                            iStateIndex = pOperation.index;
                            pStack.push(iStateIndex);
                            pTree.addNode(pToken);
                            eAdditionalOperationCode = this.operationAdditionalAction(iStateIndex, pToken.name);
                            if (eAdditionalOperationCode === EOperationType.k_Error) {
                                isError = true;
                                isStop = true;
                            } else if (eAdditionalOperationCode === EOperationType.k_Pause) {
                                this._pToken = null;
                                isStop = true;
                                isPause = true;
                            } else if (eAdditionalOperationCode === EOperationType.k_Ok) {
                                pToken = this.readToken();
                            }
                            break;
                        case EOperationType.k_Reduce:
                            iRuleLength = pOperation.rule.right.length;
                            pStack.length -= iRuleLength;
                            iStateIndex = pSyntaxTable[pStack[pStack.length - 1]][pOperation.rule.left].index;
                            pStack.push(iStateIndex);
                            pTree.reduceByRule(pOperation.rule, this._pRuleCreationModeMap[pOperation.rule.left]);
                            eAdditionalOperationCode = this.operationAdditionalAction(iStateIndex, pOperation.rule.left);
                            if (eAdditionalOperationCode === EOperationType.k_Error) {
                                isError = true;
                                isStop = true;
                            } else if (eAdditionalOperationCode === EOperationType.k_Pause) {
                                this._pToken = pToken;
                                isStop = true;
                                isPause = true;
                            }
                            break;
                    }
                } else {
                    isError = true;
                    isStop = true;
                }
            }
        } catch (e) {
            this._sFileName = "stdin";
            return EParserCode.k_Error;
        }
        if (isPause) {
            return EParserCode.k_Pause;
        }
        if (!isError) {
            pTree.setRoot();
            if (isDef(this._fnFinishCallback)) {
                this._fnFinishCallback.call(this._pCaller, EParserCode.k_Ok, this.getParseFileName());
            }
            this._sFileName = "stdin";
            return EParserCode.k_Ok;
        } else {
            this._error(2051, pToken);
            if (isDef(this._fnFinishCallback)) {
                this._fnFinishCallback.call(this._pCaller, EParserCode.k_Error, this.getParseFileName());
            }
            this._sFileName = "stdin";
            return EParserCode.k_Error;
        }
    };
    Parser.prototype.statesToString = function (isBaseOnly) {
        if (typeof isBaseOnly === "undefined") { isBaseOnly = true; }
        if (!isDef(this._pStateList)) {
            return null;
        }
        var sMsg = "";
        var i = 0;
        for(i = 0; i < this._pStateList.length; i++) {
            sMsg += this._pStateList[i].toString(isBaseOnly);
            sMsg += " ";
        }
        return sMsg;
    };
    Parser.prototype.operationToString = function (pOperation) {
        var sOperation = null;
        switch(pOperation.type) {
            case EOperationType.k_Shift:
                sOperation = "SHIFT to state " + pOperation.index.toString();
                break;
            case EOperationType.k_Reduce:
                sOperation = "REDUCE by rule { " + this.ruleToString(pOperation.rule) + " }";
                break;
            case EOperationType.k_Success:
                sOperation = "SUCCESS";
                break;
        }
        return sOperation;
    };
    Parser.prototype.ruleToString = function (pRule) {
        var sRule;
        sRule = pRule.left + " : " + pRule.right.join(" ");
        return sRule;
    };
    Parser.prototype.convertGrammarSymbol = function (sSymbol) {
        if (!this.isTerminal(sSymbol)) {
            return sSymbol;
        } else {
            return this._pLexer.getTerminalValueByName(sSymbol);
        }
    };
    return Parser;
})();
exports.Parser = Parser;
var akra;
(function (akra) {
    (function (util) {
        var EffectParser = (function (_super) {
            __extends(EffectParser, _super);
            function EffectParser() {
                _super.call(this);
                this._pIncludedFilesMap = null;
                this.addAdditionalFunction("addType", this._addType);
                this.addAdditionalFunction("includeCode", this._includeCode);
            }
            EffectParser.prototype.defaultInit = function () {
                _super.prototype.defaultInit.call(this);
                this.addTypeId("float2");
                this.addTypeId("float3");
                this.addTypeId("float4");
                this.addTypeId("float2x2");
                this.addTypeId("float3x3");
                this.addTypeId("float4x4");
                this.addTypeId("int2");
                this.addTypeId("int3");
                this.addTypeId("int4");
                this.addTypeId("bool2");
                this.addTypeId("bool3");
                this.addTypeId("bool4");
                this._pIncludedFilesMap = {};
                this._pIncludedFilesMap[this.getParseFileName()] = true;
            };
            EffectParser.prototype._addIncludedFile = function (sFileName) {
                this._pIncludedFilesMap[sFileName] = true;
            };
            EffectParser.prototype._addType = function () {
                var pTree = this.getSyntaxTree();
                var pNode = pTree.getLastNode();
                var sTypeId;
                sTypeId = pNode.children[pNode.children.length - 2].value;
                this.addTypeId(sTypeId);
                return EOperationType.k_Ok;
            };
            EffectParser.prototype.normalizeIncludePath = function (sFile) {
                var pCurrentPath = null;
                var pFile = util.uri(sFile);
                if (!isNull(pFile.host) || util.pathinfo(pFile.path).isAbsolute()) {
                    return sFile;
                }
                pCurrentPath = util.uri(this.getParseFileName());
                pCurrentPath.path = util.pathinfo(pCurrentPath.path).dirname + "/" + sFile;
                return pCurrentPath.toString();
            };
            EffectParser.prototype._includeCode = function () {
                var pTree = this.getSyntaxTree();
                var pNode = pTree.getLastNode();
                var sFile = pNode.value;
                sFile = this.normalizeIncludePath(sFile.substr(1, sFile.length - 2));
                if (this._pIncludedFilesMap[sFile]) {
                    return EOperationType.k_Ok;
                } else {
                    var pParserState = this._saveState();
                    var me = this;
                    var pFile = io.fopen(sFile, "r+t");
                    pFile.read(function (err, sData) {
                        if (err) {
 {
                                logger.setSourceLocation("util/EffectParser.ts", 96);
                                logger.error("Can not read file");
                            }
                            ;
                        } else {
                            pParserState.source = pParserState.source.substr(0, pParserState.index) + sData + pParserState.source.substr(pParserState.index);
                            me._loadState(pParserState);
                            me._addIncludedFile(sFile);
                            me.resume();
                        }
                    });
                    return EOperationType.k_Pause;
                }
            };
            EffectParser.prototype._saveState = function () {
                var pState = _super.prototype._saveState.call(this);
                pState["includeFiles"] = this._pIncludedFilesMap;
                return pState;
            };
            EffectParser.prototype._loadState = function (pState) {
                _super.prototype._loadState.call(this, pState);
                this._pIncludedFilesMap = pState["includeFiles"];
            };
            return EffectParser;
        })(Parser);
        util.EffectParser = EffectParser;        
        util.parser = new EffectParser();
        function initAFXParser(sGrammar) {
            util.parser.init(sGrammar, akra.EParseMode.k_Add | akra.EParseMode.k_Negate | akra.EParseMode.k_Optimize | akra.EParseMode.k_DebugMode);
        }
        util.initAFXParser = initAFXParser;
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var EffectData = (function (_super) {
                    __extends(EffectData, _super);
                    function EffectData() {
                        _super.apply(this, arguments);

                        this._pSyntaxTree = null;
                    }
                    EffectData.prototype.loadResource = function (sFileName) {
                        var reExt = /^(.+)(\.afx|\.abf|\.fx)$/;
                        var pRes = reExt.exec(sFileName);
                        if (isNull(pRes)) {
 {
                                logger.setSourceLocation("resources/EffectData.ts", 23);
                                logger.error("Bad effect file extension. Only .afx, .fx, .abf are available");
                            }
                            ;
                            return;
                        }
                        var isBinary = pRes[pRes.length - 1] === ".abf";
                        var pComposer = this.getManager().getEngine().getComposer();
                        if (isBinary) {
                            var pFile = io.fopen(sFileName, "r+b");
                            pFile.read(function (err, pData) {
                                if (err) {
 {
                                        logger.setSourceLocation("resources/EffectData.ts", 38);
                                        logger.error("Can not read file");
                                    }
                                    ;
                                } else {
                                    me._initFromBinaryData(pData, sFileName);
                                }
                            });
                        }
                        var me = this;
                        io.fopen(sFileName, "r+t").read(function (pErr, sData) {
                            if (!isNull(pErr)) {
 {
                                    logger.setSourceLocation("resources/EffectData.ts", 48);
                                    logger.error("Can not load .afx file: '" + sFileName + "'");
                                }
                                ;
                            } else {
                                util.parser.setParseFileName(sFileName);
                                util.parser.parse(sData, me._initFromParsedEffect, me);
                            }
                        });
                        return true;
                    };
                    EffectData.prototype._initFromParsedEffect = function (eCode, sFileName) {
                        if (eCode === EParserCode.k_Error) {
                            return;
                        }
                        this._pSyntaxTree = util.parser.getSyntaxTree();
                        var pComposer = this.getManager().getEngine().getComposer();
                        if (pComposer._loadEffectFromSyntaxTree(this._pSyntaxTree, sFileName)) {
                            this.notifyLoaded();
                        }
                    };
                    EffectData.prototype._initFromBinaryData = function (pData, sFileName) {
                    };
                    return EffectData;
                })(ResourcePoolItem);
                resources.EffectData = EffectData;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var HardwareBuffer = (function (_super) {
                    __extends(HardwareBuffer, _super);
                    function HardwareBuffer() {
                        _super.call(this);
                        this._iFlags = 0;
                        this._isLocked = false;
                        this._pBackupCopy = null;
                        this._pBackupUpdated = false;
                        this._bIgnoreHardwareUpdate = false;
                        this.byteLength = 0;
                        this.length = 0;
                        this.inline = isValid();
                        this.bool = {
                            return: false
                        };
                        this.inline = isDynamic();
                        this.bool = {
                            return: (((this._iFlags) & (EHardwareBufferFlags.DYNAMIC)) != 0)
                        };
                        this.inline = isStatic();
                        this.bool = {
                            return: (((this._iFlags) & (EHardwareBufferFlags.STATIC)) != 0)
                        };
                        this.inline = isStream();
                        this.bool = {
                            return: (((this._iFlags) & (EHardwareBufferFlags.STREAM)) != 0)
                        };
                        this.inline = isReadable();
                        this.bool = {
                            return: (((this._iFlags) & (EHardwareBufferFlags.READABLE)) != 0)
                        };
                        this.inline = isBackupPresent();
                        this.bool = {
                            return: this._pBackupCopy != null
                        };
                        this.inline = isSoftware();
                        this.bool = {
                            return: (((this._iFlags) & (EHardwareBufferFlags.SOFTWARE)) != 0)
                        };
                        this.inline = isAligned();
                        this.bool = {
                            return: (((this._iFlags) & (EHardwareBufferFlags.ALIGNMENT)) != 0)
                        };
                        this.inline = isLocked();
                        this.bool = {
                            return: this._isLocked
                        };
                        this.inline = getFlags();
                        this.number = {
                            return: this._iFlags
                        };
                    }
                    HardwareBuffer.prototype.clone = function (pSrc) {
                        return false;
                    };
                    HardwareBuffer.prototype.readData = function (iOffset, iSize, ppDest) {
                        return false;
                    };
                    HardwareBuffer.prototype.writeData = function (pData, iOffset, iSize, bDiscardWholeBuffer) {
                        if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
                        return false;
                    };
                    HardwareBuffer.prototype.copyData = function (pSrcBuffer, iSrcOffset, iDstOffset, iSize, bDiscardWholeBuffer) {
                        if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
                        var pData = pSrcBuffer.lock(iSrcOffset, iSize);
                        this.writeData(pData, iDstOffset, iSize, bDiscardWholeBuffer);
                        pSrcBuffer.unlock();
                        return true;
                    };
                    HardwareBuffer.prototype.create = function (iSize, iFlags) {
                        if (typeof iFlags === "undefined") { iFlags = 0; }
                        iFlags |= EHardwareBufferFlags.STATIC;
                        if ((((iFlags) & (EHardwareBufferFlags.DYNAMIC)) != 0)) {
                            ((iFlags) &= ~(EHardwareBufferFlags.STATIC));
                            if ((((iFlags) & (EHardwareBufferFlags.BACKUP_COPY)) != 0)) {
                                ((iFlags) &= ~(EHardwareBufferFlags.READABLE));
                            }
                        }
                        this._iFlags = iFlags;
                        this.notifyCreated();
                        this.notifyRestored();
                        return true;
                    };
                    HardwareBuffer.prototype.destroy = function () {
                        this._iFlags = 0;
                        this.notifyDestroyed();
                        this.notifyUnloaded();
                    };
                    HardwareBuffer.prototype.resize = function (iSize) {
                        return false;
                    };
                    HardwareBuffer.prototype.lock = function (iOffset, iSize, iLockFlags) {
                        if (typeof iLockFlags === "undefined") { iLockFlags = EHardwareBufferFlags.READABLE; }
 {
                            logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 129);
                            logger.assert(!this.isLocked(), "Cannot lock this buffer, it is already locked!");
                        }
                        ;
                        if (arguments.length == 1) {
                            iLockFlags = arguments[0];
                            iOffset = 0;
                            iSize = this.byteLength;
                        }
                        var pResult = null;
                        if ((iOffset + iSize) > this.byteLength) {
 {
                                logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 140);
                                logger.error("Lock request out of bounds.", "HardwareBuffer::lock");
                            }
                            ;
                        } else if (this.isBackupPresent()) {
                            if (!(((iLockFlags) & (ELockFlags.WRITE)) != 0)) {
                                this._pBackupUpdated = true;
                            }
                            pResult = this._pBackupCopy.lock(iOffset, iSize, iLockFlags);
                        } else {
                            pResult = this.lockImpl(iOffset, iSize, iLockFlags);
                            this._isLocked = true;
                        }
                        this._iLockStart = iOffset;
                        this._iLockSize = iSize;
                        return pResult;
                    };
                    HardwareBuffer.prototype.unlock = function () {
 {
                            logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 164);
                            logger.assert(this.isLocked(), "Cannot unlock this buffer, it is not locked!");
                        }
                        ;
                        if (this._pBackupCopy && this._pBackupCopy.isLocked()) {
                            this._pBackupCopy.unlock();
                            this.restoreFromBackup();
                        } else {
                            this.unlockImpl();
                            this._isLocked = false;
                        }
                    };
                    HardwareBuffer.prototype.restoreFromBackup = function () {
                        if (this._pBackupCopy && this._pBackupUpdated && !this._bIgnoreHardwareUpdate) {
                            var pBackupData = this._pBackupCopy.lockImpl(this._iLockStart, this._iLockSize, ELockFlags.READ);
                            var iLockFlags;
                            if (this._iLockStart == 0 && this._iLockSize == this.byteLength) {
                                iLockFlags = ELockFlags.DISCARD;
                            } else {
                                iLockFlags = ELockFlags.NORMAL;
                            }
                            var pRealData = this.lockImpl(this._iLockStart, this._iLockSize, iLockFlags);
                            this.copyBackupToRealImpl(pRealData, pBackupData, iLockFlags);
                            this.unlockImpl();
                            this._pBackupCopy.unlockImpl();
                            this._pBackupUpdated = false;
                            return true;
                        }
                        return false;
                    };
                    HardwareBuffer.prototype.createResource = function () {
 {
                            logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 212);
                            logger.assert(!this.isResourceCreated(), "The resource has already been created.");
                        }
                        ;
                        this.notifyDisabled();
                        return true;
                    };
                    HardwareBuffer.prototype.destroyResource = function () {
                        if (this.isResourceCreated()) {
                            this.disableResource();
                            this.destroy();
                            return true;
                        }
                        return false;
                    };
                    HardwareBuffer.prototype.restoreResource = function () {
 {
                            logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 238);
                            logger.assert(this.isResourceCreated(), "The resource has not been created.");
                        }
                        ;
                        this.notifyRestored();
                        return true;
                    };
                    HardwareBuffer.prototype.disableResource = function () {
 {
                            logger.setSourceLocation("core/pool/resources/HardwareBuffer.ts", 245);
                            logger.assert(this.isResourceCreated(), "The resource has not been created.");
                        }
                        ;
                        this.notifyDisabled();
                        return true;
                    };
                    HardwareBuffer.prototype.lockImpl = function (iOffset, iSize, iLockFlags) {
                        return null;
                    };
                    HardwareBuffer.prototype.unlockImpl = function () {
                    };
                    HardwareBuffer.prototype.copyBackupToRealImpl = function (pRealData, pBackupData, iLockFlags) {
                    };
                    return HardwareBuffer;
                })(ResourcePoolItem);
                resources.HardwareBuffer = HardwareBuffer;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLPixelBuffer = (function (_super) {
            __extends(WebGLPixelBuffer, _super);
            function WebGLPixelBuffer() {
                _super.call(this);
                this._iWidth = 0;
                this._iHeight = 0;
                this._iDepth = 0;
                this._iRowPitch = 0;
                this._iSlicePitch = 0;
                this._eFormat = EPixelFormats.UNKNOWN;
                this._pCurrentLock = null;
                this._pLockedBox = null;
                this._iCurrentLockFlags = 0;
                this._pBuffer = null;
                this._iWebGLInternalFormat = 0;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
            }
            WebGLPixelBuffer.prototype.width = function () {
                return this._iWidth;
            };
            WebGLPixelBuffer.prototype.height = function () {
                return this._iHeight;
            };
            WebGLPixelBuffer.prototype.depth = function () {
                return this._iDepth;
            };
            WebGLPixelBuffer.prototype.format = function () {
                return this._eFormat;
            };
            WebGLPixelBuffer.prototype.upload = function (pData, pDestBox) {
 {
                    logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 46);
                    logger.criticalError("Upload not possible for this pixelbuffer type");
                }
                ;
            };
            WebGLPixelBuffer.prototype.download = function (pData) {
 {
                    logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 50);
                    logger.criticalError("Download not possible for this pixelbuffer type");
                }
                ;
            };
            WebGLPixelBuffer.prototype._bindToFramebuffer = function (pAttachment, iZOffset) {
 {
                    logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 54);
                    logger.criticalError("Framebuffer bind not possible for this pixelbuffer type");
                }
                ;
            };
            WebGLPixelBuffer.prototype._getWebGLFormat = function () {
                return this._iWebGLInternalFormat;
            };
            WebGLPixelBuffer.prototype._clearRTT = function (iZOffset) {
            };
            WebGLPixelBuffer.prototype.reset = function (iWidth, iHeight) {
                if (typeof iWidth === "undefined") { iWidth = this._iWidth; }
                if (typeof iHeight === "undefined") { iHeight = iWidth; }
                this._iWidth = iWidth;
                this._iHeight = iHeight;
            };
            WebGLPixelBuffer.prototype.create = function () {
                if (arguments.length === 1) {
 {
                        logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 76);
                        logger.criticalError("Invalid number of arguments. For PixelBuffer it must be six");
                    }
                    ;
                }
                var iWidth = arguments[0];
                var iHeight = arguments[1];
                var iDepth = arguments[2];
                var eFormat = arguments[3];
                var iFlags = arguments[4];
                _super.prototype.create.call(this, iFlags);
                this._iWidth = iWidth;
                this._iHeight = iHeight;
                this._iDepth = iDepth;
                this._eFormat = eFormat;
                this._iRowPitch = iWidth;
                this._iSlicePitch = iHeight * iWidth;
                this.byteLength = iHeight * iWidth * akra.pixelUtil.getNumElemBytes(eFormat);
                this._pBuffer = new pixelUtil.PixelBox(iWidth, iHeight, iDepth, eFormat);
                this._iWebGLInternalFormat = 0;
                return true;
            };
            WebGLPixelBuffer.prototype.destroy = function () {
                this._pBuffer = null;
                _super.prototype.destroy.call(this);
            };
            WebGLPixelBuffer.prototype.destroyResource = function () {
                this.destroy();
                this.notifyDestroyed();
                return true;
            };
            WebGLPixelBuffer.prototype.readData = function () {
 {
                    logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 116);
                    logger.criticalError("Reading a byte range is not implemented. Use blitToMemory.");
                }
                ;
                return false;
            };
            WebGLPixelBuffer.prototype.writeData = function () {
 {
                    logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 123);
                    logger.criticalError("Writing a byte range is not implemented. Use blitFromMemory.");
                }
                ;
                return false;
            };
            WebGLPixelBuffer.prototype.blit = function (pSource, pSrcBox, pDestBox) {
                if (arguments.length == 1) {
                    return this.blit(pSource, new geometry.Box(0, 0, 0, pSource.width, pSource.height, pSource.depth), new geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth));
                } else {
                    if (pSource === this) {
 {
                            logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 141);
                            logger.criticalError("Source must not be the same object");
                        }
                        ;
                    }
                    var pSrclock = pSource.lock(pSrcBox, ELockFlags.READ);
                    var eLockMethod = ELockFlags.NORMAL;
                    if (pDestBox.left === 0 && pDestBox.top === 0 && pDestBox.front === 0 && pDestBox.right === this._iWidth && pDestBox.bottom === this._iHeight && pDestBox.back === this._iDepth) {
                        eLockMethod = ELockFlags.DISCARD;
                    }
                    var pDstlock = this.lock(pDestBox, eLockMethod);
                    if (pDstlock.width != pSrclock.width || pDstlock.height != pSrclock.height || pDstlock.depth != pSrclock.depth) {
                        pSrclock.scale(pDstlock);
                    } else {
                        akra.pixelUtil.bulkPixelConversion(pSrclock, pDstlock);
                    }
                    this.unlock();
                    pSource.unlock();
                    return true;
                }
            };
            WebGLPixelBuffer.prototype.blitFromMemory = function () {
                var pSource;
                var pDestBox;
                pSource = arguments[0];
                if (arguments.length === 1) {
                    pDestBox = new geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth);
                    return this.blitFromMemory(pSource, pDestBox);
                } else {
                    pDestBox = arguments[1];
                }
                if (!this._pBuffer.contains(pDestBox)) {
 {
                        logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 191);
                        logger.criticalError("Destination box out of range");
                    }
                    ;
                }
                var pScaledBox;
                if (pSource.width != pDestBox.width || pSource.height != pDestBox.height || pSource.depth != pDestBox.depth) {
                    this.allocateBuffer();
                    pScaledBox = this._pBuffer.getSubBox(pDestBox);
                    pSource.scale(pScaledBox, EFilters.BILINEAR);
                } else if ((pSource.format != this._eFormat) || ((getWebGLFormat(pSource.format) == 0) && (pSource.format != EPixelFormats.R8G8B8))) {
                    this.allocateBuffer();
                    pScaledBox = this._pBuffer.getSubBox(pDestBox);
                    pixelUtil.bulkPixelConversion(pSource, pScaledBox);
                    if (this._eFormat === EPixelFormats.A4R4G4B4) {
                        convertToWebGLformat(pScaledBox, pScaledBox);
                    }
                } else {
                    this.allocateBuffer();
                    pScaledBox = pSource;
                    if (pSource.format == EPixelFormats.R8G8B8) {
                        pScaledBox.format = EPixelFormats.B8G8R8;
                        pixelUtil.bulkPixelConversion(pSource, pScaledBox);
                    }
                }
                this.upload(pScaledBox, pDestBox);
                this.freeBuffer();
                return true;
            };
            WebGLPixelBuffer.prototype.blitToMemory = function () {
                var pSrcBox;
                var pDest;
                if (arguments.length === 1) {
                    pDest = arguments[0];
                    pSrcBox = new geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth);
                    return this.blitToMemory(pSrcBox, pDest);
                } else {
                    pSrcBox = arguments[0];
                    pDest = arguments[1];
                }
                if (!this._pBuffer.contains(pSrcBox)) {
 {
                        logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 255);
                        logger.criticalError("source box out of range");
                    }
                    ;
                }
                if (pSrcBox.left == 0 && pSrcBox.right == this._iWidth && pSrcBox.top == 0 && pSrcBox.bottom == this._iHeight && pSrcBox.front == 0 && pSrcBox.back == this._iDepth && pDest.width == this._iWidth && pDest.height == this._iHeight && pDest.depth == this._iDepth && getWebGLFormat(pDest.format) != 0) {
                    this.download(pDest);
                } else {
                    this.allocateBuffer();
                    this.download(this._pBuffer);
                    if (pSrcBox.width != pDest.width || pSrcBox.height != pDest.height || pSrcBox.depth != pDest.depth) {
                        this._pBuffer.getSubBox(pSrcBox).scale(pDest, EFilters.BILINEAR);
                    } else {
                        pixelUtil.bulkPixelConversion(this._pBuffer.getSubBox(pSrcBox), pDest);
                    }
                    this.freeBuffer();
                }
                return true;
            };
            WebGLPixelBuffer.prototype.getRenderTarget = function () {
                return null;
            };
            WebGLPixelBuffer.prototype.lock = function () {
                var pLockBox = null;
                var iLockFlags = 0;
                if (isInt(arguments[0])) {
                    var iOffset;
                    var iSize;
                    if (arguments.length === 1) {
                        iLockFlags === arguments[0];
                        iOffset = 0;
                        iSize = this.byteLength;
                    } else {
                        iOffset = arguments[0];
                        iSize = arguments[1];
                        iLockFlags = (arguments.length === 3) ? arguments[2] : EHardwareBufferFlags.READABLE;
                    }
 {
                        logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 318);
                        logger.assert(!this.isLocked(), "Cannot lock this buffer, it is already locked!");
                    }
                    ;
 {
                        logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 320);
                        logger.assert(iOffset === 0 && iSize === this.byteLength, "Cannot lock memory region, most lock box or entire buffer");
                    }
                    ;
                    pLockBox = new geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth);
                }
                if (this.isBackupPresent()) {
                    if (!(((iLockFlags) & (ELockFlags.WRITE)) != 0)) {
                        this._pBackupUpdated = true;
                    }
                    this._pCurrentLock = ((this._pBackupCopy)).lock(pLockBox, iLockFlags);
                } else {
                    this._pCurrentLock = this.lockImpl(pLockBox, iLockFlags);
                    this._isLocked = true;
                }
                return this._pCurrentLock;
            };
            WebGLPixelBuffer.prototype.allocateBuffer = function () {
                if (!isNull(this._pBuffer.data)) {
                    return;
                }
                this._pBuffer.data = new Uint8Array(this.byteLength);
            };
            WebGLPixelBuffer.prototype.freeBuffer = function () {
                if ((((this._iFlags) & (EHardwareBufferFlags.STATIC)) != 0)) {
                    this._pBuffer.data = null;
                }
            };
            WebGLPixelBuffer.prototype.lockImpl = function () {
                if (arguments.length === 3) {
 {
                        logger.setSourceLocation("webgl/WebGLPixelBuffer.ts", 360);
                        logger.criticalError("lockImpl(offset,length) is not valid for PixelBuffers and should never be called");
                    }
                    ;
                }
                var pLockBox = arguments[0];
                var iLockFlags = arguments[1];
                this.allocateBuffer();
                if (!(((iLockFlags) & (ELockFlags.DISCARD)) != 0) && (((this._iFlags) & (EHardwareBufferFlags.READABLE)) != 0)) {
                    this.download(this._pBuffer);
                }
                this._iCurrentLockFlags = iLockFlags;
                this._pLockedBox = pLockBox;
                return this._pBuffer.getSubBox(pLockBox);
            };
            WebGLPixelBuffer.prototype.unlockImpl = function () {
                if ((((this._iCurrentLockFlags) & (ELockFlags.WRITE)) != 0)) {
                    this.upload(this._pCurrentLock, this._pLockedBox);
                }
                this.freeBuffer();
            };
            return WebGLPixelBuffer;
        })(core.pool.resources.HardwareBuffer);
        webgl.WebGLPixelBuffer = WebGLPixelBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                (function (ETextureForcedFormatFlags) {
                    ETextureForcedFormatFlags._map = [];
                    ETextureForcedFormatFlags.FORCEMIPLEVELS = 0;
                    ETextureForcedFormatFlags._map[1] = "FORCEFORMAT";
                    ETextureForcedFormatFlags.FORCEFORMAT = 1;
                    ETextureForcedFormatFlags._map[2] = "FORCESIZE";
                    ETextureForcedFormatFlags.FORCESIZE = 2;
                })(resources.ETextureForcedFormatFlags || (resources.ETextureForcedFormatFlags = {}));
                var ETextureForcedFormatFlags = resources.ETextureForcedFormatFlags;
                var Texture = (function (_super) {
                    __extends(Texture, _super);
                    function Texture() {
                        _super.call(this);
                        this._iFlags = ETextureFlags.DEFAULT;
                        this._iWidth = 512;
                        this._iHeight = 512;
                        this._iDepth = 1;
                        this._eFormat = EPixelFormats.UNKNOWN;
                        this._nMipLevels = 0;
                        this._nRequestedMipLevels = 0;
                        this._eTextureType = ETextureTypes.TEXTURE_2D;
                        this._pParams = {};
                        this._isInternalResourceCreated = false;
                        this._isMipmapsHardwareGenerated = false;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                        this.inline = getFlags();
                        this.number = {
                            return: this._iFlags
                        };
                        this.inline = setFlags(iFlags, ETextureFlags);
                    }
                    Texture.prototype.width = function () {
                        return this._iWidth;
                    };
                    Texture.prototype.height = function () {
                        return this._iHeight;
                    };
                    Texture.prototype.depth = function () {
                        return this._iDepth;
                    };
                    Texture.prototype.format = function () {
                        return this._eFormat;
                    };
                    Texture.prototype.textureType = function () {
                        return this._eTextureType;
                    };
                    Texture.prototype.mipLevels = function () {
                        return this._nMipLevels;
                    };
                    return Texture;
                })(ResourcePoolItem);
                resources.Texture = Texture;                
                void {
                    this: ,
                    _iFlags:  = iFlags
                };
                inline;
                isTexture2D();
                bool;
 {
                    return this._eTextureType === ETextureTypes.TEXTURE_2D;
                }
                inline;
                isTextureCube();
                bool;
 {
                    return this._eTextureType === ETextureTypes.TEXTURE_CUBE_MAP;
                }
                inline;
                isCompressed();
                bool;
 {
                    return (this._eFormat >= EPixelFormats.DXT1 && this._eFormat <= EPixelFormats.DXT5) || (this._eFormat >= EPixelFormats.PVRTC_RGB2 && this._eFormat <= EPixelFormats.PVRTC_RGBA4);
                }
                inline;
                isValid();
                bool;
 {
                    return isDefAndNotNull(this._isInternalResourceCreated);
                }
                inline;
                calculateSize();
                number;
 {
                    return this.getNumFaces() * pixelUtil.getMemorySize(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                }
                inline;
                getNumFaces();
                number;
 {
                    return this._eTextureType === ETextureTypes.TEXTURE_CUBE_MAP ? 6 : 1;
                }
                inline;
                getSize();
                number;
 {
                    return this.getNumFaces() * pixelUtil.getMemorySize(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                }
                reset();
                void ;
                reset(iSize, number);
                void ;
                reset(iWidth, number, iHeight, number);
                void ;
                reset(iWidth ?  : number = this._iWidth, iHeight ?  : number = iWidth);
                void {
                    this: ,
                    _iWidth:  = iWidth
                };
                this._iHeight = iHeight;
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
getBuffer(iFace ?  : number, iMipmap ?  : number);
IPixelBuffer;
 {
    return null;
}
create(iWidth, number, iHeight, number, iDepth, number, cFillColor ?  : IColor, eFlags ?  : ETextureFlags, nMipLevels ?  : number, nFaces ?  : number, eTextureType ?  : ETextureTypes, eFormat ?  : EPixelFormats);
bool;
create(iWidth, number, iHeight, number, iDepth, number, pPixels ?  : Array, eFlags ?  : ETextureFlags, nMipLevels ?  : number, nFaces ?  : number, eTextureType ?  : ETextureTypes, eFormat ?  : EPixelFormats);
bool;
create(iWidth, number, iHeight, number, iDepth, number, pPixels ?  : ArrayBufferView, eFlags ?  : ETextureFlags, nMipLevels ?  : number, nFaces ?  : number, eTextureType ?  : ETextureTypes, eFormat ?  : EPixelFormats);
bool;
create(iWidth, number, iHeight, number, iDepth ?  : number = 1, pPixels ?  : any = null, eFlags ?  : ETextureFlags = ETextureFlags.DEFAULT, nMipLevels ?  : number = 0, nFaces ?  : number = 0, eTextureType ?  : ETextureTypes = ETextureTypes.TEXTURE_2D, eFormat ?  : EPixelFormats = EPixelFormats.B8G8R8);
bool;
 {
    if (eTextureType != ETextureTypes.TEXTURE_2D && eTextureType != ETextureTypes.TEXTURE_CUBE_MAP) {
 {
            logger.setSourceLocation("core/pool/resources/Texture.ts", 173);
            logger.criticalError("Заданный тип текстуры не поддреживается");
        }
        ;
        return false;
    }
    this._eTextureType = eTextureType;
    this._iWidth = iWidth;
    this._iHeight = iHeight;
    this._iDepth = iDepth;
    this._iFlags = eFlags;
    this._nMipLevels = nMipLevels;
    this._eFormat = eFormat;
    if (isArray(pPixels)) {
        pPixels = new Uint8Array(pPixels);
        return this.loadRawData(pPixels, iWidth, iHeight, iDepth, eFormat, nFaces, nMipLevels);
    } else if (isTypedArray(pPixels)) {
        return this.loadRawData(pPixels, iWidth, iHeight, iDepth, eFormat, nFaces, nMipLevels);
    } else {
        return this.createInternalTexture(pPixels);
    }
}
loadResource(sFilename ?  : string);
bool;
 {
    if (arguments.length == 0) {
        return;
    }
    var pImage = this.getManager().loadImage(sFilename);
    if (pImage.isResourceLoaded()) {
        return this.loadImage(pImage);
    }
    this.connect(pImage, "loaded", "_onImageLoad");
    return true;
}
_onImageLoad(pImage, IImg);
void {};
 {
    logger.setSourceLocation("core/pool/resources/Texture.ts", 221);
    logger.log("resource loaded > ", pImage.findResourceName(), this.findResourceName());
}
;
this.disconnect(pImage, "loaded", "_onImageLoad");
this.loadImage(pImage);
destroyResource();
bool;
 {
    this.freeInternalTexture();
    this.notifyDestroyed();
    return true;
}
setFilter(eParam, ETextureParameters, eValue, ETextureFilters);
bool;
 {
    if (!this.isValid()) {
        return false;
    }
    this._pParams[eParam] = eValue;
    return this._setFilterInternalTexture(eParam, eValue);
}
setWrapMode(eParam, ETextureParameters, eValue, ETextureWrapModes);
bool;
 {
    if (!this.isValid()) {
        return false;
    }
    this._pParams[eParam] = eValue;
    return this._setWrapModeInternalTexture(eParam, eValue);
}
getFilter(eParam, ETextureParameters);
ETextureFilters;
 {
    if (!this.isValid()) {
        return 0;
    }
    var iValue = this._pParams[eParam];
    if (!isDefAndNotNull(iValue)) {
        iValue = this._getFilterInternalTexture(eParam);
        this._pParams[eParam] = iValue;
    }
    return iValue;
}
getWrapMode(eParam, ETextureParameters);
ETextureWrapModes;
 {
    if (!this.isValid()) {
        return 0;
    }
    var iValue = this._pParams[eParam];
    if (!isDefAndNotNull(iValue)) {
        iValue = this._getWrapModeInternalTexture(eParam);
        this._pParams[eParam] = iValue;
    }
    return iValue;
}
_setFilterInternalTexture(eParam, ETextureParameters, eValue, ETextureFilters);
bool;
 {
 {
        logger.setSourceLocation("core/pool/resources/Texture.ts", 281);
        logger.criticalError("virual");
    }
    ;
    return false;
}
_setWrapModeInternalTexture(eParam, ETextureParameters, eValue, ETextureWrapModes);
bool;
 {
 {
        logger.setSourceLocation("core/pool/resources/Texture.ts", 285);
        logger.criticalError("virual");
    }
    ;
    return false;
}
_getFilterInternalTexture(eParam, ETextureParameters);
ETextureFilters;
 {
 {
        logger.setSourceLocation("core/pool/resources/Texture.ts", 290);
        logger.criticalError("virual");
    }
    ;
    return 0;
}
_getWrapModeInternalTexture(eParam, ETextureParameters);
ETextureWrapModes;
 {
 {
        logger.setSourceLocation("core/pool/resources/Texture.ts", 294);
        logger.criticalError("virual");
    }
    ;
    return 0;
}
loadRawData(pData, Uint8Array, iWidth, number, iHeight, number, iDepth, number = 1, eFormat, EPixelFormats = EPixelFormats.BYTE_BGR, nFaces ?  : number = 1, nMipMaps ?  : number = 0);
 {
    var pTempImg = this.getManager().imagePool.findResource(".texture.temp_image");
    if (isNull(pTempImg)) {
        pTempImg = this.getManager().imagePool.createResource(".texture.temp_image");
    }
    pTempImg.loadRawData(pData, iWidth, iHeight, iDepth, eFormat, nFaces, nMipMaps);
    var isLoaded = this.loadImage(pTempImg);
    this.getManager().imagePool.destroyResource(pTempImg);
    return isLoaded;
}
loadImage(pImage, IImg);
bool;
 {
    var isLoaded = this._loadImages(pImage);
    if (isLoaded) {
        this.notifyLoaded();
        return true;
    } else {
        return false;
    }
}
loadImages(pImages, IImg[]);
bool;
 {
    var isLoaded = this._loadImages(pImages);
    if (isLoaded) {
        this.notifyLoaded();
        return true;
    } else {
        return false;
    }
}
_loadImages(pImageList, IImg[]);
bool;
_loadImages(pImage, IImg);
bool;
_loadImages(pImage, any);
bool;
 {
    if (this.isResourceLoaded()) {
 {
            logger.setSourceLocation("core/pool/resources/Texture.ts", 352);
            logger.warning("Yoy try to load texture when it already have been loaded. All texture data was destoyed.");
        }
        ;
        this.freeInternalTexture();
    }
    var pMainImage = null;
    var pImageList = null;
    if (!isArray(pImage)) {
        pMainImage = pImage;
        pImageList = new Array(0);
        pImageList[0] = pMainImage;
    } else {
        pImageList = arguments[0];
        if (pImageList.length === 0) {
 {
                logger.setSourceLocation("core/pool/resources/Texture.ts", 369);
                logger.criticalError("Cannot load empty list of images");
            }
            ;
            return false;
        }
        pMainImage = pImageList[0];
    }
    this._iWidth = pMainImage.width;
    this._iHeight = pMainImage.height;
    this._iDepth = pMainImage.depth;
    if (webgl.isWebGLFormatSupport(pMainImage.format)) {
        this._eFormat = pMainImage.format;
    } else {
 {
            logger.setSourceLocation("core/pool/resources/Texture.ts", 389);
            logger.warning("Format not support(" + pixelUtil.getFormatName(pMainImage.format) + ")");
        }
        ;
        if (pMainImage.convert(EPixelFormats.B8G8R8A8)) {
            this._eFormat = pMainImage.format;
        } else {
 {
                logger.setSourceLocation("core/pool/resources/Texture.ts", 396);
                logger.criticalError("Format not convert");
            }
            ;
        }
    }
    for(i = 1; i < pImageList.length; i++) {
        if (!pImageList[i].convert(pMainImage.format)) {
 {
                logger.setSourceLocation("core/pool/resources/Texture.ts", 404);
                logger.criticalError("Format not support and not convert");
            }
            ;
        }
    }
    var iImageMips = pMainImage.numMipMaps;
    if (iImageMips == Img.getMaxMipmaps(this._iWidth, this._iHeight, this._iDepth, this._eFormat)) {
        this._nMipLevels = iImageMips;
        ((this._iFlags) &= ~(ETextureFlags.AUTOMIPMAP));
    } else {
        this._nMipLevels = 0;
    }
    var iFaces = 0;
    var isMultiImage = false;
    if (pImageList.length == 6) {
        iFaces = 6;
        isMultiImage = true;
        this._eTextureType = ETextureTypes.TEXTURE_CUBE_MAP;
    } else if (pMainImage.numFaces == 6) {
        iFaces = 6;
        isMultiImage = false;
        this._eTextureType = ETextureTypes.TEXTURE_CUBE_MAP;
    } else {
        iFaces = 1;
        isMultiImage = false;
        this._eTextureType = ETextureTypes.TEXTURE_2D;
    }
    if (iFaces > this.getNumFaces()) {
        iFaces = this.getNumFaces();
    }
    this.createInternalTexture(null);
    var mip = 0;
    var i = 0;
    for(mip = 0; mip <= this._nMipLevels; ++mip) {
        for(i = 0; i < iFaces; ++i) {
            var pSrc;
            if (isMultiImage) {
                pSrc = pImageList[i].getPixels(0, mip);
            } else {
                pSrc = pMainImage.getPixels(i, mip);
            }
            this.getBuffer(i, mip).blitFromMemory(pSrc);
        }
    }
    return true;
}
convertToImage(pDestImage, IImg, bIncludeMipMaps, bool);
void {};
 {
    logger.setSourceLocation("core/pool/resources/Texture.ts", 492);
    logger.criticalError("!!!нехуй");
}
var iNumMips = bIncludeMipMaps ? this._nMipLevels + 1 : 1;
var iDataSize = pixelUtil.calculateSizeForImage(iNumMips, this._nMipLevels, this._iWidth, this._iHeight, this._iDepth, this._eFormat);
var pPixData = new Uint8Array(iDataSize);
var pCurrentPixData = pPixData;
var iFace = 0;
var mip = 0;
for(iFace = 0; iFace < this.getNumFaces(); ++iFace) {
    for(mip = 0; mip < iNumMips; ++mip) {
        var iMipDataSize = pixelUtil.getMemorySize(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
        var pPixBox = new pixelUtil.PixelBox(this._iWidth, this._iHeight, this._iDepth, this._eFormat, pCurrentPixData);
        this.getBuffer(iFace, mip).blitToMemory(pPixBox);
        pCurrentPixData = pCurrentPixData.subarray(iMipDataSize);
    }
}
pDestImage.loadDynamicImage(pPixData, this._iWidth, this._iHeight, this._iDepth, this._eFormat, this.getNumFaces(), iNumMips - 1);
copyToTexture(pTarget, ITexture);
void {};
 {
    logger.setSourceLocation("core/pool/resources/Texture.ts", 525);
    logger.criticalError("!!!нехуй");
}
if (pTarget.getNumFaces() !== this.getNumFaces()) {
 {
        logger.setSourceLocation("core/pool/resources/Texture.ts", 527);
        logger.criticalError("Texture types must match");
    }
    ;
}
var nMipLevels = Math.min(this._nMipLevels, pTarget.mipLevels);
if ((((this._iFlags) & (ETextureFlags.AUTOMIPMAP)) != 0) || (((this.getFlags()) & (ETextureFlags.AUTOMIPMAP)) != 0)) {
    nMipLevels = 0;
}
var iFace = 0, mip = 0;
for(iFace = 0; iFace < this.getNumFaces(); iFace++) {
    for(mip = 0; mip <= nMipLevels; mip++) {
        pTarget.getBuffer(iFace, mip).blit(this.getBuffer(iFace, mip));
    }
}
createInternalTexture(cFillColor ?  : IColor = null);
bool;
 {
    if (!this._isInternalResourceCreated) {
        this._createInternalTextureImpl(cFillColor);
        this._isInternalResourceCreated = true;
        this.notifyCreated();
        return true;
    }
    return false;
}
freeInternalTexture();
bool;
 {
    if (this._isInternalResourceCreated) {
        this.freeInternalTextureImpl();
        this._isInternalResourceCreated = false;
        this.notifyDestroyed();
        return true;
    }
    return false;
}
_createInternalTextureImpl(cFillColor ?  : IColor = null);
bool;
 {
    return false;
}
freeInternalTextureImpl();
bool;
 {
    return false;
}
setPixelRGBA(i1, number, i2, number, iTextureWidth, number, iTextureHeight, number, pBuffer, Uint8Array);
void {
    return: 
};
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    (function (ECameraParameters) {
        ECameraParameters._map = [];
        ECameraParameters.CONST_ASPECT = 1;
    })(akra.ECameraParameters || (akra.ECameraParameters = {}));
    var ECameraParameters = akra.ECameraParameters;
    (function (ECameraTypes) {
        ECameraTypes._map = [];
        ECameraTypes._map[0] = "PERSPECTIVE";
        ECameraTypes.PERSPECTIVE = 0;
        ECameraTypes._map[1] = "ORTHO";
        ECameraTypes.ORTHO = 1;
        ECameraTypes._map[2] = "OFFSET_ORTHO";
        ECameraTypes.OFFSET_ORTHO = 2;
    })(akra.ECameraTypes || (akra.ECameraTypes = {}));
    var ECameraTypes = akra.ECameraTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EFramebuffer) {
        EFramebuffer._map = [];
        EFramebuffer._map[0] = "FRONT";
        EFramebuffer.FRONT = 0;
        EFramebuffer._map[1] = "BACK";
        EFramebuffer.BACK = 1;
        EFramebuffer._map[2] = "AUTO";
        EFramebuffer.AUTO = 2;
    })(akra.EFramebuffer || (akra.EFramebuffer = {}));
    var EFramebuffer = akra.EFramebuffer;
    ;
    (function (EStatFlags) {
        EStatFlags._map = [];
        EStatFlags.NONE = 0;
        EStatFlags.FPS = 1;
        EStatFlags.AVG_FPS = 2;
        EStatFlags.BEST_FPS = 4;
        EStatFlags.WORST_FPS = 8;
        EStatFlags.TRIANGLE_COUNT = 16;
        EStatFlags.ALL = 0xFFFF;
    })(akra.EStatFlags || (akra.EStatFlags = {}));
    var EStatFlags = akra.EStatFlags;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (fx) {
        var VariableBlendContainer = (function () {
            function VariableBlendContainer() {
                this._pVarListMap = null;
                this._pVarKeys = null;
                this._pVarBlendTypeMap = null;
                this.inline = get;
                this.inline = getVarList(sKey, string);
                this.IAFXVariableDeclInstruction = [];
            }
            VariableBlendContainer.prototype.keys = function () {
                return this._pVarKeys;
            };
            return VariableBlendContainer;
        })();
        fx.VariableBlendContainer = VariableBlendContainer;        
 {
            return this._pVarListMap[sKey];
        }
        inline;
        getBlendType(sKey, string);
        IAFXVariableTypeInstruction;
 {
            return this._pVarBlendTypeMap[sKey];
        }
        constructor();
 {
            this._pVarListMap = {};
            this._pVarKeys = [];
            this._pVarBlendTypeMap = {};
        }
        addVariable(pVariable, IAFXVariableDeclInstruction, eBlendMode, EAFXBlendMode);
        bool;
 {
            var sName = pVariable.getRealName();
            if (!isDef(this._pVarListMap[sName])) {
                this._pVarListMap[sName] = [
                    pVariable
                ];
                this._pVarKeys.push(sName);
                this._pVarBlendTypeMap[sName] = pVariable.getType();
                return true;
            }
            var pBlendType = this._pVarBlendTypeMap[sName].blend(pVariable.getType(), eBlendMode);
            if (pBlendType === this._pVarBlendTypeMap[sName]) {
                return true;
            }
            if (isNull(pBlendType)) {
 {
                    logger.setSourceLocation("fx/BlendContainers.ts", 51);
                    logger.error("Could not blend type for variable '" + sName + "'");
                }
                ;
                return false;
            }
            this._pVarListMap[sName].push(pVariable);
            this._pVarBlendTypeMap[sName] = pBlendType;
            return true;
        }
        hasVariableWithName(sName, string);
        bool;
 {
            if (!isDefAndNotNull(this._pVarBlendTypeMap[sName])) {
                this._pVarBlendTypeMap[sName] = null;
                return false;
            }
            return true;
        }
        inline;
        hasVariable(pVar, IAFXVariableDeclInstruction);
        bool;
 {
            return this.hasVariableWithName(pVar.getRealName());
        }
        inline;
        getVariableByName(sName, string);
        IAFXVariableDeclInstruction;
 {
            return this.hasVariableWithName(sName) ? this._pVarListMap[sName][0] : null;
        }
        inline;
        getDeclCodeForVar(sName, string);
        string;
 {
            var pType = this.getBlendType(sName);
            var sCode = pType.toFinalCode() + " ";
            var pVar = this.getVariableByName(sName);
            sCode += pVar.getRealName();
            if (pVar.getType().isNotBaseArray()) {
                var iLength = pVar.getType().getLength();
                if (webgl.isANGLE && iLength === 1 && pVar.getType().isComplex()) {
                    sCode += "[" + 2 + "]";
                } else {
                    sCode += "[" + iLength + "]";
                }
            }
            return sCode;
        }
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
var ComplexTypeBlendContainer = (function () {
    function ComplexTypeBlendContainer() {
        this._pTypeListMap = null;
        this._pTypeKeys = null;
        this.inline = get;
        this.inline = get;
        this._pTypeListMap = {};
        this._pTypeKeys = [];
    }
    ComplexTypeBlendContainer.prototype.keys = function () {
        return this._pTypeKeys;
    };
    ComplexTypeBlendContainer.prototype.types = function () {
        return this._pTypeListMap;
    };
    ComplexTypeBlendContainer.prototype.addComplexType = function (pComplexType) {
        var pFieldList = (pComplexType)._getFieldDeclList();
        for(var i = 0; i < pFieldList.length; i++) {
            if (pFieldList[i].getType().isComplex()) {
                if (!this.addComplexType(pFieldList[i].getType().getBaseType())) {
                    return false;
                }
            }
        }
        var sName = pComplexType.getRealName();
        if (!isDef(this._pTypeListMap[sName])) {
            this._pTypeListMap[sName] = pComplexType;
            this._pTypeKeys.push(sName);
            return true;
        }
        var pBlendType = this._pTypeListMap[sName].blend(pComplexType, EAFXBlendMode.k_TypeDecl);
        if (isNull(pBlendType)) {
 {
                logger.setSourceLocation("fx/BlendContainers.ts", 138);
                logger.error("Could not blend type declaration '" + sName + "'");
            }
            ;
            return false;
        }
        this._pTypeListMap[sName] = pBlendType;
        return true;
    };
    ComplexTypeBlendContainer.prototype.addFromVarConatiner = function (pContainer) {
        if (isNull(pContainer)) {
            return true;
        }
        var pKeys = pContainer.keys;
        for(var i = 0; i < pKeys.length; i++) {
            var pType = pContainer.getBlendType(pKeys[i]).getBaseType();
            if (pType.isComplex()) {
                if (!this.addComplexType(pType)) {
                    return false;
                }
            }
        }
        return true;
    };
    return ComplexTypeBlendContainer;
})();
exports.ComplexTypeBlendContainer = ComplexTypeBlendContainer;
var ExtSystemDataContainer = (function () {
    function ExtSystemDataContainer() {
        this._pExtSystemMacrosList = null;
        this._pExtSystemTypeList = null;
        this._pExtSystemFunctionList = null;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this._pExtSystemMacrosList = [];
        this._pExtSystemTypeList = [];
        this._pExtSystemFunctionList = [];
    }
    ExtSystemDataContainer.prototype.macroses = function () {
        return this._pExtSystemMacrosList;
    };
    ExtSystemDataContainer.prototype.types = function () {
        return this._pExtSystemTypeList;
    };
    ExtSystemDataContainer.prototype.functions = function () {
        return this._pExtSystemFunctionList;
    };
    ExtSystemDataContainer.prototype.addFromFunction = function (pFunction) {
        var pTypes = pFunction._getExtSystemTypeList();
        var pMacroses = pFunction._getExtSystemMacrosList();
        var pFunctions = pFunction._getExtSystemFunctionList();
        if (!isNull(pTypes)) {
            for(var j = 0; j < pTypes.length; j++) {
                if (this._pExtSystemTypeList.indexOf(pTypes[j]) === -1) {
                    this._pExtSystemTypeList.push(pTypes[j]);
                }
            }
        }
        if (!isNull(pMacroses)) {
            for(var j = 0; j < pMacroses.length; j++) {
                if (this._pExtSystemMacrosList.indexOf(pMacroses[j]) === -1) {
                    this._pExtSystemMacrosList.push(pMacroses[j]);
                }
            }
        }
        if (!isNull(pFunctions)) {
            for(var j = 0; j < pFunctions.length; j++) {
                if (this._pExtSystemFunctionList.indexOf(pFunctions[j]) === -1) {
                    this._pExtSystemFunctionList.push(pFunctions[j]);
                }
            }
        }
    };
    return ExtSystemDataContainer;
})();
exports.ExtSystemDataContainer = ExtSystemDataContainer;
var AttributeBlendContainer = (function (_super) {
    __extends(AttributeBlendContainer, _super);
    function AttributeBlendContainer() {
        _super.call(this);
        this._pSlotBySemanticMap = null;
        this._pFlowsBySemanticMap = null;
        this._pFlowBySlots = null;
        this._pHashBySlots = null;
        this._pTypesBySlots = null;
        this._pVBByBufferSlots = null;
        this._pHashByBufferSlots = null;
        this._pBufferSlotBySlots = null;
        this._pOffsetVarsBySemanticMap = null;
        this._pOffsetDefaultMap = null;
        this._sHash = "";
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = getOffsetVarsBySemantic(sName, string);
        this.IAFXVariableDeclInstruction = [];
        this._pSlotBySemanticMap = {};
        this._pFlowsBySemanticMap = {};
        this._pFlowBySlots = new util.ObjectArray();
        this._pHashBySlots = new util.ObjectArray();
        this._pTypesBySlots = new util.ObjectArray();
        this._pVBByBufferSlots = new util.ObjectArray();
        this._pHashByBufferSlots = new util.ObjectArray();
        this._pBufferSlotBySlots = new util.ObjectArray();
        var pSemantics = this.semantics;
        for(var i = 0; i < pSemantics.length; i++) {
            var sSemantic = pSemantics[i];
            this._pSlotBySemanticMap[sSemantic] = -1;
            this._pFlowsBySemanticMap[sSemantic] = null;
        }
    }
    AttributeBlendContainer.prototype.semantics = function () {
        return this.keys;
    };
    AttributeBlendContainer.prototype.totalSlots = function () {
        return this._pFlowBySlots.length;
    };
    AttributeBlendContainer.prototype.totalBufferSlots = function () {
        return this._pVBByBufferSlots.length;
    };
    return AttributeBlendContainer;
})(VariableBlendContainer);
exports.AttributeBlendContainer = AttributeBlendContainer;
 {
    return this._pOffsetVarsBySemanticMap[sName];
}
inline;
getOffsetDefault(sName, string);
number;
 {
    return this._pOffsetDefaultMap[sName];
}
inline;
getSlotBySemantic(sSemantic, string);
number;
 {
    return this._pSlotBySemanticMap[sSemantic];
}
inline;
getBufferSlotBySemantic(sSemantic, string);
number;
 {
    return this._pBufferSlotBySlots.value(this.getSlotBySemantic(sSemantic));
}
inline;
getAttributeList(sSemantic, string);
IAFXVariableDeclInstruction[];
 {
    return this.getVarList(sSemantic);
}
inline;
getFlowBySemantic(sSemantic, string);
IDataFlow;
 {
    return this._pFlowsBySemanticMap[sSemantic];
}
inline;
getFlowBySlot(iSlot, number);
IDataFlow;
 {
    return this._pFlowBySlots.value(iSlot);
}
inline;
getTypeBySlot(iSlot, number);
IAFXTypeInstruction;
 {
    return this._pTypesBySlots.value(iSlot);
}
inline;
getType(sSemantic, string);
IAFXVariableTypeInstruction;
 {
    return this.getBlendType(sSemantic);
}
inline;
addAttribute(pVariable, IAFXVariableDeclInstruction);
bool;
 {
    return this.addVariable(pVariable, EAFXBlendMode.k_Attribute);
}
inline;
hasAttrWithSemantic(sSemantic, string);
bool;
 {
    return this.hasVariableWithName(sSemantic);
}
inline;
getAttribute(sSemantic, string);
IAFXVariableDeclInstruction;
 {
    return this.getVariableByName(sSemantic);
}
inline;
hasTexcoord(iSlot, number);
bool;
 {
    return this.hasAttrWithSemantic(DeclUsages.TEXCOORD + iSlot.toString());
}
inline;
getTexcoordVar(iSlot, number);
IAFXVariableDeclInstruction;
 {
    return this.getVariableByName(DeclUsages.TEXCOORD + iSlot.toString());
}
clear();
void {
    var: pSemantics,
    string: [] = this.semantics
};
for(var i = 0; i < pSemantics.length; i++) {
    var sSemantic = pSemantics[i];
    this._pSlotBySemanticMap[sSemantic] = -1;
    this._pFlowsBySemanticMap[sSemantic] = null;
}
this._pFlowBySlots.clear(false);
this._pHashBySlots.clear(false);
this._pVBByBufferSlots.clear(false);
this._pHashByBufferSlots.clear(false);
this._pBufferSlotBySlots.clear(false);
this._sHash = "";
generateOffsetMap();
void {
    this: ,
    _pOffsetVarsBySemanticMap:  = {}
};
this._pOffsetDefaultMap = {};
var pSemantics = this.semantics;
for(var i = 0; i < pSemantics.length; i++) {
    var sSemantic = pSemantics[i];
    var pAttr = this.getAttribute(sSemantic);
    if (pAttr.isPointer()) {
        this._pOffsetVarsBySemanticMap[sSemantic] = [];
        if (pAttr.getType().isComplex()) {
            var pAttrSubDecls = pAttr.getSubVarDecls();
            for(var j = 0; j < pAttrSubDecls.length; j++) {
                var pSubDecl = pAttrSubDecls[j];
                if (pSubDecl.getName() === "offset") {
                    var sOffsetName = pSubDecl.getRealName();
                    this._pOffsetVarsBySemanticMap[sSemantic].push(pSubDecl);
                    this._pOffsetDefaultMap[sOffsetName] = (pSubDecl.getParent()).getType().getPadding();
                }
            }
        } else {
            var pOffsetVar = pAttr.getType()._getAttrOffset();
            var sOffsetName = pOffsetVar.getRealName();
            this._pOffsetVarsBySemanticMap[sSemantic].push(pOffsetVar);
            this._pOffsetDefaultMap[sOffsetName] = 0;
        }
    } else {
        this._pOffsetVarsBySemanticMap[sSemantic] = null;
    }
}
initFromBufferMap(pMap, util.BufferMap);
bool;
 {
    this.clear();
    if (isNull(pMap)) {
 {
            logger.setSourceLocation("fx/BlendContainers.ts", 451);
            logger.warning("Yoy don`t set any buffermap for render");
        }
        ;
        return false;
    }
    var pFlows = pMap.flows;
    var pSemanticList = this.semantics;
    for(var i = 0; i < pSemanticList.length; i++) {
        var sSemantic = pSemanticList[i];
        var pFindFlow = null;
        if (this.getType(sSemantic).isComplex()) {
            pFindFlow = pMap.findFlow(sSemantic) || pMap.getFlow(sSemantic);
        } else {
            pFindFlow = pMap.getFlow(sSemantic);
        }
        this._pFlowsBySemanticMap[sSemantic] = pFindFlow;
        if (!isNull(pFindFlow)) {
            var iBufferSlot = -1;
            if (pFindFlow.type === EDataFlowTypes.MAPPABLE) {
                if (!this.getType(sSemantic).isPointer()) {
 {
                        logger.setSourceLocation("fx/BlendContainers.ts", 476);
                        logger.warning("You try to put pointer data into non-pointer attribute with semantic '" + sSemantic + "'");
                    }
                    ;
                    return false;
                }
                var iSlot = this._pFlowBySlots.indexOf(pFindFlow);
                if (iSlot !== -1) {
                    this._pHashBySlots.value(iSlot) += this.getType(sSemantic).getGuid().toString() + "*";
                    this._pSlotBySemanticMap[sSemantic] = iSlot;
                    iBufferSlot = this._pBufferSlotBySlots.value(iSlot);
                    this._pHashByBufferSlots.value(iBufferSlot) += iSlot.toString() + "$";
                    continue;
                }
                iBufferSlot = this._pVBByBufferSlots.indexOf(pFindFlow.data.buffer);
                iSlot = this._pFlowBySlots.length;
                if (iBufferSlot !== -1) {
                    this._pHashByBufferSlots.value(iBufferSlot) += iSlot.toString() + "$";
                } else {
                    iBufferSlot = this._pVBByBufferSlots.length;
                    this._pVBByBufferSlots.push(pFindFlow.data.buffer);
                    this._pHashByBufferSlots.push(this._pFlowBySlots.length.toString() + "$");
                }
            } else if (this.getType(sSemantic).isStrictPointer()) {
 {
                    logger.setSourceLocation("fx/BlendContainers.ts", 505);
                    logger.warning("You try to put non-pointer data into pointer attribute with semantic '" + sSemantic + "'");
                }
                ;
                return false;
            }
            if (pFindFlow.type === EDataFlowTypes.MAPPABLE) {
                this._pTypesBySlots.push(Effect.getSystemType("ptr"));
            } else {
                this._pTypesBySlots.push(this.getType(sSemantic).getBaseType());
            }
            this._pSlotBySemanticMap[sSemantic] = this._pFlowBySlots.length;
            this._pFlowBySlots.push(pFindFlow);
            this._pHashBySlots.push(this.getType(sSemantic).getGuid().toString() + "*");
            this._pBufferSlotBySlots.push(iBufferSlot);
        } else {
            this._pSlotBySemanticMap[sSemantic] = -1;
        }
    }
    this._sHash = "";
    for(var i = 0; i < this._pHashBySlots.length; i++) {
        this._sHash += this._pHashBySlots.value(i) + "*";
    }
    for(var i = 0; i < this._pHashByBufferSlots.length; i++) {
        this._sHash += this._pHashByBufferSlots.value(i) + "$";
    }
}
inline;
getHash();
string;
 {
    return this._sHash;
}
var akra;
(function (akra) {
    (function (fx) {
        var SamplerBlender = (function () {
            function SamplerBlender() {
                this._pSlotList = null;
                this._nActiveSlots = 0;
                this._pIdToSlotMap = null;
                this._pIdList = null;
                this.inline = get;
                this.inline = get;
                this.inline = getSamplersBySlot(iSlot, number);
                this.ObjectArray = {
                    return: this.slots[iSlot]
                };
                this.inline = addObjectToSlotById(pObject, any, id, number);
                this._pSlotList = new Array(32);
                for(var i = 0; i < this._pSlotList.length; i++) {
                    this._pSlotList[i] = new util.ObjectArray();
                }
                this._nActiveSlots = 1;
                this._pIdToSlotMap = {
                    0: 0
                };
                this._pIdList = [];
            }
            SamplerBlender.prototype.slots = function () {
                return this._pSlotList;
            };
            SamplerBlender.prototype.totalActiveSlots = function () {
                return this._nActiveSlots;
            };
            SamplerBlender.prototype.clear = function () {
                for(var i = 0; i < this._nActiveSlots; i++) {
                    for(var j = 0; j < this._pSlotList[i].length; j++) {
                        var pSampler = this._pSlotList[i].value(j);
                        pSampler.setRealName(pSampler.getSemantic() || pSampler.getName());
                        pSampler.defineByZero(false);
                    }
                    this._pSlotList[i].clear(false);
                }
                this._nActiveSlots = 1;
                for(var i = 0; i < this._pIdList.length; i++) {
                    this._pIdToSlotMap[this._pIdList[i]] = -1;
                }
            };
            SamplerBlender.prototype.addTextureSlot = function (id) {
                if (!isDef(this._pIdToSlotMap[id])) {
                    this._pIdList.push(id);
                } else if (this._pIdToSlotMap[id] > 0) {
                    return;
                }
                if (this._pSlotList.length === this._nActiveSlots) {
                    this._pSlotList.push(new util.ObjectArray());
                }
                this._pIdToSlotMap[id] = this._nActiveSlots;
                this._nActiveSlots++;
            };
            return SamplerBlender;
        })();
        fx.SamplerBlender = SamplerBlender;        
        void {
            this: ,
            _pSlotList: [
                this._pIdToSlotMap[id]
            ].push(pObject)
        };
        addObjectToSlotIdAuto(pObject, any, id, number);
        void {
            this: ,
            addTextureSlot: (id)
        };
        this.addObjectToSlotById(pObject, id);
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
getHash();
string;
 {
    var sHash = "";
    for(var i = 0; i < this._nActiveSlots; i++) {
        var pBlend = this._pSlotList[i];
        if (pBlend.length > 0) {
            if (i === 0) {
                sHash += "Z";
            }
            for(var j = 0; j < pBlend.length; j++) {
                sHash += pBlend.value(j).getGuid() + ".";
            }
            sHash += ".";
        }
    }
    return sHash;
}
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    (function (EViewportTypes) {
        EViewportTypes._map = [];
        EViewportTypes.DEFAULT = -1;
        EViewportTypes.DSVIEWPORT = 1;
        EViewportTypes.SHADOWVIEWPORT = 2;
    })(akra.EViewportTypes || (akra.EViewportTypes = {}));
    var EViewportTypes = akra.EViewportTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ERenderDataTypes) {
        ERenderDataTypes._map = [];
        ERenderDataTypes._map[0] = "UNKNOWN";
        ERenderDataTypes.UNKNOWN = 0;
        ERenderDataTypes._map[1] = "MESH_SUBSET";
        ERenderDataTypes.MESH_SUBSET = 1;
        ERenderDataTypes._map[2] = "SCREEN";
        ERenderDataTypes.SCREEN = 2;
    })(akra.ERenderDataTypes || (akra.ERenderDataTypes = {}));
    var ERenderDataTypes = akra.ERenderDataTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    (function (EVertexBufferTypes) {
        EVertexBufferTypes._map = [];
        EVertexBufferTypes._map[0] = "UNKNOWN";
        EVertexBufferTypes.UNKNOWN = 0;
        EVertexBufferTypes._map[1] = "VBO";
        EVertexBufferTypes.VBO = 1;
        EVertexBufferTypes._map[2] = "TBO";
        EVertexBufferTypes.TBO = 2;
    })(akra.EVertexBufferTypes || (akra.EVertexBufferTypes = {}));
    var EVertexBufferTypes = akra.EVertexBufferTypes;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ECanvasTypes) {
        ECanvasTypes._map = [];
        ECanvasTypes.TYPE_UNKNOWN = -1;
        ECanvasTypes.TYPE_2D = 1;
        ECanvasTypes._map[2] = "TYPE_3D";
        ECanvasTypes.TYPE_3D = 2;
    })(akra.ECanvasTypes || (akra.ECanvasTypes = {}));
    var ECanvasTypes = akra.ECanvasTypes;
    ;
})(akra || (akra = {}));
;
;
var akra;
(function (akra) {
    (function (geometry) {
        var Circle = (function () {
            function Circle(fCenterX, fCenterY, fRadius) {
                this.inline = clear();
                this.ICircle = {
                    this: ,
                    center: ,
                    clear: 
                };
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        var pCircle = arguments[0];
                        this.center = new Vec2(pCircle.center);
                        this.radius = pCircle.radius;
                        break;
                    case 2:
                        var v2fCenter = arguments[0];
                        var fRadius = arguments[1];
                        this.center = new Vec2(v2fCenter);
                        this.radius = fRadius;
                        break;
                    case 3:
                        this.center = new Vec2(arguments[0], arguments[1]);
                        this.radius = arguments[2];
                        break;
                    default:
                        this.center = new Vec2();
                        this.radius = 0.;
                        break;
                }
            }
            Circle.prototype.set = function (fCenterX, fCenterY, fRadius) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        var pCircle = arguments[0];
                        this.center.set(pCircle.center);
                        this.radius = pCircle.radius;
                        break;
                    case 2:
                        var v2fCenter = arguments[0];
                        var fRadius = arguments[1];
                        this.center.set(v2fCenter);
                        this.radius = fRadius;
                        break;
                    case 3:
                        this.center.set(arguments[0], arguments[1]);
                        this.radius = arguments[2];
                        break;
                    default:
                        this.center.set(0.);
                        this.radius = 0.;
                }
                return this;
            };
            return Circle;
        })();
        geometry.Circle = Circle;        
        this.radius = 0.;
        return this;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
;
inline;
isEqual(pCircle, ICircle);
bool;
 {
    return this.center.isEqual(pCircle.center) && (this.radius == pCircle.radius);
}
;
inline;
isClear();
bool;
 {
    return this.center.isClear() && (this.radius === 0.);
}
;
inline;
isValid();
bool;
 {
    return (this.radius >= 0.);
}
;
inline;
offset(v2fOffset, IVec2);
ICircle;
 {
    this.center.add(v2fOffset);
    return this;
}
;
inline;
expand(fInc, number);
ICircle;
 {
    this.radius += fInc;
    return this;
}
;
inline;
normalize();
ICircle;
 {
    this.radius = math.abs(this.radius);
    return this;
}
;
;
;
var akra;
(function (akra) {
    (function (geometry) {
        var Rect2d = (function () {
            function Rect2d(fX0, fX1, fY0, fY1) {
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = clear();
                this.IRect2d = {
                    this: ,
                    x0:  = this.x1 = this.y0 = this.y1 = 0.
                };
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 2:
                        this.set(arguments[0], arguments[1]);
                        break;
                    case 4:
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3]);
                        break;
                    default:
                        this.x0 = this.x1 = this.y0 = this.y1 = 0.;
                        break;
                }
            }
            Rect2d.prototype.left = function () {
                return this.x0;
            };
            Rect2d.prototype.top = function () {
                return this.y0;
            };
            Rect2d.prototype.width = function () {
                return this.x1 - this.x0;
            };
            Rect2d.prototype.height = function () {
                return this.y1 - this.y0;
            };
            Rect2d.prototype.set = function (fX0, fX1, fY0, fY1) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        if (arguments[0] instanceof Rect2d) {
                            var pRect = arguments[0];
                            this.x0 = pRect.x0;
                            this.x1 = pRect.x1;
                            this.y0 = pRect.y0;
                            this.y1 = pRect.y1;
                        } else {
                            var v2fSizes = arguments[0];
                            this.x1 = v2fSizes.x * 0.5;
                            this.x0 = -this.x1;
                            this.y1 = v2fSizes.y * 0.5;
                            this.y0 = -this.y1;
                        }
                        break;
                    case 2:
                        var fSizeX = arguments[0];
                        var fSizeY = arguments[1];
                        this.x1 = fSizeX * 0.5;
                        this.x0 = -this.x1;
                        this.y1 = fSizeY * 0.5;
                        this.y0 = -this.y1;
                        break;
                    case 4:
                        this.x0 = arguments[0];
                        this.x1 = arguments[1];
                        this.y0 = arguments[2];
                        this.y1 = arguments[3];
                        break;
                    default:
                        this.x0 = this.x1 = this.y0 = this.y1 = 0.;
                        break;
                }
                return this;
            };
            Rect2d.prototype.setFloor = function (pRect) {
                this.x0 = math.floor(pRect.x0);
                this.x1 = math.floor(pRect.x1);
                this.y0 = math.floor(pRect.y0);
                this.y1 = math.floor(pRect.y1);
                return this;
            };
            Rect2d.prototype.setCeil = function (pRect) {
                this.x0 = math.ceil(pRect.x0);
                this.x1 = math.ceil(pRect.x1);
                this.y0 = math.ceil(pRect.y0);
                this.y1 = math.ceil(pRect.y1);
                return this;
            };
            return Rect2d;
        })();
        geometry.Rect2d = Rect2d;        
        return this;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
;
addSelf(fValue, number);
IRect2d;
addSelf(v2fVec, IVec2);
IRect2d;
addSelf(v2fVec ?  : );
IRect2d;
 {
    if (isFloat(arguments[0])) {
        var fValue = arguments[0];
        this.x0 += fValue;
        this.x1 += fValue;
        this.y0 += fValue;
        this.y1 += fValue;
    } else {
        var v2fVec = arguments[0];
        this.x0 += v2fVec.x;
        this.x1 += v2fVec.x;
        this.y0 += v2fVec.y;
        this.y1 += v2fVec.y;
    }
    return this;
}
;
subSelf(fValue, number);
IRect2d;
subSelf(v2fVec, IVec2);
IRect2d;
subSelf(v2fVec ?  : );
IRect2d;
 {
    if (isFloat(arguments[0])) {
        var fValue = arguments[0];
        this.x0 -= fValue;
        this.x1 -= fValue;
        this.y0 -= fValue;
        this.y1 -= fValue;
    } else {
        var v2fVec = arguments[0];
        this.x0 -= v2fVec.x;
        this.x1 -= v2fVec.x;
        this.y0 -= v2fVec.y;
        this.y1 -= v2fVec.y;
    }
    return this;
}
;
multSelf(fValue, number);
IRect2d;
multSelf(v2fVec, IVec2);
IRect2d;
multSelf(v2fVec ?  : );
IRect2d;
 {
    if (isFloat(arguments[0])) {
        var fValue = arguments[0];
        this.x0 *= fValue;
        this.x1 *= fValue;
        this.y0 *= fValue;
        this.y1 *= fValue;
    } else {
        var v2fVec = arguments[0];
        this.x0 *= v2fVec.x;
        this.x1 *= v2fVec.x;
        this.y0 *= v2fVec.y;
        this.y1 *= v2fVec.y;
    }
    return this;
}
;
divSelf(fValue, number);
IRect2d;
divSelf(v2fVec, IVec2);
IRect2d;
divSelf(v2fVec ?  : );
IRect2d;
 {
    if (isFloat(arguments[0])) {
        var fValue = arguments[0];
 {
            logger.setSourceLocation("geometry/Rect2d.ts", 196);
            logger.assert(fValue != 0., "divide by zero error");
        }
        ;
        var fInvValue = 1. / fValue;
        this.x0 *= fInvValue;
        this.x1 *= fInvValue;
        this.y0 *= fInvValue;
        this.y1 *= fInvValue;
    } else {
        var v2fVec = arguments[0];
 {
            logger.setSourceLocation("geometry/Rect2d.ts", 208);
            logger.assert(v2fVec.x != 0., "divide by zero error");
        }
        ;
 {
            logger.setSourceLocation("geometry/Rect2d.ts", 209);
            logger.assert(v2fVec.y != 0., "divide by zero error");
        }
        ;
        var fInvX = 1. / v2fVec.x;
        var fInvY = 1. / v2fVec.y;
        this.x0 *= fInvX;
        this.x1 *= fInvX;
        this.y0 *= fInvY;
        this.y1 *= fInvY;
    }
    return this;
}
;
offset(v2fOffset, IVec2);
IRect2d;
offset(fOffsetX, number, fOffsetY, number);
IRect2d;
offset(fOffsetX ?  : , fOffsetY ?  : );
IRect2d;
 {
    if (arguments.length === 1) {
        var v2fOffset = arguments[0];
        this.x0 += v2fOffset.x;
        this.x1 += v2fOffset.x;
        this.y0 += v2fOffset.y;
        this.y1 += v2fOffset.y;
    } else {
        this.x0 += arguments[0];
        this.x1 += arguments[0];
        this.y0 += arguments[1];
        this.y1 += arguments[1];
    }
    return this;
}
;
expand(fValue, number);
IRect2d;
expand(v2fValue, IVec2);
IRect2d;
expand(fValueX, number, fValueY, number);
IRect2d;
expand(fValueX ?  : , fValueY ?  : );
IRect2d;
 {
    if (arguments.length == 1) {
        if (isFloat(arguments[0])) {
            var fValue = arguments[0];
            this.x0 -= fValue;
            this.x1 += fValue;
            this.y0 -= fValue;
            this.y1 += fValue;
        } else {
            var v2fValue = arguments[0];
            this.x0 -= v2fValue.x;
            this.x1 += v2fValue.x;
            this.y0 -= v2fValue.y;
            this.y1 += v2fValue.y;
        }
    } else {
        this.x0 -= arguments[0];
        this.x1 += arguments[0];
        this.y0 -= arguments[1];
        this.y1 += arguments[1];
    }
    return this;
}
;
expandX(fValue, number);
IRect2d;
 {
    this.x0 -= fValue;
    this.x1 += fValue;
    return this;
}
;
expandY(fValue, number);
IRect2d;
 {
    this.y0 -= fValue;
    this.y1 += fValue;
    return this;
}
;
resize(v2fSize, IVec2);
IRect2d;
resize(fSizeX, number, fSizeY, number);
IRect2d;
resize(fSizeX ?  : , fSizeY ?  : );
IRect2d;
 {
    var fSizeX, fSizeY;
    if (arguments.length == 1) {
        var v2fSize = arguments[0];
        fSizeX = v2fSize.x;
        fSizeY = v2fSize.y;
    } else {
        fSizeX = arguments[0];
        fSizeY = arguments[1];
    }
    this.x1 = (this.x0 + this.x1 + fSizeX) * 0.5;
    this.x0 = this.x1 - fSizeX;
    this.y1 = (this.y0 + this.y1 + fSizeY) * 0.5;
    this.y0 = this.y1 - fSizeY;
    return this;
}
;
inline;
resizeX(fSize, number);
IRect2d;
 {
    this.x1 = (this.x0 + this.x1 + fSize) * 0.5;
    this.x0 = this.x1 - fSize;
    return this;
}
;
inline;
resizeY(fSize, number);
IRect2d;
 {
    this.y1 = (this.y0 + this.y1 + fSize) * 0.5;
    this.y0 = this.y1 - fSize;
    return this;
}
;
resizeMax(v2fSpan, IVec2);
IRect2d;
resizeMax(fSpanX, number, fSpanY, number);
IRect2d;
resizeMax(fSpanX ?  : , fSpanY ?  : );
IRect2d;
 {
    if (arguments.length == 1) {
        var v2fSpan = arguments[0];
        this.x1 = this.x0 + v2fSpan.x;
        this.y1 = this.y0 + v2fSpan.y;
    } else {
        this.x1 = this.x0 + arguments[0];
        this.y1 = this.y0 + arguments[1];
    }
    return this;
}
;
inline;
resizeMaxX(fSpan, number);
IRect2d;
 {
    this.x1 = this.x0 + fSpan;
    return this;
}
;
inline;
resizeMaxY(fSpan, number);
IRect2d;
 {
    this.y1 = this.y0 + fSpan;
    return this;
}
;
resizeMin(v2fSpan, IVec2);
IRect2d;
resizeMin(fSpanX, number, fSpanY, number);
IRect2d;
resizeMin(fSpanX ?  : , fSpanY ?  : );
IRect2d;
 {
    if (arguments.length == 1) {
        var v2fSpan = arguments[0];
        this.x0 = this.x1 - v2fSpan.x;
        this.y0 = this.y1 - v2fSpan.y;
    } else {
        this.x0 = this.x1 - arguments[0];
        this.y0 = this.y1 - arguments[1];
    }
    return this;
}
;
inline;
resizeMinX(fSpan, number);
IRect2d;
 {
    this.x0 = this.x1 - fSpan;
    return this;
}
;
inline;
resizeMinY(fSpan, number);
IRect2d;
 {
    this.y0 = this.y1 - fSpan;
    return this;
}
;
unionPoint(v2fPoint, IVec2);
IRect2d;
unionPoint(fX, number, fY, number);
IRect2d;
unionPoint(fX ?  : , fY ?  : );
IRect2d;
 {
    if (arguments.length == 1) {
        var v2fPoint = arguments[0];
        this.x0 = math.min(this.x0, v2fPoint.x);
        this.x1 = math.max(this.x1, v2fPoint.x);
        this.y0 = math.min(this.y0, v2fPoint.y);
        this.y1 = math.max(this.y1, v2fPoint.y);
    } else {
        var fX = arguments[0];
        var fY = arguments[1];
        this.x0 = math.min(this.x0, fX);
        this.x1 = math.max(this.x1, fX);
        this.y0 = math.min(this.y0, fY);
        this.y1 = math.max(this.y1, fY);
    }
    return this;
}
;
unionRect(pRect, IRect2d);
IRect2d;
 {
    this.normalize();
    pRect.normalize();
    this.x0 = math.min(this.x0, pRect.x0);
    this.x1 = math.max(this.x1, pRect.x1);
    this.y0 = math.min(this.y0, pRect.y0);
    this.y1 = math.max(this.y1, pRect.y1);
    return this;
}
;
negate(pDestination ?  : IRect2d);
IRect2d;
 {
    if (!isDef(pDestination)) {
        pDestination = this;
    }
    return pDestination.set(-this.x1, -this.x0, -this.y1, -this.y0);
}
;
normalize();
IRect2d;
 {
    var fTmp;
    if (this.x0 > this.x1) {
        fTmp = this.x0;
        this.x0 = this.x1;
        this.x1 = fTmp;
    }
    if (this.y0 > this.y1) {
        fTmp = this.y0;
        this.y0 = this.y1;
        this.y1 = fTmp;
    }
    return this;
}
;
inline;
isEqual(pRect, IRect2d);
bool;
 {
    return this.x0 == pRect.x0 && this.x1 == pRect.x1 && this.y0 == pRect.y0 && this.y1 == pRect.y1;
}
;
inline;
isClear();
bool;
 {
    return this.x0 == 0. && this.x1 == 0. && this.y0 == 0. && this.y1 == 0.;
}
;
inline;
isValid();
bool;
 {
    return this.x0 <= this.x1 && this.y0 <= this.y1;
}
;
inline;
isPointInRect(v2fPoint, IVec2);
bool;
 {
    var x = v2fPoint.x;
    var y = v2fPoint.y;
    return (this.x0 <= x && x <= this.x1) && (this.y0 <= y && y <= this.y1);
}
;
midPoint(v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = new Vec2();
    }
    v2fDestination.x = (this.x0 + this.x1) * 0.5;
    v2fDestination.y = (this.y0 + this.y1) * 0.5;
    return v2fDestination;
}
;
inline;
midX();
number;
 {
    return (this.x0 + this.x1) * 0.5;
}
;
inline;
midY();
number;
 {
    return (this.y0 + this.y1) * 0.5;
}
;
size(v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = new Vec2();
    }
    v2fDestination.x = this.x1 - this.x0;
    v2fDestination.y = this.y1 - this.y0;
    return v2fDestination;
}
;
inline;
sizeX();
number;
 {
    return this.x1 - this.x0;
}
;
inline;
sizeY();
number;
 {
    return this.y1 - this.y0;
}
;
minPoint(v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = new Vec2();
    }
    v2fDestination.x = this.x0;
    v2fDestination.y = this.y0;
    return v2fDestination;
}
;
maxPoint(v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = new Vec2();
    }
    v2fDestination.x = this.x1;
    v2fDestination.y = this.y1;
    return v2fDestination;
}
;
inline;
area();
number;
 {
    return (this.x1 - this.x0) * (this.y1 - this.y0);
}
;
corner(iIndex, number, v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = new Vec2();
    }
 {
        logger.setSourceLocation("geometry/Rect2d.ts", 547);
        logger.assert(0 <= iIndex && iIndex < 4, "invalid index");
    }
    ;
    switch(iIndex) {
        case 0:
            v2fDestination.set(this.x0, this.y0);
            break;
        case 1:
            v2fDestination.set(this.x1, this.y0);
            break;
        case 2:
            v2fDestination.set(this.x1, this.y1);
            break;
        case 3:
            v2fDestination.set(this.x0, this.y1);
            break;
    }
    ;
    return v2fDestination;
}
;
createBoundingCircle(pCircle ?  : ICircle);
ICircle;
 {
    if (!isDef(pCircle)) {
        pCircle = new Circle();
    }
    var fX0 = this.x0, fX1 = this.x1;
    var fY0 = this.y0, fY1 = this.y1;
    var fHalfSizeX = (fX1 - fX0) * 0.5;
    var fHalfSizeY = (fY1 - fY0) * 0.5;
    pCircle.set((fX0 + fX1) * 0.5, (fY0 + fY1) * 0.5, math.sqrt(fHalfSizeX * fHalfSizeX + fHalfSizeY * fHalfSizeY));
    return pCircle;
}
;
toString();
string;
 {
    return "(" + this.x0 + ", " + this.y0 + ") --> (" + this.x1 + ", " + this.y1 + ")";
}
;
;
var akra;
(function (akra) {
    (function (util) {
        var ObjectArray = (function () {
            function ObjectArray(pElements) {
                this._pData = [];
                this._bLock = false;
                this._iLength = 0;
                this.inline = get;
                this.inline = lock();
                if (arguments.length) {
                    this.fromArray(pElements);
                }
            }
            ObjectArray.prototype.length = function () {
                return this._iLength;
            };
            return ObjectArray;
        })();
        util.ObjectArray = ObjectArray;        
        void {
            this: ,
            _bLock:  = true
        };
        inline;
        unlock();
        void {
            this: ,
            _bLock:  = false
        };
        inline;
        isLocked();
        bool;
 {
            return this._bLock;
        }
        clear(bRemoveLinks, bool = false);
        IObjectArray;
 {
 {
                logger.setSourceLocation("util/ObjectArray.ts", 47);
                logger.assert(!this._bLock, "cannot clear. array is locked.");
            }
            ;
            this._iLength = 0;
            if (bRemoveLinks) {
                for(var i = 0; i < this._pData.length; ++i) {
                    this._pData[i] = null;
                }
            }
            return this;
        }
        release();
        IObjectArray;
 {
            this.clear(true);
            this._pData.clear();
            return this;
        }
        inline;
        value(n, number);
        any;
 {
            return this._pData[n];
        }
        extend(n, number);
        void {
            if: (this._pData.length < n)
        };
 {
            for(var i = this._pData.length; i < n; ++i) {
                this._pData[i] = null;
            }
        }
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
set(n, number, pData, any);
IObjectArray;
 {
 {
        logger.setSourceLocation("util/ObjectArray.ts", 80);
        logger.assert(!this._bLock, "cannot clear. array is locked.");
    }
    ;
    var N = n + 1;
    this.extend(N);
    if (this._iLength < N) {
        this._iLength = N;
    }
    this._pData[n] = pData;
    return this;
}
fromArray(pElements, any[], iOffset, number = 0, iSize, number = 0);
IObjectArray;
 {
 {
        logger.setSourceLocation("util/ObjectArray.ts", 96);
        logger.assert(!this._bLock, "cannot clear. array is locked.");
    }
    ;
    iSize = iSize > 0 ? iSize < pElements.length ? iSize : pElements.length : pElements.length;
    this.extend(iSize);
    for(var i = iOffset, j = 0; i < iSize; ++i, ++j) {
        this._pData[i] = pElements[j];
    }
    this._iLength = i;
    return this;
}
inline;
push(pElement, any);
IObjectArray;
 {
 {
        logger.setSourceLocation("util/ObjectArray.ts", 113);
        logger.assert(!this._bLock, "cannot clear. array is locked.");
    }
    ;
    return this.set(this._iLength, pElement);
}
inline;
pop();
any;
 {
 {
        logger.setSourceLocation("util/ObjectArray.ts", 119);
        logger.assert(!this._bLock, "cannot clear. array is locked.");
    }
    ;
    return this._iLength > 0 ? this._pData[--this._iLength] : null;
}
inline;
swap(i, number, j, number);
IObjectArray;
 {
 {
        logger.setSourceLocation("util/ObjectArray.ts", 124);
        logger.assert(!this._bLock, "cannot clear. array is locked.");
    }
    ;
 {
        logger.setSourceLocation("util/ObjectArray.ts", 125);
        logger.assert(i < this._iLength && j < this._iLength, "invalid swap index.");
    }
    ;
    this._pData.swap(i, j);
    return this;
}
takeAt(iPos);
any;
 {
    var pValue = this.value(iPos);
    for(var i = iPos + 1, j = iPos; i < this.length; ++i, ++j) {
        this._pData[j] = this._pData[i];
    }
    this._iLength--;
    return pValue;
}
indexOf(pObject, any);
number;
 {
    for(var i = 0; i < this._iLength; i++) {
        if (pObject === this._pData[i]) {
            return i;
        }
    }
    return -1;
}
var akra;
(function (akra) {
    akra.ObjectArray = util.ObjectArray;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var Viewport = (function () {
            function Viewport(pCamera, pTarget, csRenderMethod, fLeft, fTop, fWidth, fHeight, iZIndex) {
                if (typeof csRenderMethod === "undefined") { csRenderMethod = null; }
                if (typeof fLeft === "undefined") { fLeft = 0.; }
                if (typeof fTop === "undefined") { fTop = 0.; }
                if (typeof fWidth === "undefined") { fWidth = 1.; }
                if (typeof fHeight === "undefined") { fHeight = 1.; }
                if (typeof iZIndex === "undefined") { iZIndex = 0; }
                this._pViewportState = {
                    cullingMode: ECullingMode.NONE,
                    depthTest: true,
                    depthWrite: true,
                    depthFunction: ECompareFunction.LESS,
                    clearColor: new Color(0., 0., 0., 0.),
                    clearDepth: 1.,
                    clearBuffers: EFrameBufferTypes.COLOR | EFrameBufferTypes.DEPTH
                };
                this._bClearEveryFrame = true;
                this._bNewFrame = false;
                this._bUpdated = false;
                this._iVisibilityMask = 0xFFFFFFFF;
                this.sMaterialSchemeName = DEFAULT_MATERIAL_NAME;
                this._isAutoUpdated = true;
                this._csDefaultRenderMethod = null;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = newFrame();
                this._pTarget = pTarget;
                this._fRelLeft = fLeft;
                this._fRelTop = fTop;
                this._fRelWidth = fWidth;
                this._fRelHeight = fHeight;
                this._iZIndex = iZIndex;
                this._csDefaultRenderMethod = csRenderMethod;
                this._updateDimensions();
                this._setCamera(pCamera);
                this.connect(pTarget, "resized", "_updateDimensions");
            }
            Viewport.prototype.zIndex = function () {
                return this._iZIndex;
            };
            Viewport.prototype.left = function () {
                return this._fRelLeft;
            };
            Viewport.prototype.top = function () {
                return this._fRelTop;
            };
            Viewport.prototype.width = function () {
                return this._fRelWidth;
            };
            Viewport.prototype.height = function () {
                return this._fRelHeight;
            };
            Viewport.prototype.actualLeft = function () {
                return this._iActLeft;
            };
            Viewport.prototype.actualTop = function () {
                return this._iActTop;
            };
            Viewport.prototype.actualWidth = function () {
                return this._iActWidth;
            };
            Viewport.prototype.actualHeight = function () {
                return this._iActHeight;
            };
            Viewport.prototype.backgroundColor = function () {
                return this._pViewportState.clearColor;
            };
            Viewport.prototype.backgroundColor = function (cColor) {
                this._pViewportState.clearColor.set(cColor);
            };
            Viewport.prototype.depthClear = function () {
                return this._pViewportState.clearDepth;
            };
            Viewport.prototype.depthClear = function (fDepthClearValue) {
                this._pViewportState.clearDepth = fDepthClearValue;
            };
            Viewport.prototype.destroy = function () {
                var pRenderer = this._pTarget.getRenderer();
                if (pRenderer && pRenderer._getViewport() === this) {
                    pRenderer._setViewport(null);
                }
            };
            return Viewport;
        })();
        render.Viewport = Viewport;        
        void {
            this: ,
            _bNewFrame:  = true
        };
        clear(iBuffers, number = EFrameBufferTypes.COLOR | EFrameBufferTypes.DEPTH, cColor, IColor = Color.BLACK, fDepth, number = 1., iStencil, number = 0);
        void {
            var: pRenderer,
            IRenderer:  = this._pTarget.getRenderer()
        };
        if (pRenderer) {
            var pCurrentViewport = pRenderer._getViewport();
            if (pCurrentViewport && pCurrentViewport === this) {
                pRenderer.clearFrameBuffer(iBuffers, cColor, fDepth, iStencil);
            } else if (pCurrentViewport) {
                pRenderer._setViewport(this);
                pRenderer.clearFrameBuffer(iBuffers, cColor, fDepth, iStencil);
                pRenderer._setViewport(pCurrentViewport);
            }
        }
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
inline;
getTarget();
IRenderTarget;
 {
    return this._pTarget;
}
inline;
getCamera();
ICamera;
 {
    return this._pCamera;
}
setCamera(pCamera, ICamera);
bool;
 {
    if (this._pCamera) {
        if (this._pCamera._getLastViewport() == this) {
            this._pCamera._keepLastViewport(null);
        }
    }
    if (this._pCamera) {
        if (!pCamera.isConstantAspect()) {
            pCamera.aspect = (this._iActWidth / this._iActHeight);
        }
    }
    this._setCamera(pCamera);
    this.viewportCameraChanged();
    return true;
}
_setCamera(pCamera, ICamera);
void {
    this: ,
    _pCamera:  = pCamera
};
if (pCamera) {
    pCamera._keepLastViewport(this);
}
setDimensions(fLeft, number, fTop, number, fWidth, number, fHeight, number);
bool;
setDimensions(pRect, IRect2d);
bool;
setDimensions(fLeft ?  : , fTop ?  : , fWidth ?  : , fHeight ?  : );
bool;
 {
    var pRect;
    if (isNumber(arguments[0])) {
        this._fRelLeft = fLeft;
        this._fRelTop = fTop;
        this._fRelWidth = fWidth;
        this._fRelHeight = fHeight;
    } else {
        pRect = arguments[0];
        this._fRelLeft = pRect.left;
        this._fRelTop = pRect.top;
        this._fRelWidth = pRect.width;
        this._fRelHeight = pRect.height;
    }
    this._updateDimensions();
    return true;
}
getActualDimensions();
IRect2d;
 {
    return new geometry.Rect2d(this._iActLeft, this._iActTop, this._iActWidth, this._iActHeight);
}
setClearEveryFrame(isClear, bool, iBuffers ?  : number = EFrameBufferTypes.COLOR | EFrameBufferTypes.DEPTH);
void {
    this: ,
    _bClearEveryFrame:  = isClear
};
this._pViewportState.clearBuffers = iBuffers;
inline;
getClearEveryFrame();
bool;
 {
    return this._bClearEveryFrame;
}
inline;
getClearBuffers();
number;
 {
    return this._pViewportState.clearBuffers;
}
setDepthParams(bDepthTest, bool, bDepthWrite, bool, eDepthFunction, ECompareFunction);
void {
    this: ,
    _pViewportState: ,
    depthTest:  = bDepthTest
};
this._pViewportState.depthWrite = bDepthWrite;
this._pViewportState.depthFunction = eDepthFunction;
setCullingMode(eCullingMode, ECullingMode);
void {
    this: ,
    _pViewportState: ,
    cullingMode:  = eCullingMode
};
inline;
setAutoUpdated(bValue, bool = true);
void {
    this: ,
    _isAutoUpdated:  = bValue
};
inline;
isAutoUpdated();
bool;
 {
    return this._isAutoUpdated;
}
_updateDimensions();
void {
    var: fHeight,
    number:  = this._pTarget.height
};
var fWidth = this._pTarget.width;
this._iActLeft = (this._fRelLeft * fWidth);
this._iActTop = (this._fRelTop * fHeight);
this._iActWidth = (this._fRelWidth * fWidth);
this._iActHeight = (this._fRelHeight * fHeight);
if (this._pCamera) {
    if (!this._pCamera.isConstantAspect()) {
        this._pCamera.aspect = (this._iActWidth / this._iActHeight);
    }
}
this._bUpdated = true;
this.viewportDimensionsChanged();
update();
void {
    if: (this._bClearEveryFrame)
};
 {
    this.clear(this._pViewportState.clearBuffers, this._pViewportState.clearColor, this._pViewportState.clearDepth);
}
this._updateImpl();
this.getTarget().getRenderer().executeQueue();
_updateImpl();
void {
    if: (this._pCamera)
};
 {
    this.renderAsNormal(this._csDefaultRenderMethod, this._pCamera);
}
renderAsNormal(csMethod, string, pCamera, ICamera);
void {
    var: pVisibleObjects,
    IObjectArray:  = pCamera.display()
};
var pRenderable;
for(var i = 0; i < pVisibleObjects.length; ++i) {
    pVisibleObjects.value(i).prepareForRender(this);
}
for(var i = 0; i < pVisibleObjects.length; ++i) {
    var pSceneObject = pVisibleObjects.value(i);
    for(var j = 0; j < pSceneObject.totalRenderable; j++) {
        pRenderable = pSceneObject.getRenderable(j);
        if (!isNull(pRenderable)) {
            pRenderable.render(this, csMethod, pSceneObject);
        }
    }
}
inline;
isUpdated();
bool;
 {
    return this._bUpdated;
}
inline;
_clearUpdatedFlag();
void {
    this: ,
    _bUpdated:  = false
};
_getNumRenderedPolygons();
number;
 {
    return this._pCamera ? this._pCamera._getNumRenderedFaces() : 0;
}
inline;
_getViewportState();
IViewportState;
 {
    return this._pViewportState;
}
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return Viewport._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
viewportDimensionsChanged();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).viewportDimensionsChanged;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
viewportCameraChanged();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).viewportCameraChanged;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
var akra;
(function (akra) {
    ;
    ;
    (function (ELightTypes) {
        ELightTypes._map = [];
        ELightTypes._map[0] = "UNKNOWN";
        ELightTypes.UNKNOWN = 0;
        ELightTypes._map[1] = "PROJECT";
        ELightTypes.PROJECT = 1;
        ELightTypes._map[2] = "OMNI";
        ELightTypes.OMNI = 2;
    })(akra.ELightTypes || (akra.ELightTypes = {}));
    var ELightTypes = akra.ELightTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var LightData = (function () {
            function LightData() {
                this.DIFFUSE = new Vec4();
                this.AMBIENT = new Vec4();
                this.SPECULAR = new Vec4();
                this.POSITION = new Vec3();
                this.ATTENUATION = new Vec3();
            }
            LightData.prototype.set = function (pLightParam, v3fPosition) {
                this.DIFFUSE.set(pLightParam.diffuse);
                this.AMBIENT.set(pLightParam.ambient);
                this.SPECULAR.set(pLightParam.specular);
                this.ATTENUATION.set(pLightParam.attenuation);
                this.POSITION.set(v3fPosition);
                return this;
            };
            return LightData;
        })();
        render.LightData = LightData;        
        ;
        var UniformOmni = (function () {
            function UniformOmni() {
                this.LIGHT_DATA = new LightData();
            }
            UniformOmni.prototype.setLightData = function (pLightParam, v3fPosition) {
                this.LIGHT_DATA.set(pLightParam, v3fPosition);
                return this;
            };
            Object.defineProperty(UniformOmni, "stackCeil", {
                get: function () {
                    UniformOmni.stackPosition = UniformOmni.stackPosition === UniformOmni.stackSize - 1 ? 0 : UniformOmni.stackPosition;
                    return UniformOmni.stack[UniformOmni.stackPosition++];
                }
,
                enumerable: true,
                configurable: true
            });
            UniformOmni.stackSize = 200;
            UniformOmni.stackPosition = 0;
            UniformOmni.stack = (function () {
                var pStack = new Array(UniformOmni.stackSize);
                for(var i = 0; i < UniformOmni.stackSize; i++) {
                    pStack[i] = new UniformOmni();
                }
                return pStack;
            })();
            return UniformOmni;
        })();
        render.UniformOmni = UniformOmni;        
        ;
        var UniformProject = (function () {
            function UniformProject() {
                this.LIGHT_DATA = new LightData();
                this.SHADOW_MATRIX = new Mat4();
            }
            UniformProject.prototype.setLightData = function (pLightParam, v3fPosition) {
                this.LIGHT_DATA.set(pLightParam, v3fPosition);
                return this;
            };
            UniformProject.prototype.setMatrix = function (m4fMatrix) {
                this.SHADOW_MATRIX.set(m4fMatrix);
                return this;
            };
            Object.defineProperty(UniformProject, "stackCeil", {
                get: function () {
                    UniformProject.stackPosition = UniformProject.stackPosition === UniformProject.stackSize - 1 ? 0 : UniformProject.stackPosition;
                    return UniformProject.stack[UniformProject.stackPosition++];
                }
,
                enumerable: true,
                configurable: true
            });
            UniformProject.stackSize = 200;
            UniformProject.stackPosition = 0;
            UniformProject.stack = (function () {
                var pStack = new Array(UniformProject.stackSize);
                for(var i = 0; i < UniformProject.stackSize; i++) {
                    pStack[i] = new UniformProject();
                }
                return pStack;
            })();
            return UniformProject;
        })();
        render.UniformProject = UniformProject;        
        ;
        var UniformProjectShadow = (function () {
            function UniformProjectShadow() {
                this.LIGHT_DATA = new LightData();
                this.TO_LIGHT_SPACE = new Mat4();
                this.REAL_PROJECTION_MATRIX = new Mat4();
                this.OPTIMIZED_PROJECTION_MATRIX = new Mat4();
                this.SHADOW_SAMPLER = fx.createSamplerState();
            }
            UniformProjectShadow.prototype.setLightData = function (pLightParam, v3fPosition) {
                this.LIGHT_DATA.set(pLightParam, v3fPosition);
                return this;
            };
            UniformProjectShadow.prototype.setMatrix = function (m4fToLightSpace, m4fRealProj, m4fOptimizedProj) {
                this.TO_LIGHT_SPACE.set(m4fToLightSpace);
                this.REAL_PROJECTION_MATRIX.set(m4fRealProj);
                this.OPTIMIZED_PROJECTION_MATRIX.set(m4fOptimizedProj);
                return this;
            };
            UniformProjectShadow.prototype.setSampler = function (sTexture) {
                this.SHADOW_SAMPLER.textureName = sTexture;
                return this;
            };
            Object.defineProperty(UniformProjectShadow, "stackCeil", {
                get: function () {
                    UniformProjectShadow.stackPosition = UniformProjectShadow.stackPosition === UniformProjectShadow.stackSize - 1 ? 0 : UniformProjectShadow.stackPosition;
                    return UniformProjectShadow.stack[UniformProjectShadow.stackPosition++];
                }
,
                enumerable: true,
                configurable: true
            });
            UniformProjectShadow.stackSize = 20;
            UniformProjectShadow.stackPosition = 0;
            UniformProjectShadow.stack = (function () {
                var pStack = new Array(UniformProjectShadow.stackSize);
                for(var i = 0; i < UniformProjectShadow.stackSize; i++) {
                    pStack[i] = new UniformProjectShadow();
                }
                return pStack;
            })();
            return UniformProjectShadow;
        })();
        render.UniformProjectShadow = UniformProjectShadow;        
        var UniformOmniShadow = (function () {
            function UniformOmniShadow() {
                this.LIGHT_DATA = new LightData();
                this.TO_LIGHT_SPACE = [
                    new Mat4(), 
                    new Mat4(), 
                    new Mat4(), 
                    new Mat4(), 
                    new Mat4(), 
                    new Mat4()
                ];
                this.OPTIMIZED_PROJECTION_MATRIX = [
                    new Mat4(), 
                    new Mat4(), 
                    new Mat4(), 
                    new Mat4(), 
                    new Mat4(), 
                    new Mat4()
                ];
                this.SHADOW_SAMPLER = [
                    fx.createSamplerState(), 
                    fx.createSamplerState(), 
                    fx.createSamplerState(), 
                    fx.createSamplerState(), 
                    fx.createSamplerState(), 
                    fx.createSamplerState()
                ];
            }
            UniformOmniShadow.prototype.setLightData = function (pLightParam, v3fPosition) {
                this.LIGHT_DATA.set(pLightParam, v3fPosition);
                return this;
            };
            UniformOmniShadow.prototype.setMatrix = function (m4fToLightSpace, m4fOptimizedProj, index) {
                this.TO_LIGHT_SPACE[index].set(m4fToLightSpace);
                this.OPTIMIZED_PROJECTION_MATRIX[index].set(m4fOptimizedProj);
                return this;
            };
            UniformOmniShadow.prototype.setSampler = function (sTexture, index) {
                this.SHADOW_SAMPLER[index].textureName = sTexture;
                return this;
            };
            Object.defineProperty(UniformOmniShadow, "stackCeil", {
                get: function () {
                    UniformOmniShadow.stackPosition = UniformOmniShadow.stackPosition === UniformOmniShadow.stackSize - 1 ? 0 : UniformOmniShadow.stackPosition;
                    return UniformOmniShadow.stack[UniformOmniShadow.stackPosition++];
                }
,
                enumerable: true,
                configurable: true
            });
            UniformOmniShadow.stackSize = 3;
            UniformOmniShadow.stackPosition = 0;
            UniformOmniShadow.stack = (function () {
                var pStack = new Array(UniformOmniShadow.stackSize);
                for(var i = 0; i < UniformOmniShadow.stackSize; i++) {
                    pStack[i] = new UniformOmniShadow();
                }
                return pStack;
            })();
            return UniformOmniShadow;
        })();
        render.UniformOmniShadow = UniformOmniShadow;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var RenderPass = (function () {
            function RenderPass(pTechnique, iPass) {
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pTechnique = null;
                this._pRenderTarget = null;
                this._iPassNumber = 0;
                this._pInput = null;
                this._isActive = true;
                this.inline = setForeign(sName, string, fValue, number);
                this._pTechnique = pTechnique;
                this._iPassNumber = iPass;
            }
            return RenderPass;
        })();
        render.RenderPass = RenderPass;        
        void {
            this: ,
            _pInput: ,
            setForeign: (sName, 
fValue)
        };
        inline;
        setTexture(sName, string, pTexture, ITexture);
        void {
            this: ,
            _pInput: ,
            setTexture: (sName, 
pTexture)
        };
        inline;
        setUniform(sName, string, pValue, any);
        void {
            this: ,
            _pInput: ,
            setUniform: (sName, 
pValue)
        };
        inline;
        setStruct(sName, string, pValue, any);
        void {
            this: ,
            _pInput: ,
            setStruct: (sName, 
pValue)
        };
        inline;
        setSamplerTexture(sName, string, sTexture, string);
        void ;
        inline;
        setSamplerTexture(sName, string, pTexture, ITexture);
        void ;
        inline;
        setSamplerTexture(sName, string, pTexture, any);
        void {
            this: ,
            _pInput: ,
            setSamplerTexture: (sName, 
pTexture)
        };
        getRenderTarget();
        IRenderTarget;
 {
            return this._pRenderTarget;
        }
        setRenderTarget(pTarget, IRenderTarget);
        void {
            this: ,
            _pRenderTarget:  = pTarget
        };
        getPassInput();
        IAFXPassInputBlend;
 {
            return this._pInput;
        }
        setPassInput(pInput, IAFXPassInputBlend, isNeedRelocate, bool);
        void {
            if: (isNeedRelocate)
        };
 {
            this.relocateOldInput(pInput);
        }
        if (!isNull(this._pInput)) {
            this._pInput._release();
        }
        this._pInput = pInput;
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
blend(sComponentName, string, iPass, number);
bool;
 {
    return this._pTechnique.addComponent(sComponentName, this._iPassNumber, iPass);
}
inline;
activate();
void {
    this: ,
    _isActive:  = true
};
inline;
deactivate();
void {
    this: ,
    _isActive:  = false
};
inline;
isActive();
bool;
 {
    return this._isActive;
}
relocateOldInput(pNewInput, IAFXPassInputBlend);
void {};
var akra;
(function (akra) {
    (function (render) {
        var RenderTechnique = (function () {
            function RenderTechnique(pMethod) {
                if (typeof pMethod === "undefined") { pMethod = null; }
                this._pMethod = null;
                this._isFreeze = false;
                this._pComposer = null;
                this._pPassList = null;
                this._pPassBlackList = null;
                this._iCurrentPass = 0;
                this._pCurrentPass = null;
                this._iGlobalPostEffectsStart = 0;
                this.inline = get;
                this.inline = getPass(iPass, number);
                this.IRenderPass = {
                    this: ,
                    _pComposer: ,
                    prepareTechniqueBlend: (this)
                };
                this._pPassList = [];
                this._pPassBlackList = [];
                if (!isNull(pMethod)) {
                    this.setMethod(pMethod);
                }
            }
            RenderTechnique.prototype.modified = function () {
                return this.getGuid();
            };
            Object.defineProperty(RenderTechnique.prototype, "totalPasses", {
                get: function () {
                    return this._pComposer.getTotalPassesForTechnique(this);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(RenderTechnique.prototype, "data", {
                get: function () {
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            RenderTechnique.prototype.destroy = function () {
            };
            return RenderTechnique;
        })();
        render.RenderTechnique = RenderTechnique;        
        return this._pPassList[iPass];
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
getMethod();
IRenderMethod;
 {
    return this._pMethod;
}
setMethod(pMethod, IRenderMethod);
void {
    if: (!isNull(this._pMethod))
};
 {
    this.disconnect(this._pMethod, "altered", "_updateMethod", EEventTypes.BROADCAST);
}
this._pMethod = pMethod;
if (!isNull(pMethod)) {
    var pComposer = pMethod.manager.getEngine().getComposer();
    this._setComposer(pComposer);
    this.connect(pMethod, "altered", "_updateMethod", EEventTypes.BROADCAST);
}
this.informComposer();
setState(sName, string, pValue, any);
void {};
setForeign(sName, string, pValue, any);
void {};
setStruct(sName, string, pValue, any);
void {};
setTextureBySemantics(sName, string, pValue, any);
void {};
setShadowSamplerArray(sName, string, pValue, any);
void {};
setVec2BySemantic(sName, string, pValue, any);
void {};
isReady();
bool;
 {
    return this._pMethod.isResourceLoaded() && !this._pMethod.isResourceDisabled();
}
addComponent(iComponentHandle, number, iShift ?  : number, iPass ?  : number, isSet ?  : bool);
bool;
addComponent(pComponent, IAFXComponent, iShift ?  : number, iPass ?  : number, isSet ?  : bool);
bool;
addComponent(sComponent, string, iShift ?  : number, iPass ?  : number, isSet ?  : bool);
bool;
addComponent(pComponent, any, iShift ?  : number = 0, iPass ?  : number = 0xffffff, isSet ?  : bool = true);
bool;
 {
    if (isNull(this._pComposer)) {
        return false;
    }
    var pComponentPool = this._pComposer.getEngine().getResourceManager().componentPool;
    if (isInt(pComponent)) {
        pComponent = pComponentPool.getResource(pComponent);
    } else if (isString(pComponent)) {
        pComponent = pComponentPool.findResource(pComponent);
    }
    if (!isDef(pComponent) || isNull(pComponent)) {
 {
            logger.setSourceLocation("RenderTechnique.ts", 120);
            logger.error("Bad component for add/delete.");
        }
        ;
        return false;
    }
    if (isSet) {
        if (!this._pComposer.addOwnComponentToTechnique(this, pComponent, iShift, iPass)) {
 {
                logger.setSourceLocation("RenderTechnique.ts", 126);
                logger.error("Can not add component '" + pComponent.findResourceName() + "'");
            }
            ;
            return false;
        }
    } else {
        if (!this._pComposer.removeOwnComponentToTechnique(this, pComponent, iShift, iPass)) {
 {
                logger.setSourceLocation("RenderTechnique.ts", 132);
                logger.error("Can not delete component '" + pComponent.findResourceName() + "'");
            }
            ;
            return false;
        }
    }
    return true;
}
delComponent(iComponentHandle, number, iShift ?  : number, iPass ?  : number);
bool;
delComponent(sComponent, string, iShift ?  : number, iPass ?  : number);
bool;
delComponent(pComponent, IAFXComponent, iShift ?  : number, iPass ?  : number);
bool;
delComponent(pComponent, any, iShift ?  : number = 0, iPass ?  : number = 0xffffff);
bool;
 {
    return this.addComponent(pComponent, iShift, iPass, false);
}
hasComponent(sComponent, string, iShift, number, iPass, number);
bool;
 {
    if (isNull(this._pComposer)) {
        return false;
    }
    var pComponentPool = this._pComposer.getEngine().getResourceManager().componentPool;
    var pComponent = null;
    pComponent = pComponentPool.findResource(sComponent);
    return this._pComposer.hasOwnComponentInTechnique(this, pComponent, iShift, iPass);
}
hasGlobalPostEffect();
bool;
 {
    return this._iGlobalPostEffectsStart > 0;
}
isPostEffectPass(iPass, number);
bool;
 {
    return this._iGlobalPostEffectsStart <= iPass;
}
isLastPass(iPass, number);
bool;
 {
    var iMaxPass = this.totalPasses - 1;
    if (iMaxPass === iPass) {
        return true;
    }
    if (!this._pPassBlackList[iMaxPass]) {
        return false;
    }
    for(var i = this._pPassBlackList.length - 2; i >= 0; i--) {
        if (!this._pPassBlackList[i]) {
            if (i !== iPass) {
                return false;
            } else {
                return true;
            }
        }
    }
    return false;
}
isFirstPass(iPass, number);
bool;
 {
    if (iPass === 0) {
        return true;
    }
    if (!this._pPassBlackList[0]) {
        return false;
    }
    for(var i = 1; i < this._pPassBlackList.length; i++) {
        if (!this._pPassBlackList[i]) {
            if (i !== iPass) {
                return false;
            } else {
                return true;
            }
        }
    }
    return false;
}
isFreeze();
bool;
 {
    return this._isFreeze;
}
updatePasses(bSaveOldUniformValue, bool);
void {
    this: ,
    _isFreeze:  = true
};
var iTotalPasses = this.totalPasses;
for(var i = this._pPassList.length; i < iTotalPasses; i++) {
    if (!isDef(this._pPassBlackList[i]) || this._pPassBlackList[i] === false) {
        this._pPassList[i] = new RenderPass(this, i);
        this._pPassBlackList[i] = false;
    }
}
for(var i = 0; i < iTotalPasses; i++) {
    if (!this._pPassBlackList[i]) {
        var pInput = this._pComposer.getPassInputBlend(this, i);
        if (!isNull(pInput)) {
            this._pPassList[i].setPassInput(pInput, bSaveOldUniformValue);
            this._pPassList[i].activate();
        } else {
            this._pPassList[i].deactivate();
        }
    }
}
this._isFreeze = false;
_setComposer(pComposer, IAFXComposer);
void {
    this: ,
    _pComposer:  = pComposer
};
_renderTechnique(pViewport, IViewport, pRenderable, IRenderableObject, pSceneObject, ISceneObject);
void {
    if: (isNull(this._pComposer))
};
 {
    return;
}
var pComposer = this._pComposer;
pComposer.prepareTechniqueBlend(this);
pComposer._setCurrentViewport(pViewport);
pComposer._setCurrentSceneObject(pSceneObject);
pComposer._setCurrentRenderableObject(pRenderable);
pComposer.applySurfaceMaterial(this._pMethod.surfaceMaterial);
this._isFreeze = true;
for(var i = 0; i < this.totalPasses; i++) {
    if (this._pPassBlackList[i] === false && this._pPassList[i].isActive()) {
        this.activatePass(i);
        this.render(i);
        pComposer.renderTechniquePass(this, i);
    }
}
this._isFreeze = false;
pComposer._setCurrentSceneObject(null);
_updateMethod(pMethod, IRenderMethod);
void {
    this: ,
    informComposer: 
};
_blockPass(iPass, number);
void {
    this: ,
    _pPassBlackList: [
        iPass
    ] = true
};
this._pComposer.prepareTechniqueBlend(this);
_setGlobalPostEffectsFrom(iPass, number);
void {
    this: ,
    _iGlobalPostEffectsStart:  = iPass
};
informComposer();
void {
    if: (!isNull(this._pComposer))
};
 {
    this._pComposer.markTechniqueAsNeedUpdate(this);
}
activatePass(iPass, number);
void {
    this: ,
    _iCurrentPass:  = iPass
};
this._pCurrentPass = this._pPassList[iPass];
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return RenderTechnique._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
render(iPass);
void {
    var: _recivier,
    any:  = this
};
this._pUnicastSlotMap = this._pUnicastSlotMap || (this.getEventTable()).findUnicastList(this._iGuid);
var _unicast = (this._pUnicastSlotMap).render;
if (isDef(_unicast)) {
    _unicast.target ? _unicast.target[_unicast.callback](_recivier, iPass) : _unicast.listener(_recivier, iPass);
}
;
;
;
var akra;
(function (akra) {
    (function (geometry) {
        var Sphere = (function () {
            function Sphere(fCenterX, fCenterY, fCenterZ, fRadius) {
                this.inline = clear();
                this.ISphere = {
                    this: ,
                    center: ,
                    clear: 
                };
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        var pSphere = arguments[0];
                        this.center = new Vec3(pSphere.v3fCenter);
                        this.radius = pSphere.fRadius;
                        break;
                    case 2:
                        var v3fCenter = arguments[0];
                        var fRadius = arguments[1];
                        this.center = new Vec3(v3fCenter);
                        this.radius = fRadius;
                        break;
                    case 4:
                        this.center = new Vec3(arguments[0], arguments[1], arguments[2]);
                        this.radius = arguments[3];
                        break;
                    default:
                        this.center = new Vec3();
                        this.radius = 0.;
                        break;
                }
            }
            Object.defineProperty(Sphere.prototype, "circle", {
                get: function () {
                    var v3fCenter = this.center;
                    return new Circle(v3fCenter.x, v3fCenter.y, this.radius);
                },
                set: function (pCircle) {
                    var v3fCenter = this.center;
                    var v2fCircleCenter = pCircle.center;
                    v3fCenter.x = v2fCircleCenter.x;
                    v3fCenter.y = v2fCircleCenter.y;
                    this.radius = pCircle.radius;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Sphere.prototype, "z", {
                get: function () {
                    return this.center.z;
                },
                set: function (fZ) {
                    this.center.z = fZ;
                },
                enumerable: true,
                configurable: true
            });
            Sphere.prototype.set = function (fCenterX, fCenterY, fCenterZ, fRadius) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        var pSphere = arguments[0];
                        this.center.set(pSphere.center);
                        this.radius = pSphere.radius;
                        break;
                    case 2:
                        var v3fCenter = arguments[0];
                        var fRadius = arguments[1];
                        this.center.set(v3fCenter);
                        this.radius = fRadius;
                        break;
                    case 4:
                        this.center.set(arguments[0], arguments[1], arguments[2]);
                        this.radius = arguments[3];
                        break;
                    default:
                        this.center.set(0.);
                        this.radius = 0.;
                        break;
                }
                return this;
            };
            return Sphere;
        })();
        geometry.Sphere = Sphere;        
        this.radius = 0.;
        return this;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
;
inline;
isEqual(pSphere, ISphere);
bool;
 {
    return this.center.isEqual(pSphere.center) && (this.radius == pSphere.radius);
}
;
inline;
isClear();
bool;
 {
    return this.center.isClear() && (this.radius === 0.);
}
;
inline;
isValid();
bool;
 {
    return (this.radius >= 0.);
}
;
inline;
offset(v3fOffset, IVec3);
ISphere;
 {
    this.center.add(v3fOffset);
    return this;
}
;
inline;
expand(fInc, number);
ISphere;
 {
    this.radius += fInc;
    return this;
}
;
inline;
normalize();
ISphere;
 {
    this.radius = math.abs(this.radius);
    return this;
}
;
transform(m4fMatrix, IMat4);
ISphere;
 {
 {
        logger.setSourceLocation("Sphere.ts", 133);
        logger.criticalError("TODO: transform() for Sphere similar to Rect3d::transform();");
    }
    ;
    return this;
}
;
var akra;
(function (akra) {
    (function (geometry) {
        var Rect3d = (function () {
            function Rect3d(fX0, fX1, fY0, fY1, fZ0, fZ1) {
                this.inline = clear();
                this.IRect3d = {
                    this: ,
                    x0:  = this.x1 = this.y0 = this.y1 = this.z0 = this.z1 = 0.
                };
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 2:
                        this.set(arguments[0], arguments[1]);
                        break;
                    case 3:
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;
                    case 6:
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                        break;
                    default:
                        this.x0 = this.x1 = this.y0 = this.y1 = this.z0 = this.z1 = 0.;
                        break;
                }
            }
            Object.defineProperty(Rect3d.prototype, "rect2d", {
                get: function () {
                    return new Rect2d(this.x0, this.x1, this.y0, this.y1);
                },
                set: function (pRect) {
                    this.x0 = pRect.x0;
                    this.x1 = pRect.x1;
                    this.y0 = pRect.y0;
                    this.y1 = pRect.y1;
                },
                enumerable: true,
                configurable: true
            });
            Rect3d.prototype.set = function (fX0, fX1, fY0, fY1, fZ0, fZ1) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        if (arguments[0] instanceof Rect3d) {
                            var pRect = arguments[0];
                            this.x0 = pRect.x0;
                            this.x1 = pRect.x1;
                            this.y0 = pRect.y0;
                            this.y1 = pRect.y1;
                            this.z0 = pRect.z0;
                            this.z1 = pRect.z1;
                        } else {
                            var v3fSize = arguments[0];
                            this.x1 = v3fSize.x * 0.5;
                            this.x0 = -this.x1;
                            this.y1 = v3fSize.y * 0.5;
                            this.y0 = -this.y1;
                            this.z1 = v3fSize.z * 0.5;
                            this.z0 = -this.z1;
                        }
                        break;
                    case 2:
                        var v3fMinPoint = arguments[0];
                        var v3fMaxPoint = arguments[1];
                        this.x0 = v3fMinPoint.x;
                        this.y0 = v3fMinPoint.y;
                        this.z0 = v3fMinPoint.z;
                        this.x1 = v3fMaxPoint.x;
                        this.y1 = v3fMaxPoint.y;
                        this.z1 = v3fMaxPoint.z;
                        break;
                    case 3:
                        var fSizeX = arguments[0];
                        var fSizeY = arguments[1];
                        var fSizeZ = arguments[2];
                        this.x1 = fSizeX * 0.5;
                        this.x0 = -this.x1;
                        this.y1 = fSizeY * 0.5;
                        this.y0 = -this.y1;
                        this.z1 = fSizeZ * 0.5;
                        this.z0 = -this.z1;
                        break;
                    case 6:
                        this.x0 = arguments[0];
                        this.x1 = arguments[1];
                        this.y0 = arguments[2];
                        this.y1 = arguments[3];
                        this.z0 = arguments[4];
                        this.z1 = arguments[5];
                        break;
                    default:
                        this.x0 = this.x1 = this.y0 = this.y1 = this.z0 = this.z1 = 0.;
                        break;
                }
                return this;
            };
            Rect3d.prototype.setFloor = function (pRect) {
                this.x0 = math.floor(pRect.x0);
                this.x1 = math.floor(pRect.x1);
                this.y0 = math.floor(pRect.y0);
                this.y1 = math.floor(pRect.y1);
                this.z0 = math.floor(pRect.z0);
                this.z1 = math.floor(pRect.z1);
                return this;
            };
            Rect3d.prototype.setCeil = function (pRect) {
                this.x0 = math.ceil(pRect.x0);
                this.x1 = math.ceil(pRect.x1);
                this.y0 = math.ceil(pRect.y0);
                this.y1 = math.ceil(pRect.y1);
                this.z0 = math.ceil(pRect.z0);
                this.z1 = math.ceil(pRect.z1);
                return this;
            };
            return Rect3d;
        })();
        geometry.Rect3d = Rect3d;        
        return this;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
;
addSelf(fValue, number);
IRect3d;
addSelf(v3fVec, IVec3);
IRect3d;
addSelf(v3fVec ?  : );
IRect3d;
 {
    if (isFloat(arguments[0])) {
        var fValue = arguments[0];
        this.x0 += fValue;
        this.x1 += fValue;
        this.y0 += fValue;
        this.y1 += fValue;
        this.z0 += fValue;
        this.z1 += fValue;
    } else {
        var v3fVec = arguments[0];
        this.x0 += v3fVec.x;
        this.x1 += v3fVec.x;
        this.y0 += v3fVec.y;
        this.y1 += v3fVec.y;
        this.z0 += v3fVec.z;
        this.z1 += v3fVec.z;
    }
    return this;
}
;
subSelf(fValue, number);
IRect3d;
subSelf(v3fVec, IVec3);
IRect3d;
subSelf(v3fVec ?  : );
IRect3d;
 {
    if (isFloat(arguments[0])) {
        var fValue = arguments[0];
        this.x0 -= fValue;
        this.x1 -= fValue;
        this.y0 -= fValue;
        this.y1 -= fValue;
        this.z0 -= fValue;
        this.z1 -= fValue;
    } else {
        var v3fVec = arguments[0];
        this.x0 -= v3fVec.x;
        this.x1 -= v3fVec.x;
        this.y0 -= v3fVec.y;
        this.y1 -= v3fVec.y;
        this.z0 -= v3fVec.z;
        this.z1 -= v3fVec.z;
    }
    return this;
}
;
multSelf(fValue, number);
IRect3d;
multSelf(v3fVec, IVec3);
IRect3d;
multSelf(v3fVec ?  : );
IRect3d;
 {
    if (isFloat(arguments[0])) {
        var fValue = arguments[0];
        this.x0 *= fValue;
        this.x1 *= fValue;
        this.y0 *= fValue;
        this.y1 *= fValue;
        this.z0 *= fValue;
        this.z1 *= fValue;
    } else {
        var v3fVec = arguments[0];
        this.x0 *= v3fVec.x;
        this.x1 *= v3fVec.x;
        this.y0 *= v3fVec.y;
        this.y1 *= v3fVec.y;
        this.z0 *= v3fVec.z;
        this.z1 *= v3fVec.z;
    }
    return this;
}
;
divSelf(fValue, number);
IRect3d;
divSelf(v3fVec, IVec3);
IRect3d;
divSelf(v3fVec ?  : );
IRect3d;
 {
    if (isFloat(arguments[0])) {
        var fValue = arguments[0];
 {
            logger.setSourceLocation("geometry/Rect3d.ts", 261);
            logger.assert(fValue != 0.0, "divide by zero error");
        }
        ;
        var fInvValue = 1. / fValue;
        this.x0 *= fInvValue;
        this.x1 *= fInvValue;
        this.y0 *= fInvValue;
        this.y1 *= fInvValue;
        this.z0 *= fInvValue;
        this.z1 *= fInvValue;
    } else {
        var v3fVec = arguments[0];
 {
            logger.setSourceLocation("geometry/Rect3d.ts", 275);
            logger.assert(v3fVec.x != 0.0, "divide by zero error");
        }
        ;
 {
            logger.setSourceLocation("geometry/Rect3d.ts", 276);
            logger.assert(v3fVec.y != 0.0, "divide by zero error");
        }
        ;
 {
            logger.setSourceLocation("geometry/Rect3d.ts", 277);
            logger.assert(v3fVec.z != 0.0, "divide by zero error");
        }
        ;
        var fInvX = 1. / v3fVec.x;
        var fInvY = 1. / v3fVec.y;
        var fInvZ = 1. / v3fVec.z;
        this.x0 *= fInvX;
        this.x1 *= fInvX;
        this.y0 *= fInvY;
        this.y1 *= fInvY;
        this.z0 *= fInvZ;
        this.z1 *= fInvZ;
    }
    return this;
}
;
offset(v3fOffset, IVec3);
IRect3d;
offset(fOffsetX, number, fOffsetY, number, fOffsetZ, number);
IRect3d;
offset(fOffsetX ?  : , fOffsetY ?  : , fOffsetZ ?  : );
IRect3d;
 {
    if (arguments.length === 1) {
        var v3fOffset = arguments[0];
        this.x0 += v3fOffset.x;
        this.x1 += v3fOffset.x;
        this.y0 += v3fOffset.y;
        this.y1 += v3fOffset.y;
        this.z0 += v3fOffset.z;
        this.z1 += v3fOffset.z;
    } else {
        this.x0 += arguments[0];
        this.x1 += arguments[0];
        this.y0 += arguments[1];
        this.y1 += arguments[1];
        this.z0 += arguments[2];
        this.z1 += arguments[2];
    }
    return this;
}
;
expand(fValue, number);
IRect3d;
expand(v3fVec, IVec3);
IRect3d;
expand(fValueX, number, fValueY, number, fValueZ, number);
IRect3d;
expand(fValueX ?  : , fValueY ?  : , fValueZ ?  : );
IRect3d;
 {
    if (arguments.length === 1) {
        if (isFloat(arguments[0])) {
            var fValue = arguments[0];
            this.x0 -= fValue;
            this.x1 += fValue;
            this.y0 -= fValue;
            this.y1 += fValue;
            this.z0 -= fValue;
            this.z1 += fValue;
        } else {
            var v3fVec = arguments[0];
            this.x0 -= v3fVec.x;
            this.x1 += v3fVec.x;
            this.y0 -= v3fVec.y;
            this.y1 += v3fVec.y;
            this.z0 -= v3fVec.z;
            this.z1 += v3fVec.z;
        }
    } else {
        this.x0 -= arguments[0];
        this.x1 += arguments[0];
        this.y0 -= arguments[1];
        this.y1 += arguments[1];
        this.z0 -= arguments[2];
        this.z1 += arguments[2];
    }
    return this;
}
;
inline;
expandX(fValue, number);
IRect3d;
 {
    this.x0 -= fValue;
    this.x1 += fValue;
    return this;
}
;
inline;
expandY(fValue, number);
IRect3d;
 {
    this.y0 -= fValue;
    this.y1 += fValue;
    return this;
}
;
inline;
expandZ(fValue, number);
IRect3d;
 {
    this.z0 -= fValue;
    this.z1 += fValue;
    return this;
}
;
resize(v3fSize, IVec3);
IRect3d;
resize(fSizeX, number, fSizeY, number, fSizeZ, number);
IRect3d;
resize(fSizeX ?  : , fSizeY ?  : , fSizeZ ?  : );
IRect3d;
 {
    var fSizeX, fSizeY, fSizeZ;
    if (arguments.length === 1) {
        var v3fSize = arguments[0];
        fSizeX = v3fSize.x;
        fSizeY = v3fSize.y;
        fSizeZ = v3fSize.z;
    } else {
        fSizeX = arguments[0];
        fSizeY = arguments[1];
        fSizeZ = arguments[2];
    }
    this.x1 = (this.x0 + this.x1 + fSizeX) * 0.5;
    this.x0 = this.x1 - fSizeX;
    this.y1 = (this.y0 + this.y1 + fSizeY) * 0.5;
    this.y0 = this.y1 - fSizeY;
    this.z1 = (this.z0 + this.z1 + fSizeZ) * 0.5;
    this.z0 = this.z1 - fSizeZ;
    return this;
}
;
inline;
resizeX(fSize, number);
IRect3d;
 {
    this.x1 = (this.x0 + this.x1 + fSize) * 0.5;
    this.x0 = this.x1 - fSize;
    return this;
}
;
inline;
resizeY(fSize, number);
IRect3d;
 {
    this.y1 = (this.y0 + this.y1 + fSize) * 0.5;
    this.y0 = this.y1 - fSize;
    return this;
}
;
inline;
resizeZ(fSize, number);
IRect3d;
 {
    this.z1 = (this.z0 + this.z1 + fSize) * 0.5;
    this.z0 = this.z1 - fSize;
    return this;
}
;
resizeMax(v3fSpan, IVec3);
IRect3d;
resizeMax(fSpanX, number, fSpanY, number, fSpanZ, number);
IRect3d;
resizeMax(fSpanX ?  : , fSpanY ?  : , fSpanZ ?  : );
IRect3d;
 {
    if (arguments.length === 1) {
        var v3fSpan = arguments[0];
        this.x1 = this.x0 + v3fSpan.x;
        this.y1 = this.y0 + v3fSpan.y;
        this.z1 = this.z0 + v3fSpan.z;
    } else {
        this.x1 = this.x0 + arguments[0];
        this.y1 = this.y0 + arguments[1];
        this.z1 = this.z0 + arguments[2];
    }
    return this;
}
;
inline;
resizeMaxX(fSpan, number);
IRect3d;
 {
    this.x1 = this.x0 + fSpan;
    return this;
}
;
inline;
resizeMaxY(fSpan, number);
IRect3d;
 {
    this.y1 = this.y0 + fSpan;
    return this;
}
;
inline;
resizeMaxZ(fSpan, number);
IRect3d;
 {
    this.z1 = this.z0 + fSpan;
    return this;
}
;
resizeMin(v3fSpan, IVec3);
IRect3d;
resizeMin(fSpanX, number, fSpanY, number, fSpanZ, number);
IRect3d;
resizeMin(fSpanX ?  : , fSpanY ?  : , fSpanZ ?  : );
IRect3d;
 {
    if (arguments.length === 1) {
        var v3fSpan = arguments[0];
        this.x0 = this.x1 - v3fSpan.x;
        this.y0 = this.y1 - v3fSpan.y;
        this.z0 = this.z1 - v3fSpan.z;
    } else {
        this.x0 = this.x1 - arguments[0];
        this.y0 = this.y1 - arguments[1];
        this.z0 = this.z1 - arguments[2];
    }
    return this;
}
;
inline;
resizeMinX(fSpan, number);
IRect3d;
 {
    this.x0 = this.x1 - fSpan;
    return this;
}
;
inline;
resizeMinY(fSpan, number);
IRect3d;
 {
    this.y0 = this.y1 - fSpan;
    return this;
}
;
inline;
resizeMinZ(fSpan, number);
IRect3d;
 {
    this.z0 = this.z1 - fSpan;
    return this;
}
;
unionPoint(v3fPoint, IVec3);
IRect3d;
unionPoint(fX, number, fY, number, fZ, number);
IRect3d;
unionPoint(fX ?  : , fY ?  : , fZ ?  : );
IRect3d;
 {
    if (arguments.length === 1) {
        var v3fPoint = arguments[0];
        this.x0 = math.min(this.x0, v3fPoint.x);
        this.x1 = math.max(this.x1, v3fPoint.x);
        this.y0 = math.min(this.y0, v3fPoint.y);
        this.y1 = math.max(this.y1, v3fPoint.y);
        this.z0 = math.min(this.z0, v3fPoint.z);
        this.z1 = math.max(this.z1, v3fPoint.z);
    } else {
        this.x0 = math.min(this.x0, arguments[0]);
        this.x1 = math.max(this.x1, arguments[0]);
        this.y0 = math.min(this.y0, arguments[1]);
        this.y1 = math.max(this.y1, arguments[1]);
        this.z0 = math.min(this.z0, arguments[2]);
        this.z1 = math.max(this.z1, arguments[2]);
    }
    return this;
}
;
unionRect(pRect, IRect3d);
IRect3d;
 {
    this.normalize();
    pRect.normalize();
    this.x0 = math.min(this.x0, pRect.x0);
    this.x1 = math.max(this.x1, pRect.x1);
    this.y0 = math.min(this.y0, pRect.y0);
    this.y1 = math.max(this.y1, pRect.y1);
    this.z0 = math.min(this.z0, pRect.z0);
    this.z1 = math.max(this.z1, pRect.z1);
    return this;
}
;
negate(pDestination ?  : IRect3d);
IRect3d;
 {
    if (!isDef(pDestination)) {
        pDestination = this;
    }
    return pDestination.set(-this.x1, -this.x0, -this.y1, -this.y0, -this.z1, -this.z0);
}
;
normalize();
IRect3d;
 {
    var fTmp;
    if (this.x0 > this.x1) {
        fTmp = this.x0;
        this.x0 = this.x1;
        this.x1 = fTmp;
    }
    if (this.y0 > this.y1) {
        fTmp = this.y0;
        this.y0 = this.y1;
        this.y1 = fTmp;
    }
    if (this.z0 > this.z1) {
        fTmp = this.z0;
        this.z0 = this.z1;
        this.z1 = fTmp;
    }
    return this;
}
;
transform(m4fMatrix, IMat4);
IRect3d;
 {
    var pData = m4fMatrix.data;
    var a11 = pData[0], a12 = pData[4], a13 = pData[8], a14 = pData[12];
    var a21 = pData[1], a22 = pData[5], a23 = pData[9], a24 = pData[13];
    var a31 = pData[2], a32 = pData[6], a33 = pData[10], a34 = pData[14];
    var fX0 = this.x0, fX1 = this.x1;
    var fY0 = this.y0, fY1 = this.y1;
    var fZ0 = this.z0, fZ1 = this.z1;
    var fBaseX = a11 * fX0 + a12 * fY0 + a13 * fZ0 + a14;
    var fBaseY = a21 * fX0 + a22 * fY0 + a23 * fZ0 + a24;
    var fBaseZ = a31 * fX0 + a32 * fY0 + a33 * fZ0 + a34;
    var fXNewX = a11 * (fX1 - fX0);
    var fXNewY = a21 * (fX1 - fX0);
    var fXNewZ = a31 * (fX1 - fX0);
    var fYNewX = a12 * (fY1 - fY0);
    var fYNewY = a22 * (fY1 - fY0);
    var fYNewZ = a32 * (fY1 - fY0);
    var fZNewX = a13 * (fZ1 - fZ0);
    var fZNewY = a23 * (fZ1 - fZ0);
    var fZNewZ = a33 * (fZ1 - fZ0);
    var fXMultX = (fXNewX > 0.) ? 1. : 0.;
    var fYMultX = (fYNewX > 0.) ? 1. : 0.;
    var fZMultX = (fZNewX > 0.) ? 1. : 0.;
    var fXMultY = (fXNewY > 0.) ? 1. : 0.;
    var fYMultY = (fYNewY > 0.) ? 1. : 0.;
    var fZMultY = (fZNewY > 0.) ? 1. : 0.;
    var fXMultZ = (fXNewZ > 0.) ? 1. : 0.;
    var fYMultZ = (fYNewZ > 0.) ? 1. : 0.;
    var fZMultZ = (fZNewZ > 0.) ? 1. : 0.;
    this.x1 = fBaseX + fXMultX * fXNewX + fYMultX * fYNewX + fZMultX * fZNewX;
    this.y1 = fBaseY + fXMultY * fXNewY + fYMultY * fYNewY + fZMultY * fZNewY;
    this.z1 = fBaseZ + fXMultZ * fXNewZ + fYMultZ * fYNewZ + fZMultZ * fZNewZ;
    this.x0 = fBaseX + (1. - fXMultX) * fXNewX + (1. - fYMultX) * fYNewX + (1. - fZMultX) * fZNewX;
    this.y0 = fBaseY + (1. - fXMultY) * fXNewY + (1. - fYMultY) * fYNewY + (1. - fZMultY) * fZNewY;
    this.z0 = fBaseZ + (1. - fXMultZ) * fXNewZ + (1. - fYMultZ) * fYNewZ + (1. - fZMultZ) * fZNewZ;
    return this;
}
;
inline;
isEqual(pRect, IRect3d);
bool;
 {
    return this.x0 == pRect.x0 && this.x1 == pRect.x1 && this.y0 == pRect.y0 && this.y1 == pRect.y1 && this.z0 == pRect.z0 && this.z1 == pRect.z1;
}
;
inline;
isClear();
bool;
 {
    return this.x0 == 0. && this.x1 == 0. && this.y0 == 0. && this.y1 == 0. && this.z0 == 0. && this.z1 == 0.;
}
;
inline;
isValid();
bool;
 {
    return this.x0 <= this.x1 && this.y0 <= this.y1 && this.z0 <= this.z1;
}
;
inline;
isPointInRect(v3fPoint, IVec3);
bool;
 {
    var x = v3fPoint.x;
    var y = v3fPoint.y;
    var z = v3fPoint.z;
    return (this.x0 <= x && x <= this.x1) && (this.y0 <= y && y <= this.y1) && (this.z0 <= z && z <= this.z1);
}
;
midPoint(v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = new Vec3();
    }
    return v3fDestination.set((this.x0 + this.x1) * 0.5, (this.y0 + this.y1) * 0.5, (this.z0 + this.z1) * 0.5);
}
;
inline;
midX();
number;
 {
    return (this.x0 + this.x1) * 0.5;
}
;
inline;
midY();
number;
 {
    return (this.y0 + this.y1) * 0.5;
}
;
inline;
midZ();
number;
 {
    return (this.z0 + this.z1) * 0.5;
}
size(v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = new Vec3();
    }
    return v3fDestination.set(this.x1 - this.x0, this.y1 - this.y0, this.z1 - this.z0);
}
;
inline;
sizeX();
number;
 {
    return this.x1 - this.x0;
}
;
inline;
sizeY();
number;
 {
    return this.y1 - this.y0;
}
;
inline;
sizeZ();
number;
 {
    return this.z1 - this.z0;
}
;
minPoint(v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = new Vec3();
    }
    return v3fDestination.set(this.x0, this.y0, this.z0);
}
;
maxPoint(v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = new Vec3();
    }
    return v3fDestination.set(this.x1, this.y1, this.z1);
}
;
inline;
volume();
number;
 {
    return (this.x1 - this.x0) * (this.y1 - this.y0) * (this.z1 - this.z0);
}
;
corner(iIndex, number, v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = new Vec3();
    }
 {
        logger.setSourceLocation("geometry/Rect3d.ts", 752);
        logger.assert(0 <= iIndex && iIndex < 8, "invalid index");
    }
    ;
    switch(iIndex) {
        case 0:
            v3fDestination.set(this.x0, this.y0, this.z0);
            break;
        case 1:
            v3fDestination.set(this.x1, this.y0, this.z0);
            break;
        case 2:
            v3fDestination.set(this.x1, this.y1, this.z0);
            break;
        case 3:
            v3fDestination.set(this.x0, this.y1, this.z0);
            break;
        case 4:
            v3fDestination.set(this.x0, this.y0, this.z1);
            break;
        case 5:
            v3fDestination.set(this.x1, this.y0, this.z1);
            break;
        case 6:
            v3fDestination.set(this.x1, this.y1, this.z1);
            break;
        case 7:
            v3fDestination.set(this.x0, this.y1, this.z1);
            break;
    }
    return v3fDestination;
}
;
createBoundingSphere(pSphere ?  : ISphere);
ISphere;
 {
    if (!isDef(pSphere)) {
        pSphere = new Sphere();
    }
    var fX0 = this.x0, fX1 = this.x1;
    var fY0 = this.y0, fY1 = this.y1;
    var fZ0 = this.z0, fZ1 = this.z1;
    var fHalfSizeX = (fX1 - fX0) * 0.5;
    var fHalfSizeY = (fY1 - fY0) * 0.5;
    var fHalfSizeZ = (fZ1 - fZ0) * 0.5;
    pSphere.set((fX0 + fX1) * 0.5, (fY0 + fY1) * 0.5, (fZ0 + fZ1) * 0.5, math.sqrt(fHalfSizeX * fHalfSizeX + fHalfSizeY * fHalfSizeY + fHalfSizeZ * fHalfSizeZ));
    return pSphere;
}
;
toString();
string;
 {
    return "(" + this.x0 + ", " + this.y0 + ", " + this.z0 + ") --> (" + this.x1 + ", " + this.y1 + ", " + this.z1 + ")";
}
;
get;
stackCeil();
Rect3d;
 {
    Rect3d.stackPosition = Rect3d.stackPosition === Rect3d.stackSize - 1 ? 0 : Rect3d.stackPosition;
    return Rect3d.stack[Rect3d.stackPosition++];
}
stackSize:
number = 128
stackPosition:
number = 0
stack:
Rect3d[] = (function () {
    var pStack = new Array(Rect3d.stackSize);
    for(var i = 0; i < Rect3d.stackSize; i++) {
        pStack[i] = new Rect3d();
    }
    return pStack;
})()
;
var akra;
(function (akra) {
    (function (scene) {
        (function (ESceneObjectFlags) {
            ESceneObjectFlags._map = [];
            ESceneObjectFlags.k_NewLocalBounds = 0;
            ESceneObjectFlags._map[1] = "k_NewWorldBounds";
            ESceneObjectFlags.k_NewWorldBounds = 1;
        })(scene.ESceneObjectFlags || (scene.ESceneObjectFlags = {}));
        var ESceneObjectFlags = scene.ESceneObjectFlags;
        ;
        var SceneObject = (function (_super) {
            __extends(SceneObject, _super);
            function SceneObject(pScene, eType) {
                if (typeof eType === "undefined") { eType = EEntityTypes.SCENE_OBJECT; }
                _super.call(this, pScene, eType);
                this._iObjectFlags = 0;
                this._pLocalBounds = new geometry.Rect3d();
                this._pWorldBounds = new geometry.Rect3d();
                this._hasShadow = false;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = getRenderable(i ?  : number);
                this.IRenderableObject = {
                    return: null
                };
                this.inline = isWorldBoundsNew();
                this.bool = {
                    return: ((this._iObjectFlags & (1 << (ESceneObjectFlags.k_NewLocalBounds))) != 0)
                };
                this.inline = get;
                this.inline = set;
                this.inline = prepareForRender(pViewport, IViewport);
            }
            SceneObject.prototype.totalRenderable = function () {
                return 0;
            };
            SceneObject.prototype.worldBounds = function () {
                return this._pWorldBounds;
            };
            SceneObject.prototype.worldBounds = function (pBox) {
                this._pWorldBounds = pBox;
            };
            SceneObject.prototype.localBounds = function () {
                return this._pLocalBounds;
            };
            SceneObject.prototype.accessLocalBounds = function () {
                ((this._iObjectFlags) |= (1 << (ESceneObjectFlags.k_NewLocalBounds)));
                return this._pLocalBounds;
            };
            SceneObject.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
            };
            SceneObject.prototype.prepareForUpdate = function () {
                _super.prototype.prepareForUpdate.call(this);
                ((this._iObjectFlags) &= ~((1 << (ESceneObjectFlags.k_NewLocalBounds)) | (1 << (ESceneObjectFlags.k_NewWorldBounds))));
            };
            SceneObject.prototype.update = function () {
                _super.prototype.update.call(this);
                return this.recalcWorldBounds();
            };
            SceneObject.prototype.recalcWorldBounds = function () {
                if (((this._iObjectFlags & (1 << (ESceneObjectFlags.k_NewLocalBounds))) != 0) || this.isWorldMatrixNew()) {
                    this._pWorldBounds.set(this._pLocalBounds);
                    if (true) {
                        this._pWorldBounds.x1 = Math.max(this._pWorldBounds.x1, this._pWorldBounds.x0 + 0.01);
                        this._pWorldBounds.y1 = Math.max(this._pWorldBounds.y1, this._pWorldBounds.y0 + 0.01);
                        this._pWorldBounds.z1 = Math.max(this._pWorldBounds.z1, this._pWorldBounds.z0 + 0.01);
                    }
                    this._pWorldBounds.transform(this.worldMatrix);
                    ((this._iObjectFlags) |= (1 << (ESceneObjectFlags.k_NewWorldBounds)));
                    this.worldBoundsUpdated();
                    return true;
                }
                return false;
            };
            SceneObject.prototype.hasShadow = function () {
                return this._hasShadow;
            };
            SceneObject.prototype.hasShadow = function (bValue) {
                this._hasShadow = bValue;
                for(var i = 0; i < this.totalRenderable; i++) {
                    this.getRenderable(i).hasShadow = bValue;
                }
            };
            SceneObject.prototype.getObjectFlags = function () {
                return this._iObjectFlags;
            };
            return SceneObject;
        })(SceneNode);
        scene.SceneObject = SceneObject;        
        void {};
        toString(isRecursive, bool = false, iDepth, number = 0);
        string;
 {
            if (!isRecursive) {
                return "<scene_object" + (this._sName ? " " + this._sName : "") + ">";
            }
            return _super.prototype.toString.call(this, isRecursive, iDepth);
        }
        worldBoundsUpdated();
        void {
            var: _recivier,
            any:  = this
        };
        this._pUnicastSlotMap = this._pUnicastSlotMap || (this.getEventTable()).findUnicastList(this._iGuid);
        var _unicast = (this._pUnicastSlotMap).worldBoundsUpdated;
        if (isDef(_unicast)) {
            _unicast.target ? _unicast.target[_unicast.callback](_recivier) : _unicast.listener(_recivier);
        }
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
;
;
inline;
function isSceneObject(pEntity) {
    return pEntity.type >= EEntityTypes.SCENE_OBJECT && pEntity.type < EEntityTypes.OBJECTS_LIMIT;
}
var akra;
(function (akra) {
    (function (geometry) {
        var Plane3d = (function () {
            function Plane3d(v3fPoint1, v3fPoint2, v3fPoint3) {
                this.inline = clear();
                this.IPlane3d = {
                    this: ,
                    normal: ,
                    clear: 
                };
                this.normal = new Vec3();
                this.distance = 0.;
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 2:
                        this.set(arguments[0], arguments[1]);
                        break;
                    case 3:
                        this.set(arguments[0], arguments[1], arguments[2]);
                        break;
                    default:
                        break;
                }
            }
            Plane3d.prototype.set = function (v3fPoint1, v3fPoint2, v3fPoint3) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        var pPlane = arguments[0];
                        this.normal.set(pPlane.normal);
                        this.distance = pPlane.distance;
                        break;
                    case 2:
                        this.normal.set(arguments[0]);
                        this.distance = arguments[1];
                        break;
                    case 3:
                        var v3fPoint1 = arguments[0];
                        var v3fPoint2 = arguments[1];
                        var v3fPoint3 = arguments[2];
                        var x1 = v3fPoint2.x - v3fPoint1.x;
                        var y1 = v3fPoint2.y - v3fPoint1.y;
                        var z1 = v3fPoint2.z - v3fPoint1.z;
                        var x2 = v3fPoint3.x - v3fPoint1.x;
                        var y2 = v3fPoint3.y - v3fPoint1.y;
                        var z2 = v3fPoint3.z - v3fPoint1.z;
                        var x = y1 * z2 - y2 * z1;
                        var y = z1 * x2 - z2 * x1;
                        var z = x1 * y2 - x2 * y1;
                        this.distance = -(x * v3fPoint1.x + y * v3fPoint1.y + z * v3fPoint1.z);
                        this.normal.set(x, y, z);
                        break;
                    default:
                        this.normal.clear();
                        this.distance = 0.;
                        break;
                }
                return this.normalize();
            };
            return Plane3d;
        })();
        geometry.Plane3d = Plane3d;        
        this.distance = 0.;
        return this;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
;
inline;
negate();
IPlane3d;
 {
    this.normal.negate();
    this.distance = -this.distance;
    return this;
}
;
normalize();
IPlane3d;
 {
    var v3fNormal = this.normal;
    var x = v3fNormal.x, y = v3fNormal.y, z = v3fNormal.z;
    var fLength = math.sqrt(x * x + y * y + z * z);
    if (fLength !== 0.) {
        var fInvLength = 1. / fLength;
        v3fNormal.x = x * fInvLength;
        v3fNormal.y = y * fInvLength;
        v3fNormal.z = z * fInvLength;
        this.distance *= fInvLength;
    }
    return this;
}
;
isEqual(pPlane, IPlane3d);
bool;
 {
    return this.normal.isEqual(pPlane.normal) && (this.distance == pPlane.distance);
}
;
projectPointToPlane(v3fPoint, IVec3, v3fDestination ?  : IVec3);
IVec3;
 {
    if (!isDef(v3fDestination)) {
        v3fDestination = new Vec3();
    }
    var v3fNormal = this.normal;
    var fDistance = this.distance + v3fNormal.dot(v3fPoint);
    v3fDestination.x = v3fPoint.x - fDistance * v3fNormal.x;
    v3fDestination.y = v3fPoint.y - fDistance * v3fNormal.y;
    v3fDestination.z = v3fPoint.z - fDistance * v3fNormal.z;
    return v3fDestination;
}
;
solveForX(fY, number, fZ, number);
number;
 {
    var v3fNormal = this.normal;
    if (v3fNormal.x !== 0.) {
        return -(this.distance + v3fNormal.y * fY + v3fNormal.z * fZ) / v3fNormal.x;
    }
    return 0.;
}
;
solveForY(fX, number, fZ, number);
number;
 {
    var v3fNormal = this.normal;
    if (v3fNormal.y !== 0.) {
        return -(this.distance + v3fNormal.x * fX + v3fNormal.z * fZ) / v3fNormal.y;
    }
    return 0.;
}
;
solveForZ(fX, number, fY, number);
number;
 {
    var v3fNormal = this.normal;
    if (v3fNormal.z !== 0.) {
        return -(this.distance + v3fNormal.x * fX + v3fNormal.y * fY) / v3fNormal.z;
    }
    return 0.;
}
;
signedDistance(v3fPoint, IVec3);
number;
 {
    return this.distance + this.normal.dot(v3fPoint);
}
;
;
;
var akra;
(function (akra) {
    (function (geometry) {
        var Plane2d = (function () {
            function Plane2d(v2fPoint1, v2fPoint2) {
                this.inline = clear();
                this.IPlane2d = {
                    this: ,
                    normal: ,
                    clear: 
                };
                this.normal = new Vec2();
                this.distance = 0.;
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 2:
                        this.set(arguments[0], arguments[1]);
                        break;
                    default:
                        break;
                }
            }
            Plane2d.prototype.set = function (v2fPoint1, v2fPoint2) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        var pPlane = arguments[0];
                        this.normal.set(pPlane.normal);
                        this.distance = pPlane.distance;
                        break;
                    case 2:
                        if (isFloat(arguments[1])) {
                            this.normal.set(arguments[0]);
                            this.distance = arguments[1];
                        } else {
                            var v2fLine = vec2(arguments[1]).subtract(arguments[0]);
                            var v2fNormal = this.normal;
                            v2fNormal.set(-v2fLine.y, v2fLine.x);
                            this.distance = -v2fNormal.dot(arguments[0]);
                        }
                        break;
                    default:
                        this.normal.clear();
                        this.distance = 0.;
                        break;
                }
                return this.normalize();
            };
            return Plane2d;
        })();
        geometry.Plane2d = Plane2d;        
        this.distance = 0.;
        return this;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
;
inline;
negate();
IPlane2d;
 {
    this.normal.negate();
    this.distance = -this.distance;
    return this;
}
;
normalize();
IPlane2d;
 {
    var v2fNormal = this.normal;
    var x = v2fNormal.x;
    var y = v2fNormal.y;
    var fLength = math.sqrt(x * x + y * y);
    if (fLength !== 0.) {
        var fInvLength = 1. / fLength;
        v2fNormal.x = x * fInvLength;
        v2fNormal.y = y * fInvLength;
        this.distance = this.distance * fInvLength;
    }
    return this;
}
;
inline;
isEqual(pPlane, IPlane2d);
bool;
 {
    return this.normal.isEqual(pPlane.normal) && (this.distance == pPlane.distance);
}
;
projectPointToPlane(v2fPoint, IVec2, v2fDestination ?  : IVec2);
IVec2;
 {
    if (!isDef(v2fDestination)) {
        v2fDestination = new Vec2();
    }
    var v2fNormal = this.normal;
    var fDistance = this.distance + v2fNormal.dot(v2fPoint);
    v2fDestination.x = v2fPoint.x - fDistance * v2fNormal.x;
    v2fDestination.y = v2fPoint.y - fDistance * v2fNormal.y;
    return v2fDestination;
}
;
solveForX(fY, number);
number;
 {
    var v2fNormal = this.normal;
    if (v2fNormal.x !== 0.) {
        return -(this.distance + v2fNormal.y * fY) / v2fNormal.x;
    }
    return 0.;
}
;
solveForY(fX, number);
number;
 {
    var v2fNormal = this.normal;
    if (v2fNormal.y !== 0.) {
        return -(this.distance + v2fNormal.x * fX) / v2fNormal.y;
    }
    return 0.;
}
;
inline;
signedDistance(v2fPoint, IVec2);
number;
 {
    return this.distance + this.normal.dot(v2fPoint);
}
;
;
var akra;
(function (akra) {
    (function (EVolumeClassifications) {
        EVolumeClassifications._map = [];
        EVolumeClassifications.NO_RELATION = 0;
        EVolumeClassifications._map[1] = "EQUAL";
        EVolumeClassifications.EQUAL = 1;
        EVolumeClassifications._map[2] = "A_CONTAINS_B";
        EVolumeClassifications.A_CONTAINS_B = 2;
        EVolumeClassifications._map[3] = "B_CONTAINS_A";
        EVolumeClassifications.B_CONTAINS_A = 3;
        EVolumeClassifications._map[4] = "INTERSECTING";
        EVolumeClassifications.INTERSECTING = 4;
    })(akra.EVolumeClassifications || (akra.EVolumeClassifications = {}));
    var EVolumeClassifications = akra.EVolumeClassifications;
    ;
    (function (EPlaneClassifications) {
        EPlaneClassifications._map = [];
        EPlaneClassifications.PLANE_FRONT = 0;
        EPlaneClassifications._map[1] = "PLANE_BACK";
        EPlaneClassifications.PLANE_BACK = 1;
        EPlaneClassifications._map[2] = "PLANE_INTERSECT";
        EPlaneClassifications.PLANE_INTERSECT = 2;
    })(akra.EPlaneClassifications || (akra.EPlaneClassifications = {}));
    var EPlaneClassifications = akra.EPlaneClassifications;
    ;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
        function planeClassifyCircle(pPlane, pCircle) {
            var fDistance = pPlane.signedDistance(pCircle.center);
            var fRadius = pCircle.radius;
            if (fDistance > fRadius) {
                return EPlaneClassifications.PLANE_FRONT;
            } else if (fDistance < -fRadius) {
                return EPlaneClassifications.PLANE_BACK;
            } else {
                return EPlaneClassifications.PLANE_INTERSECT;
            }
        }
        geometry.planeClassifyCircle = planeClassifyCircle;
        ;
        function planeClassifySphere(pPlane, pSphere) {
            var fDistance = pPlane.signedDistance(pSphere.center);
            var fRadius = pSphere.radius;
            if (fDistance > fRadius) {
                return EPlaneClassifications.PLANE_FRONT;
            } else if (fDistance < -fRadius) {
                return EPlaneClassifications.PLANE_BACK;
            } else {
                return EPlaneClassifications.PLANE_INTERSECT;
            }
        }
        geometry.planeClassifySphere = planeClassifySphere;
        ;
        function planeClassifyRect2d(pPlane, pRect) {
            var v2fMinPoint = vec2();
            var v2fMaxPoint = vec2();
            var v2fNormal = pPlane.normal;
            if (v2fNormal.x > 0.) {
                v2fMinPoint.x = pRect.x0;
                v2fMaxPoint.x = pRect.x1;
            } else {
                v2fMinPoint.x = pRect.x1;
                v2fMaxPoint.x = pRect.x0;
            }
            if (v2fNormal.y > 0.) {
                v2fMinPoint.y = pRect.y0;
                v2fMaxPoint.y = pRect.y1;
            } else {
                v2fMinPoint.y = pRect.y1;
                v2fMaxPoint.y = pRect.y0;
            }
            var fMinDistance = pPlane.signedDistance(v2fMinPoint);
            var fMaxDistance = pPlane.signedDistance(v2fMaxPoint);
            if (fMinDistance * fMaxDistance <= 0.) {
                return EPlaneClassifications.PLANE_INTERSECT;
            } else if (fMaxDistance < 0.) {
                return EPlaneClassifications.PLANE_BACK;
            } else {
                return EPlaneClassifications.PLANE_FRONT;
            }
        }
        geometry.planeClassifyRect2d = planeClassifyRect2d;
        ;
        function planeClassifyRect3d(pPlane, pRect) {
            var v3fMinPoint = vec3();
            var v3fMaxPoint = vec3();
            var v3fNormal = pPlane.normal;
            if (v3fNormal.x > 0.) {
                v3fMinPoint.x = pRect.x0;
                v3fMaxPoint.x = pRect.x1;
            } else {
                v3fMinPoint.x = pRect.x1;
                v3fMaxPoint.x = pRect.x0;
            }
            if (v3fNormal.y > 0.) {
                v3fMinPoint.y = pRect.y0;
                v3fMaxPoint.y = pRect.y1;
            } else {
                v3fMinPoint.y = pRect.y1;
                v3fMaxPoint.y = pRect.y0;
            }
            if (v3fNormal.z > 0.) {
                v3fMinPoint.z = pRect.z0;
                v3fMaxPoint.z = pRect.z1;
            } else {
                v3fMinPoint.z = pRect.z1;
                v3fMaxPoint.z = pRect.z0;
            }
            var fMinDistance = pPlane.signedDistance(v3fMinPoint);
            var fMaxDistance = pPlane.signedDistance(v3fMaxPoint);
            if (fMinDistance * fMaxDistance <= 0.) {
                return EPlaneClassifications.PLANE_INTERSECT;
            } else if (fMaxDistance < 0.) {
                return EPlaneClassifications.PLANE_BACK;
            } else {
                return EPlaneClassifications.PLANE_FRONT;
            }
        }
        geometry.planeClassifyRect3d = planeClassifyRect3d;
        ;
                                        function planeClassify(pPlane, pRect) {
            var pArg0 = arguments[0];
            var pArg1 = arguments[1];
            if (pArg0 instanceof Plane2d) {
                if (pArg1 instanceof Circle) {
                    return planeClassifyCircle(pArg0, pArg1);
                } else {
                    return planeClassifyRect2d(pArg0, pArg1);
                }
            } else {
                if (pArg1 instanceof Sphere) {
                    return planeClassifySphere(pArg0, pArg1);
                } else {
                    return planeClassifyRect3d(pArg0, pArg1);
                }
            }
        }
        geometry.planeClassify = planeClassify;
        ;
        function classifyRect2d(pRectA, pRectB) {
            var fRectAX0 = pRectA.x0, fRectAX1 = pRectA.x1;
            var fRectAY0 = pRectA.y0, fRectAY1 = pRectA.y1;
            var fRectBX0 = pRectB.x0, fRectBX1 = pRectB.x1;
            var fRectBY0 = pRectB.y0, fRectBY1 = pRectB.y1;
            if ((fRectAX1 < fRectBX0 || fRectBX1 < fRectAX0) || (fRectAY1 < fRectBY0 || fRectAY1 < fRectBY0)) {
                return EVolumeClassifications.NO_RELATION;
            }
            if ((fRectAX0 == fRectBX0 && fRectAX1 == fRectBX1) && (fRectAY0 == fRectBY0 && fRectAY1 == fRectBY1)) {
                return EVolumeClassifications.EQUAL;
            }
            if ((fRectAX0 <= fRectBX0 && fRectBX1 <= fRectAX1) && (fRectAY0 <= fRectBY0 && fRectBY1 <= fRectAY1)) {
                return EVolumeClassifications.A_CONTAINS_B;
            }
            if ((fRectBX0 <= fRectAX0 && fRectAX1 <= fRectBX1) && (fRectBY0 <= fRectAY0 && fRectAY1 <= fRectBY1)) {
                return EVolumeClassifications.B_CONTAINS_A;
            }
            return EVolumeClassifications.INTERSECTING;
        }
        geometry.classifyRect2d = classifyRect2d;
        ;
        function classifyRect3d(pRectA, pRectB) {
            var fRectAX0 = pRectA.x0, fRectAX1 = pRectA.x1;
            var fRectAY0 = pRectA.y0, fRectAY1 = pRectA.y1;
            var fRectAZ0 = pRectA.z0, fRectAZ1 = pRectA.z1;
            var fRectBX0 = pRectB.x0, fRectBX1 = pRectB.x1;
            var fRectBY0 = pRectB.y0, fRectBY1 = pRectB.y1;
            var fRectBZ0 = pRectB.z0, fRectBZ1 = pRectB.z1;
            if ((fRectAX1 < fRectBX0 || fRectBX1 < fRectAX0) || (fRectAY1 < fRectBY0 || fRectAY1 < fRectBY0) || (fRectAZ1 < fRectBZ0 || fRectAZ1 < fRectBZ0)) {
                return EVolumeClassifications.NO_RELATION;
            }
            if ((fRectAX0 == fRectBX0 && fRectAX1 == fRectBX1) && (fRectAY0 == fRectBY0 && fRectAY1 == fRectBY1) && (fRectAZ0 == fRectBZ0 && fRectAZ1 == fRectBZ1)) {
                return EVolumeClassifications.EQUAL;
            }
            if ((fRectAX0 <= fRectBX0 && fRectBX1 <= fRectAX1) && (fRectAY0 <= fRectBY0 && fRectBY1 <= fRectAY1) && (fRectAZ0 <= fRectBZ0 && fRectBZ1 <= fRectAZ1)) {
                return EVolumeClassifications.A_CONTAINS_B;
            }
            if ((fRectBX0 <= fRectAX0 && fRectAX1 <= fRectBX1) && (fRectBY0 <= fRectAY0 && fRectAY1 <= fRectBY1) && (fRectBZ0 <= fRectAZ0 && fRectAZ1 <= fRectBZ1)) {
                return EVolumeClassifications.B_CONTAINS_A;
            }
            return EVolumeClassifications.INTERSECTING;
        }
        geometry.classifyRect3d = classifyRect3d;
        ;
        function classifyFrustumRect3d(pFrustum, pRect) {
            var kClassification;
            var isIntersect = false;
            kClassification = planeClassifyRect3d(pFrustum.leftPlane, pRect);
            if (kClassification == EPlaneClassifications.PLANE_FRONT) {
                return EVolumeClassifications.NO_RELATION;
            } else if (kClassification == EPlaneClassifications.PLANE_INTERSECT) {
                isIntersect = true;
            }
            kClassification = planeClassifyRect3d(pFrustum.rightPlane, pRect);
            if (kClassification == EPlaneClassifications.PLANE_FRONT) {
                return EVolumeClassifications.NO_RELATION;
            } else if (kClassification == EPlaneClassifications.PLANE_INTERSECT) {
                isIntersect = true;
            }
            kClassification = planeClassifyRect3d(pFrustum.topPlane, pRect);
            if (kClassification == EPlaneClassifications.PLANE_FRONT) {
                return EVolumeClassifications.NO_RELATION;
            } else if (kClassification == EPlaneClassifications.PLANE_INTERSECT) {
                isIntersect = true;
            }
            kClassification = planeClassifyRect3d(pFrustum.bottomPlane, pRect);
            if (kClassification == EPlaneClassifications.PLANE_FRONT) {
                return EVolumeClassifications.NO_RELATION;
            } else if (kClassification == EPlaneClassifications.PLANE_INTERSECT) {
                isIntersect = true;
            }
            kClassification = planeClassifyRect3d(pFrustum.nearPlane, pRect);
            if (kClassification == EPlaneClassifications.PLANE_FRONT) {
                return EVolumeClassifications.NO_RELATION;
            } else if (kClassification == EPlaneClassifications.PLANE_INTERSECT) {
                isIntersect = true;
            }
            kClassification = planeClassifyRect3d(pFrustum.farPlane, pRect);
            if (kClassification == EPlaneClassifications.PLANE_FRONT) {
                return EVolumeClassifications.NO_RELATION;
            } else if (kClassification == EPlaneClassifications.PLANE_INTERSECT) {
                isIntersect = true;
            }
            if (isIntersect) {
                return EVolumeClassifications.INTERSECTING;
            } else {
                return EVolumeClassifications.A_CONTAINS_B;
            }
        }
        geometry.classifyFrustumRect3d = classifyFrustumRect3d;
        ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
;
var akra;
(function (akra) {
    (function (geometry) {
        var Frustum = (function () {
            function Frustum(pLeftPlane, pRightPlane, pTopPlane, pBottomPlane, pNearPlane, pFarPlane) {
                this._pFrustumVertices = null;
                this.inline = get;
                this.inline = isEqual(pFrustum, IFrustum);
                this.bool = {
                    return: (this.leftPlane.isEqual(pFrustum.leftPlane) && this.rightPlane.isEqual(pFrustum.rightPlane) && this.topPlane.isEqual(pFrustum.topPlane) && this.bottomPlane.isEqual(pFrustum.bottomPlane) && this.nearPlane.isEqual(pFrustum.nearPlane) && this.farPlane.isEqual(pFrustum.farPlane))
                };
                this.leftPlane = new Plane3d();
                this.rightPlane = new Plane3d();
                this.topPlane = new Plane3d();
                this.bottomPlane = new Plane3d();
                this.nearPlane = new Plane3d();
                this.farPlane = new Plane3d();
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        this.set(arguments[0]);
                        break;
                    case 6:
                        this.set(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
                        break;
                    default:
                        break;
                }
            }
            Frustum.prototype.frustumVertices = function () {
                return this._pFrustumVertices;
            };
            Frustum.prototype.set = function (pLeftPlane, pRightPlane, pTopPlane, pBottomPlane, pNearPlane, pFarPlane) {
                var nArgumentsLength = arguments.length;
                switch(nArgumentsLength) {
                    case 1:
                        var pFrustum = arguments[0];
                        this.leftPlane.set(pFrustum.leftPlane);
                        this.rightPlane.set(pFrustum.rightPlane);
                        this.topPlane.set(pFrustum.topPlane);
                        this.bottomPlane.set(pFrustum.bottomPlane);
                        this.nearPlane.set(pFrustum.nearPlane);
                        this.farPlane.set(pFrustum.farPlane);
                        break;
                    case 6:
                        this.leftPlane.set(arguments[0]);
                        this.rightPlane.set(arguments[1]);
                        this.topPlane.set(arguments[2]);
                        this.bottomPlane.set(arguments[3]);
                        this.nearPlane.set(arguments[4]);
                        this.farPlane.set(arguments[5]);
                        break;
                    default:
                        this.leftPlane.clear();
                        this.rightPlane.clear();
                        this.topPlane.clear();
                        this.bottomPlane.clear();
                        this.nearPlane.clear();
                        this.farPlane.clear();
                        break;
                }
                return this;
            };
            Frustum.prototype.calculateFrustumVertices = function () {
                if (this._pFrustumVertices == null) {
                    this._pFrustumVertices = new Array(8);
                    for(var i = 0; i < 8; i++) {
                        this._pFrustumVertices[i] = new Vec3();
                    }
                }
                var v3fLeftNormal = this.leftPlane.normal;
                var v3fRightNormal = this.rightPlane.normal;
                var v3fTopNormal = this.topPlane.normal;
                var v3fBottomNormal = this.bottomPlane.normal;
                var v3fNearNormal = this.nearPlane.normal;
                var v3fFarNormal = this.farPlane.normal;
                var fLeft = -this.leftPlane.distance;
                var fRight = -this.rightPlane.distance;
                var fTop = -this.topPlane.distance;
                var fBottom = -this.bottomPlane.distance;
                var fNear = -this.nearPlane.distance;
                var fFar = -this.farPlane.distance;
                var m3fTemp = mat3();
                var pFrustumVertices = this._pFrustumVertices;
                pFrustumVertices[0].set(fLeft, fBottom, fNear);
                m3fTemp.set(v3fLeftNormal.x, v3fBottomNormal.x, v3fNearNormal.x, v3fLeftNormal.y, v3fBottomNormal.y, v3fNearNormal.y, v3fLeftNormal.z, v3fBottomNormal.z, v3fNearNormal.z);
                m3fTemp.inverse().multiplyVec3(pFrustumVertices[0]);
                pFrustumVertices[1].set(fRight, fBottom, fNear);
                m3fTemp.set(v3fRightNormal.x, v3fBottomNormal.x, v3fNearNormal.x, v3fRightNormal.y, v3fBottomNormal.y, v3fNearNormal.y, v3fRightNormal.z, v3fBottomNormal.z, v3fNearNormal.z);
                m3fTemp.inverse().multiplyVec3(pFrustumVertices[1]);
                pFrustumVertices[2].set(fLeft, fTop, fNear);
                m3fTemp.set(v3fLeftNormal.x, v3fTopNormal.x, v3fNearNormal.x, v3fLeftNormal.y, v3fTopNormal.y, v3fNearNormal.y, v3fLeftNormal.z, v3fTopNormal.z, v3fNearNormal.z);
                m3fTemp.inverse().multiplyVec3(pFrustumVertices[2]);
                pFrustumVertices[3].set(fRight, fTop, fNear);
                m3fTemp.set(v3fRightNormal.x, v3fTopNormal.x, v3fNearNormal.x, v3fRightNormal.y, v3fTopNormal.y, v3fNearNormal.y, v3fRightNormal.z, v3fTopNormal.z, v3fNearNormal.z);
                m3fTemp.inverse().multiplyVec3(pFrustumVertices[3]);
                pFrustumVertices[4].set(fLeft, fBottom, fFar);
                m3fTemp.set(v3fLeftNormal.x, v3fBottomNormal.x, v3fFarNormal.x, v3fLeftNormal.y, v3fBottomNormal.y, v3fFarNormal.y, v3fLeftNormal.z, v3fBottomNormal.z, v3fFarNormal.z);
                m3fTemp.inverse().multiplyVec3(pFrustumVertices[4]);
                pFrustumVertices[5].set(fRight, fBottom, fFar);
                m3fTemp.set(v3fRightNormal.x, v3fBottomNormal.x, v3fFarNormal.x, v3fRightNormal.y, v3fBottomNormal.y, v3fFarNormal.y, v3fRightNormal.z, v3fBottomNormal.z, v3fFarNormal.z);
                m3fTemp.inverse().multiplyVec3(pFrustumVertices[5]);
                pFrustumVertices[6].set(fLeft, fTop, fFar);
                m3fTemp.set(v3fLeftNormal.x, v3fTopNormal.x, v3fFarNormal.x, v3fLeftNormal.y, v3fTopNormal.y, v3fFarNormal.y, v3fLeftNormal.z, v3fTopNormal.z, v3fFarNormal.z);
                m3fTemp.inverse().multiplyVec3(pFrustumVertices[6]);
                pFrustumVertices[7].set(fRight, fTop, fFar);
                m3fTemp.set(v3fRightNormal.x, v3fTopNormal.x, v3fFarNormal.x, v3fRightNormal.y, v3fTopNormal.y, v3fFarNormal.y, v3fRightNormal.z, v3fTopNormal.z, v3fFarNormal.z);
                m3fTemp.inverse().multiplyVec3(pFrustumVertices[7]);
                return pFrustumVertices;
            };
            Frustum.prototype.extractFromMatrix = function (m4fProjection, m4fWorld, pSearchRect) {
                if (this._pFrustumVertices == null) {
                    this._pFrustumVertices = new Array(8);
                    for(var i = 0; i < 8; i++) {
                        this._pFrustumVertices[i] = new Vec3();
                    }
                }
                var pFrustumVertices = this._pFrustumVertices;
                var v4fLeftBottomNear = vec4();
                var v4fRightBottomNear = vec4();
                var v4fLeftTopNear = vec4();
                var v4fRightTopNear = vec4();
                var v4fLeftBottomFar = vec4();
                var v4fRightBottomFar = vec4();
                var v4fLeftTopFar = vec4();
                var v4fRightTopFar = vec4();
                m4fProjection.unproj(vec3(-1, -1, -1), v4fLeftBottomNear);
                m4fProjection.unproj(vec3(1, -1, -1), v4fRightBottomNear);
                m4fProjection.unproj(vec3(-1, 1, -1), v4fLeftTopNear);
                m4fProjection.unproj(vec3(1, 1, -1), v4fRightTopNear);
                m4fProjection.unproj(vec3(-1, -1, 1), v4fLeftBottomFar);
                m4fProjection.unproj(vec3(1, -1, 1), v4fRightBottomFar);
                m4fProjection.unproj(vec3(-1, 1, 1), v4fLeftTopFar);
                m4fProjection.unproj(vec3(1, 1, 1), v4fRightTopFar);
                if (isDef(m4fWorld)) {
                    m4fWorld.multiplyVec4(v4fLeftBottomNear);
                    m4fWorld.multiplyVec4(v4fRightBottomNear);
                    m4fWorld.multiplyVec4(v4fLeftTopNear);
                    m4fWorld.multiplyVec4(v4fRightTopNear);
                    m4fWorld.multiplyVec4(v4fLeftBottomFar);
                    m4fWorld.multiplyVec4(v4fRightBottomFar);
                    m4fWorld.multiplyVec4(v4fLeftTopFar);
                    m4fWorld.multiplyVec4(v4fRightTopFar);
                }
                var v3fLeftBottomNear = pFrustumVertices[0].set(v4fLeftBottomNear.xyz);
                var v3fRightBottomNear = pFrustumVertices[1].set(v4fRightBottomNear.xyz);
                var v3fLeftTopNear = pFrustumVertices[2].set(v4fLeftTopNear.xyz);
                var v3fRightTopNear = pFrustumVertices[3].set(v4fRightTopNear.xyz);
                var v3fLeftBottomFar = pFrustumVertices[4].set(v4fLeftBottomFar.xyz);
                var v3fRightBottomFar = pFrustumVertices[5].set(v4fRightBottomFar.xyz);
                var v3fLeftTopFar = pFrustumVertices[6].set(v4fLeftTopFar.xyz);
                var v3fRightTopFar = pFrustumVertices[7].set(v4fRightTopFar.xyz);
                if (isDef(pSearchRect)) {
                    pSearchRect.set(v3fLeftBottomNear, v3fLeftBottomNear);
                    pSearchRect.unionPoint(v3fRightBottomNear);
                    pSearchRect.unionPoint(v3fLeftTopNear);
                    pSearchRect.unionPoint(v3fRightTopNear);
                    pSearchRect.unionPoint(v3fLeftBottomFar);
                    pSearchRect.unionPoint(v3fRightBottomFar);
                    pSearchRect.unionPoint(v3fLeftTopFar);
                    pSearchRect.unionPoint(v3fRightTopFar);
                }
                this.leftPlane.set(v3fLeftTopNear, v3fLeftTopFar, v3fLeftBottomNear);
                this.rightPlane.set(v3fRightBottomFar, v3fRightTopFar, v3fRightBottomNear);
                this.topPlane.set(v3fLeftTopNear, v3fRightTopNear, v3fLeftTopFar);
                this.bottomPlane.set(v3fRightBottomFar, v3fRightBottomNear, v3fLeftBottomFar);
                this.nearPlane.set(v3fLeftTopNear, v3fLeftBottomNear, v3fRightTopNear);
                this.farPlane.set(v3fRightBottomFar, v3fLeftBottomFar, v3fRightTopFar);
                return this;
            };
            Frustum.prototype.getPlanePoints = function (sPlaneKey, pDestination) {
                if (arguments.length == 1) {
                    pDestination = [
                        vec3(), 
                        vec3(), 
                        vec3(), 
                        vec3()
                    ];
                }
                var pFrustumVertices = this.frustumVertices;
                if (pFrustumVertices === null) {
                    pFrustumVertices = this.calculateFrustumVertices();
                }
                switch(sPlaneKey) {
                    case "leftPlane":
                        pDestination[0].set(pFrustumVertices[6]);
                        pDestination[1].set(pFrustumVertices[4]);
                        pDestination[2].set(pFrustumVertices[0]);
                        pDestination[3].set(pFrustumVertices[2]);
                        break;
                    case "rightPlane":
                        pDestination[0].set(pFrustumVertices[7]);
                        pDestination[1].set(pFrustumVertices[3]);
                        pDestination[2].set(pFrustumVertices[1]);
                        pDestination[3].set(pFrustumVertices[5]);
                        break;
                    case "topPlane":
                        pDestination[0].set(pFrustumVertices[7]);
                        pDestination[1].set(pFrustumVertices[6]);
                        pDestination[2].set(pFrustumVertices[2]);
                        pDestination[3].set(pFrustumVertices[3]);
                        break;
                    case "bottomPlane":
                        pDestination[0].set(pFrustumVertices[5]);
                        pDestination[1].set(pFrustumVertices[1]);
                        pDestination[2].set(pFrustumVertices[0]);
                        pDestination[3].set(pFrustumVertices[4]);
                        break;
                    case "nearPlane":
                        pDestination[0].set(pFrustumVertices[3]);
                        pDestination[1].set(pFrustumVertices[2]);
                        pDestination[2].set(pFrustumVertices[0]);
                        pDestination[3].set(pFrustumVertices[1]);
                        break;
                    case "farPlane":
                        pDestination[0].set(pFrustumVertices[7]);
                        pDestination[1].set(pFrustumVertices[5]);
                        pDestination[2].set(pFrustumVertices[4]);
                        pDestination[3].set(pFrustumVertices[6]);
                        break;
                    default:
 {
                            logger.setSourceLocation("geometry/Frustum.ts", 324);
                            logger.assert(false, "invalid plane key");
                        }
                        ;
                        break;
                }
                return pDestination;
            };
            Frustum.prototype.testPoint = function (v3fPoint) {
                if (this.leftPlane.signedDistance(v3fPoint) > 0. || this.rightPlane.signedDistance(v3fPoint) > 0. || this.topPlane.signedDistance(v3fPoint) > 0. || this.bottomPlane.signedDistance(v3fPoint) > 0. || this.nearPlane.signedDistance(v3fPoint) > 0. || this.farPlane.signedDistance(v3fPoint) > 0.) {
                    return false;
                }
                return true;
            };
            Frustum.prototype.testRect = function (pRect) {
                if (planeClassifyRect3d(this.leftPlane, pRect) == EPlaneClassifications.PLANE_FRONT || planeClassifyRect3d(this.rightPlane, pRect) == EPlaneClassifications.PLANE_FRONT || planeClassifyRect3d(this.topPlane, pRect) == EPlaneClassifications.PLANE_FRONT || planeClassifyRect3d(this.bottomPlane, pRect) == EPlaneClassifications.PLANE_FRONT || planeClassifyRect3d(this.nearPlane, pRect) == EPlaneClassifications.PLANE_FRONT || planeClassifyRect3d(this.farPlane, pRect) == EPlaneClassifications.PLANE_FRONT) {
                    return false;
                }
                return true;
            };
            Frustum.prototype.testSphere = function (pSphere) {
                if (planeClassifySphere(this.leftPlane, pSphere) == EPlaneClassifications.PLANE_FRONT || planeClassifySphere(this.rightPlane, pSphere) == EPlaneClassifications.PLANE_FRONT || planeClassifySphere(this.topPlane, pSphere) == EPlaneClassifications.PLANE_FRONT || planeClassifySphere(this.bottomPlane, pSphere) == EPlaneClassifications.PLANE_FRONT || planeClassifySphere(this.nearPlane, pSphere) == EPlaneClassifications.PLANE_FRONT || planeClassifySphere(this.farPlane, pSphere) == EPlaneClassifications.PLANE_FRONT) {
                    return false;
                }
                return true;
            };
            Frustum.prototype.testFrustum = function (pFrustum) {
                var pFrustumVertices1 = this.frustumVertices;
                var pFrustumVertices2 = pFrustum.frustumVertices;
                if (pFrustumVertices1 == null) {
                    pFrustumVertices1 = this.calculateFrustumVertices();
                }
                if (pFrustumVertices2 == null) {
                    pFrustumVertices2 = pFrustum.calculateFrustumVertices();
                }
                var pFrustumPlanes = Frustum.frustumPlanesKeys;
                var nTest;
                for(var i = 0; i < 6; i++) {
                    var pPlane = this[pFrustumPlanes[i]];
                    nTest = 0;
                    for(var j = 0; j < 8; j++) {
                        if (pPlane.signedDistance(pFrustumVertices2[j]) > 0) {
                            nTest++;
                        }
                    }
                    if (nTest == 8) {
                        return false;
                    }
                }
                for(var i = 0; i < 6; i++) {
                    var pPlane = pFrustum[pFrustumPlanes[i]];
                    nTest = 0;
                    for(var j = 0; j < 8; j++) {
                        if (pPlane.signedDistance(pFrustumVertices1[j]) > 0) {
                            nTest++;
                        }
                    }
                    if (nTest == 8) {
                        return false;
                    }
                }
                return true;
            };
            Frustum.frustumPlanesKeys = [
                "leftPlane", 
                "rightPlane", 
                "topPlane", 
                "bottomPlane", 
                "nearPlane", 
                "farPlane"
            ];
            return Frustum;
        })();
        geometry.Frustum = Frustum;        
        ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        (function (objects) {
            (function (ECameraFlags) {
                ECameraFlags._map = [];
                ECameraFlags.k_NewProjectionMatrix = 0;
                ECameraFlags._map[1] = "k_NewProjectionParams";
                ECameraFlags.k_NewProjectionParams = 1;
            })(objects.ECameraFlags || (objects.ECameraFlags = {}));
            var ECameraFlags = objects.ECameraFlags;
            var DLTechnique = (function () {
                function DLTechnique(pList, pCamera) {
                    this._pPrevResult = null;
                    this.inline = findObjects(pResultArray, IObjectArray, bQuickSearch, bool = false);
                    this.IObjectArray = {
                        var: pResult,
                        IObjectArray:  = this.list._findObjects(this.camera, pResultArray, bQuickSearch && isDefAndNotNull(this._pPrevResult))
                    };
                    this.list = pList;
                    this.camera = pCamera;
                }
                DLTechnique.prototype.if = function (isNull) {
                    if (typeof isNull === "undefined") { isNull = (this._pPrevResult); }
                    this._pPrevResult = pResult;
                };
                return DLTechnique;
            })();
            objects.DLTechnique = DLTechnique;            
            return this._pPrevResult;
        })(scene.objects || (scene.objects = {}));
        var objects = scene.objects;
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var Camera = (function (_super) {
    __extends(Camera, _super);
    function Camera(pScene, eType) {
        if (typeof eType === "undefined") { eType = EEntityTypes.CAMERA; }
        _super.call(this, pScene, eType);
        this._eCameraType = ECameraTypes.PERSPECTIVE;
        this._iCameraOptions = 0;
        this._iUpdateProjectionFlags = 0;
        this._m4fView = new Mat4();
        this._m4fProj = new Mat4();
        this._m4fProjView = new Mat4();
        this._m4fRenderStageProj = new Mat4();
        this._m4fRenderStageProjView = new Mat4();
        this._pSearchRect = new geometry.Rect3d();
        this._v3fTargetPos = new Vec3();
        this._fFOV = math.PI / 5.;
        this._fAspect = 4. / 3.;
        this._fNearPlane = 0.1;
        this._fFarPlane = 500.;
        this._fWidth = 0.;
        this._fHeight = 0.;
        this._fMinX = 0.;
        this._fMaxX = 0.;
        this._fMinY = 0.;
        this._fMaxY = 0.;
        this._pFrustum = new geometry.Frustum();
        this._pLastViewport = null;
        this._pDLTechniques = [];
        this._pDLResultStorage = [];
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = set;
        this.inline = get;
        this.inline = set;
        this.inline = get;
        this.inline = set;
        this.inline = get;
        this.inline = set;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = isProjParamsNew();
        this.bool = {
            return: ((this._iUpdateProjectionFlags & (1 << (ECameraFlags.k_NewProjectionParams))) != 0)
        };
    }
    Camera.prototype.viewMatrix = function () {
        return this._m4fView;
    };
    Camera.prototype.projectionMatrix = function () {
        return this._m4fProj;
    };
    Camera.prototype.projViewMatrix = function () {
        return this._m4fProjView;
    };
    Camera.prototype.targetPos = function () {
        return this._v3fTargetPos;
    };
    Camera.prototype.fov = function () {
        return this._fFOV;
    };
    Camera.prototype.fov = function (fFOV) {
        this._fFOV = fFOV;
        ((this._iUpdateProjectionFlags) |= (1 << (ECameraFlags.k_NewProjectionParams)));
    };
    Camera.prototype.aspect = function () {
        return this._fAspect;
    };
    Camera.prototype.aspect = function (fAspect) {
        this._fAspect = fAspect;
        ((this._iUpdateProjectionFlags) |= (1 << (ECameraFlags.k_NewProjectionParams)));
    };
    Camera.prototype.nearPlane = function () {
        return this._fNearPlane;
    };
    Camera.prototype.nearPlane = function (fNearPlane) {
        this._fNearPlane = fNearPlane;
        ((this._iUpdateProjectionFlags) |= (1 << (ECameraFlags.k_NewProjectionParams)));
    };
    Camera.prototype.farPlane = function () {
        return this._fFarPlane;
    };
    Camera.prototype.farPlane = function (fFarPlane) {
        this._fFarPlane = fFarPlane;
        ((this._iUpdateProjectionFlags) |= (1 << (ECameraFlags.k_NewProjectionParams)));
    };
    Camera.prototype.viewDistance = function () {
        return this._fFarPlane - this._fNearPlane;
    };
    Camera.prototype.searchRect = function () {
        return this._pSearchRect;
    };
    Camera.prototype.frustum = function () {
        return this._pFrustum;
    };
    Camera.prototype.create = function () {
        var isOK = _super.prototype.create.call(this);
        if (isOK) {
            this._v3fTargetPos.set(this._m4fLocalMatrix.data[8], this._m4fLocalMatrix.data[9], this._m4fLocalMatrix.data[10]);
            this._v3fTargetPos.negate();
            this.recalcProjMatrix();
            this.recalcMatrices();
            var pScene = this._pScene;
            this.connect(pScene, "displayListAdded", "_addDisplayList");
            this.connect(pScene, "displayListRemoved", "_removeDisplayList");
            for(var i = 0; i < pScene.totalDL; ++i) {
                var pList = pScene.getDisplayList(i);
                if (!isNull(pList)) {
                    this._addDisplayList(pScene, pList, i);
                }
            }
        }
        return isOK;
    };
    Camera.prototype.recalcProjMatrix = function () {
        this.setProjParams(this._fFOV, this._fAspect, this._fNearPlane, this._fFarPlane);
    };
    Camera.prototype.prepareForUpdate = function () {
        _super.prototype.prepareForUpdate.call(this);
    };
    Camera.prototype.display = function (iList) {
        if (typeof iList === "undefined") { iList = 0; }
        var pObjects = this._pDLTechniques[iList].findObjects(this._pDLResultStorage[iList], !this.isUpdated());
        return pObjects;
    };
    Camera.prototype.setParameter = function (eParam, pValue) {
        if (eParam === ECameraParameters.CONST_ASPECT && pValue) {
            ((this._iCameraOptions) |= (eParam));
        }
    };
    Camera.prototype.isConstantAspect = function () {
        return (((this._iCameraOptions) & (ECameraParameters.CONST_ASPECT)) != 0);
    };
    Camera.prototype.setProjParams = function (fFOV, fAspect, fNearPlane, fFarPlane) {
        this._fFOV = fFOV;
        this._fAspect = fAspect;
        this._fNearPlane = fNearPlane;
        this._fFarPlane = fFarPlane;
        this._eCameraType = ECameraTypes.PERSPECTIVE;
        Mat4.perspective(fFOV, fAspect, fNearPlane, fFarPlane, this._m4fProj);
        ((this._iUpdateProjectionFlags) |= (1 << (ECameraFlags.k_NewProjectionMatrix)));
    };
    Camera.prototype.setOrthoParams = function (fWidth, fHeight, fNearPlane, fFarPlane) {
 {
            logger.setSourceLocation("scene/objects/Camera.ts", 230);
            logger.criticalError("TODO: setOrthoParams();");
        }
        ;
    };
    Camera.prototype.setOffsetOrthoParams = function (fMinX, fMaxX, fMinY, fMaxY, fNearPlane, fFarPlane) {
        this._fMinX = fMinX;
        this._fMaxX = fMaxX;
        this._fMinY = fMinY;
        this._fMaxY = fMaxY;
        this._fNearPlane = fNearPlane;
        this._fFarPlane = fFarPlane;
        this._eCameraType = ECameraTypes.OFFSET_ORTHO;
        Mat4.orthogonalProjectionAsymmetric(fMinX, fMaxX, fMinY, fMaxY, fNearPlane, fFarPlane, this._m4fProj);
        ((this._iUpdateProjectionFlags) |= (1 << (ECameraFlags.k_NewProjectionMatrix)));
    };
    Camera.prototype.recalcMatrices = function () {
        this._v3fTargetPos.set(this._m4fLocalMatrix.data[8], this._m4fLocalMatrix.data[9], this._m4fLocalMatrix.data[10]);
        this._v3fTargetPos.negate();
        this._m4fView.set(this.inverseWorldMatrix);
    };
    Camera.prototype.update = function () {
        var isUpdated = _super.prototype.update.call(this);
        if (this.isProjParamsNew()) {
            this.recalcProjMatrix();
        }
        if (this.isWorldMatrixNew() || ((this._iUpdateProjectionFlags & (1 << (ECameraFlags.k_NewProjectionMatrix))) != 0)) {
            this._pFrustum.extractFromMatrix(this._m4fProj, this._m4fWorldMatrix, this._pSearchRect);
            if (this.isWorldMatrixNew()) {
                this.recalcMatrices();
            }
            this._m4fProj.multiply(this._m4fView, this._m4fProjView);
            isUpdated = true;
            ((this._iUpdateProjectionFlags) &= ~(1 << (ECameraFlags.k_NewProjectionMatrix)));
        }
        return isUpdated;
    };
    Camera.prototype.lookAt = function (v3f) {
        var v3fFrom, v3fCenter, v3fUp;
        if (arguments.length < 3) {
            v3fFrom = this.worldPosition;
            v3fCenter = arguments[0];
            v3fUp = arguments[1];
        } else {
            v3fFrom = arguments[0];
            v3fCenter = arguments[1];
            v3fUp = arguments[2];
        }
        v3fUp = v3fUp || vec3(0., 1., 0.);
        var v3fParentPos = (this.parent).worldPosition;
        var m4fTemp = Mat4.lookAt(v3fFrom, v3fCenter, v3fUp, mat4()).inverse();
        var pData = m4fTemp.data;
        switch(this._eInheritance) {
            case ENodeInheritance.ALL:
                (this._pParent).inverseWorldMatrix.multiply(m4fTemp, m4fTemp);
                m4fTemp.toQuat4(this._qRotation);
                this.setPosition(pData[12], pData[13], pData[14]);
                break;
            case ENodeInheritance.ROTSCALE:
                var m3fTemp = m4fTemp.toMat3();
                m3fTemp = (this._pParent).inverseWorldMatrix.toMat3().multiply(m3fTemp, mat3());
                m3fTemp.toQuat4(this._qRotation);
                this.setPosition(pData[12], pData[13], pData[14]);
                break;
            default:
                m4fTemp.toQuat4(this._qRotation);
                this.setPosition(pData[12] - v3fParentPos.x, pData[13] - v3fParentPos.y, pData[14] - v3fParentPos.z);
        }
    };
    Camera.prototype._renderScene = function (pViewport) {
        this.preRenderScene();
        pViewport.update();
        this.postRenderScene();
    };
    Camera.prototype._keepLastViewport = function (pViewport) {
        this._pLastViewport = pViewport;
    };
    Camera.prototype._getLastViewport = function () {
        return this._pLastViewport;
    };
    Camera.prototype._getNumRenderedFaces = function () {
        return 0;
    };
    Camera.prototype._notifyRenderedFaces = function (nFaces) {
    };
    Camera.prototype.toString = function (isRecursive, iDepth) {
        if (typeof isRecursive === "undefined") { isRecursive = false; }
        if (typeof iDepth === "undefined") { iDepth = 0; }
        if (!isRecursive) {
            return "<camera" + (this._sName ? " " + this._sName : "") + ">";
        }
        return _super.prototype.toString.call(this, isRecursive, iDepth);
    };
    Camera.prototype._addDisplayList = function (pScene, pList, index) {
        this._pDLTechniques[index] = new DLTechnique(pList, this);
        this._pDLResultStorage[index] = new util.ObjectArray();
    };
    Camera.prototype._removeDisplayList = function (pScene, pList, index) {
        this._pDLTechniques[index] = null;
        this._pDLResultStorage[index] = null;
    };
    Camera.prototype.preRenderScene = function () {
        this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
        var _broadcast = (this._pBroadcastSlotList).preRenderScene;
        var _recivier = this;
        if (isDef(_broadcast)) {
            for(var i = 0; i < _broadcast.length; ++i) {
                _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
            }
        }
    };
    Camera.prototype.postRenderScene = function () {
        this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
        var _broadcast = (this._pBroadcastSlotList).postRenderScene;
        var _recivier = this;
        if (isDef(_broadcast)) {
            for(var i = 0; i < _broadcast.length; ++i) {
                _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
            }
        }
    };
    return Camera;
})(SceneNode);
exports.Camera = Camera;
inline;
function isCamera(pNode) {
    return pNode.type >= EEntityTypes.CAMERA && pNode.type <= EEntityTypes.SHADOW_CASTER;
}
var akra;
(function (akra) {
    (function (scene) {
        (function (light) {
            var ShadowCaster = (function (_super) {
                __extends(ShadowCaster, _super);
                function ShadowCaster(pLightPoint, iFace) {
                    if (typeof iFace === "undefined") { iFace = ECubeFace.POSITIVE_X; }
                    _super.call(this, pLightPoint.scene, EEntityTypes.SHADOW_CASTER);
                    this._pLightPoint = null;
                    this._iFace = 0;
                    this._pAffectedObjects = new util.ObjectArray();
                    this._m4fOptimizedProj = new Mat4();
                    this._isShadowCasted = false;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = set;
                    this._pLightPoint = pLightPoint;
                    this._iFace = iFace;
                }
                ShadowCaster.prototype.lightPoint = function () {
                    return this._pLightPoint;
                };
                ShadowCaster.prototype.face = function () {
                    return this._iFace;
                };
                ShadowCaster.prototype.affectedObjects = function () {
                    return this._pAffectedObjects;
                };
                ShadowCaster.prototype.optimizedProjection = function () {
                    return this._m4fOptimizedProj;
                };
                ShadowCaster.prototype.isShadowCasted = function () {
                    return this._isShadowCasted;
                };
                ShadowCaster.prototype.isShadowCasted = function (isShadowCasted) {
                    this._isShadowCasted = isShadowCasted;
                };
                ShadowCaster.prototype._optimizeProjectionMatrix = function () {
                    var m4fView = this.viewMatrix;
                    var m4fProj = this.projectionMatrix;
                    var m4fProjData = m4fProj.data;
                    var pBox = geometry.Rect3d.stackCeil;
                    var pAffectedObjects = this._pAffectedObjects;
                    if (pAffectedObjects.length == 0) {
                        this._m4fOptimizedProj.set(m4fProj);
                        return;
                    }
                    var fX0, fX1, fY0, fY1, fZ0, fZ1;
                    var fX, fY, fZ, fW;
                    var fX_LBN, fY_LBN;
                    var fX_RTN, fY_RTN;
                    var fZ_Near, fZ_Far;
                    var fXRes_LBN = 1., fXRes_RTN = -1, fYRes_LBN = 1, fYRes_RTN = -1, fZRes_Near = 1, fZRes_Far = -1;
                    for(var i = 0; i < pAffectedObjects.length; i++) {
                        var pObject = pAffectedObjects.value(i);
                        if (!pObject.hasShadow) {
                            continue;
                        }
                        pBox.set(pObject.worldBounds);
                        pBox.transform(m4fView);
                        fX0 = pBox.x0;
                        fX1 = pBox.x1;
                        fY0 = pBox.y0;
                        fY1 = pBox.y1;
                        fZ0 = pBox.z0;
                        fZ1 = pBox.z1;
                        fX = m4fProjData[0] * fX0 + m4fProjData[4] * fY0 + m4fProjData[8] * fZ1 + m4fProjData[12];
                        fY = m4fProjData[1] * fX0 + m4fProjData[5] * fY0 + m4fProjData[9] * fZ1 + m4fProjData[13];
                        fZ = m4fProjData[2] * fX0 + m4fProjData[6] * fY0 + m4fProjData[10] * fZ1 + m4fProjData[14];
                        fW = m4fProjData[3] * fX0 + m4fProjData[7] * fY0 + m4fProjData[11] * fZ1 + m4fProjData[15];
                        if (fW <= 0) {
                            fX = -1;
                            fY = -1;
                            fZ = -1;
                            fW = 1;
                        }
                        fX_LBN = fX / fW;
                        fY_LBN = fY / fW;
                        fZ_Near = fZ / fW;
                        fX = m4fProjData[0] * fX1 + m4fProjData[4] * fY1 + m4fProjData[8] * fZ1 + m4fProjData[12];
                        fY = m4fProjData[1] * fX1 + m4fProjData[5] * fY1 + m4fProjData[9] * fZ1 + m4fProjData[13];
                        fW = m4fProjData[3] * fX1 + m4fProjData[7] * fY1 + m4fProjData[11] * fZ1 + m4fProjData[15];
                        if (fW <= 0) {
                            fX = 1;
                            fY = 1;
                            fW = 1;
                        }
                        fX_RTN = fX / fW;
                        fY_RTN = fY / fW;
                        fZ = m4fProjData[2] * fX0 + m4fProjData[6] * fY0 + m4fProjData[10] * fZ0 + m4fProjData[14];
                        fW = m4fProjData[3] * fX0 + m4fProjData[7] * fY0 + m4fProjData[11] * fZ0 + m4fProjData[15];
                        fZ_Far = fZ / fW;
                        fXRes_LBN = (fX_LBN < fXRes_LBN) ? fX_LBN : fXRes_LBN;
                        fXRes_RTN = (fX_RTN > fXRes_RTN) ? fX_RTN : fXRes_RTN;
                        fYRes_LBN = (fY_LBN < fYRes_LBN) ? fY_LBN : fYRes_LBN;
                        fYRes_RTN = (fY_RTN > fYRes_RTN) ? fY_RTN : fYRes_RTN;
                        fZRes_Near = (fZ_Near < fZRes_Near) ? fZ_Near : fZRes_Near;
                        fZRes_Far = (fZ_Far > fZRes_Far) ? fZ_Far : fZRes_Far;
                    }
                    fXRes_LBN = (fXRes_LBN < -1 || fXRes_LBN == 1) ? -1 : fXRes_LBN;
                    fXRes_RTN = (fXRes_RTN > 1 || fXRes_RTN == -1) ? 1 : fXRes_RTN;
                    fYRes_LBN = (fYRes_LBN < -1 || fYRes_LBN == 1) ? -1 : fYRes_LBN;
                    fYRes_RTN = (fYRes_RTN > 1 || fYRes_RTN == -1) ? 1 : fYRes_RTN;
                    fZRes_Near = (fZRes_Near < -1 || fZRes_Near == 1) ? -1 : fZRes_Near;
                    fZRes_Far = (fZRes_Far > 1 || fZRes_Far == -1) ? 1 : fZRes_Far;
                    var v4fTmp1 = m4fProj.unproj(vec3(fXRes_LBN, fYRes_LBN, fZRes_Near), vec4());
                    var v4fTmp2 = m4fProj.unproj(vec3(fXRes_RTN, fYRes_RTN, fZRes_Near), vec4());
                    var fXLeft = v4fTmp1.x;
                    var fXRight = v4fTmp2.x;
                    var fYBottom = v4fTmp1.y;
                    var fYTop = v4fTmp2.y;
                    var fZNear = v4fTmp1.z;
                    var fZFar = m4fProj.unprojZ(fZRes_Far);
                    if (m4fProj.isOrthogonalProjection()) {
                        Mat4.orthogonalProjectionAsymmetric(fXLeft, fXRight, fYBottom, fYTop, -fZNear, -fZFar, this._m4fOptimizedProj);
                    } else {
                        Mat4.frustum(fXLeft, fXRight, fYBottom, fYTop, -fZNear, -fZFar, this._m4fOptimizedProj);
                    }
                };
                return ShadowCaster;
            })(objects.Camera);
            light.ShadowCaster = ShadowCaster;            
            function isShadowCaster(pEntity) {
                return !isNull(pEntity) && pEntity.type === EEntityTypes.SHADOW_CASTER;
            }
            light.isShadowCaster = isShadowCaster;
        })(scene.light || (scene.light = {}));
        var light = scene.light;
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var ShadowViewport = (function (_super) {
            __extends(ShadowViewport, _super);
            function ShadowViewport(pCamera, pTarget, csRenderMethod, fLeft, fTop, fWidth, fHeight, iZIndex) {
                if (typeof csRenderMethod === "undefined") { csRenderMethod = ".prepare-shadows"; }
                if (typeof fLeft === "undefined") { fLeft = 0.; }
                if (typeof fTop === "undefined") { fTop = 0.; }
                if (typeof fWidth === "undefined") { fWidth = 1.; }
                if (typeof fHeight === "undefined") { fHeight = 1.; }
                if (typeof iZIndex === "undefined") { iZIndex = 0; }
                _super.call(this, pCamera, pTarget, csRenderMethod, fLeft, fTop, fWidth, fHeight, iZIndex);
                this.setClearEveryFrame(true, EFrameBufferTypes.DEPTH);
                this.setDepthParams(true, true, ECompareFunction.LESS);
                this.depthClear = 1.;
                this._csDefaultRenderMethod = ".prepare-shadows";
            }
            ShadowViewport.prototype._updateImpl = function () {
                var pShadowCaster = this._pCamera;
                var pAffectedObjects = pShadowCaster.affectedObjects;
                var pRenderable;
                var pSceneObject;
                var nShadowsCasted = 0;
                for(var i = 0; i < pAffectedObjects.length; i++) {
                    pSceneObject = pAffectedObjects.value(i);
                    if (pSceneObject.hasShadow) {
                        for(var j = 0; j < pSceneObject.totalRenderable; j++) {
                            pRenderable = pSceneObject.getRenderable(j);
                            if (!isNull(pRenderable) && pRenderable.hasShadow) {
                                this.prepareRenderableForShadows(pRenderable);
                                pRenderable.render(this, this._csDefaultRenderMethod, pSceneObject);
                                nShadowsCasted++;
                            }
                        }
                    }
                }
                pShadowCaster.isShadowCasted = (nShadowsCasted > 0) ? true : false;
            };
            ShadowViewport.prototype.prepareRenderableForShadows = function (pRenderable) {
                var pRenderTechnique = pRenderable.getTechnique(this._csDefaultRenderMethod);
                if (!isNull(pRenderTechnique)) {
                    return;
                }
                var pRmgr = this.getTarget().getRenderer().getEngine().getResourceManager();
                var pMethodPool = pRmgr.renderMethodPool;
                var pMethod = pMethodPool.findResource(".method-prepare-shadows");
                if (isNull(pMethod)) {
                    pMethod = pRmgr.createRenderMethod(".method-prepare-shadows");
                    pMethod.effect = pRmgr.createEffect(".effect-prepare-shadows");
                    pMethod.effect.addComponent("akra.system.prepareShadows");
                }
                pRenderable.addRenderMethod(pMethod, this._csDefaultRenderMethod);
            };
            return ShadowViewport;
        })(Viewport);
        render.ShadowViewport = ShadowViewport;        
        ;
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var RenderableObject = (function () {
            function RenderableObject(eType) {
                if (typeof eType === "undefined") { eType = ERenderDataTypes.UNKNOWN; }
                this._pRenderData = null;
                this._pTechnique = null;
                this._pTechniqueMap = {};
                this._bShadow = true;
                this._bVisible = true;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = _setRenderData(pData, IRenderData);
                this._eRenderableType = eType;
            }
            RenderableObject.prototype.type = function () {
                return this._eRenderableType;
            };
            RenderableObject.prototype.renderMethod = function () {
                return this._pTechnique.getMethod();
            };
            RenderableObject.prototype.renderMethod = function (pMethod) {
                this.switchRenderMethod(pMethod);
            };
            RenderableObject.prototype.effect = function () {
                return this._pTechnique.getMethod().effect;
            };
            RenderableObject.prototype.surfaceMaterial = function () {
                return this._pTechnique.getMethod().surfaceMaterial;
            };
            RenderableObject.prototype.material = function () {
                return this.surfaceMaterial.material;
            };
            RenderableObject.prototype.data = function () {
                return this._pRenderData;
            };
            RenderableObject.prototype.hasShadow = function () {
                return this._bShadow;
            };
            RenderableObject.prototype.hasShadow = function (bShadow) {
                if (this._bShadow !== bShadow) {
                    this._bShadow = bShadow;
                    this.shadow(bShadow);
                }
            };
            return RenderableObject;
        })();
        render.RenderableObject = RenderableObject;        
        void {
            this: ,
            _pRenderData:  = pData
        };
        _setup(pRenderer, IRenderer, csDefaultMethod, string = null);
        void {
            this: ,
            _pRenderer:  = pRenderer
        };
        if (!this.addRenderMethod(csDefaultMethod) || this.switchRenderMethod(null) === false) {
 {
                logger.setSourceLocation("RenderableObject.ts", 69);
                logger.criticalError("cannot add & switch render method to default");
            }
            ;
        }
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
inline;
getRenderer();
IRenderer;
 {
    return this._pRenderer;
}
destroy();
void {
    this: ,
    _pRenderer:  = null
};
this._pTechnique = null;
for(var i in this._pTechniqueMap) {
    this._pTechniqueMap[i].destroy();
}
this._pTechniqueMap = null;
addRenderMethod(pMethod, IRenderMethod, csName, string = "default");
bool;
addRenderMethod(csMethod, string, csName, string = "default");
bool;
addRenderMethod(csMethod, any, csName, string = "default");
bool;
 {
    var pTechnique = new RenderTechnique();
    var pRmgr = this.getRenderer().getEngine().getResourceManager();
    var pMethod = null;
    if (isNull(csMethod)) {
        csMethod = "default";
    }
    if (isString(arguments[0]) || arguments.length === 0) {
        pMethod = pRmgr.createRenderMethod((csMethod) + this.getGuid());
        if (!isDefAndNotNull(pMethod)) {
            return false;
        }
        pMethod.surfaceMaterial = pRmgr.createSurfaceMaterial(csMethod + ".material." + this.getGuid());
        pMethod.effect = pRmgr.createEffect(csMethod + ".effect." + this.getGuid());
    } else {
        pMethod = arguments[0];
    }
 {
        logger.setSourceLocation("RenderableObject.ts", 116);
        logger.assert(pMethod.getManager().getEngine().getRenderer() === this._pRenderer, "Render method should belong to the same engine instance that the renderable object.");
    }
    ;
    pTechnique.setMethod(pMethod);
    this._pTechniqueMap[csName || "default"] = pTechnique;
    return true;
}
switchRenderMethod(pMethod, IRenderMethod);
bool;
switchRenderMethod(csName, string);
bool;
switchRenderMethod(csName, any);
bool;
 {
    var pTechnique;
    var sName = null;
    if (isNull(arguments[0])) {
        sName = "default";
    } else if (isString(arguments[0])) {
        sName = csName;
    } else if (isDefAndNotNull(arguments[0])) {
        sName = (arguments[0]).findResourceName();
        if (!isDefAndNotNull(this._pTechniqueMap[sName])) {
            if (!this.addRenderMethod(arguments[0], sName)) {
                return false;
            }
        }
    }
    pTechnique = this._pTechniqueMap[sName];
    if (isDefAndNotNull(pTechnique)) {
        this._pTechnique = pTechnique;
        return true;
    }
    return false;
}
removeRenderMethod(csName, string);
bool;
 {
    var pTechnique = this._pTechniqueMap[csName];
    if (isDefAndNotNull(pTechnique)) {
        delete this._pTechniqueMap[csName || "default"];
        return true;
    }
    return false;
}
inline;
getRenderMethod(csName, string = null);
IRenderMethod;
 {
    var pTechnique = this._pTechniqueMap[csName || "default"];
    return pTechnique ? pTechnique.getMethod() : null;
}
inline;
getRenderMethodDefault();
IRenderMethod;
 {
    return this.getRenderMethod("default");
}
inline;
isReadyForRender();
bool;
 {
    return this._bVisible && this._pTechnique.isReady();
}
isAllMethodsLoaded();
bool;
 {
    for(var i in this._pTechniqueMap) {
        var pMethod = this._pTechniqueMap[i].getMethod();
        if (!isDefAndNotNull(pMethod) || !pMethod.isResourceLoaded()) {
            return false;
        }
    }
    return true;
}
render(pViewport, IViewport, csMethod ?  : string = null, pSceneObject ?  : ISceneObject = null);
void {
    this: ,
    beforeRender: (pViewport)
};
if (!this.isReadyForRender()) {
    return;
}
if (!this.switchRenderMethod(csMethod)) {
    return;
}
this.data._draw(this._pTechnique, pViewport, this, pSceneObject);
inline;
getTechnique(sName, string = "default");
IRenderTechnique;
 {
    return this._pTechniqueMap[sName] || null;
}
inline;
getTechniqueDefault();
IRenderTechnique;
 {
    return this.getTechnique("default");
}
_draw();
void {};
 {
    logger.setSourceLocation("RenderableObject.ts", 220);
    logger.error("RenderableObject::_draw() pure virtual method() isn't callable!!");
}
;
inline;
_setVisible(bVisible, bool);
void {
    this: ,
    _bVisible:  = bVisible
};
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return RenderableObject._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
shadow(bValue);
void {
    var: _recivier,
    any:  = this
};
this._pUnicastSlotMap = this._pUnicastSlotMap || (this.getEventTable()).findUnicastList(this._iGuid);
var _unicast = (this._pUnicastSlotMap).shadow;
if (isDef(_unicast)) {
    _unicast.target ? _unicast.target[_unicast.callback](_recivier, bValue) : _unicast.listener(_recivier, bValue);
}
;
;
beforeRender(pViewport);
void {
    var: _recivier,
    any:  = this
};
this._pUnicastSlotMap = this._pUnicastSlotMap || (this.getEventTable()).findUnicastList(this._iGuid);
var _unicast = (this._pUnicastSlotMap).beforeRender;
if (isDef(_unicast)) {
    _unicast.target ? _unicast.target[_unicast.callback](_recivier, pViewport) : _unicast.listener(_recivier, pViewport);
}
;
;
inline;
function isMeshSubset(pObject) {
    return pObject.type === ERenderDataTypes.MESH_SUBSET;
}
inline;
function isScreen(pObject) {
    return pObject.type === ERenderDataTypes.SCREEN;
}
var akra;
(function (akra) {
    (function (render) {
        var Screen = (function (_super) {
            __extends(Screen, _super);
            function Screen(pRenderer) {
                _super.call(this, ERenderDataTypes.SCREEN);
                var pCollection = pRenderer.getEngine().createRenderDataCollection(0);
                var pData = pCollection.getEmptyRenderData(EPrimitiveTypes.TRIANGLESTRIP);
                pData.allocateAttribute(createVertexDeclaration([
                    VE_FLOAT2(DeclUsages.POSITION)
                ]), new Float32Array([
                    -1, 
                    -1, 
                    -1, 
                    1, 
                    1, 
                    -1, 
                    1, 
                    1
                ]));
                this._pRenderData = pData;
                this._setup(pRenderer);
            }
            return Screen;
        })(RenderableObject);
        render.Screen = Screen;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var DSViewport = (function (_super) {
            __extends(DSViewport, _super);
            function DSViewport(pCamera, pTarget, csRenderMethod, fLeft, fTop, fWidth, fHeight, iZIndex) {
                if (typeof csRenderMethod === "undefined") { csRenderMethod = null; }
                if (typeof fLeft === "undefined") { fLeft = 0.; }
                if (typeof fTop === "undefined") { fTop = 0.; }
                if (typeof fWidth === "undefined") { fWidth = 1.; }
                if (typeof fHeight === "undefined") { fHeight = 1.; }
                if (typeof iZIndex === "undefined") { iZIndex = 0; }
                _super.call(this, pCamera, pTarget, null, fLeft, fTop, fWidth, fHeight, iZIndex);
                this._pDefereedColorTextures = [];
                this._pDeferredDepthTexture = null;
                this._pDeferredView = null;
                this._pDeferredSkyTexture = null;
                this._pLightingUnifoms = {
                    omni: [],
                    project: [],
                    omniShadows: [],
                    projectShadows: [],
                    textures: [],
                    samplersOmni: [],
                    samplersProject: []
                };
                this._pLightPoints = null;
                this.inline = resetUniforms();
                var pEngine = this.getTarget().getRenderer().getEngine();
                var pResMgr = pEngine.getResourceManager();
                var pDeferredData = new Array(2);
                var pDeferredTextures = new Array(2);
                var pDepthTexture;
                var pDefferedView = this._pDeferredView = new Screen(pEngine.getRenderer());
                var iGuid = sid();
                var iWidth = math.ceilingPowerOfTwo(this.actualWidth);
                var iHeight = math.ceilingPowerOfTwo(this.actualHeight);
                if (info.browser.name === "Firefox") {
                    iWidth = math.min(iWidth, 1024);
                    iHeight = math.min(iHeight, 1024);
                }
                pDepthTexture = this._pDeferredDepthTexture = pResMgr.createTexture("deferred-depth-texture-" + iGuid);
                pDepthTexture.create(iWidth, iHeight, 1, null, 0, 0, 0, ETextureTypes.TEXTURE_2D, EPixelFormats.DEPTH32);
                for(var i = 0; i < 2; ++i) {
                    pDeferredTextures[i] = this._pDefereedColorTextures[i] = pResMgr.createTexture("deferred-color-texture-" + i + "-" + iGuid);
                    pDeferredTextures[i].create(iWidth, iHeight, 1, null, ETextureFlags.RENDERTARGET, 0, 0, ETextureTypes.TEXTURE_2D, EPixelFormats.FLOAT32_RGBA);
                    pDeferredData[i] = pDeferredTextures[i].getBuffer().getRenderTarget();
                    pDeferredData[i].setAutoUpdated(false);
                    var pViewport = pDeferredData[i].addViewport(this.getCamera(), "deferred_shading_pass_" + i, 0, 0, 0, this.actualWidth / pDeferredTextures[i].width, this.actualHeight / pDeferredTextures[i].height);
                    pDeferredData[i].attachDepthTexture(pDepthTexture);
                    if (i === 1) {
                        pViewport.setDepthParams(true, false, ECompareFunction.EQUAL);
                        pViewport.setClearEveryFrame(true, EFrameBufferTypes.COLOR);
                    }
                }
                var pDSMethod = pResMgr.createRenderMethod(".deferred_shading");
                var pDSEffect = pResMgr.createEffect(".deferred_shading");
                pDSEffect.addComponent("akra.system.deferredShading");
                pDSEffect.addComponent("akra.system.omniLighting");
                pDSEffect.addComponent("akra.system.projectLighting");
                pDSEffect.addComponent("akra.system.omniShadowsLighting");
                pDSEffect.addComponent("akra.system.projectShadowsLighting");
                pDSEffect.addComponent("akra.system.skybox", 1, 0);
                pDSMethod.effect = pDSEffect;
                pDefferedView.getTechnique().setMethod(pDSMethod);
                pDefferedView.getTechnique()._setGlobalPostEffectsFrom(1);
                this.setClearEveryFrame(false);
                this.setDepthParams(false, false, 0);
                this.setFXAA(true);
                this.connect(pDefferedView.getTechnique(), "render", "_onRender", EEventTypes.UNICAST);
            }
            DSViewport.prototype._updateDimensions = function () {
                _super.prototype._updateDimensions.call(this);
                var pDeferredTextures = this._pDefereedColorTextures;
                if (isDefAndNotNull(this._pDeferredDepthTexture)) {
                    this._pDeferredDepthTexture.reset(math.ceilingPowerOfTwo(this.actualWidth), math.ceilingPowerOfTwo(this.actualHeight));
                    for(var i = 0; i < 2; ++i) {
                        pDeferredTextures[i].reset(math.ceilingPowerOfTwo(this.actualWidth), math.ceilingPowerOfTwo(this.actualHeight));
                        pDeferredTextures[i].getBuffer().getRenderTarget().getViewport(0).setDimensions(0., 0., this.actualWidth / pDeferredTextures[i].width, this.actualHeight / pDeferredTextures[i].height);
                    }
                }
            };
            DSViewport.prototype._updateImpl = function () {
                this.prepareForDeferredShading();
                var pLights = this.getCamera().display(1);
                for(var i = 0; i < pLights.length; i++) {
                    pLights.value(i)._calculateShadows();
                }
                this._pLightPoints = pLights;
                this._pDefereedColorTextures[0].getBuffer().getRenderTarget().update();
                this._pDefereedColorTextures[1].getBuffer().getRenderTarget().update();
                this.newFrame();
                this._pDeferredView.render(this);
            };
            DSViewport.prototype.prepareForDeferredShading = function () {
                var pNodeList = this.getCamera().display();
                for(var i = 0; i < pNodeList.length; ++i) {
                    var pSceneObject = pNodeList.value(i);
                    for(var k = 0; k < pSceneObject.totalRenderable; k++) {
                        var pRenderable = pSceneObject.getRenderable(k);
                        var pTechCurr = pRenderable.getTechniqueDefault();
                        for(var j = 0; j < 2; j++) {
                            var sMethod = "deferred_shading_pass_" + j;
                            var pTechnique = pRenderable.getTechnique(sMethod);
                            if (isNull(pTechnique) || pTechCurr.modified > pTechnique.modified) {
                                if (!pRenderable.addRenderMethod(pRenderable.getRenderMethod(), sMethod)) {
 {
                                        logger.setSourceLocation("DSViewport2.ts", 215);
                                        logger.criticalError("cannot clone active render method");
                                    }
                                    ;
                                }
                                pTechnique = pRenderable.getTechnique(sMethod);
                                pTechnique._syncTable(pTechCurr);
                                if (j === 0) {
                                    pTechnique._blockPass(1);
                                } else {
                                    pTechnique._blockPass(0);
                                }
                                if (pTechnique.totalPasses > j) {
                                    var pPass = pTechnique.getPass(j);
                                    pPass.blend("akra.system.prepareForDeferredShading", j);
                                }
                            }
                        }
                    }
                }
                ;
            };
            DSViewport.prototype.setSkybox = function (pSkyTexture) {
                if (pSkyTexture.textureType !== ETextureTypes.TEXTURE_CUBE_MAP) {
                    return null;
                }
                this._pDeferredSkyTexture = pSkyTexture;
                return true;
            };
            DSViewport.prototype.setFXAA = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                var pEffect = this._pDeferredView.getTechnique().getMethod().effect;
                if (bValue) {
                    pEffect.addComponent("akra.system.fxaa", 2, 0);
                    this._pDeferredView.getTechnique()._setGlobalPostEffectsFrom(2);
                } else {
                    pEffect.delComponent("akra.system.fxaa", 2, 0);
                    this._pDeferredView.getTechnique()._setGlobalPostEffectsFrom(1);
                }
            };
            DSViewport.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                this._pDeferredDepthTexture.destroyResource();
                this._pDefereedColorTextures[0].destroyResource();
                this._pDefereedColorTextures[1].destroyResource();
                this._pDeferredView.destroy();
                this._pDeferredView = null;
                this._pDeferredSkyTexture = null;
            };
            DSViewport.prototype._onRender = function (pTechnique, iPass) {
                var pPass = pTechnique.getPass(iPass);
                var pDepthTexture = this._pDeferredDepthTexture;
                var pDeferredTextures = this._pDefereedColorTextures;
                switch(iPass) {
                    case 0:
                        var pLightUniforms = this._pLightingUnifoms;
                        var pLightPoints = this._pLightPoints;
                        var pCamera = this.getCamera();
                        this.createLightingUniforms(pCamera, pLightPoints, pLightUniforms);
                        pPass.setForeign("nOmni", pLightUniforms.omni.length);
                        pPass.setForeign("nProject", pLightUniforms.project.length);
                        pPass.setForeign("nOmniShadows", pLightUniforms.omniShadows.length);
                        pPass.setForeign("nProjectShadows", pLightUniforms.projectShadows.length);
                        pPass.setStruct("points_omni", pLightUniforms.omni);
                        pPass.setStruct("points_project", pLightUniforms.project);
                        pPass.setStruct("points_omni_shadows", pLightUniforms.omniShadows);
                        pPass.setStruct("points_project_shadows", pLightUniforms.projectShadows);
                        for(var i = 0; i < pLightUniforms.textures.length; i++) {
                            pPass.setTexture("TEXTURE" + i, pLightUniforms.textures[i]);
                        }
                        pPass.setUniform("PROJECT_SHADOW_SAMPLER", pLightUniforms.samplersProject);
                        pPass.setUniform("OMNI_SHADOW_SAMPLER", pLightUniforms.samplersOmni);
                        pPass.setUniform("MIN_SHADOW_VALUE", 0.5);
                        pPass.setUniform("SHADOW_CONSTANT", 5.e+2);
                        pPass.setUniform("SCREEN_TEXTURE_RATIO", vec2(this.actualWidth / pDepthTexture.width, this.actualHeight / pDepthTexture.height));
                        pPass.setTexture("DEFERRED_TEXTURE0", pDeferredTextures[0]);
                        pPass.setTexture("DEFERRED_TEXTURE1", pDeferredTextures[1]);
                        pPass.setTexture("SCENE_DEPTH_TEXTURE", pDepthTexture);
                        pPass.setUniform("SAMPLER_TEXTURE0", {
                            textureName: "DEFERRED_TEXTURE0",
                            texture: null,
                            wrap_s: ETextureWrapModes.CLAMP_TO_EDGE,
                            wrap_t: ETextureWrapModes.CLAMP_TO_EDGE,
                            mag_filter: ETextureFilters.NEAREST,
                            min_filter: ETextureFilters.NEAREST
                        });
                        pPass.setUniform("SAMPLER_TEXTURE1", {
                            textureName: "DEFERRED_TEXTURE1",
                            texture: null,
                            wrap_s: ETextureWrapModes.CLAMP_TO_EDGE,
                            wrap_t: ETextureWrapModes.CLAMP_TO_EDGE,
                            mag_filter: ETextureFilters.NEAREST,
                            min_filter: ETextureFilters.NEAREST
                        });
                        pPass.setUniform("SAMPLER_SCENE_DEPTH", {
                            textureName: "SCENE_DEPTH_TEXTURE",
                            texture: null,
                            wrap_s: ETextureWrapModes.CLAMP_TO_EDGE,
                            wrap_t: ETextureWrapModes.CLAMP_TO_EDGE,
                            mag_filter: ETextureFilters.LINEAR,
                            min_filter: ETextureFilters.LINEAR
                        });
                        break;
                    case 1:
                        pPass.setTexture("DEFERRED_TEXTURE0", pDeferredTextures[0]);
                        pPass.setTexture("SKYBOX_TEXTURE", this._pDeferredSkyTexture);
                        pPass.setUniform("SCREEN_TEXTURE_RATIO", vec2(this.actualWidth / pDepthTexture.width, this.actualHeight / pDepthTexture.height));
                        pPass.setUniform("SAMPLER_SKYBOX", {
                            textureName: "SKYBOX_TEXTURE",
                            texture: null,
                            wrap_s: ETextureWrapModes.CLAMP_TO_EDGE,
                            wrap_t: ETextureWrapModes.CLAMP_TO_EDGE,
                            mag_filter: ETextureFilters.LINEAR,
                            min_filter: ETextureFilters.LINEAR
                        });
                        pPass.setUniform("SAMPLER_TEXTURE0", {
                            textureName: "DEFERRED_TEXTURE0",
                            texture: null,
                            wrap_s: ETextureWrapModes.CLAMP_TO_EDGE,
                            wrap_t: ETextureWrapModes.CLAMP_TO_EDGE,
                            mag_filter: ETextureFilters.NEAREST,
                            min_filter: ETextureFilters.NEAREST
                        });
                        break;
                }
            };
            return DSViewport;
        })(Viewport);
        render.DSViewport = DSViewport;        
        void {
            var: pUniforms = this._pLightingUnifoms,
            pUniforms: ,
            omni: ,
            clear: ,
            pUniforms: ,
            project: ,
            clear: ,
            pUniforms: ,
            omniShadows: ,
            clear: ,
            pUniforms: ,
            projectShadows: ,
            clear: ,
            pUniforms: ,
            textures: ,
            clear: ,
            pUniforms: ,
            samplersProject: ,
            clear: ,
            pUniforms: ,
            samplersOmni: ,
            clear: 
        };
        createLightingUniforms(pCamera, ICamera, pLightPoints, IObjectArray, pUniforms, UniformMap);
        void {
            var: pLight,
            ILightPoint: 
        };
        var pOmniLight;
        var pProjectLight;
        var i, j;
        var pUniformData;
        var pCameraView = pCamera.viewMatrix;
        var v4fLightPosition = vec4();
        var v3fLightTransformPosition = vec3();
        var v4fTemp = vec4();
        var pShadowCaster;
        var m4fShadow, m4fToLightSpace;
        var iLastTextureIndex = 0;
        var sTexture = "TEXTURE";
        this.resetUniforms();
        for(i = 0; i < pLightPoints.length; i++) {
            pLight = pLightPoints.value(i);
            v4fLightPosition.set(pLight.worldPosition, 1.);
            pCameraView.multiplyVec4(v4fLightPosition, v4fTemp);
            v3fLightTransformPosition.set(v4fTemp.x, v4fTemp.y, v4fTemp.z);
            if (pLight.lightType === ELightTypes.OMNI) {
                pOmniLight = pLight;
                if (pLight.isShadowCaster) {
                    pUniformData = UniformOmniShadow.stackCeil;
                    (pUniformData).setLightData(pLight.params, v3fLightTransformPosition);
                    var pDepthCube = pOmniLight.getDepthTextureCube();
                    var pShadowCasterCube = pOmniLight.getShadowCaster();
                    for(j = 0; j < 6; ++j) {
                        pShadowCaster = pShadowCasterCube[j];
                        m4fToLightSpace = pShadowCaster.viewMatrix.multiply(pCamera.worldMatrix, mat4());
                        pUniforms.textures.push(pDepthCube[j]);
                        sTexture = "TEXTURE" + (pUniforms.textures.length - 1);
                        (pUniformData).setSampler(sTexture, j);
                        pUniforms.samplersOmni.push((pUniformData).SHADOW_SAMPLER[j]);
                        (pUniformData).setMatrix(m4fToLightSpace, pShadowCaster.optimizedProjection, j);
                    }
                    pUniforms.omniShadows.push(pUniformData);
                } else {
                    pUniformData = UniformOmni.stackCeil;
                    (pUniformData).setLightData(pLight.params, v3fLightTransformPosition);
                    pUniforms.omni.push(pUniformData);
                }
            } else if (pLight.lightType === ELightTypes.PROJECT) {
                pProjectLight = pLight;
                pShadowCaster = pProjectLight.getShadowCaster();
                if (pLight.isShadowCaster && pShadowCaster.isShadowCasted) {
                    pUniformData = UniformProjectShadow.stackCeil;
                    (pUniformData).setLightData(pLight.params, v3fLightTransformPosition);
                    m4fToLightSpace = pShadowCaster.viewMatrix.multiply(pCamera.worldMatrix, mat4());
                    pUniforms.textures.push(pProjectLight.getDepthTexture());
                    sTexture = "TEXTURE" + (pUniforms.textures.length - 1);
                    (pUniformData).setSampler(sTexture);
                    pUniforms.samplersProject.push((pUniformData).SHADOW_SAMPLER);
                    (pUniformData).setMatrix(m4fToLightSpace, pShadowCaster.projectionMatrix, pShadowCaster.optimizedProjection);
                    pUniforms.projectShadows.push(pUniformData);
                } else {
                    pUniformData = UniformProject.stackCeil;
                    (pUniformData).setLightData(pLight.params, v3fLightTransformPosition);
                    m4fShadow = pShadowCaster.projViewMatrix.multiply(pCamera.worldMatrix, mat4());
                    (pUniformData).setMatrix(m4fShadow);
                    pUniforms.project.push(pUniformData);
                }
            } else {
 {
                    logger.setSourceLocation("DSViewport2.ts", 491);
                    logger.criticalError("Invalid light point type detected.");
                }
                ;
            }
        }
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var RenderTarget = (function () {
            function RenderTarget(pRenderer) {
                this._iPriority = 4;
                this._pDepthBuffer = null;
                this._pDepthPixelBuffer = null;
                this._isActive = true;
                this._isAutoUpdate = true;
                this._bHwGamma = false;
                this._pViewportList = [];
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = getRenderer();
                this.IRenderer = {
                    return: this._pRenderer
                };
                this.inline = getStatistics();
                this.IFrameStats = {
                    return: this._pFrameStats
                };
                this.inline = getLastFPS();
                this.number = {
                    return: this._pFrameStats.fps.last
                };
                this.inline = getAverageFPS();
                this.number = {
                    return: this._pFrameStats.fps.avg
                };
                this.inline = getBestFPS();
                this.number = {
                    return: this._pFrameStats.fps.best
                };
                this.inline = getWorstFPS();
                this.number = {
                    return: this._pFrameStats.fps.worst
                };
                this.inline = getPolygonCount();
                this.number = {
                    return: this._pFrameStats.polygonsCount
                };
                this.inline = getBestFrameTime();
                this.number = {
                    return: this._pFrameStats.time.best
                };
                this.inline = getWorstFrameTime();
                this.number = {
                    return: this._pFrameStats.time.worst
                };
                this.inline = hasViewportByZIndex(iZIndex, number);
                this.bool = {
                    return: isDefAndNotNull(this._pViewportList[iZIndex])
                };
                this.inline = isActive();
                this.bool = {
                    return: this._isActive
                };
                this.inline = setAutoUpdated(isAutoUpdate, bool = true);
                this._pRenderer = pRenderer;
                this._pTimer = pRenderer.getEngine().getTimer();
                this._pFrameStats = {
                    fps: {
                        last: 0.,
                        avg: 0.,
                        best: 0.,
                        worst: 0.
                    },
                    time: {
                        best: 0.,
                        worst: 0.
                    },
                    polygonsCount: 0
                };
                this.resetStatistics();
            }
            RenderTarget.prototype.name = function () {
                return this._sName;
            };
            RenderTarget.prototype.name = function (sName) {
                this._sName = sName;
            };
            RenderTarget.prototype.width = function () {
                return this._iWidth;
            };
            RenderTarget.prototype.height = function () {
                return this._iHeight;
            };
            RenderTarget.prototype.colorDepth = function () {
                return this._iColorDepth;
            };
            RenderTarget.prototype.totalViewports = function () {
                return this._pViewportList.length;
            };
            RenderTarget.prototype.totalFrames = function () {
                return this._iFrameCount;
            };
            RenderTarget.prototype.priority = function () {
                return this._iPriority;
            };
            RenderTarget.prototype.destroy = function () {
                var pViewport;
                for(var i in this._pViewportList) {
                    pViewport = this._pViewportList[i];
                    this.viewportRemoved(pViewport);
                    pViewport.destroy();
                }
                this.detachDepthBuffer();
 {
                    logger.setSourceLocation("render/RenderTarget.ts", 100);
                    logger.log("RenderTarget '%s'\n Average FPS: %s\n Best FPS: %s\n Worst FPS: %s", this._sName, this._pFrameStats.fps.avg, this._pFrameStats.fps.best, this._pFrameStats.fps.worst);
                }
                ;
            };
            RenderTarget.prototype.getDepthBuffer = function () {
                return this._pDepthBuffer;
            };
            RenderTarget.prototype.attachDepthBuffer = function (pBuffer) {
                var isOk = false;
                if ((isOk = pBuffer.isCompatible(this))) {
                    this.detachDepthBuffer();
                    this._pDepthBuffer = pBuffer;
                    this._pDepthBuffer._notifyRenderTargetAttached(this);
                }
                return isOk;
            };
            RenderTarget.prototype.attachDepthPixelBuffer = function (pBuffer) {
                if (this._iWidth !== pBuffer.width || this._iHeight !== pBuffer.height) {
                    return false;
                }
                var eFormat = pBuffer.format;
                if (eFormat !== EPixelFormats.FLOAT32_DEPTH || eFormat !== EPixelFormats.DEPTH8) {
                    return false;
                }
                this.detachDepthPixelBuffer();
                this._pDepthPixelBuffer = pBuffer;
                return true;
            };
            RenderTarget.prototype.detachDepthPixelBuffer = function () {
                if (this._pDepthPixelBuffer) {
                    this._pDepthPixelBuffer = null;
                }
            };
            RenderTarget.prototype.detachDepthBuffer = function () {
                if (this._pDepthBuffer) {
                    this._pDepthBuffer._notifyRenderTargetDetached(this);
                    this._pDepthBuffer = null;
                }
            };
            RenderTarget.prototype.attachDepthTexture = function (pTexture) {
                return false;
            };
            RenderTarget.prototype.detachDepthTexture = function () {
            };
            RenderTarget.prototype._detachDepthBuffer = function () {
                this._pDepthBuffer = null;
            };
            RenderTarget.prototype._beginUpdate = function () {
                this.preUpdate();
                this._pFrameStats.polygonsCount = 0;
            };
            RenderTarget.prototype._updateAutoUpdatedViewports = function (bUpdateStatistics) {
                if (typeof bUpdateStatistics === "undefined") { bUpdateStatistics = true; }
                var pViewport;
                for(var i in this._pViewportList) {
                    pViewport = this._pViewportList[i];
                    if (pViewport.isAutoUpdated()) {
                        this._updateViewport(pViewport, bUpdateStatistics);
                    }
                }
            };
            RenderTarget.prototype._endUpdate = function () {
                this.postUpdate();
                this.updateStats();
            };
            RenderTarget.prototype._updateViewport = function (pViewportPtr, bUpdateStatistics) {
                if (typeof bUpdateStatistics === "undefined") { bUpdateStatistics = true; }
                var pViewport;
                var iZIndex;
                if (isNumber(arguments[0])) {
                    iZIndex = arguments[0];
                    pViewport = this._pViewportList[iZIndex];
 {
                        logger.setSourceLocation("render/RenderTarget.ts", 198);
                        logger.assert(isDefAndNotNull(pViewport), "No viewport with given z-index : %s", iZIndex, "RenderTarget::_updateViewport");
                    }
                    ;
                } else {
                    pViewport = arguments[0];
                }
 {
                    logger.setSourceLocation("render/RenderTarget.ts", 205);
                    logger.assert(pViewport.getTarget() == this, "RenderTarget::_updateViewport the requested viewport is not bound to the rendertarget!");
                }
                ;
                this.viewportPreUpdate(pViewport);
                pViewport.update();
                if (bUpdateStatistics) {
                    this._pFrameStats.polygonsCount += pViewport._getNumRenderedPolygons();
                }
                this.viewportPostUpdate(pViewport);
            };
            RenderTarget.prototype.addViewport = function (pCamera, csRenderMethod, iZIndex, fLeft, fTop, fWidth, fHeight) {
                if (typeof csRenderMethod === "undefined") { csRenderMethod = null; }
                if (typeof iZIndex === "undefined") { iZIndex = 0; }
                if (typeof fLeft === "undefined") { fLeft = 0.; }
                if (typeof fTop === "undefined") { fTop = 0.; }
                if (typeof fWidth === "undefined") { fWidth = 1.; }
                if (typeof fHeight === "undefined") { fHeight = 1.; }
                var pViewport = this._pViewportList[iZIndex];
                if (isDefAndNotNull(pViewport)) {
 {
                        logger.setSourceLocation("render/RenderTarget.ts", 225);
                        logger.criticalError("Can't create another viewport for %s with Z-index %s 					because a viewport exists with this Z-Order already.", this._sName, iZIndex, "RenderTarget::addViewport");
                    }
                    ;
                }
                if (isNumber(arguments[1])) {
                    switch(arguments[1]) {
                        case EViewportTypes.DSVIEWPORT:
                            pViewport = new DSViewport(pCamera, this, null, fLeft, fTop, fWidth, fHeight, iZIndex);
                            break;
                        case EViewportTypes.SHADOWVIEWPORT:
                            pViewport = new ShadowViewport(pCamera, this, null, fLeft, fTop, fWidth, fHeight, iZIndex);
                            break;
                        default:
                            pViewport = new Viewport(pCamera, this, null, fLeft, fTop, fWidth, fHeight, iZIndex);
                            break;
                    }
                } else {
                    pViewport = new Viewport(pCamera, this, csRenderMethod, fLeft, fTop, fWidth, fHeight, iZIndex);
                }
                this._pViewportList[iZIndex] = pViewport;
                this.viewportAdded(pViewport);
                return pViewport;
            };
            RenderTarget.prototype.removeViewport = function (iZIndex) {
                var pViewport = this._pViewportList[iZIndex];
                if (isDefAndNotNull(pViewport)) {
                    this.viewportRemoved(pViewport);
                    this._pViewportList.splice(iZIndex, 1);
                    pViewport = null;
                    return true;
                }
                return false;
            };
            RenderTarget.prototype.removeAllViewports = function () {
                var pViewport;
                var iTotal;
                for(var i in this._pViewportList) {
                    pViewport = this._pViewportList[i];
                    this.viewportRemoved(pViewport);
                }
                iTotal = this._pViewportList.length;
                (this._pViewportList).clear();
                return iTotal;
            };
            RenderTarget.prototype.resetStatistics = function () {
                var pStats = this._pFrameStats;
                pStats.fps.avg = 0.;
                pStats.fps.best = 0.;
                pStats.fps.last = 0.;
                pStats.fps.worst = 999.;
                pStats.polygonsCount = 0;
                pStats.time.best = 9999999;
                pStats.time.worst = 0;
                this._fLastTime = this._pTimer.appTime;
                this._fLastSecond = this._fLastTime;
                this._iFrameCount = 0;
            };
            RenderTarget.prototype.updateStats = function () {
                this._iFrameCount++;
                var fThisTime = this._pTimer.appTime;
                var fFrameTime = fThisTime - this._fLastTime;
                this._pFrameStats.time.best = math.min(this._pFrameStats.time.best, fFrameTime);
                this._pFrameStats.time.worst = math.min(this._pFrameStats.time.worst, fFrameTime);
                if (fThisTime - this._fLastTime > 1.) {
                    this._pFrameStats.fps.last = this._iFrameCount / (fThisTime - this._fLastSecond);
                    if (this._pFrameStats.fps.avg == 0.) {
                        this._pFrameStats.fps.avg = this._pFrameStats.fps.last;
                    } else {
                        this._pFrameStats.fps.avg = (this._pFrameStats.fps.avg + this._pFrameStats.fps.last) / 2.;
                        this._pFrameStats.fps.best = math.max(this._pFrameStats.fps.best, this._pFrameStats.fps.last);
                        this._pFrameStats.fps.worst = math.max(this._pFrameStats.fps.worst, this._pFrameStats.fps.last);
                        this._fLastSecond = fThisTime;
                        this._iFrameCount = 0;
                    }
                    this._fLastTime = fThisTime;
                }
            };
            RenderTarget.prototype.getCustomAttribute = function (sName) {
                return null;
            };
            RenderTarget.prototype.getViewport = function (iIndex) {
 {
                    logger.setSourceLocation("render/RenderTarget.ts", 371);
                    logger.assert(iIndex < this._pViewportList.length, "Index out of bounds");
                }
                ;
                for(var i in this._pViewportList) {
                    if (iIndex--) {
                        continue;
                    }
                    return this._pViewportList[i];
                }
                return null;
            };
            RenderTarget.prototype.getViewportByZIndex = function (iZIndex) {
                var pViewport = this._pViewportList[iZIndex];
 {
                    logger.setSourceLocation("render/RenderTarget.ts", 388);
                    logger.assert(isDefAndNotNull(pViewport), "No viewport with given z-index : " + String(iZIndex), "RenderTarget::getViewportByZIndex");
                }
                ;
                return pViewport;
            };
            RenderTarget.prototype.setActive = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                this._isActive = bValue;
            };
            return RenderTarget;
        })();
        render.RenderTarget = RenderTarget;        
        void {
            this: ,
            _isAutoUpdate:  = isAutoUpdate
        };
        _notifyCameraRemoved(pCamera, ICamera);
        void {
            var: isRemoved,
            bool:  = false
        };
        for(var i in this._pViewportList) {
            var pViewport = this._pViewportList[i];
            if (pViewport.getCamera() === pCamera) {
                pViewport.setCamera(null);
                isRemoved = true;
            }
        }
        if (isRemoved) {
            this.cameraRemoved(pCamera);
        }
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
inline;
isAutoUpdated();
bool;
 {
    return this._isAutoUpdate;
}
inline;
isPrimary();
bool;
 {
    return false;
}
update();
void {
    this: ,
    updateImpl: 
};
readPixels(ppDest ?  : IPixelBox, eFramebuffer ?  : EFramebuffer);
IPixelBox;
 {
    return null;
}
updateImpl();
void {
    this: ,
    _beginUpdate: 
};
this._updateAutoUpdatedViewports(true);
this._endUpdate();
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return RenderTarget._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
preUpdate();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).preUpdate;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
viewportPreUpdate(pViewport);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).viewportPreUpdate;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pViewport) : _broadcast[i].listener(_recivier, pViewport);
    }
}
;
;
viewportPostUpdate(pViewport);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).viewportPostUpdate;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pViewport) : _broadcast[i].listener(_recivier, pViewport);
    }
}
;
;
viewportAdded(pViewport);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).viewportAdded;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pViewport) : _broadcast[i].listener(_recivier, pViewport);
    }
}
;
;
viewportRemoved(pViewport);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).viewportRemoved;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pViewport) : _broadcast[i].listener(_recivier, pViewport);
    }
}
;
;
postUpdate();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).postUpdate;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
resized();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).resized;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
cameraRemoved(pCamera);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).cameraRemoved;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pCamera) : _broadcast[i].listener(_recivier, pCamera);
    }
}
;
;
var akra;
(function (akra) {
    (function (render) {
        var RenderEntry = (function () {
            function RenderEntry() {
                this.viewport = null;
                this.renderTarget = null;
                this.maker = null;
                this.input = null;
                this.bufferMap = null;
            }
            RenderEntry.prototype.clear = function () {
                this.maker._releaseShaderInput(this.input);
                this.viewport = null;
                this.renderTarget = null;
                this.bufferMap = null;
                this.input = null;
                this.maker = null;
            };
            return RenderEntry;
        })();
        render.RenderEntry = RenderEntry;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var RenderQueue = (function () {
            function RenderQueue(pRenderer) {
                this.inline = createEntry();
                this.IRenderEntry = {
                    return: RenderQueue.createEntry()
                };
                this.inline = releaseEntry(pEntry, IRenderEntry);
                this._pRenderer = pRenderer;
                this._pEntryList = new util.ObjectArray();
            }
            RenderQueue.prototype.execute = function () {
                this._pRenderer._beginRender();
                for(var i = 0; i < this._pEntryList.length; i++) {
                    var pEntry = this._pEntryList.value(i);
                    this._pRenderer._renderEntry(pEntry);
                    this.releaseEntry(pEntry);
                }
                this._pEntryList.clear(false);
                this._pRenderer._endRender();
            };
            RenderQueue.prototype.push = function (pEntry) {
                this._pEntryList.push(pEntry);
            };
            return RenderQueue;
        })();
        render.RenderQueue = RenderQueue;        
        void {
            return: RenderQueue.releaseEntry(pEntry)
        };
        createEntry();
        IRenderEntry;
 {
            return RenderQueue.pool.length > 0 ? RenderQueue.pool.pop() : new RenderEntry();
        }
        releaseEntry(pEntry, IRenderEntry);
        void {
            RenderQueue: ,
            pool: ,
            push: (pEntry),
            pEntry: ,
            clear: 
        };
        pool:
util.ObjectArray = new util.ObjectArray()
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        render.SShaderPrefixes = {
            k_Sampler: "A_s_",
            k_Header: "A_h_",
            k_Attribute: "A_a_",
            k_Offset: "A_o_",
            k_Texture: "TEXTURE",
            k_Texcoord: "TEXCOORD",
            k_Texmatrix: "TEXMATRIX",
            k_Temp: "TEMP_",
            k_BlendType: "AUTO_BLEND_TYPE_"
        };
        render.ZEROSAMPLER = 19;
        render.SSystemSemantics = {
            MODEL_MATRIX: "MODEL_MATRIX",
            VIEW_MATRIX: "VIEW_MATRIX",
            PROJ_MATRIX: "PROJ_MATRIX",
            NORMAL_MATRIX: "NORMAL_MATRIX",
            BIND_MATRIX: "BIND_SHAPE_MATRIX",
            RENDER_OBJECT_ID: "RENDER_OBJECT_ID"
        };
        var Renderer = (function () {
            function Renderer(pEngine) {
                this._isActive = false;
                this._pRenderTargets = [];
                this._pPrioritisedRenderTargets = {};
                this._pRenderQueue = null;
                this._pActiveViewport = null;
                this._pActiveRenderTarget = null;
                this._bLockRenderTarget = false;
                this.inline = getEngine();
                this.IEngine = {
                    return: this._pEngine
                };
                this.inline = getError();
                this.string = {
                    return: null
                };
                this.inline = _disableAllTextureUnits();
                this._pEngine = pEngine;
                this.connect(pEngine, "active", "active");
                this.connect(pEngine, "inactive", "inactive");
                this._pRenderQueue = new RenderQueue(this);
            }
            Renderer.prototype.hasCapability = function (eCapability) {
                return false;
            };
            Renderer.prototype.debug = function (bValue, useApiTrace) {
                return false;
            };
            Renderer.prototype.isDebug = function () {
                return false;
            };
            Renderer.prototype.isValid = function () {
                return false;
            };
            Renderer.prototype._beginRender = function () {
            };
            Renderer.prototype._renderEntry = function (pEntry) {
            };
            Renderer.prototype._endRender = function () {
            };
            Renderer.prototype.clearFrameBuffer = function (iBuffer, cColor, fDepth, iStencil) {
            };
            Renderer.prototype.attachRenderTarget = function (pTarget) {
                if (this._pRenderTargets.indexOf(pTarget) != -1) {
                    return false;
                }
                var pList = this._pPrioritisedRenderTargets[pTarget.priority];
                if (!isDef(pList)) {
                    pList = this._pPrioritisedRenderTargets[pTarget.priority] = [];
                }
                pList.push(pTarget);
                this._pRenderTargets.push(pTarget);
                return true;
            };
            Renderer.prototype.detachRenderTarget = function (pTarget) {
                var i = this._pRenderTargets.indexOf(pTarget);
                if (i == -1) {
                    return false;
                }
                this._pRenderTargets.splice(i, 1);
                i = this._pPrioritisedRenderTargets[pTarget.priority].indexOf(pTarget);
                this._pPrioritisedRenderTargets[pTarget.priority].splice(i, 1);
                return true;
            };
            Renderer.prototype.destroyRenderTarget = function (pTarget) {
                var hasTarget = this.detachRenderTarget(pTarget);
                if (hasTarget) {
                    pTarget.destroy();
                    pTarget = null;
                }
            };
            Renderer.prototype.getActiveProgram = function () {
 {
                    logger.setSourceLocation("render/Renderer.ts", 157);
                    logger.criticalError("Renderer::getActiveProgram() is uncompleted method!");
                }
                ;
                return null;
            };
            return Renderer;
        })();
        render.Renderer = Renderer;        
        void {
            this: ,
            _disableTextureUnitsFrom: (0)
        };
        inline;
        _disableTextureUnitsFrom(iUnit, number);
        void {};
        _initRenderTargets();
        void {
            for: 
        };
        var i = 0;
        i < this._pRenderTargets.length;
        ++i;
 {
            this._pRenderTargets[i].resetStatistics();
        }
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
_updateAllRenderTargets();
void {
    var: pTarget,
    IRenderTarget: 
};
for(var iPriority in this._pPrioritisedRenderTargets) {
    var pTargetList = this._pPrioritisedRenderTargets[iPriority];
    for(var j = 0; j < pTargetList.length; ++j) {
        pTarget = pTargetList[j];
        if (pTarget.isActive() && pTarget.isAutoUpdated()) {
            pTarget.update();
        }
    }
}
_setViewport(pViewport, IViewport);
void {};
_setViewportForRender(pViewport, IViewport);
void {
    var: isViewportUpdate,
    bool:  = pViewport !== this._pActiveViewport || pViewport.isUpdated()
};
var isRenderTargetUpdate = pViewport.getTarget() !== this._pActiveRenderTarget;
if (isViewportUpdate || isRenderTargetUpdate) {
    this._setViewport(pViewport);
    if (isViewportUpdate) {
        var pState = pViewport._getViewportState();
        this._setCullingMode(pState.cullingMode);
        this._setDepthBufferParams(pState.depthTest, pState.depthWrite, pState.depthFunction, pState.clearDepth);
    }
}
_getViewport();
IViewport;
 {
    return this._pActiveViewport;
}
_setRenderTarget(pTarget, IRenderTarget);
void {};
_setCullingMode(eMode, ECullingMode);
void {};
_setDepthBufferParams(bDepthTest, bool, bDepthWrite, bool, eDepthFunction, ECompareFunction, fClearDepth ?  : number);
void {};
getDefaultCanvas();
ICanvas3d;
 {
    return null;
}
inline;
createEntry();
IRenderEntry;
 {
    return this._pRenderQueue.createEntry();
}
inline;
releaseEntry(pEntry, IRenderEntry);
void {
    this: ,
    _pRenderQueue: ,
    releaseEntry: (pEntry)
};
inline;
pushEntry(pEntry, IRenderEntry);
void {
    this: ,
    _pRenderQueue: ,
    push: (pEntry)
};
inline;
executeQueue();
void {
    this: ,
    _pRenderQueue: ,
    execute: 
};
inline;
lockRenderTarget();
void {
    this: ,
    _bLockRenderTarget:  = true
};
inline;
unlockRenderTarget();
void {
    this: ,
    _bLockRenderTarget:  = false
};
inline;
isLockRenderTarget();
bool;
 {
    return this._bLockRenderTarget;
}
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return Renderer._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
active(pEngine, IEngine);
void {
    this: ,
    _isActive:  = true
};
this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
var _broadcast = (this._pBroadcastSlotList).active;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pEngine) : _broadcast[i].listener(_recivier, pEngine);
    }
}
;
inactive(pEngine, IEngine);
void {
    this: ,
    _isActive:  = false
};
this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
var _broadcast = (this._pBroadcastSlotList).inactive;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pEngine) : _broadcast[i].listener(_recivier, pEngine);
    }
}
;
;
var akra;
(function (akra) {
    (function (util) {
        var UtilTimer = (function () {
            function UtilTimer() {
                this.isTimerInitialized = false;
                this.isTimerStopped = false;
                this.fTicksPerSec = 0.;
                this.iStopTime = 0;
                this.iLastElapsedTime = 0;
                this.iBaseTime = 0;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = start();
                this.bool = {
                    return: this.execCommand(EUtilTimerCommands.TIMER_START) === 0
                };
                this.inline = stop();
                this.bool = {
                    return: this.execCommand(EUtilTimerCommands.TIMER_STOP) === 0
                };
                this.inline = reset();
                this.bool = {
                    return: this.execCommand(EUtilTimerCommands.TIMER_RESET) === 0
                };
            }
            UtilTimer.prototype.absoluteTime = function () {
                return this.execCommand(EUtilTimerCommands.TIMER_GET_ABSOLUTE_TIME);
            };
            UtilTimer.prototype.appTime = function () {
                return this.execCommand(EUtilTimerCommands.TIMER_GET_APP_TIME);
            };
            UtilTimer.prototype.elapsedTime = function () {
                return this.execCommand(EUtilTimerCommands.TIMER_GET_ELAPSED_TIME);
            };
            UtilTimer.prototype.execCommand = function (eCommand) {
                var fTime = 0.;
                var fElapsedTime = 0.;
                var iTime;
                if (this.isTimerInitialized == false) {
                    this.isTimerInitialized = true;
                    this.fTicksPerSec = 1000;
                }
                if (this.iStopTime != 0 && eCommand != EUtilTimerCommands.TIMER_START && eCommand != EUtilTimerCommands.TIMER_GET_ABSOLUTE_TIME) {
                    iTime = this.iStopTime;
                } else {
                    iTime = now();
                }
                if (eCommand == EUtilTimerCommands.TIMER_GET_ELAPSED_TIME) {
                    fElapsedTime = (iTime - this.iLastElapsedTime) / this.fTicksPerSec;
                    this.iLastElapsedTime = iTime;
                    return fElapsedTime;
                }
                if (eCommand == EUtilTimerCommands.TIMER_GET_APP_TIME) {
                    var fAppTime = (iTime - this.iBaseTime) / this.fTicksPerSec;
                    return fAppTime;
                }
                if (eCommand == EUtilTimerCommands.TIMER_RESET) {
                    this.iBaseTime = iTime;
                    this.iLastElapsedTime = iTime;
                    this.iStopTime = 0;
                    this.isTimerStopped = false;
                    return 0;
                }
                if (eCommand == EUtilTimerCommands.TIMER_START) {
                    if (this.isTimerStopped) {
                        this.iBaseTime += iTime - this.iStopTime;
                    }
                    this.iStopTime = 0;
                    this.iLastElapsedTime = iTime;
                    this.isTimerStopped = false;
                    return 0;
                }
                if (eCommand == EUtilTimerCommands.TIMER_STOP) {
                    if (!this.isTimerStopped) {
                        this.iStopTime = iTime;
                        this.iLastElapsedTime = iTime;
                        this.isTimerStopped = true;
                    }
                    return 0;
                }
                if (eCommand == EUtilTimerCommands.TIMER_ADVANCE) {
                    this.iStopTime += this.fTicksPerSec / 10;
                    return 0;
                }
                if (eCommand == EUtilTimerCommands.TIMER_GET_ABSOLUTE_TIME) {
                    fTime = iTime / this.fTicksPerSec;
                    return fTime;
                }
                return -1;
            };
            UtilTimer.start = function start() {
                var pTimer = new UtilTimer();
                if (pTimer.start()) {
                    return pTimer;
                }
 {
                    logger.setSourceLocation("util/UtilTimer.ts", 124);
                    logger.error('cannot start util timer');
                }
                ;
                return null;
            };
            return UtilTimer;
        })();
        util.UtilTimer = UtilTimer;        
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var Canvas3d = (function (_super) {
            __extends(Canvas3d, _super);
            function Canvas3d(pRenderer) {
                _super.call(this, pRenderer);
                this._isFullscreen = false;
                this._isPrimary = false;
                this._bAutoDeactivatedOnFocusChange = false;
                this.left = 0;
                this.top = 0;
                this.inline = isFullscreen();
                this.bool = {
                    return: this._isFullscreen
                };
                this._pRenderer = pRenderer;
            }
            Object.defineProperty(Canvas3d.prototype, "type", {
                get: function () {
                    return ECanvasTypes.TYPE_3D;
                },
                enumerable: true,
                configurable: true
            });
            Canvas3d.prototype.create = function (sName, iWidth, iHeight, isFullscreen) {
                if (typeof isFullscreen === "undefined") { isFullscreen = false; }
                return false;
            };
            Canvas3d.prototype.destroy = function () {
            };
            Canvas3d.prototype.setFullscreen = function (isFullscreen) {
            };
            Canvas3d.prototype.setVisible = function (bVisible) {
            };
            Canvas3d.prototype.setDeactivateOnFocusChange = function (bDeactivate) {
                this._bAutoDeactivatedOnFocusChange = bDeactivate;
            };
            Canvas3d.prototype.isVisible = function () {
                return true;
            };
            Canvas3d.prototype.isClosed = function () {
                return false;
            };
            Canvas3d.prototype.isPrimary = function () {
                return this._isPrimary;
            };
            Canvas3d.prototype.isDeactivatedOnFocusChange = function () {
                return this._bAutoDeactivatedOnFocusChange;
            };
            Canvas3d.prototype.resize = function (iWidth, iHeight) {
            };
            return Canvas3d;
        })(RenderTarget);
        render.Canvas3d = Canvas3d;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLCanvas = (function (_super) {
            __extends(WebGLCanvas, _super);
            function WebGLCanvas(pRenderer) {
                _super.call(this, pRenderer);
                this.inline = isVisible();
                this.bool = {
                    return: this._pCanvas.style.display !== "none"
                };
                this._pCanvas = (pRenderer).getHTMLCanvas();
                this._pCanvasCreationInfo = info.canvas(this._pCanvas);
            }
            Object.defineProperty(WebGLCanvas.prototype, "left", {
                get: function () {
                    var el = this._pCanvas;
                    for(var lx = 0; el != null; lx += el.offsetLeft, el = el.offsetParent) {
                        ;
                    }
                    return lx;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(WebGLCanvas.prototype, "top", {
                get: function () {
                    var el = this._pCanvas;
                    for(var ly = 0; el != null; ly += el.offsetTop, el = el.offsetParent) {
                        ;
                    }
                    return ly;
                },
                enumerable: true,
                configurable: true
            });
            WebGLCanvas.prototype.create = function (sName, iWidth, iHeight, isFullscreen) {
                if (typeof sName === "undefined") { sName = null; }
                if (typeof iWidth === "undefined") { iWidth = this._pCanvasCreationInfo.width; }
                if (typeof iHeight === "undefined") { iHeight = this._pCanvasCreationInfo.height; }
                if (typeof isFullscreen === "undefined") { isFullscreen = false; }
                this.name = sName;
                this.resize(iWidth, iHeight);
                this.setFullscreen(isFullscreen);
                return true;
            };
            WebGLCanvas.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                this._pCanvas = null;
                this._pCanvasCreationInfo = null;
            };
            WebGLCanvas.prototype.getCustomAttribute = function (sName) {
                return null;
            };
            WebGLCanvas.prototype.setFullscreen = function (isFullscreen) {
                if (typeof isFullscreen === "undefined") { isFullscreen = true; }
                var _this = this;
                var pCanvasElement = this._pCanvas;
                var pScreen;
                var pCanvasInfo;
                var iRealWidth = this._iRealWidth;
                var iRealHeight = this._iRealHeight;
                var pCanvas = this;
                if (this._isFullscreen === isFullscreen) {
                    return;
                }
                if (WebGLCanvas.fullscreenLock) {
 {
                        logger.setSourceLocation("WebGLCanvas.ts", 74);
                        logger.warning("fullscreen is changing, do not try change before process will be ended");
                    }
                    ;
                    return;
                }
                this._isFullscreen = isFullscreen;
                if (isFullscreen) {
                    iRealWidth = this._iRealWidth = this._iWidth;
                    iRealHeight = this._iRealHeight = this._iHeight;
                }
                var el = pCanvasElement, doc = document, rfs = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen;
                try  {
                    WebGLCanvas.fullscreenLock = true;
                    if (isFullscreen) {
                        rfs.call(el);
                    }
                    el.onfullscreenchange = el.onmozfullscreenchange = el.onwebkitfullscreenchange = el.onfullscreenchange || function (e) {
                        if (!!(doc.webkitFullscreenElement || doc.mozFullScreenElement || doc.fullscreenElement)) {
                            pCanvas.resize(info.screen.width, info.screen.height);
                        } else {
                            _this.setFullscreen(false);
                            pCanvas.resize(iRealWidth, iRealHeight);
                        }
                        WebGLCanvas.fullscreenLock = false;
                    };
                } catch (e) {
 {
                        logger.setSourceLocation("WebGLCanvas.ts", 117);
                        logger.error("Fullscreen API not supported", e);
                    }
                    ;
                    throw e;
                }
            };
            WebGLCanvas.prototype.setVisible = function (bVisible) {
                if (typeof bVisible === "undefined") { bVisible = true; }
                this._pCanvas.style.display = bVisible ? "block" : "none";
            };
            WebGLCanvas.prototype.resize = function (iWidth, iHeight) {
                if (typeof iWidth === "undefined") { iWidth = this._iWidth; }
                if (typeof iHeight === "undefined") { iHeight = this._iHeight; }
                var pCanvas = this._pCanvas;
                this._iWidth = iWidth;
                this._iHeight = iHeight;
                pCanvas.width = iWidth;
                pCanvas.height = iHeight;
                this.resized();
            };
            WebGLCanvas.prototype.readPixels = function (ppDest, eFramebuffer) {
                if (typeof ppDest === "undefined") { ppDest = null; }
                if (typeof eFramebuffer === "undefined") { eFramebuffer = EFramebuffer.AUTO; }
                if (isNull(ppDest)) {
                    var ePixelFormat = EPixelFormats.BYTE_RGB;
                    ppDest = new pixelUtil.PixelBox(this._iWidth, this._iHeight, 1, ePixelFormat, new Uint8Array(pixelUtil.getMemorySize(this._iWidth, this._iHeight, 1, ePixelFormat)));
                }
                if ((ppDest.right > this._iWidth) || (ppDest.bottom > this._iHeight) || (ppDest.front != 0) || (ppDest.back != 1)) {
 {
                        logger.setSourceLocation("WebGLCanvas.ts", 172);
                        logger.criticalError("Invalid box.", "GLXWindow::copyContentsToMemory");
                    }
                    ;
                }
                if (eFramebuffer == EFramebuffer.AUTO) {
                    eFramebuffer = this._isFullscreen ? EFramebuffer.FRONT : EFramebuffer.BACK;
                }
                var eFormat = getWebGLFormat(ppDest.format);
                var eType = getWebGLDataType(ppDest.format);
                if (eFormat == 0 || eType == 0) {
 {
                        logger.setSourceLocation("WebGLCanvas.ts", 183);
                        logger.criticalError("Unsupported format.", "WebGLCanvas::readPixels");
                    }
                    ;
                }
                var pWebGLRenderer = this.getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer._setViewport(this.getViewport(0));
                pWebGLRenderer.bindWebGLFramebuffer(0x8D40, null);
                pWebGLContext.pixelStorei(0x0D05, 1);
                pWebGLContext.readPixels(ppDest.left, ppDest.top, ppDest.width, ppDest.height, eFormat, eType, ppDest.data);
                pWebGLContext.pixelStorei(0x0D05, 4);
                return ppDest;
            };
            WebGLCanvas.fullscreenLock = false;
            return WebGLCanvas;
        })(render.Canvas3d);
        webgl.WebGLCanvas = WebGLCanvas;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLShaderProgram = (function (_super) {
            __extends(WebGLShaderProgram, _super);
            function WebGLShaderProgram() {
                _super.apply(this, arguments);

                this._iTotalAttributes = 0;
                this.inline = get;
                this.inline = _getActiveUniformNames();
                this.string = [];
            }
            WebGLShaderProgram.prototype.create = function (csVertex, csPixel) {
                if (arguments.length > 0) {
                    return this.compile(csVertex || "void main(void){gl_Position = vec4(0., 0., 0., 1.);}", csPixel || "void main(void){}");
                }
                return false;
            };
            WebGLShaderProgram.prototype.destroy = function () {
                this._pWebGLRenderer.deleteWebGLProgram(this._pWebGLProgram);
                this._pWebGLUniformLocations = null;
                this._pWebGLAttributeLocations = null;
                this._pWebGLAttributesInfo = null;
                this.notifyDestroyed();
                this.notifyDisabled();
            };
            WebGLShaderProgram.prototype.compile = function (csVertex, csPixel) {
                if (typeof csVertex === "undefined") { csVertex = "void main(void){gl_Position = vec4(0., 0., 0., 1.);}"; }
                if (typeof csPixel === "undefined") { csPixel = "void main(void){}"; }
                var pWebGLRenderer = this._pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = this._pWebGLContext = pWebGLRenderer.getWebGLContext();
                var pWebGLProgram = this._pWebGLProgram = pWebGLRenderer.createWebGLProgram();
                var pWebGLVs = this.createWebGLShader(0x8B31, csVertex);
                var pWebGLFs = this.createWebGLShader(0x8B30, csPixel);
                pWebGLRenderer._disableAllTextureUnits();
                pWebGLContext.attachShader(pWebGLProgram, pWebGLVs);
                pWebGLContext.attachShader(pWebGLProgram, pWebGLFs);
                pWebGLContext.linkProgram(pWebGLProgram);
                if (!this.isLinked()) {
 {
                        logger.setSourceLocation("WebGLShaderProgram.ts", 65);
                        logger.error("cannot link GLSL program(guid: %d)", this.getGuid());
                    }
                    ;
                    if (loadExtension(pWebGLContext, "WEBGL_debug_shaders")) {
 {
                            logger.setSourceLocation("WebGLShaderProgram.ts", 71);
                            logger.log("translated(from GLSL) VS shader: \n %s\ntranslated(from GLSL) PS shader: \n%s", pWebGLContext.getExtension("WEBGL_debug_shaders").getTranslatedShaderSource(pWebGLVs), pWebGLContext.getExtension("WEBGL_debug_shaders").getTranslatedShaderSource(pWebGLFs));
                        }
                        ;
                    }
                    var sInfo = pWebGLContext.getProgramInfoLog(pWebGLProgram);
 {
                        logger.setSourceLocation("WebGLShaderProgram.ts", 76);
                        logger.log("shader program errors: \n" + sInfo + "\n\nvertex code:\n" + csVertex + "\n\n pixel code: " + csPixel);
                    }
                    ;
                    return false;
                }
                pWebGLContext.validateProgram(pWebGLProgram);
                if (!this.isValid()) {
 {
                        logger.setSourceLocation("WebGLShaderProgram.ts", 85);
                        logger.warning("GLSL program not valid(guid: %d)", this.getGuid());
                    }
                    ;
 {
                        logger.setSourceLocation("WebGLShaderProgram.ts", 87);
                        logger.log(pWebGLContext.getProgramInfoLog(pWebGLProgram));
                    }
                    ;
                }
                this.obtainWebGLUniforms();
                this.obtainWebGLAttributes();
                this.notifyCreated();
                this.notifyRestored();
                return true;
            };
            WebGLShaderProgram.prototype.totalAttributes = function () {
                return this._iTotalAttributes;
            };
            return WebGLShaderProgram;
        })(core.pool.ResourcePoolItem);
        webgl.WebGLShaderProgram = WebGLShaderProgram;        
 {
            return Object.keys(this._pWebGLUniformLocations);
        }
        inline;
        _getActiveAttributeNames();
        string[];
 {
            return Object.keys(this._pWebGLAttributeLocations);
        }
        inline;
        _getActiveAttribLocations();
        IntMap;
 {
            return this._pWebGLAttributeLocations;
        }
        isLinked();
        bool;
 {
            return isDefAndNotNull(this._pWebGLProgram) && this._pWebGLContext.getProgramParameter(this._pWebGLProgram, 0x8B82);
        }
        isValid();
        bool;
 {
            return isDefAndNotNull(this._pWebGLProgram) && this._pWebGLContext.getProgramParameter(this._pWebGLProgram, 0x8B83);
        }
        isActive();
        bool;
 {
            return (isDefAndNotNull(this._pWebGLProgram) && this._pWebGLContext.getParameter(0x8B8D) === this._pWebGLProgram);
        }
        inline;
        setFloat(sName, string, fValue, number);
        void {
            this: ,
            _pWebGLContext: ,
            uniform1f: (this._pWebGLUniformLocations[sName], 
fValue)
        };
        inline;
        setInt(sName, string, iValue, number);
        void {
            this: ,
            _pWebGLContext: ,
            uniform1i: (this._pWebGLUniformLocations[sName], 
iValue)
        };
        setVec2(sName, string, v2fValue, IVec2);
        void ;
        setVec2(sName, string, x, number, y, number);
        void ;
        inline;
        setVec2(sName, string, x ?  : , y ?  : );
        void {}(arguments.length == 2) ? this._pWebGLContext.uniform2f(this._pWebGLUniformLocations[sName], arguments[1].x, arguments[1].y) : this._pWebGLContext.uniform2f(this._pWebGLUniformLocations[sName], arguments[1], arguments[2]);
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
setVec2i(sName, string, v2iValue, IVec2);
void ;
setVec2i(sName, string, x, number, y, number);
void ;
inline;
setVec2i(sName, string, x ?  : , y ?  : );
void {}(arguments.length == 2) ? this._pWebGLContext.uniform2i(this._pWebGLUniformLocations[sName], arguments[1].x, arguments[1].y) : this._pWebGLContext.uniform2i(this._pWebGLUniformLocations[sName], arguments[1], arguments[2]);
setVec3(sName, string, v3fValue, IVec3);
void ;
setVec3(sName, string, x, number, y, number, z, number);
void ;
inline;
setVec3(sName, string, x ?  : , y ?  : , z ?  : );
void {}(arguments.length == 2) ? this._pWebGLContext.uniform3f(this._pWebGLUniformLocations[sName], arguments[1].x, arguments[1].y, arguments[1].z) : this._pWebGLContext.uniform3f(this._pWebGLUniformLocations[sName], arguments[1], arguments[2], arguments[3]);
setVec3i(sName, string, v3iValue, IVec3);
void ;
setVec3i(sName, string, x, number, y, number, z, number);
void ;
inline;
setVec3i(sName, string, x ?  : , y ?  : , z ?  : );
void {}(arguments.length == 2) ? this._pWebGLContext.uniform3i(this._pWebGLUniformLocations[sName], arguments[1].x, arguments[1].y, arguments[1].z) : this._pWebGLContext.uniform3i(this._pWebGLUniformLocations[sName], arguments[1], arguments[2], arguments[3]);
setVec4(sName, string, v4fValue, IVec4);
void ;
setVec4(sName, string, x, number, y, number, z, number, w, number);
void ;
inline;
setVec4(sName, string, x ?  : , y ?  : , z ?  : , w ?  : );
void {}(arguments.length == 2) ? this._pWebGLContext.uniform4f(this._pWebGLUniformLocations[sName], arguments[1].x, arguments[1].y, arguments[1].z, arguments[1].w) : this._pWebGLContext.uniform4f(this._pWebGLUniformLocations[sName], arguments[1], arguments[2], arguments[3], arguments[3]);
setVec4i(sName, string, v4iValue, IVec4);
void ;
setVec4i(sName, string, x, number, y, number, z, number, w, number);
void ;
inline;
setVec4i(sName, string, x ?  : , y ?  : , z ?  : , w ?  : );
void {}(arguments.length == 2) ? this._pWebGLContext.uniform4i(this._pWebGLUniformLocations[sName], arguments[1].x, arguments[1].y, arguments[1].z, arguments[1].w) : this._pWebGLContext.uniform4i(this._pWebGLUniformLocations[sName], arguments[1], arguments[2], arguments[3], arguments[3]);
inline;
setMat3(sName, string, m3fValue, IMat3);
void {
    this: ,
    _pWebGLContext: ,
    uniformMatrix3fv: (this._pWebGLUniformLocations[sName], 
false, 
m3fValue.data)
};
setMat4(sName, string, m4fValue, IMat4);
void {
    this: ,
    _pWebGLContext: ,
    uniformMatrix4fv: (this._pWebGLUniformLocations[sName], 
false, 
m4fValue.data)
};
inline;
setFloat32Array(sName, string, pValue, Float32Array);
void {
    this: ,
    _pWebGLContext: ,
    uniform1fv: (this._pWebGLUniformLocations[sName], 
pValue)
};
inline;
setInt32Array(sName, string, pValue, Int32Array);
void {
    this: ,
    _pWebGLContext: ,
    uniform1iv: (this._pWebGLUniformLocations[sName], 
pValue)
};
uniformBuffer:
ArrayBuffer = new ArrayBuffer(4096 * 16)
inline;
setVec2Array(sName, string, pValue, IVec2[]);
void {
    var: pBuffer,
    Float32Array:  = new Float32Array(WebGLShaderProgram.uniformBuffer, 0, pValue.length * 2)
};
for(var i = 0, j = 0; i < pValue.length; i += 2, ++j) {
    pBuffer[i] = pValue[j].x;
    pBuffer[i + 1] = pValue[j].y;
}
this._pWebGLContext.uniform2fv(this._pWebGLUniformLocations[sName], pBuffer);
inline;
setVec2iArray(sName, string, pValue, IVec2[]);
void {
    var: pBuffer,
    Int32Array:  = new Int32Array(WebGLShaderProgram.uniformBuffer, 0, pValue.length * 2)
};
for(var i = 0, j = 0; i < pValue.length; i += 2, ++j) {
    pBuffer[i] = pValue[j].x;
    pBuffer[i + 1] = pValue[j].y;
}
this._pWebGLContext.uniform2iv(this._pWebGLUniformLocations[sName], pBuffer);
inline;
setVec3Array(sName, string, pValue, IVec3[]);
void {
    var: pBuffer,
    Float32Array:  = new Float32Array(WebGLShaderProgram.uniformBuffer, 0, pValue.length * 3)
};
for(var i = 0, j = 0; i < pValue.length; i += 3, ++j) {
    pBuffer[i] = pValue[j].x;
    pBuffer[i + 1] = pValue[j].y;
    pBuffer[i + 2] = pValue[j].z;
}
this._pWebGLContext.uniform3fv(this._pWebGLUniformLocations[sName], pBuffer);
inline;
setVec3iArray(sName, string, pValue, IVec3[]);
void {
    var: pBuffer,
    Int32Array:  = new Int32Array(WebGLShaderProgram.uniformBuffer, 0, pValue.length * 3)
};
for(var i = 0, j = 0; i < pValue.length; i += 3, ++j) {
    pBuffer[i] = pValue[j].x;
    pBuffer[i + 1] = pValue[j].y;
    pBuffer[i + 2] = pValue[j].z;
}
this._pWebGLContext.uniform3iv(this._pWebGLUniformLocations[sName], pBuffer);
inline;
setVec4Array(sName, string, pValue, IVec4[]);
void {
    var: pBuffer,
    Float32Array:  = new Float32Array(WebGLShaderProgram.uniformBuffer, 0, pValue.length * 4)
};
for(var i = 0, j = 0; i < pValue.length; i += 4, ++j) {
    pBuffer[i] = pValue[j].x;
    pBuffer[i + 1] = pValue[j].y;
    pBuffer[i + 2] = pValue[j].z;
    pBuffer[i + 3] = pValue[j].w;
}
this._pWebGLContext.uniform4fv(this._pWebGLUniformLocations[sName], pBuffer);
inline;
setVec4iArray(sName, string, pValue, IVec4[]);
void {
    var: pBuffer,
    Int32Array:  = new Int32Array(WebGLShaderProgram.uniformBuffer, 0, pValue.length * 4)
};
for(var i = 0, j = 0; i < pValue.length; i += 4, ++j) {
    pBuffer[i] = pValue[j].x;
    pBuffer[i + 1] = pValue[j].y;
    pBuffer[i + 2] = pValue[j].z;
    pBuffer[i + 3] = pValue[j].w;
}
this._pWebGLContext.uniform4iv(this._pWebGLUniformLocations[sName], pBuffer);
inline;
setMat3Array(sName, string, pValue, IMat3[]);
void {
    var: pBuffer,
    Int32Array:  = new Float32Array(WebGLShaderProgram.uniformBuffer, 0, pValue.length * 9)
};
for(var i = 0; i < pValue.length; i++) {
    pBuffer.set(pValue[i].data, 9 * i);
}
this._pWebGLContext.uniformMatrix3fv(this._pWebGLUniformLocations[sName], false, pBuffer);
inline;
setMat4Array(sName, string, pValue, IMat4[]);
void {
    var: pBuffer,
    Int32Array:  = new Float32Array(WebGLShaderProgram.uniformBuffer, 0, pValue.length * 16)
};
for(var i = 0; i < pValue.length; i++) {
    pBuffer.set(pValue[i].data, 16 * i);
}
this._pWebGLContext.uniformMatrix4fv(this._pWebGLUniformLocations[sName], false, pBuffer);
inline;
setStruct(sName, string, pData, Object);
void {};
inline;
setSampler(sName, string, pSampler, IAFXSamplerState);
void {
    var: iSlot,
    number:  = this.applySamplerState(pSampler)
};
this.setInt(sName, iSlot);
inline;
setVertexBuffer(sName, string, pBuffer, IVertexBuffer);
void {
    var: iSlot,
    number:  = this._pWebGLRenderer.getNextTextureSlot()
};
this._pWebGLRenderer.activateWebGLTexture(iSlot + 0x84C0);
this._pWebGLRenderer.bindWebGLTexture(0x0DE1, (pBuffer).getWebGLTexture());
this.setInt(sName, iSlot);
inline;
setSamplerArray(sName, string, pList, IAFXSamplerState[]);
void {
    var: pBuffer,
    Int32Array:  = new Int32Array(WebGLShaderProgram.uniformBuffer, 0, pList.length)
};
for(var i = 0; i < pList.length; ++i) {
    pBuffer[i] = this.applySamplerState(pList[i]);
}
this.setInt32Array(sName, pBuffer);
inline;
setTexture(sName, string, pData, ITexture);
void {};
applySamplerState(pSampler, IAFXSamplerState);
number;
 {
    var pTexture = pSampler.texture;
    if (isNull(pTexture)) {
        return;
    }
    var iSlot = this._pWebGLRenderer.getNextTextureSlot();
    this._pWebGLRenderer.activateWebGLTexture(iSlot + 0x84C0);
    this._pWebGLRenderer.bindWebGLTexture(pTexture._getWebGLTextureTarget(), pTexture.getWebGLTexture());
    pTexture._setFilterInternalTexture(ETextureParameters.MIN_FILTER, pSampler.mag_filter);
    pTexture._setFilterInternalTexture(ETextureParameters.MAG_FILTER, pSampler.min_filter);
    pTexture._setWrapModeInternalTexture(ETextureParameters.WRAP_S, pSampler.wrap_s);
    pTexture._setWrapModeInternalTexture(ETextureParameters.WRAP_T, pSampler.wrap_t);
    return iSlot;
}
applyVertexData(sName, string, pData, IVertexData);
bool;
 {
    var pWebGLRenderer = this.getManager().getEngine().getRenderer();
    var pWebGLContext = pWebGLRenderer.getWebGLContext();
    ;
    var pVertexBuffer = pData.buffer;
    var iStride = pData.stride;
    if (pVertexBuffer.type !== EVertexBufferTypes.VBO) {
        return false;
    }
    var pVertexDecl = pData.getVertexDeclaration();
    var pVertexElement;
    var iLoc;
    for(var i = 0; i < pVertexDecl.length; ++i) {
        pVertexElement = pVertexDecl[i];
        iLoc = this.getWebGLAttributeLocation(pVertexElement.usage);
        if (iLoc < 0) {
 {
                logger.setSourceLocation("WebGLShaderProgram.ts", 375);
                logger.warning("founded invalid GLSL attribute location(guid: %s): %s", this.getGuid(), pVertexElement.usage);
            }
            ;
            continue;
        }
        pWebGLRenderer.bindWebGLBuffer(0x8892, (pVertexBuffer).getWebGLBuffer());
        pWebGLContext.vertexAttribPointer(iLoc, pVertexElement.count, pVertexElement.type, false, iStride, pVertexElement.offset);
    }
    return true;
}
inline;
applyBufferMap(pMap, IBufferMap);
void {};
 {
    logger.setSourceLocation("WebGLShaderProgram.ts", 393);
    logger.criticalError("WebGLShaderProgram::applyBufferMap() is uncompleted method!");
}
;
inline;
getWebGLAttributeLocation(sName, string);
number;
 {
    return isDef(this._pWebGLAttributeLocations[sName]) ? this._pWebGLAttributeLocations[sName] : -1;
}
inline;
getWebGLUniformLocations();
WebGLUniformLocationMap;
 {
    return this._pWebGLUniformLocations;
}
inline;
getWebGLUniformLocation(sName, string);
WebGLUniformLocation;
 {
    var iLoc = this._pWebGLUniformLocations[sName];
    if (!isDef(iLoc)) {
 {
            logger.setSourceLocation("WebGLShaderProgram.ts", 410);
            logger.warning("could not find location for GLSL attribute(guid: %s): %s", this.getGuid(), sName);
        }
        ;
    }
    return null;
}
inline;
getWebGLProgram();
WebGLProgram;
 {
    return this._pWebGLProgram;
}
createWebGLShader(eType, number, csCode, string);
WebGLShader;
 {
    var pWebGLRenderer = this.getManager().getEngine().getRenderer();
    var pWebGLContext = pWebGLRenderer.getWebGLContext();
    var pWebGLShader = pWebGLContext.createShader(eType);
    pWebGLContext.shaderSource(pWebGLShader, csCode);
    pWebGLContext.compileShader(pWebGLShader);
    if (!pWebGLContext.getShaderParameter(pWebGLShader, 0x8B81)) {
 {
            logger.setSourceLocation("WebGLShaderProgram.ts", 432);
            logger.error("cannot compile GLSL shader(guid: %d)", this.getGuid());
        }
        ;
        var sInfo = pWebGLContext.getShaderInfoLog(pWebGLShader);
        var sCode = pWebGLContext.getShaderSource(pWebGLShader) || csCode;
        if (loadExtension(pWebGLContext, "WEBGL_debug_shaders")) {
 {
                logger.setSourceLocation("WebGLShaderProgram.ts", 439);
                logger.log("translated(from GLSL) " + (eType == 0x8B31 ? "VS" : "PS") + " shader: \n" + pWebGLContext.getExtension("WEBGL_debug_shaders").getTranslatedShaderSource(pWebGLShader));
            }
            ;
        }
 {
            logger.setSourceLocation("WebGLShaderProgram.ts", 442);
            logger.log("shader errors: \n %s \n----------\n %s", sInfo, sCode);
        }
        ;
        return null;
    }
    return pWebGLShader;
}
obtainWebGLUniforms();
void {
    var: pWebGLRenderer,
    WebGLRenderer:  = this.getManager().getEngine().getRenderer()
};
var pWebGLContext = pWebGLRenderer.getWebGLContext();
;
var nUniforms = pWebGLContext.getProgramParameter(this._pWebGLProgram, 0x8B86);
var pUniformLocations = {};
var iLoc;
var pUniformInfo;
for(var i = 0; i < nUniforms; ++i) {
    pUniformInfo = pWebGLContext.getActiveUniform(this._pWebGLProgram, i);
    iLoc = pWebGLContext.getUniformLocation(this._pWebGLProgram, pUniformInfo.name);
    pUniformLocations[pUniformInfo.name] = iLoc;
}
this._pWebGLUniformLocations = pUniformLocations;
obtainWebGLAttributes();
void {
    var: pWebGLRenderer,
    WebGLRenderer:  = this.getManager().getEngine().getRenderer()
};
var pWebGLContext = pWebGLRenderer.getWebGLContext();
;
var nAttributes = pWebGLContext.getProgramParameter(this._pWebGLProgram, 0x8B89);
var pAttributeLocations = {};
var pAttributesInfo = [];
var iLoc;
var pAttributeInfo;
for(var i = 0; i < nAttributes; ++i) {
    pAttributeInfo = pWebGLContext.getActiveAttrib(this._pWebGLProgram, i);
    iLoc = pWebGLContext.getAttribLocation(this._pWebGLProgram, pAttributeInfo.name);
    if (iLoc < 0 || !isDef(iLoc)) {
 {
            logger.setSourceLocation("WebGLShaderProgram.ts", 481);
            logger.warning("could not get GLSL attribute location(guid: %s): %s", this.getGuid(), pAttributeInfo.name);
        }
        ;
    }
    pAttributeLocations[pAttributeInfo.name] = iLoc;
    pAttributesInfo[iLoc] = pAttributeInfo;
}
this._pWebGLAttributeLocations = pAttributeLocations;
this._pWebGLAttributesInfo = pAttributesInfo;
this._iTotalAttributes = nAttributes;
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLRenderer = (function (_super) {
            __extends(WebGLRenderer, _super);
            function WebGLRenderer(pEngine, pCanvas) {
                _super.call(this, pEngine);
                this._pWebGLInternalContext = null;
                this._nActiveAttributes = 0;
                this._iSlot = 0;
                this.inline = getHTMLCanvas();
                this.HTMLCanvasElement = {
                    return: this._pCanvas
                };
                this.inline = getWebGLContext();
                this.WebGLRenderingContext = {
                    return: this._pWebGLContext
                };
                this.inline = bindWebGLBuffer(eTarget, number, pBuffer, WebGLBuffer);
                if (isDef(pCanvas)) {
                    if (isString(pCanvas)) {
                        this._pCanvas = document.getElementById(pCanvas);
                    } else {
                        this._pCanvas = pCanvas;
                    }
                } else {
                    this._pCanvas = document.createElement('canvas');
                }
                this._pWebGLContext = createContext(this._pCanvas);
                this._pWebGLFramebufferList = new Array(32);
                for(var i = 0; i < this._pWebGLFramebufferList.length; ++i) {
                    this._pWebGLFramebufferList[i] = this._pWebGLContext.createFramebuffer();
                }
                this._pDefaultCanvas = new WebGLCanvas(this);
                this.attachRenderTarget(this._pDefaultCanvas);
            }
            WebGLRenderer.prototype.debug = function (bValue, useApiTrace) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (typeof useApiTrace === "undefined") { useApiTrace = false; }
                var pWebGLInternalContext = this._pWebGLContext;
                if (bValue) {
                    if (isDef((window).WebGLDebugUtils) && !isNull(pWebGLInternalContext)) {
                        this._pWebGLContext = WebGLDebugUtils.makeDebugContext(pWebGLInternalContext, function (err, funcName, args) {
                            throw WebGLDebugUtils.glEnumToString(err) + " was caused by call to: " + funcName;
                        }, useApiTrace ? function (funcName, args) {
 {
                                logger.setSourceLocation("WebGLRenderer.ts", 73);
                                logger.log("gl." + funcName + "(" + WebGLDebugUtils.glFunctionArgsToString(funcName, args) + ")");
                            }
                            ;
                        } : null);
                        this._pWebGLInternalContext = pWebGLInternalContext;
                        return true;
                    }
                } else if (this.isDebug()) {
                    this._pWebGLContext = this._pWebGLInternalContext;
                    this._pWebGLInternalContext = null;
                    return true;
                }
                return false;
            };
            WebGLRenderer.prototype._beginRender = function () {
                this._pWebGLContext.enable(0x0C11);
                this._pWebGLContext.disable(0x0BE2);
            };
            WebGLRenderer.prototype._renderEntry = function (pEntry) {
                var pViewport = pEntry.viewport;
                var pRenderTarget = (pViewport).getTarget();
                var pInput = pEntry.input;
                var pMaker = pEntry.maker;
                if (!isNull(pEntry.renderTarget)) {
                    this._setRenderTarget(pEntry.renderTarget);
                    this.lockRenderTarget();
                    this._setViewportForRender(pViewport);
                    this.unlockRenderTarget();
                } else {
                    this._setViewportForRender(pViewport);
                }
                var pWebGLProgram = (pMaker).shaderProgram;
                this.useWebGLProgram(pWebGLProgram.getWebGLProgram());
                this.enableWebGLVertexAttribs(pWebGLProgram.totalAttributes);
                var pAttribLocations = pWebGLProgram._getActiveAttribLocations();
                var pAttributeSemantics = pMaker.attributeSemantics;
                var pAttributeNames = pMaker.attributeNames;
                var pBufferMap = pEntry.bufferMap;
                if (!isNull(pBufferMap.index)) {
                    this.bindWebGLBuffer(0x8893, (pBufferMap.index.buffer).getWebGLBuffer());
                }
                var nPreparedBuffers = 0;
                for(var i = 0; i < pAttributeNames.length; i++) {
                    var sAttrName = pAttributeNames[i];
                    var sAttrSemantic = pAttributeSemantics[i];
                    if (isNull(sAttrSemantic)) {
                        continue;
                    }
                    var iLoc = pAttribLocations[sAttrName];
                    var pFlow = pInput[sAttrName];
                    var pData = null;
                    var sSemantics = null;
                    if (pFlow.type === EDataFlowTypes.MAPPABLE) {
                        pData = pFlow.mapper.data;
                        sSemantics = pFlow.mapper.semantics;
                    } else {
                        pData = pFlow.data;
                        sSemantics = sAttrSemantic;
                    }
                    var pDecl = pData.getVertexDeclaration();
                    var pVertexElement = pDecl.findElement(sSemantics);
                    this.bindWebGLBuffer(0x8892, (pData.buffer).getWebGLBuffer());
                    this._pWebGLContext.vertexAttribPointer(iLoc, pVertexElement.count, pVertexElement.type, false, pData.stride, pVertexElement.offset);
                }
                var pUniforms = pWebGLProgram.getWebGLUniformLocations();
                for(var sUniformName in pUniforms) {
                    var pValue = pInput[sUniformName];
                    pMaker.setUniform(sUniformName, pValue);
                }
                pEntry.bufferMap._draw();
            };
            WebGLRenderer.prototype._endRender = function () {
                this._pWebGLContext.disable(0x0C11);
            };
            WebGLRenderer.prototype._setViewport = function (pViewport) {
                if (isNull(pViewport)) {
                    this._pActiveViewport = null;
                    this._setRenderTarget(null);
                    return;
                }
                var isViewportUpdate = pViewport !== this._pActiveViewport || pViewport.isUpdated();
                var isRenderTargetUpdate = pViewport.getTarget() !== this._pActiveRenderTarget;
                if (isViewportUpdate || isRenderTargetUpdate) {
                    var pTarget = pViewport.getTarget();
                    this._setRenderTarget(pTarget);
                    if (isViewportUpdate) {
                        this._pActiveViewport = pViewport;
                        var x = pViewport.actualLeft, y = pViewport.actualTop, w = pViewport.actualWidth, h = pViewport.actualHeight;
                        this._pWebGLContext.viewport(x, y, w, h);
                        this._pWebGLContext.scissor(x, y, w, h);
                        pViewport._clearUpdatedFlag();
                    }
                }
            };
            WebGLRenderer.prototype._setRenderTarget = function (pTarget) {
                if (this.isLockRenderTarget()) {
                    return;
                }
                this._pActiveRenderTarget = pTarget;
                if (!isNull(pTarget)) {
                    var pFrameBuffer = pTarget.getCustomAttribute("FBO");
                    if (!isNull(pFrameBuffer)) {
                        pFrameBuffer._bind();
                    } else {
                        this.bindWebGLFramebuffer(0x8D40, null);
                    }
                }
            };
            WebGLRenderer.prototype._setCullingMode = function (eMode) {
                var iWebGLCullMode = 0;
                switch(eMode) {
                    case ECullingMode.NONE:
                        this._pWebGLContext.disable(0x0B44);
                        return;
                    default:
                    case ECullingMode.CLOCKWISE:
                        iWebGLCullMode = 0x0404;
                        break;
                    case ECullingMode.ANTICLOCKWISE:
                        iWebGLCullMode = 0x0405;
                        break;
                }
                this._pWebGLContext.enable(0x0B44);
                this._pWebGLContext.cullFace(iWebGLCullMode);
            };
            WebGLRenderer.prototype._setDepthBufferParams = function (bDepthTest, bDepthWrite, eDepthFunction, fClearDepth) {
                if (typeof fClearDepth === "undefined") { fClearDepth = 1.; }
                if (bDepthTest) {
                    this._pWebGLContext.clearDepth(fClearDepth);
                    this._pWebGLContext.enable(0x0B71);
                } else {
                    this._pWebGLContext.disable(0x0B71);
                }
                this._pWebGLContext.depthMask(bDepthWrite);
                this._pWebGLContext.depthFunc(this.convertCompareFunction(eDepthFunction));
            };
            WebGLRenderer.prototype.isDebug = function () {
                return !isNull(this._pWebGLInternalContext);
            };
            return WebGLRenderer;
        })(render.Renderer);
        webgl.WebGLRenderer = WebGLRenderer;        
        void {
            this: ,
            _pWebGLContext: ,
            bindBuffer: (eTarget, 
pBuffer)
        };
        inline;
        createWebGLBuffer();
        WebGLBuffer;
 {
            return this._pWebGLContext.createBuffer();
        }
        inline;
        deleteWebGLBuffer(pBuffer, WebGLBuffer);
        void {
            this: ,
            _pWebGLContext: ,
            deleteBuffer: (pBuffer)
        };
        inline;
        bindWebGLTexture(eTarget, number, pTexture, WebGLTexture);
        void {
            this: ,
            _pWebGLContext: ,
            bindTexture: (eTarget, 
pTexture)
        };
        inline;
        activateWebGLTexture(iWebGLSlot, number);
        void {
            this: ,
            _pWebGLContext: ,
            activeTexture: (iWebGLSlot)
        };
        inline;
        getNextTextureSlot();
        number;
 {
            return this._iSlot === (maxTextureImageUnits - 1) ? (this._iSlot = 0) : (++this._iSlot);
        }
        inline;
        getTextureSlot();
        number;
 {
            return this._iSlot - 1;
        }
        inline;
        createWebGLTexture();
        WebGLTexture;
 {
            return this._pWebGLContext.createTexture();
        }
        inline;
        deleteWebGLTexture(pTexture, WebGLTexture);
        void {
            this: ,
            _pWebGLContext: ,
            deleteTexture: (pTexture)
        };
        inline;
        createWebGLFramebuffer();
        WebGLFramebuffer;
 {
            if (this._pWebGLFramebufferList.length === 0) {
 {
                    logger.setSourceLocation("WebGLRenderer.ts", 331);
                    logger.criticalError("WebGL framebuffer limit exidit");
                }
                ;
            }
            return this._pWebGLFramebufferList.pop();
        }
        inline;
        bindWebGLFramebuffer(eTarget, number, pBuffer, WebGLFramebuffer);
        void {
            this: ,
            _pWebGLContext: ,
            bindFramebuffer: (eTarget, 
pBuffer)
        };
        inline;
        bindWebGLFramebufferTexture2D(eTarget, number, eAttachment, number, eTexTarget, number, pTexture, WebGLTexture, iMipLevel ?  : number = 0);
        void {
            this: ,
            _pWebGLContext: ,
            framebufferTexture2D: (eTarget, 
eAttachment, 
eTexTarget, 
pTexture, 
iMipLevel)
        };
        inline;
        deleteWebGLFramebuffer(pBuffer, WebGLFramebuffer);
        void {
            this: ,
            _pWebGLFramebufferList: ,
            push: (pBuffer)
        };
        inline;
        createWebGLRenderbuffer();
        WebGLRenderbuffer;
 {
            return this._pWebGLContext.createRenderbuffer();
        }
        inline;
        bindWebGLRenderbuffer(eTarget, number, pBuffer, WebGLRenderbuffer);
        void {
            this: ,
            _pWebGLContext: ,
            bindRenderbuffer: (eTarget, 
pBuffer)
        };
        inline;
        deleteWebGLRenderbuffer(pBuffer, WebGLRenderbuffer);
        void {
            this: ,
            _pWebGLContext: ,
            deleteRenderbuffer: (pBuffer)
        };
        inline;
        createWebGLProgram();
        WebGLProgram;
 {
            return this._pWebGLContext.createProgram();
        }
        inline;
        deleteWebGLProgram(pProgram, WebGLProgram);
        void {
            this: ,
            _pWebGLContext: ,
            deleteProgram: (pProgram)
        };
        inline;
        useWebGLProgram(pProgram, WebGLProgram);
        void {
            this: ,
            _pWebGLContext: ,
            useProgram: (pProgram)
        };
        enableWebGLVertexAttribs(iTotal, number);
        void {
            if: (this._nActiveAttributes > iTotal)
        };
 {
            for(var i = iTotal; i < this._nActiveAttributes; i++) {
                this._pWebGLContext.disableVertexAttribArray(i);
            }
        }
 {
            for(var i = this._nActiveAttributes; i < iTotal; i++) {
                this._pWebGLContext.enableVertexAttribArray(i);
            }
        }
        this._nActiveAttributes = iTotal;
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
disableAllWebGLVertexAttribs();
void {
    var: i,
    number:  = 0
};
for(i = 0; i < this._nActiveAttributes; i++) {
    this._pWebGLContext.disableVertexAttribArray(i);
}
this._nActiveAttributes = 0;
getDefaultCanvas();
ICanvas3d;
 {
    return this._pDefaultCanvas;
}
clearFrameBuffer(iBuffers, number, cColor, IColor, fDepth, number, iStencil, number);
void {
    var: iWebGLFlag,
    number:  = 0
};
var bOldDepthWrite = this._pWebGLContext.getParameter(0x0B72);
if (iBuffers & EFrameBufferTypes.COLOR) {
    iWebGLFlag |= 0x00004000;
    this._pWebGLContext.clearColor(cColor.r, cColor.g, cColor.b, cColor.a);
}
if (iBuffers & EFrameBufferTypes.DEPTH) {
    iWebGLFlag |= 0x00000100;
    if (!bOldDepthWrite) {
        this._pWebGLContext.depthMask(true);
    }
    this._pWebGLContext.clearDepth(fDepth);
}
if (iBuffers & EFrameBufferTypes.STENCIL) {
    iWebGLFlag |= 0x00000400;
    this._pWebGLContext.stencilMask(0xFFFFFFFF);
    this._pWebGLContext.clearStencil(iStencil);
}
this._pWebGLContext.clear(iWebGLFlag);
if (!bOldDepthWrite && (iBuffers & EFrameBufferTypes.DEPTH)) {
    this._pWebGLContext.depthMask(false);
}
convertCompareFunction(eFunc, ECompareFunction);
number;
 {
    switch(eFunc) {
        case ECompareFunction.ALWAYS_FAIL:
            return 0x0200;
        case ECompareFunction.ALWAYS_PASS:
            return 0x0207;
        case ECompareFunction.LESS:
            return 0x0201;
        case ECompareFunction.LESS_EQUAL:
            return 0x0203;
        case ECompareFunction.EQUAL:
            return 0x0202;
        case ECompareFunction.NOT_EQUAL:
            return 0x0205;
        case ECompareFunction.GREATER_EQUAL:
            return 0x0206;
        case ECompareFunction.GREATER:
            return 0x0204;
    }
    return 0x0207;
}
var akra;
(function (akra) {
    (function (webgl) {
        function computeLog(iValue) {
            var i = 0;
            if (iValue === 0) {
                return -1;
            }
            for(; ; ) {
                if (iValue & 1) {
                    if (iValue !== 1) {
                        return -1;
                    }
                    return i;
                }
                iValue = iValue >> 1;
                i++;
            }
        }
        webgl.computeLog = computeLog;
        var WebGLTextureBuffer = (function (_super) {
            __extends(WebGLTextureBuffer, _super);
            function WebGLTextureBuffer() {
                _super.call(this);
                this._eTarget = null;
                this._eFaceTarget = null;
                this._pWebGLTexture = null;
                this._iFace = 0;
                this._iLevel = 0;
                this._bSoftwareMipmap = false;
                this._pRTTList = null;
                this.inline = _getTarget();
                this.number = {
                    return: this._eTarget
                };
                this.inline = _getWebGLTexture();
                this.WebGLTexture = {
                    return: this._pWebGLTexture
                };
            }
            WebGLTextureBuffer.prototype._clearRTT = function (iZOffset) {
                this._pRTTList[iZOffset] = null;
            };
            WebGLTextureBuffer.prototype.reset = function (iWidth, iHeight) {
                if (typeof iWidth === "undefined") { iWidth = this._iWidth; }
                if (typeof iHeight === "undefined") { iHeight = iWidth; }
                iWidth = math.ceilingPowerOfTwo(iWidth);
                iHeight = math.ceilingPowerOfTwo(iHeight);
                this._iWidth = this._iLevel === 0 ? iWidth : iWidth / Math.pow(2.0, this._iLevel);
                this._iHeight = this._iLevel === 0 ? iHeight : iHeight / Math.pow(2.0, this._iLevel);
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                pWebGLContext.texImage2D(this._eFaceTarget, this._iLevel, getClosestWebGLInternalFormat(getSupportedAlternative(this._eFormat)), this._iWidth, this._iHeight, 0, getWebGLFormat(this._eFormat), getWebGLDataType(this._eFormat), null);
                this.notifyResized();
            };
            WebGLTextureBuffer.prototype.notifyResized = function () {
                if (!isNull(this._pRTTList)) {
                    for(var i = 0; i < this._pRTTList.length; ++i) {
                        this._pRTTList[i].resized();
                    }
                }
            };
            WebGLTextureBuffer.prototype.create = function () {
                if (arguments.length < 6) {
 {
                        logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 93);
                        logger.criticalError("Invalid number of params. For WebGLTextureBuffer");
                    }
                    ;
                }
                var eTarget = arguments[0];
                var pTexture = arguments[1];
                var iWidth = arguments[2];
                var iHeight = arguments[3];
                var iInternalFormat = arguments[4];
                var iFormat = arguments[5];
                var iFace = arguments[6];
                var iLevel = arguments[7];
                var iFlags = arguments[8];
                var bSoftwareMipmap = arguments[9];
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                pWebGLRenderer.bindWebGLTexture(eTarget, pTexture);
                this._eTarget = eTarget;
                this._pWebGLTexture = pTexture;
                this._iFace = iFace;
                this._iLevel = iLevel;
                this._iFlags = iFlags;
                this._bSoftwareMipmap = bSoftwareMipmap;
                this._eFaceTarget = eTarget;
                if (eTarget === 0x8513) {
                    this._eFaceTarget = 0x8515 + iFace;
                }
                this._iWidth = iLevel === 0 ? iWidth : iWidth / Math.pow(2.0, iLevel);
                this._iHeight = iLevel === 0 ? iHeight : iHeight / Math.pow(2.0, iLevel);
                this._iDepth = 1;
                this._iWebGLInternalFormat = iInternalFormat;
                this._eFormat = getClosestAkraFormat(iInternalFormat, iFormat);
                this._iRowPitch = this._iWidth;
                this._iSlicePitch = this._iHeight * this._iWidth;
                this.byteLength = pixelUtil.getMemorySize(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                this._pBuffer = new pixelUtil.PixelBox(this._iWidth, this._iHeight, this._iDepth, this._eFormat);
                if (this._iWidth === 0 || this._iHeight === 0 || this._iDepth === 0) {
                    return false;
                }
                if ((((this._iFlags) & (ETextureFlags.RENDERTARGET)) != 0)) {
                    this._pRTTList = new WebGLRenderTexture[]();
                    for(var iZOffset = 0; iZOffset < this._iDepth; ++iZOffset) {
                        var pRenderTexture = new WebGLRenderTexture(pWebGLRenderer, this);
                        this._pRTTList.push(pRenderTexture);
                        pWebGLRenderer.attachRenderTarget(pRenderTexture);
                    }
                }
                var pProgram = this.getManager().shaderProgramPool.findResource("WEBGL_blit_texture_buffer");
                if (isNull(pProgram)) {
                    pProgram = this.getManager().shaderProgramPool.createResource("WEBGL_blit_texture_buffer");
                    pProgram.create("																									\n	        	attribute vec2 POSITION;																			\n				attribute vec3 TEXCOORD;																			\n				                      																				\n				varying vec3 texcoord;																				\n				                   																					\n				void main(void){																					\n				    texcoord = TEXCOORD;																			\n				    gl_Position = vec4(POSITION, 0., 1.);															\n				}																									\n				", "													\n				#ifdef GL_ES                        				\n				    precision highp float;          				\n				#endif												\n				varying vec3 texcoord;              				\n				uniform sampler2D uSampler;        					\n																	\n				void main(void) {  									\n					vec4 color;										\n					color = texture2D(uSampler, texcoord.xy);      	\n				    gl_FragColor = color;           				\n				}                                   				\n				");
                }
                return true;
            };
            WebGLTextureBuffer.prototype.destroy = function () {
                if ((((this._iFlags) & (ETextureFlags.RENDERTARGET)) != 0)) {
                    var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                    for(var i = 0; i < this._pRTTList.length; i++) {
                        pWebGLRenderer.destroyRenderTarget(this._pRTTList[i]);
                    }
                }
            };
            WebGLTextureBuffer.prototype.upload = function (pData, pDestBox) {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                if (pixelUtil.isCompressed(pData.format)) {
                    if (pData.format !== this._eFormat || !pData.isConsecutive()) {
 {
                            logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 214);
                            logger.criticalError("Compressed images must be consecutive, in the source format");
                        }
                        ;
                    }
                    var iWebGLFormat = webgl.getClosestWebGLInternalFormat(this._eFormat);
                    if (pDestBox.left === 0 && pDestBox.top === 0) {
                        pWebGLContext.compressedTexImage2D(this._eFaceTarget, this._iLevel, iWebGLFormat, pDestBox.width, pDestBox.height, 0, pData.data);
                    } else {
                        pWebGLContext.compressedTexSubImage2D(this._eFaceTarget, this._iLevel, pDestBox.left, pDestBox.top, pDestBox.width, pDestBox.height, iWebGLFormat, pData.data);
                    }
                } else if (this._bSoftwareMipmap) {
                    if (pData.width !== pData.rowPitch) {
 {
                            logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 239);
                            logger.criticalError("Unsupported texture format");
                        }
                        ;
                    }
                    if (pData.height * pData.width !== pData.slicePitch) {
 {
                            logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 244);
                            logger.criticalError("Unsupported texture format");
                        }
                        ;
                    }
                    pWebGLContext.pixelStorei(0x0CF5, 1);
                    this.buildMipmaps(pData);
                } else {
                    if (pData.width !== pData.rowPitch) {
 {
                            logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 253);
                            logger.criticalError("Unsupported texture format");
                        }
                        ;
                    }
                    if (pData.height * pData.width !== pData.slicePitch) {
 {
                            logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 258);
                            logger.criticalError("Unsupported texture format");
                        }
                        ;
                    }
                    if ((pData.width * pixelUtil.getNumElemBytes(pData.format)) & 3) {
                        pWebGLContext.pixelStorei(0x0CF5, 1);
                    }
                    if (pDestBox.left === 0 && pDestBox.top === 0) {
                        pWebGLContext.texImage2D(this._eFaceTarget, this._iLevel, webgl.getWebGLFormat(pData.format), pDestBox.width, pDestBox.height, 0, webgl.getWebGLFormat(pData.format), webgl.getWebGLDataType(pData.format), new Uint8Array(pData.data));
                    } else {
                        pWebGLContext.texSubImage2D(this._eFaceTarget, this._iLevel, pDestBox.left, pDestBox.top, pDestBox.width, pDestBox.height, webgl.getWebGLFormat(pData.format), webgl.getWebGLDataType(pData.format), pData.data);
                    }
                }
                if ((((this._iFlags) & (ETextureFlags.AUTOMIPMAP)) != 0) && !this._bSoftwareMipmap && (this._iLevel === 0)) {
                    pWebGLContext.generateMipmap(this._eFaceTarget);
                }
                pWebGLContext.pixelStorei(0x0CF5, 4);
                this.notifyAltered();
            };
            WebGLTextureBuffer.prototype.download = function (pData) {
                if ((pData.right > this._iWidth) || (pData.bottom > this._iHeight) || (pData.front != 0) || (pData.back != 1)) {
 {
                        logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 300);
                        logger.criticalError("Invalid box");
                    }
                    ;
                }
                var pSrcBox;
                if (checkReadPixelFormat(pData.format)) {
                    pSrcBox = pData;
                } else {
                    console.log("download. new Pixel Box подходящего формата");
                    pSrcBox = new pixelUtil.PixelBox(pData, EPixelFormats.BYTE_ABGR);
                }
                if (!checkFBOAttachmentFormat(this.format)) {
 {
                        logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 316);
                        logger.criticalError("Read from texture this format not support");
                    }
                    ;
                }
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var pOldFramebuffer = pWebGLContext.getParameter(0x8CA6);
                var pFrameBuffer = pWebGLRenderer.createWebGLFramebuffer();
                pWebGLRenderer.bindWebGLFramebuffer(0x8D40, pFrameBuffer);
                var eFormat = getWebGLFormat(pSrcBox.format);
                var eType = getWebGLDataType(pSrcBox.format);
                pWebGLContext.framebufferTexture2D(0x8D40, 0x8CE0, this._eFaceTarget, this._pWebGLTexture, this._iLevel);
                pWebGLContext.readPixels(pSrcBox.left, pSrcBox.top, pSrcBox.width, pSrcBox.height, eFormat, eType, pSrcBox.data);
                if (!checkReadPixelFormat(pData.format)) {
                    console.log("download. конвертация");
                    pixelUtil.bulkPixelConversion(pSrcBox, pData);
                }
                pWebGLRenderer.bindWebGLFramebuffer(0x8D40, pOldFramebuffer);
                pWebGLRenderer.deleteWebGLFramebuffer(pFrameBuffer);
            };
            WebGLTextureBuffer.prototype.buildMipmaps = function (pData) {
                var iWidth = 0;
                var iHeight = 0;
                var iLogW = 0;
                var iLogH = 0;
                var iLevel = 0;
                var pScaled = new pixelUtil.PixelBox();
                pScaled.data = pData.data;
                pScaled.left = pData.left;
                pScaled.right = pData.right;
                pScaled.top = pData.top;
                pScaled.bottom = pData.bottom;
                pScaled.front = pData.front;
                pScaled.back = pData.back;
                iWidth = pData.width;
                iHeight = pData.height;
                iLogW = computeLog(iWidth);
                iLogH = computeLog(iHeight);
                iLevel = (iLogW > iLogH ? iLogW : iLogH);
                var mip = 0;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                for(mip = 0; mip <= iLevel; mip++) {
                    var iWebGLFormat = webgl.getWebGLFormat(pScaled.format);
                    var iWebGLDataType = webgl.getWebGLDataType(pScaled.format);
                    pWebGLContext.texImage2D(this._eFaceTarget, mip, iWebGLFormat, iWidth, iHeight, 0, iWebGLFormat, iWebGLDataType, pScaled.data);
                    if (mip !== 0) {
                        pScaled.data = null;
                    }
                    if (iWidth > 1) {
                        iWidth = iWidth / 2;
                    }
                    if (iHeight > 1) {
                        iHeight = iHeight / 2;
                    }
                    var iSizeInBytes = pixelUtil.getMemorySize(iWidth, iHeight, 1, pData.format);
                    pScaled = new pixelUtil.PixelBox(iWidth, iHeight, 1, pData.format);
                    pScaled.data = new Uint8Array(iSizeInBytes);
                    pData.scale(pScaled, EFilters.LINEAR);
                }
                if (iLevel > 0) {
                    pScaled.data = null;
                }
            };
            WebGLTextureBuffer.prototype._bindToFramebuffer = function (iAttachment, iZOffset) {
 {
                    logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 443);
                    logger.assert(iZOffset < this._iDepth);
                }
                ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLContext.framebufferTexture2D(0x8D40, iAttachment, this._eFaceTarget, this._pWebGLTexture, this._iLevel);
            };
            WebGLTextureBuffer.prototype._copyFromFramebuffer = function (iZOffset) {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                pWebGLContext.copyTexSubImage2D(this._eFaceTarget, this._iLevel, 0, 0, 0, 0, this._iWidth, this._iHeight);
            };
            WebGLTextureBuffer.prototype.blit = function (pSource, pSrcBox, pDestBox) {
                if (arguments.length == 1) {
                    return this.blit(pSource, new geometry.Box(0, 0, 0, pSource.width, pSource.height, pSource.depth), new geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth));
                } else {
                    var pSourceTexture = pSource;
                    if (!(((pSourceTexture.getFlags()) & (ETextureFlags.RENDERTARGET)) != 0) && pSourceTexture._getTarget() === 0x0DE1) {
                        return this.blitFromTexture(pSourceTexture, pSrcBox, pDestBox);
                    } else {
                        return _super.prototype.blit.call(this, pSource, pSrcBox, pDestBox);
                    }
                }
            };
            WebGLTextureBuffer.prototype.blitFromTexture = function (pSource, pSrcBox, pDestBox) {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer._disableTextureUnitsFrom(0);
                pWebGLRenderer.activateWebGLTexture(0x84C0);
                pWebGLContext.disable(0x0B71);
                pWebGLContext.disable(0x0C11);
                pWebGLContext.disable(0x0BE2);
                pWebGLContext.disable(0x0B44);
                pWebGLRenderer.bindWebGLTexture(pSource._getTarget(), pSource._getWebGLTexture());
                if (pSrcBox.width === pDestBox.width && pSrcBox.height === pDestBox.height && pSrcBox.depth === pDestBox.depth) {
                    pWebGLContext.texParameteri(pSource._getTarget(), 0x2801, 0x2600);
                    pWebGLContext.texParameteri(pSource._getTarget(), 0x2800, 0x2600);
                } else {
                    if ((((pSource.getFlags()) & (ETextureFlags.AUTOMIPMAP)) != 0)) {
                        pWebGLContext.texParameteri(pSource._getTarget(), 0x2801, 0x2703);
                        pWebGLContext.texParameteri(pSource._getTarget(), 0x2800, 0x2601);
                    } else {
                        pWebGLContext.texParameteri(pSource._getTarget(), 0x2801, 0x2601);
                        pWebGLContext.texParameteri(pSource._getTarget(), 0x2800, 0x2601);
                    }
                }
                pWebGLContext.texParameteri(pSource._getTarget(), 0x2802, 0x812F);
                pWebGLContext.texParameteri(pSource._getTarget(), 0x2803, 0x812F);
                var pOldFramebuffer = pWebGLContext.getParameter(0x8CA6);
                var pFramebuffer = pWebGLRenderer.createWebGLFramebuffer();
                pWebGLRenderer.bindWebGLFramebuffer(0x8D40, pFramebuffer);
                var pTempWebGLTexture = null;
                if (!webgl.checkFBOAttachmentFormat(this._eFormat) || pSource === this) {
                    var iGLTempFormat = webgl.getClosestWebGLInternalFormat(webgl.getSupportedAlternative(this._eFormat));
                    pTempWebGLTexture = pWebGLRenderer.createWebGLTexture();
                    pWebGLRenderer.bindWebGLTexture(0x0DE1, pTempWebGLTexture);
                    pWebGLContext.texImage2D(0x0DE1, 0, iGLTempFormat, math.ceilingPowerOfTwo(pDestBox.width), math.ceilingPowerOfTwo(pDestBox.height), 0, 0x1908, 0x1401, null);
                    pWebGLContext.framebufferTexture2D(0x8D40, 0x8CE0, 0x0DE1, pTempWebGLTexture, 0);
                    pWebGLContext.viewport(0, 0, pDestBox.width, pDestBox.height);
                } else {
                    pWebGLContext.viewport(pDestBox.left, pDestBox.top, pDestBox.width, pDestBox.height);
                }
                var pWebGLShaderProgram = this.getManager().shaderProgramPool.findResource("WEBGL_blit_texture_buffer");
                pWebGLRenderer.disableAllWebGLVertexAttribs();
                pWebGLRenderer.useWebGLProgram(pWebGLShaderProgram.getWebGLProgram());
                var iPosAttrIndex = 0;
                var iTexAttrIndex = 0;
                iPosAttrIndex = pWebGLShaderProgram.getWebGLAttributeLocation("POSITION");
                iTexAttrIndex = pWebGLShaderProgram.getWebGLAttributeLocation("TEXCOORD");
                pWebGLContext.enableVertexAttribArray(iPosAttrIndex);
                pWebGLContext.enableVertexAttribArray(iTexAttrIndex);
                var pSquareVertices = new Float32Array([
                    -1.0, 
                    -1.0, 
                    1.0, 
                    -1.0, 
                    -1.0, 
                    1.0, 
                    1.0, 
                    1.0
                ]);
                var pTexCoords = new Float32Array(12);
                var pPositionBuffer = pWebGLRenderer.createWebGLBuffer();
                var pTexCoordsBuffer = pWebGLRenderer.createWebGLBuffer();
                pWebGLRenderer.bindWebGLBuffer(0x8892, pPositionBuffer);
                pWebGLContext.bufferData(0x8892, pSquareVertices, 0x88E0);
                pWebGLContext.vertexAttribPointer(iPosAttrIndex, 2, 0x1406, false, 0, 0);
                pWebGLShaderProgram.setInt("uSampler", 0);
                var iSlice = 0;
                for(iSlice = pDestBox.front; iSlice < pDestBox.back; ++iSlice) {
                    if (isNull(pTempWebGLTexture)) {
                        this._bindToFramebuffer(0x8CE0, iSlice);
                    }
                    var u1 = pSrcBox.left / pSource.width;
                    var v1 = pSrcBox.top / pSource.height;
                    var u2 = pSrcBox.right / pSource.width;
                    var v2 = pSrcBox.bottom / pSource.height;
                    var w = (iSlice - pDestBox.front) / pDestBox.depth;
                    w = w * pSrcBox.depth + pSrcBox.front;
                    w = (w + 0.5) / pSource.depth;
                    pTexCoords[0] = u1;
                    pTexCoords[1] = v1;
                    pTexCoords[2] = w;
                    pTexCoords[3] = u2;
                    pTexCoords[4] = v1;
                    pTexCoords[5] = w;
                    pTexCoords[6] = u2;
                    pTexCoords[7] = v2;
                    pTexCoords[8] = w;
                    pTexCoords[9] = u1;
                    pTexCoords[10] = v2;
                    pTexCoords[11] = w;
                    pWebGLRenderer.bindWebGLTexture(pSource._getTarget(), pSource._getWebGLTexture());
                    pWebGLContext.enable(pSource._getTarget());
                    pWebGLRenderer.bindWebGLBuffer(0x8892, pTexCoordsBuffer);
                    pWebGLContext.bufferData(0x8892, pTexCoords, 0x88E0);
                    pWebGLContext.vertexAttribPointer(iTexAttrIndex, 3, 0x1406, false, 0, 0);
                    pWebGLContext.drawArrays(0x0005, 0, 4);
                    pWebGLContext.disable(pSource._getTarget());
                    if (!isNull(pTempWebGLTexture)) {
                        if (pSource === this) {
                            pWebGLRenderer.deleteWebGLTexture(this._pWebGLTexture);
                            this._pWebGLTexture = pTempWebGLTexture;
                            this._iWidth = math.ceilingPowerOfTwo(pDestBox.width);
                            this._iHeight = math.ceilingPowerOfTwo(pDestBox.height);
                        } else {
                            pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                            switch(this._eTarget) {
                                case 0x0DE1:
                                case 0x8513:
                                    pWebGLContext.copyTexSubImage2D(this._eFaceTarget, this._iLevel, pDestBox.left, pDestBox.top, 0, 0, pDestBox.width, pDestBox.height);
                                    break;
                            }
                        }
                    }
                }
                pWebGLContext.disableVertexAttribArray(iPosAttrIndex);
                pWebGLContext.disableVertexAttribArray(iTexAttrIndex);
                pWebGLRenderer.deleteWebGLBuffer(pPositionBuffer);
                pWebGLRenderer.deleteWebGLBuffer(pTexCoordsBuffer);
                if (!isNull(pTempWebGLTexture)) {
                    if ((((this._iFlags) & (ETextureFlags.AUTOMIPMAP)) != 0)) {
                        pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                        pWebGLContext.generateMipmap(this._eTarget);
                    }
                }
                pWebGLRenderer.bindWebGLTexture(this._eTarget, this._pWebGLTexture);
                pWebGLContext.framebufferRenderbuffer(0x8D40, 0x8CE0, 0x8D41, null);
                pWebGLRenderer.bindWebGLFramebuffer(0x8D40, pOldFramebuffer);
                if (pSource !== this) {
                    pWebGLRenderer.deleteWebGLTexture(pTempWebGLTexture);
                }
                pWebGLRenderer.deleteWebGLFramebuffer(pFramebuffer);
                pTempWebGLTexture = null;
                this.notifyAltered();
                return true;
            };
            WebGLTextureBuffer.prototype.blitFromMemory = function () {
                if (arguments.length === 1) {
                    return _super.prototype.blitFromMemory.call(this, arguments[0]);
                }
                var pSourceOrigin = arguments[0];
                var pDestBox = arguments[1];
                if (pixelUtil.isLuminance(pSourceOrigin.format) || pixelUtil.isLuminance(this._eFormat) || (pSourceOrigin.width === pDestBox.width && pSourceOrigin.height === pDestBox.height && pSourceOrigin.depth === pDestBox.depth)) {
                    return _super.prototype.blitFromMemory.call(this, pSourceOrigin, pDestBox);
                }
                if (!this._pBuffer.contains(pDestBox)) {
 {
                        logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 735);
                        logger.criticalError("Destination box out of range");
                    }
                    ;
                }
                var pSource;
                if (getWebGLFormat(pSourceOrigin.format) === 0) {
                    var iSizeInBytes = pixelUtil.getMemorySize(pSourceOrigin.width, pSourceOrigin.height, pSourceOrigin.depth, this._eFormat);
                    pSource = new pixelUtil.PixelBox(pSourceOrigin.width, pSourceOrigin.height, pSourceOrigin.depth, this._eFormat, new Uint8Array(iSizeInBytes));
                    pixelUtil.bulkPixelConversion(pSourceOrigin, pSource);
                } else {
                    pSource = pSourceOrigin;
                }
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var pTempWebGLTexture = null;
                var eTarget = 0x0DE1;
                var iWidth = math.ceilingPowerOfTwo(pSource.width);
                var iHeight = math.ceilingPowerOfTwo(pSource.height);
                var iWebGLFormat = getClosestWebGLInternalFormat(pSource.format);
                var iWebGLDataType = getWebGLDataType(pSource.format);
                pTempWebGLTexture = pWebGLRenderer.createWebGLTexture();
                if (isNull(pTempWebGLTexture)) {
 {
                        logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 768);
                        logger.error("Can not create WebGL texture");
                    }
                    ;
                    return false;
                }
                pWebGLRenderer.bindWebGLTexture(eTarget, pTempWebGLTexture);
                pWebGLContext.texImage2D(eTarget, 0, iWebGLFormat, iWidth, iHeight, 0, iWebGLFormat, iWebGLDataType, null);
                var pTextureBufferPool = this.getManager().textureBufferPool;
                var pTempTexBuffer = pTextureBufferPool.createResource(".temp");
                pTempTexBuffer.create(eTarget, pTempWebGLTexture, pSource.width || iWidth, pSource.height || iHeight, iWebGLFormat, pSource.format, 0, 0, ETextureFlags.AUTOMIPMAP | EHardwareBufferFlags.STATIC, false);
                var pTempBoxTarget = new geometry.Box(0, 0, 0, pSource.width, pSource.height, pSource.depth);
                pTempTexBuffer.upload(pSource, pTempBoxTarget);
                this.blitFromTexture(pTempTexBuffer, pTempBoxTarget, pDestBox);
                pTempTexBuffer.release();
                pTextureBufferPool.destroyResource(pTempTexBuffer);
                pWebGLRenderer.deleteWebGLTexture(pTempWebGLTexture);
                pTempWebGLTexture = null;
                pTempBoxTarget = null;
                return true;
            };
            WebGLTextureBuffer.prototype.getRenderTarget = function (iZOffest) {
                if (typeof iZOffest === "undefined") { iZOffest = 0; }
 {
                    logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 809);
                    logger.assert((((this._iFlags) & (ETextureFlags.RENDERTARGET)) != 0));
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 810);
                    logger.assert(iZOffest < this._iDepth, "iZOffest: " + iZOffest + ", iDepth: " + this._iDepth);
                }
                ;
                return this._pRTTList[iZOffest];
            };
            WebGLTextureBuffer.prototype.resize = function (iWidth, iHeight) {
                if (typeof iHeight === "undefined") { iHeight = iWidth; }
                if (arguments.length === 1) {
 {
                        logger.setSourceLocation("webgl/WebGLTextureBuffer.ts", 817);
                        logger.criticalError("resize with one parametr not available for WebGLTextureBuffer");
                    }
                    ;
                    return false;
                }
                var pSrcBox = new geometry.Box(0, 0, 0, this._iWidth, this._iHeight, this._iDepth);
                var pDestBox = new geometry.Box(0, 0, 0, iWidth, iHeight, this._iDepth);
                return this.blitFromTexture(this, pSrcBox, pDestBox);
            };
            return WebGLTextureBuffer;
        })(WebGLPixelBuffer);
        webgl.WebGLTextureBuffer = WebGLTextureBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLInternalTexture = (function (_super) {
            __extends(WebGLInternalTexture, _super);
            function WebGLInternalTexture() {
                _super.call(this);
                this._pSurfaceList = null;
                this._pWebGLTexture = null;
                this.inline = getWebGLTexture();
                this.WebGLTexture = {
                    return: this._pWebGLTexture
                };
            }
            WebGLInternalTexture.prototype._getWebGLTextureTarget = function () {
                switch(this._eTextureType) {
                    case ETextureTypes.TEXTURE_2D:
                        return 0x0DE1;
                    case ETextureTypes.TEXTURE_CUBE_MAP:
                        return 0x8513;
                    default:
                        return 0;
                }
            };
            WebGLInternalTexture.prototype._getWebGLTextureParameter = function (eParam) {
                switch(eParam) {
                    case ETextureParameters.MAG_FILTER:
                        return 0x2800;
                    case ETextureParameters.MIN_FILTER:
                        return 0x2801;
                    case ETextureParameters.WRAP_S:
                        return 0x2802;
                    case ETextureParameters.WRAP_T:
                        return 0x2803;
                    default:
                        return 0;
                }
            };
            WebGLInternalTexture.prototype._getWebGLTextureParameterValue = function (eValue) {
                switch(eValue) {
                    case ETextureFilters.NEAREST:
                        return 0x2600;
                    case ETextureFilters.LINEAR:
                        return 0x2601;
                    case ETextureFilters.NEAREST_MIPMAP_NEAREST:
                        return 0x2700;
                    case ETextureFilters.LINEAR_MIPMAP_NEAREST:
                        return 0x2701;
                    case ETextureFilters.NEAREST_MIPMAP_LINEAR:
                        return 0x2702;
                    case ETextureFilters.LINEAR_MIPMAP_LINEAR:
                        return 0x2703;
                    case ETextureWrapModes.REPEAT:
                        return 0x2901;
                    case ETextureWrapModes.CLAMP_TO_EDGE:
                        return 0x812F;
                    case ETextureWrapModes.MIRRORED_REPEAT:
                        return 0x8370;
                    default:
                        return 0;
                }
            };
            WebGLInternalTexture.prototype.reset = function (iWidth, iHeight) {
                if (typeof iWidth === "undefined") { iWidth = this._iWidth; }
                if (typeof iHeight === "undefined") { iHeight = iWidth; }
                _super.prototype.reset.call(this, iWidth, iHeight);
                for(var i = 0; i < this._pSurfaceList.length; i++) {
                    this._pSurfaceList[i].reset(iWidth, iHeight);
                }
            };
            WebGLInternalTexture.prototype._setFilterInternalTexture = function (eParam, eValue) {
                if (!this.isValid()) {
                    return false;
                }
                var iWebGLTarget = this._getWebGLTextureTarget();
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLTexture(iWebGLTarget, this._pWebGLTexture);
                pWebGLContext.texParameteri(iWebGLTarget, this._getWebGLTextureParameter(eParam), this._getWebGLTextureParameterValue(eValue));
                return true;
            };
            WebGLInternalTexture.prototype._setWrapModeInternalTexture = function (eParam, eValue) {
                if (!this.isValid()) {
                    return false;
                }
                var iWebGLTarget = this._getWebGLTextureTarget();
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLTexture(iWebGLTarget, this._pWebGLTexture);
                pWebGLContext.texParameteri(iWebGLTarget, this._getWebGLTextureParameter(eParam), this._getWebGLTextureParameterValue(eValue));
                return true;
            };
            WebGLInternalTexture.prototype._getFilterInternalTexture = function (eParam) {
                if (!this.isValid()) {
                    return 0;
                }
                var iWebGLTarget = this._getWebGLTextureTarget();
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLTexture(iWebGLTarget, this._pWebGLTexture);
                return pWebGLContext.getTexParameter(iWebGLTarget, this._getWebGLTextureParameter(eParam));
            };
            WebGLInternalTexture.prototype._getWrapModeInternalTexture = function (eParam) {
                if (!this.isValid()) {
                    return 0;
                }
                var iWebGLTarget = this._getWebGLTextureTarget();
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLTexture(iWebGLTarget, this._pWebGLTexture);
                return pWebGLContext.getTexParameter(iWebGLTarget, this._getWebGLTextureParameter(eParam));
            };
            WebGLInternalTexture.prototype._createInternalTextureImpl = function (cFillColor) {
                if (typeof cFillColor === "undefined") { cFillColor = null; }
                if (!isNull(cFillColor)) {
 {
                        logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 147);
                        logger.warning("Texture can create with filled only by default(black) color");
                    }
                    ;
                }
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                if (this._eTextureType == ETextureTypes.TEXTURE_2D) {
                    if (this._iWidth > webgl.maxTextureSize) {
 {
                            logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 161);
                            logger.warning("Заданная ширина не поддерживается(" + this._iWidth + ")");
                        }
                        ;
                        this._iWidth = webgl.maxTextureSize;
                    }
                    if (this._iHeight > webgl.maxTextureSize) {
 {
                            logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 166);
                            logger.warning("Заданная высота не поддерживается(" + this._iHeight + ")");
                        }
                        ;
                        this._iHeight = webgl.maxTextureSize;
                    }
                } else if (this._eTextureType == ETextureTypes.TEXTURE_CUBE_MAP) {
                    if (this._iWidth > webgl.maxCubeMapTextureSize) {
 {
                            logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 175);
                            logger.warning("Заданная ширина не поддерживается(" + this._iWidth + ")");
                        }
                        ;
                        this._iWidth = webgl.maxCubeMapTextureSize;
                    }
                    if (this._iHeight > webgl.maxCubeMapTextureSize) {
 {
                            logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 180);
                            logger.warning("Заданная высота не поддерживается(" + this._iHeight + ")");
                        }
                        ;
                        this._iHeight = webgl.maxCubeMapTextureSize;
                    }
                }
                if (this._iWidth == 0) {
 {
                        logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 188);
                        logger.warning("Заданная ширина не поддерживается(" + this._iWidth + ")");
                    }
                    ;
                    this._iWidth = 1;
                }
                if (this._iHeight == 0) {
 {
                        logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 194);
                        logger.warning("Заданная высота не поддерживается(" + this._iHeight + ")");
                    }
                    ;
                    this._iHeight = 1;
                }
                if (this._iDepth != 1) {
                    this._iDepth = 1;
 {
                        logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 200);
                        logger.warning("Трехмерные текстуры не поддерживаются, сброс глубины в 1");
                    }
                    ;
                }
                if (this._nMipLevels != 0 && !webgl.hasExtension("EXT_texture_npot_2D_mipmap") && (!math.isPowerOfTwo(this._iDepth) || !math.isPowerOfTwo(this._iHeight) || !math.isPowerOfTwo(this._iWidth))) {
 {
                        logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 204);
                        logger.warning("Мип мапы у текстуры не стпени двойки не поддерживаются, сброс мипмапов в 0");
                    }
                    ;
                    this._nMipLevels = 0;
                    ((this._iFlags) &= ~(ETextureFlags.AUTOMIPMAP));
                }
                if (!webgl.isWebGLFormatSupport(this._eFormat)) {
 {
                        logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 211);
                        logger.warning("Данный тип текстуры не поддерживается: ", this._eFormat);
                    }
                    ;
                    this._eFormat = EPixelFormats.A8B8G8R8;
                }
                if (this._nMipLevels != 0 && this._nMipLevels != akra.core.pool.resources.Img.getMaxMipmaps(this._iWidth, this._iHeight, this._iDepth, this._eFormat)) {
 {
                        logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 218);
                        logger.warning("Нехватает мипмапов, сброс в 0");
                    }
                    ;
                    this._nMipLevels = 0;
                }
                var iWebGLTarget = this._getWebGLTextureTarget();
                this._pWebGLTexture = pWebGLRenderer.createWebGLTexture();
                pWebGLRenderer.bindWebGLTexture(iWebGLTarget, this._pWebGLTexture);
                this._isMipmapsHardwareGenerated = pWebGLRenderer.hasCapability(ERenderCapabilities.AUTOMIPMAP);
                this.setFilter(ETextureParameters.MIN_FILTER, ETextureFilters.NEAREST);
                this.setFilter(ETextureParameters.MAG_FILTER, ETextureFilters.NEAREST);
                this.setWrapMode(ETextureParameters.WRAP_S, ETextureWrapModes.CLAMP_TO_EDGE);
                this.setWrapMode(ETextureParameters.WRAP_T, ETextureWrapModes.CLAMP_TO_EDGE);
                var iWebGLFormat = webgl.getWebGLFormat(this._eFormat);
                var iWebGLDataType = webgl.getWebGLDataType(this._eFormat);
                var iWidth = this._iWidth;
                var iHeight = this._iHeight;
                var iDepth = this._iDepth;
                if (pixelUtil.isCompressed(this._eFormat)) {
                    var iSize = pixelUtil.getMemorySize(iWidth, iHeight, iDepth, this._eFormat);
                    var pTmpData = new Uint8Array(iSize);
                    var pEmptyData;
                    var mip = 0;
                    for(mip = 0; mip <= this._nMipLevels; mip++) {
                        iSize = pixelUtil.getMemorySize(iWidth, iHeight, iDepth, this._eFormat);
                        pEmptyData = pTmpData.subarray(0, iSize);
                        switch(this._eTextureType) {
                            case ETextureTypes.TEXTURE_2D:
                                pWebGLContext.compressedTexImage2D(0x0DE1, mip, iWebGLFormat, iWidth, iHeight, 0, pEmptyData);
                                break;
                            case ETextureTypes.TEXTURE_CUBE_MAP:
                                var iFace = 0;
                                for(iFace = 0; iFace < 6; iFace++) {
                                    pWebGLContext.compressedTexImage2D(0x8515 + iFace, mip, iWebGLFormat, iWidth, iHeight, 0, pEmptyData);
                                }
                                break;
                            default:
                                break;
                        }
                        ;
                        if (iWidth > 1) {
                            iWidth = iWidth / 2;
                        }
                        if (iHeight > 1) {
                            iHeight = iHeight / 2;
                        }
                        if (iDepth > 1) {
                            iDepth = iDepth / 2;
                        }
                    }
                    pTmpData = null;
                    pEmptyData = null;
                } else {
                    var mip = 0;
                    for(mip = 0; mip <= this._nMipLevels; mip++) {
                        switch(this._eTextureType) {
                            case ETextureTypes.TEXTURE_2D:
                                pWebGLContext.texImage2D(0x0DE1, mip, iWebGLFormat, iWidth, iHeight, 0, iWebGLFormat, iWebGLDataType, null);
                                break;
                            case ETextureTypes.TEXTURE_CUBE_MAP:
                                var iFace = 0;
                                for(iFace = 0; iFace < 6; iFace++) {
                                    pWebGLContext.texImage2D(0x8515 + iFace, mip, iWebGLFormat, iWidth, iHeight, 0, iWebGLFormat, iWebGLDataType, null);
                                }
                                break;
                            default:
                                break;
                        }
                        if (iWidth > 1) {
                            iWidth = iWidth >>> 1;
                        }
                        if (iHeight > 1) {
                            iHeight = iHeight >>> 1;
                        }
                        if (iDepth > 1) {
                            iDepth = iDepth >>> 1;
                        }
                    }
                }
                this._createSurfaceList();
                return true;
            };
            WebGLInternalTexture.prototype.freeInternalTextureImpl = function () {
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.deleteWebGLTexture(this._pWebGLTexture);
                this._pWebGLTexture = null;
                for(var i = 0; i < this._pSurfaceList.length; i++) {
                    this._pSurfaceList[i].release();
                }
                this._pSurfaceList = null;
                return true;
            };
            WebGLInternalTexture.prototype._createSurfaceList = function () {
                this._pSurfaceList = new Array();
                var bWantGeneratedMips = (((this._iFlags) & (ETextureFlags.AUTOMIPMAP)) != 0);
                var bDoSoftware = bWantGeneratedMips && !this._isMipmapsHardwareGenerated && this._nMipLevels !== 0;
                var iFace = 0;
                var mip = 0;
                var pTextureBufferPool = this.getManager().textureBufferPool;
                var sResourceName = this.findResourceName();
                for(iFace = 0; iFace < this.getNumFaces(); iFace++) {
                    var iWidth = this._iWidth;
                    var iHeight = this._iHeight;
                    for(mip = 0; mip <= this._nMipLevels; mip++) {
                        var pBuf = pTextureBufferPool.createResource(sResourceName + "_" + iFace + "_" + mip);
                        pBuf.create(this._getWebGLTextureTarget(), this._pWebGLTexture, iWidth, iHeight, webgl.getClosestWebGLInternalFormat(this._eFormat), webgl.getWebGLDataType(this._eFormat), iFace, mip, this._iFlags, bDoSoftware && mip === 0);
                        this._pSurfaceList.push(pBuf);
                        if (pBuf.width === 0 || pBuf.height === 0 || pBuf.depth === 0) {
 {
                                logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 386);
                                logger.criticalError("Zero sized texture surface on texture " + sResourceName + " face " + iFace + " mipmap " + mip + ". The GL driver probably refused to create the texture.");
                            }
                            ;
                        }
                    }
                }
            };
            WebGLInternalTexture.prototype.getBuffer = function (iFace, iMipmap) {
                if (typeof iFace === "undefined") { iFace = 0; }
                if (typeof iMipmap === "undefined") { iMipmap = 0; }
                if (iFace >= this.getNumFaces()) {
 {
                        logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 395);
                        logger.criticalError("Face index out of range", iFace, this.getNumFaces());
                    }
                    ;
                }
                if (iMipmap > this._nMipLevels) {
 {
                        logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 399);
                        logger.criticalError("Mipmap index out of range", iMipmap, this._nMipLevels);
                    }
                    ;
                }
                var idx = iFace * (this._nMipLevels + 1) + iMipmap;
 {
                    logger.setSourceLocation("webgl/WebGLInternalTexture.ts", 403);
                    logger.assert(idx < this._pSurfaceList.length, "smth " + this._pSurfaceList.length + " , " + iFace + " , " + this._nMipLevels + " , " + iMipmap);
                }
                ;
                return this._pSurfaceList[idx];
            };
            WebGLInternalTexture.prototype.createRenderTexture = function () {
                return this.createInternalTexture();
            };
            return WebGLInternalTexture;
        })(core.pool.resources.Texture);
        webgl.WebGLInternalTexture = WebGLInternalTexture;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (data) {
        var EVertexDataLimits;
        (function (EVertexDataLimits) {
            EVertexDataLimits._map = [];
            EVertexDataLimits.k_MaxElementsSize = 256;
        })(EVertexDataLimits || (EVertexDataLimits = {}));
        ;
        var VertexData = (function () {
            function VertexData(pVertexBuffer, id, iOffset, iCount, pDecl) {
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = getVertexElementCount();
                this.number = {
                    return: this._pVertexDeclaration.length
                };
                this.inline = getBufferHandle();
                this.number = {
                    return: this._pVertexBuffer.resourceHandle
                };
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.inline = getEventTable();
                this.IEventTable = {
                    return: VertexData._pEventTable
                };
                this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = _syncTable(pFrom, IEventProvider);
                this._pVertexBuffer = pVertexBuffer;
                this._iOffset = iOffset;
                this._iLength = iCount;
                this._iId = id;
                this._pVertexDeclaration = null;
                this._iStride = 0;
                if (isInt(pDecl)) {
                    this._iStride = pDecl;
                } else {
                    this._iStride = pDecl.stride;
                    this.setVertexDeclaration(pDecl);
                }
 {
                    logger.setSourceLocation("data/VertexData.ts", 59);
                    logger.assert(pVertexBuffer.byteLength >= this.byteLength + this.byteOffset, "vertex data out of array linits");
                }
                ;
            }
            VertexData.prototype.id = function () {
                return this._iId;
            };
            VertexData.prototype.length = function () {
                return this._iLength;
            };
            VertexData.prototype.byteOffset = function () {
                return this._iOffset;
            };
            VertexData.prototype.byteLength = function () {
                return this._iLength * this._iStride;
            };
            VertexData.prototype.buffer = function () {
                return this._pVertexBuffer;
            };
            VertexData.prototype.stride = function () {
                return this._iStride;
            };
            VertexData.prototype.startIndex = function () {
                var iIndex = this.byteOffset / this.stride;
 {
                    logger.setSourceLocation("data/VertexData.ts", 34);
                    logger.assert(iIndex % 1 == 0, "cannot calc first element index");
                }
                ;
                return iIndex;
            };
            VertexData.prototype.getVertexDeclaration = function () {
                return this._pVertexDeclaration;
            };
            VertexData.prototype.setVertexDeclaration = function (pDecl) {
                if (this._pVertexDeclaration) {
 {
                        logger.setSourceLocation("data/VertexData.ts", 69);
                        logger.error("vertex declaration already exists");
                    }
                    ;
                    return false;
                }
                var iStride = pDecl.stride;
                this._pVertexDeclaration = pDecl.clone();
 {
                    logger.setSourceLocation("data/VertexData.ts", 80);
                    logger.assert(iStride < EVertexDataLimits.k_MaxElementsSize, "stride max is 255 bytes");
                }
                ;
 {
                    logger.setSourceLocation("data/VertexData.ts", 82);
                    logger.assert(iStride <= this.stride, "stride in VertexDeclaration grather than stride in construtor");
                }
                ;
                return true;
            };
            VertexData.prototype.hasSemantics = function (sUsage) {
                if (this._pVertexDeclaration != null) {
                    return this._pVertexDeclaration.hasSemantics(sUsage);
                }
                return false;
            };
            VertexData.prototype.destroy = function () {
                this._pVertexDeclaration = null;
                this._iLength = 0;
            };
            VertexData.prototype.extend = function (pDecl, pData) {
                if (typeof pData === "undefined") { pData = null; }
                pDecl = createVertexDeclaration(pDecl);
                if (isNull(pData)) {
                    pData = new Uint8Array(this.length * pDecl.stride);
                } else {
                    pData = new Uint8Array(pData.buffer);
                }
 {
                    logger.setSourceLocation("data/VertexData.ts", 114);
                    logger.assert(this.length === pData.byteLength / pDecl.stride, 'invalid data size for extending');
                }
                ;
                var nCount = this._iLength;
                var nStrideNew = pDecl.stride;
                var nStridePrev = this.stride;
                var nStrideNext = nStridePrev + nStrideNew;
                var nTotalSize = nStrideNext * this.length;
                var pDeclNew = this.getVertexDeclaration().clone();
                var pDataPrev = new Uint8Array(this.getData());
                var pDataNext = new Uint8Array(nTotalSize);
                for(var i = 0, iOffset; i < nCount; ++i) {
                    iOffset = i * nStrideNext;
                    pDataNext.set(pDataPrev.subarray(i * nStridePrev, (i + 1) * nStridePrev), iOffset);
                    pDataNext.set((pData).subarray(i * nStrideNew, (i + 1) * nStrideNew), iOffset + nStridePrev);
                }
                if (!pDeclNew.extend(pDecl)) {
                    return false;
                }
                if (!this.resize(nCount, pDeclNew)) {
                    return false;
                }
                return this.setData(pDataNext, 0, nStrideNext);
            };
            VertexData.prototype.resize = function (nCount, pDecl) {
                var iStride = 0;
                var iOldOffset = this.byteOffset;
                var pOldVertexBuffer;
                var pOldVertexDeclaration;
                var iOldStride;
                if (arguments.length == 2) {
                    if (isInt(pDecl)) {
                        iStride = pDecl;
                    } else {
                        iStride = (pDecl).stride;
                    }
                    if (nCount * iStride <= this.byteLength) {
                        this._iLength = nCount;
                        this._iStride = iStride;
                        this._pVertexDeclaration = null;
                        if (!isInt(pDecl)) {
                            this.setVertexDeclaration(pDecl);
                        }
                        return true;
                    } else {
                        pOldVertexBuffer = this.buffer;
                        pOldVertexBuffer.freeVertexData(this);
                        if (pOldVertexBuffer.getEmptyVertexData(nCount, pDecl, this) !== this) {
                            return false;
                        }
                        if (this.byteOffset != iOldOffset) {
 {
                                logger.setSourceLocation("data/VertexData.ts", 187);
                                logger.warning("vertex data moved from " + iOldOffset + " ---> " + this.byteOffset);
                            }
                            ;
                            this.relocation(this, iOldOffset, this.byteOffset);
                        }
                        return true;
                    }
                } else if (arguments.length == 1) {
                    if (nCount <= this.length) {
                        this._iLength = nCount;
                        return true;
                    } else {
                        pOldVertexBuffer = this.buffer;
                        pOldVertexDeclaration = this.getVertexDeclaration();
                        iOldStride = this.stride;
                        pOldVertexBuffer.freeVertexData(this);
                        if (pOldVertexBuffer.getEmptyVertexData(nCount, iOldStride, this) == null) {
                            return false;
                        }
                        this.setVertexDeclaration(pOldVertexDeclaration);
                        if (this.byteOffset != iOldOffset) {
 {
                                logger.setSourceLocation("data/VertexData.ts", 213);
                                logger.warning("vertex data moved from " + iOldOffset + " ---> " + this.byteOffset);
                            }
                            ;
                            this.relocation(this, iOldOffset, this.byteOffset);
                        }
                        return true;
                    }
                }
                return false;
            };
            VertexData.prototype.applyModifier = function (sUsage, fnModifier) {
                var pData = this.getTypedData(sUsage);
                fnModifier(pData);
                return this.setData(pData, sUsage);
            };
            VertexData.prototype.setData = function (pData, iOffset, iSize, nCountStart, nCount) {
                var iStride;
                var pVertexBuffer = this._pVertexBuffer;
                var pBackupBuf;
                var pDataU8;
                var k;
                var iOffsetBuffer;
                var pDeclaration = this._pVertexDeclaration;
                var pElement;
                switch(arguments.length) {
                    case 5:
                        if (isString(arguments[1])) {
                            iOffset = this._pVertexDeclaration.findElement(arguments[1]).offset;
                        }
                        iStride = this.stride;
                        pDataU8 = new Uint8Array(pData.buffer);
                        if (iStride != iSize) {
                            if (pVertexBuffer.isBackupPresent() && nCount > 1) {
                                pBackupBuf = new Uint8Array(pVertexBuffer.byteLength);
                                pVertexBuffer.readData(pBackupBuf);
                                iOffsetBuffer = this.byteOffset;
                                for(var i = nCountStart; i < nCount + nCountStart; i++) {
                                    for(k = 0; k < iSize; k++) {
                                        pBackupBuf[iStride * i + iOffset + iOffsetBuffer + k] = pDataU8[iSize * (i - nCountStart) + k];
                                    }
                                }
                                pVertexBuffer.writeData(pBackupBuf, 0, pVertexBuffer.byteLength);
                            } else {
                                for(var i = 0; i < nCount; i++) {
                                    var iCurrent = i + nCountStart;
                                    pVertexBuffer.writeData(pDataU8.subarray(iSize * i, iSize * (i + 1)), iStride * iCurrent + iOffset + this.byteOffset, iSize);
                                }
                            }
                        } else {
                            pVertexBuffer.writeData(pDataU8.subarray(0, iStride * nCount), this.byteOffset + iStride * nCountStart, iStride * nCount);
                        }
                        return true;
                    case 4:
                        pElement = null;
                        if (isString(arguments[1])) {
                            pElement = pDeclaration.findElement(arguments[1]);
                            if (pElement) {
                                return this.setData(pData, pElement.offset, pElement.size, arguments[2], arguments[3]);
                            }
                            return false;
                        }
                        nCountStart = nCountStart || 0;
                        if (!nCount) {
                            nCount = pData.byteLength / iSize;
                        }
                        return this.setData(pData, iOffset, iSize, nCountStart, nCount);
                    case 2:
                    case 3:
                        var pDeclaration = this._pVertexDeclaration, pElement = null;
                        if (isString(arguments[1])) {
                            pElement = pDeclaration.findElement(arguments[1]);
                            if (pElement) {
                                arguments[2] = arguments[2] || 0;
                                if (!arguments[3]) {
                                    arguments[3] = pData.buffer.byteLength / pElement.size;
                                }
                                return this.setData(pData, pElement.offset, pElement.size, arguments[2], arguments[3]);
                            }
                            return false;
                        } else if (arguments.length === 3) {
                            nCountStart = nCountStart || 0;
                            if (!nCount) {
                                nCount = pData.byteLength / iSize;
                            }
                            return this.setData(pData, iOffset, iSize, nCountStart, nCount);
                        }
                        return false;
                    case 1:
                        return this.setData(pData, this._pVertexDeclaration.element(0).usage);
                    default:
                        return false;
                }
            };
            VertexData.prototype.getData = function (iOffset, iSize, iFrom, iCount) {
                switch(arguments.length) {
                    case 4:
                    case 2:
                        if (isString(arguments[0])) {
                            return null;
                        }
                        iFrom = iFrom || 0;
                        iCount = iCount || this._iLength;
                        iCount = math.min(iCount, this._iLength);
                        var iStride = this.stride;
                        var pBufferData = new Uint8Array(iSize * iCount);
                        for(var i = 0; i < iCount; i++) {
                            var iCurrent = iFrom + i;
 {
                                logger.setSourceLocation("data/VertexData.ts", 385);
                                logger.assert(this._pVertexBuffer.readData(iStride * iCurrent + iOffset + this.byteOffset, iSize, pBufferData.subarray(i * iSize, (i + 1) * iSize)), "cannot read buffer");
                            }
                            ;
                        }
                        return pBufferData.buffer;
                    case 3:
                    case 1:
                        var pDeclaration = this._pVertexDeclaration, pElement = null;
                        if (isString("string")) {
                            pElement = pDeclaration.findElement(arguments[0]);
                            if (isDefAndNotNull(pElement)) {
                                return this.getData(pElement.offset, pElement.size, arguments[1], arguments[2]);
                            }
                            return null;
                        }
                        return null;
                    case 0:
                        return this.getData(0, this._pVertexDeclaration.stride);
                    default:
                        return null;
                }
            };
            VertexData.prototype.getTypedData = function (sUsage, iFrom, iCount) {
                var pVertexElement = this._pVertexDeclaration.findElement(sUsage);
                if (pVertexElement) {
                    return util.abtota(this.getData(sUsage, iFrom, iCount), pVertexElement.type);
                }
                return null;
            };
            VertexData.prototype.toString = function () {
                if (DEBUG) {
                    var s = "";
                    s += "          VERTEX DATA  #" + this.id + "\n";
                    s += "---------------+-----------------------\n";
                    s += "        BUFFER : " + this.getBufferHandle() + "\n";
                    s += "          SIZE : " + this.byteLength + " b.\n";
                    s += "        OFFSET : " + this.byteOffset + " b.\n";
                    s += "---------------+-----------------------\n";
                    s += " MEMBERS COUNT : " + this.length + " \n";
                    s += "        STRIDE : " + this.stride + " \n";
                    s += "---------------+-----------------------\n";
                    s += this.getVertexDeclaration().toString();
                    return s;
                }
                return null;
            };
            VertexData._pEventTable = new events.EventTable();
            return VertexData;
        })();
        data.VertexData = VertexData;        
        void {
            this: ,
            getEventTable: ._sync(this, pFrom)
        };
        relocation(pTarget, iFrom, iTo);
        void {
            this: ,
            _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
        };
        var _broadcast = (this._pBroadcastSlotList).relocation;
        var _recivier = this;
        if (isDef(_broadcast)) {
            for(var i = 0; i < _broadcast.length; ++i) {
                _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pTarget, iFrom, iTo) : _broadcast[i].listener(_recivier, pTarget, iFrom, iTo);
            }
        }
    })(akra.data || (akra.data = {}));
    var data = akra.data;
})(akra || (akra = {}));
;
;
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var MemoryBuffer = (function (_super) {
                    __extends(MemoryBuffer, _super);
                    function MemoryBuffer() {
                        _super.apply(this, arguments);

                        this.inline = get;
                    }
                    MemoryBuffer.prototype.byteLength = function () {
                        return this._pData.byteLength;
                    };
                    MemoryBuffer.prototype.create = function (iByteSize, iFlags) {
                        if (typeof iFlags === "undefined") { iFlags = EHardwareBufferFlags.DYNAMIC; }
                        ((iFlags) &= ~(EHardwareBufferFlags.BACKUP_COPY | EHardwareBufferFlags.DISCARDABLE | EHardwareBufferFlags.ALIGNMENT));
                        var isCreated = _super.prototype.create.call(this, 0, iFlags | EHardwareBufferFlags.SOFTWARE);
                        this._pData = new Uint8Array(iByteSize);
                        return isCreated;
                    };
                    MemoryBuffer.prototype.destroy = function () {
                        _super.prototype.destroy.call(this);
                        this._pData = null;
                    };
                    MemoryBuffer.prototype.resize = function (iSize) {
                        var pData = new Uint8Array(iSize);
                        if (iSize >= this.byteLength) {
                            pData.set(this._pData);
                        } else {
                            pData.set(this._pData.subarray(0, iSize));
                        }
                        this._pData = pData;
                        this.notifyAltered();
                        return true;
                    };
                    MemoryBuffer.prototype.lockImpl = function (iOffset, iLength, iLockFlags) {
                        return this._pData.subarray(iOffset, iOffset + iLength);
                    };
                    MemoryBuffer.prototype.readData = function (iOffset, iSize, ppDest) {
                        if (arguments.length < 3) {
                            ppDest = arguments[0];
                            iOffset = 0;
                            iSize = ppDest.byteLength;
                        }
 {
                            logger.setSourceLocation("MemoryBuffer.ts", 62);
                            logger.assert((iOffset + iSize) <= this.byteLength);
                        }
                        ;
                        memcpy((ppDest).buffer, (ppDest).byteOffset, this._pData.buffer, iOffset, iSize);
                        return true;
                    };
                    MemoryBuffer.prototype.writeData = function (pData, iOffset, iSize, bDiscardWholeBuffer) {
                        if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
                        if (arguments.length < 3) {
                            iSize = pData.byteLength;
                        }
                        if (arguments.length < 2) {
                            iOffset = 0;
                        }
 {
                            logger.setSourceLocation("MemoryBuffer.ts", 80);
                            logger.assert((iOffset + iSize) <= this.byteLength);
                        }
                        ;
                        if (isDefAndNotNull(pData)) {
                            memcpy(this._pData.buffer, iOffset, (pData).buffer, (pData).byteOffset, iSize);
                        }
                        this.notifyAltered();
                        return true;
                    };
                    return MemoryBuffer;
                })(HardwareBuffer);
                resources.MemoryBuffer = MemoryBuffer;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var VertexBuffer = (function (_super) {
                    __extends(VertexBuffer, _super);
                    function VertexBuffer() {
                        _super.call(this);
                        this._pVertexDataArray = [];
                        this._iDataCounter = 0;
                        this.inline = get;
                        this.inline = get;
                    }
                    VertexBuffer.prototype.type = function () {
                        return EVertexBufferTypes.UNKNOWN;
                    };
                    VertexBuffer.prototype.length = function () {
                        return this._pVertexDataArray.length;
                    };
                    VertexBuffer.prototype.create = function (iByteSize, iFlags, pData) {
                        _super.prototype.create.call(this, 0, iFlags || 0);
                        if ((((iFlags) & (EHardwareBufferFlags.BACKUP_COPY)) != 0)) {
                            this._pBackupCopy = new MemoryBuffer();
                            this._pBackupCopy.create(iByteSize);
                            this._pBackupCopy.writeData(pData, 0, iByteSize);
                        }
                        return true;
                    };
                    VertexBuffer.prototype.destroy = function () {
                        _super.prototype.destroy.call(this);
                        this._pBackupCopy.destroy();
                        this.freeVertexData();
                        this._iDataCounter = 0;
                    };
                    VertexBuffer.prototype.getVertexData = function (iOffset, iCount, pData) {
                        if (arguments.length < 2) {
                            return this._pVertexDataArray[arguments[0]];
                        }
                        var pDecl = createVertexDeclaration(pData);
                        var pVertexData = new data.VertexData(this, this._iDataCounter++, iOffset, iCount, pDecl);
                        this._pVertexDataArray.push(pVertexData);
                        this.notifyAltered();
                        return pVertexData;
                    };
                    VertexBuffer.prototype.getEmptyVertexData = function (iCount, pDeclData, ppVertexDataIn) {
                        var pDecl = null;
                        var pHole = [];
                        var i;
                        var pVertexData;
                        var iTemp;
                        var iStride = 0;
                        var iAligStart;
                        var iNewSize = 0;
                        while(true) {
                            pHole[0] = {
                                start: 0,
                                end: this.byteLength
                            };
                            for(var k = 0; k < this._pVertexDataArray.length; ++k) {
                                pVertexData = this._pVertexDataArray[k];
                                for(i = 0; i < pHole.length; i++) {
                                    if (pVertexData.byteOffset > pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength < pHole[i].end) {
                                        iTemp = pHole[i].end;
                                        pHole[i].end = pVertexData.byteOffset;
                                        pHole.splice(i + 1, 0, {
                                            start: pVertexData.byteOffset + pVertexData.byteLength,
                                            end: iTemp
                                        });
                                        i--;
                                    } else if (pVertexData.byteOffset == pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength < pHole[i].end) {
                                        pHole[i].start = pVertexData.byteOffset + pVertexData.byteLength;
                                    } else if (pVertexData.byteOffset > pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength == pHole[i].end) {
                                    } else if (pVertexData.byteOffset == pHole[i].start && pVertexData.byteLength == (pHole[i].end - pHole[i].start)) {
                                        pHole.splice(i, 1);
                                        i--;
                                    } else if (pVertexData.byteOffset < pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength > pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength < pHole[i].end) {
                                        pHole[i].start = pVertexData.byteOffset + pVertexData.byteLength;
                                    } else if (pVertexData.byteOffset < pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength > pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength == pHole[i].end) {
                                        pHole.splice(i, 1);
                                        i--;
                                    } else if (pVertexData.byteOffset + pVertexData.byteLength > pHole[i].end && pVertexData.byteOffset > pHole[i].start && pVertexData.byteOffset < pHole[i].end) {
                                        pHole[i].end = pVertexData.byteOffset;
                                    } else if (pVertexData.byteOffset + pVertexData.byteLength > pHole[i].end && pVertexData.byteOffset == pHole[i].start && pVertexData.byteOffset < pHole[i].end) {
                                        pHole.splice(i, 1);
                                        i--;
                                    } else if (pVertexData.byteOffset < pHole[i].start && pVertexData.byteOffset + pVertexData.byteLength > pHole[i].end) {
                                        i--;
                                    }
                                }
                            }
                            pHole.sort(function (a, b) {
                                return ((a.end - a.start) - (b.end - b.start));
                            });
                            if (!isInt(pDeclData)) {
                                pDecl = createVertexDeclaration(pDeclData);
                                iStride = pDecl.stride;
                            } else {
                                iStride = pDeclData;
                            }
                            for(i = 0; i < pHole.length; i++) {
                                iAligStart = this.isAligned() ? math.alignUp(pHole[i].start, math.nok(iStride, 4)) : math.alignUp(pHole[i].start, iStride);
                                if ((pHole[i].end - iAligStart) >= iCount * iStride) {
                                    if (arguments.length == 2) {
                                        pVertexData = new data.VertexData(this, this._iDataCounter++, iAligStart, iCount, pDeclData);
                                        this._pVertexDataArray.push(pVertexData);
                                        this.notifyAltered();
                                        return pVertexData;
                                    } else if (arguments.length == 3) {
                                        ((ppVertexDataIn).constructor).call(ppVertexDataIn, this, ppVertexDataIn.id, iAligStart, iCount, pDeclData);
                                        this._pVertexDataArray.push(ppVertexDataIn);
                                        this.notifyAltered();
                                        return ppVertexDataIn;
                                    }
                                    return null;
                                }
                            }
                            iNewSize = math.max(this.byteLength * 2, this.byteLength + iCount * iStride);
                            if (this.resize(iNewSize) == false) {
 {
                                    logger.setSourceLocation("core/pool/resources/VertexBuffer.ts", 181);
                                    logger.warning("cannot resize buffer from " + this.byteLength + " bytes to " + iNewSize + " bytes ");
                                }
                                ;
                                break;
                            }
                        }
                        return null;
                    };
                    VertexBuffer.prototype.freeVertexData = function (pVertexData) {
                        if (arguments.length == 0) {
                            for(var i = 0; i < this._pVertexDataArray.length; i++) {
                                this._pVertexDataArray[Number(i)].destroy();
                            }
                            this._pVertexDataArray = null;
                        } else {
                            for(var i = 0; i < this._pVertexDataArray.length; i++) {
                                if (this._pVertexDataArray[i] == pVertexData) {
                                    pVertexData.destroy();
                                    this._pVertexDataArray.splice(i, 1);
                                    this.notifyAltered();
                                    return true;
                                }
                            }
                            return false;
                        }
                        this.notifyAltered();
                        return true;
                    };
                    VertexBuffer.prototype.allocateData = function (pDeclData, pData) {
                        var pDecl = createVertexDeclaration(pDeclData);
                        var pVertexData;
                        var iCount = pData.byteLength / pDecl.stride;
 {
                            logger.setSourceLocation("core/pool/resources/VertexBuffer.ts", 225);
                            logger.assert(iCount === math.floor(iCount), 'Data size should be a multiple of the vertex declaration.');
                        }
                        ;
                        pVertexData = this.getEmptyVertexData(iCount, pDecl);
 {
                            logger.setSourceLocation("core/pool/resources/VertexBuffer.ts", 229);
                            logger.assert(!isNull(pVertexData), "Could not allocate vertex data!");
                        }
                        ;
                        pVertexData.setData(pData, 0, pDecl.stride);
                        return pVertexData;
                    };
                    return VertexBuffer;
                })(HardwareBuffer);
                resources.VertexBuffer = VertexBuffer;                
                inline;
                function isVBO(pBuffer) {
                    return pBuffer.type === EVertexBufferTypes.VBO;
                }
                inline;
                function isTBO(pBuffer) {
                    return pBuffer.type === EVertexBufferTypes.TBO;
                }
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLVertexBuffer = (function (_super) {
            __extends(WebGLVertexBuffer, _super);
            function WebGLVertexBuffer() {
                _super.call(this);
                this._pLockData = null;
                this._sCS = null;
                this.inline = get;
                this.inline = get;
                this.inline = getWebGLBuffer();
                this.WebGLBuffer = {
                    return: this._pWebGLBuffer
                };
            }
            WebGLVertexBuffer.prototype.type = function () {
                return EVertexBufferTypes.VBO;
            };
            WebGLVertexBuffer.prototype.byteLength = function () {
                return this._iByteSize;
            };
            WebGLVertexBuffer.prototype.create = function (iByteSize, iFlags, pData) {
                if (typeof iFlags === "undefined") { iFlags = EHardwareBufferFlags.STATIC; }
                if (typeof pData === "undefined") { pData = null; }
                iByteSize = math.max(iByteSize, 1024);
                if ((((iFlags) & (EHardwareBufferFlags.READABLE)) != 0)) {
                    ((iFlags) |= (EHardwareBufferFlags.BACKUP_COPY));
                }
                _super.prototype.create.call(this, iByteSize, iFlags, pData);
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var i;
 {
                    logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 45);
                    logger.assert(this._pWebGLBuffer == null, "webgl buffer already allocated");
                }
                ;
                this._iByteSize = iByteSize;
                this._iFlags = iFlags;
                pWebGLContext = pWebGLRenderer.getWebGLContext();
 {
                    logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 51);
                    logger.assert(pWebGLContext !== null, "cannot grab webgl context");
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 54);
                    logger.assert(!this.isSoftware(), "no sftware rendering");
                }
                ;
                if (this.isBackupPresent()) {
                    ((this._iFlags) |= (EHardwareBufferFlags.READABLE));
                }
 {
                    logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 62);
                    logger.assert(!pData || pData.byteLength <= iByteSize, "Размер переданного массива больше переданного размера буфера");
                }
                ;
                this._pWebGLBuffer = pWebGLRenderer.createWebGLBuffer();
                if (!this._pWebGLBuffer) {
 {
                        logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 68);
                        logger.criticalError("Не удалось создать буфер");
                    }
                    ;
                    this.destroy();
                    return false;
                }
                pWebGLRenderer.bindWebGLBuffer(0x8892, this._pWebGLBuffer);
                pWebGLContext.bufferData(0x8892, this._iByteSize, getWebGLUsage(this._iFlags));
                if (isDefAndNotNull(pData)) {
                    pWebGLContext.bufferSubData(0x8892, 0, pData.buffer);
                }
                return true;
            };
            WebGLVertexBuffer.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                var pWebGLRenderer = this.getEngine().getRenderer();
                pWebGLRenderer.deleteWebGLBuffer(this._pWebGLBuffer);
                this._pWebGLBuffer = null;
                this._iByteSize = 0;
            };
            WebGLVertexBuffer.prototype.readData = function (iOffset, iSize, ppDest) {
 {
                    logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 102);
                    logger.assert(!isNull(this._pWebGLBuffer), "Буффер еще не создан");
                }
                ;
                if (!this.isBackupPresent()) {
                    return false;
                }
                if (arguments.length === 1) {
                    this._pBackupCopy.readData(arguments[0]);
                } else {
                    this._pBackupCopy.readData(iOffset, iSize, ppDest);
                }
                return true;
            };
            WebGLVertexBuffer.prototype.writeData = function (pData, iOffset, iSize, bDiscardWholeBuffer) {
                if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
 {
                    logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 122);
                    logger.assert(!isNull(this._pWebGLBuffer), "WebGL buffer not exists");
                }
                ;
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLBuffer(0x8892, this._pWebGLBuffer);
 {
                    logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 129);
                    logger.assert(pData.byteLength <= iSize, "Размер переданного массива больше переданного размера");
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 130);
                    logger.assert(this.byteLength >= iOffset + iSize, "Данные выйдут за предел буфера");
                }
                ;
                var pU8Data = null;
                if (isArrayBuffer(pData)) {
                    pU8Data = new Uint8Array(pData);
                } else {
                    pU8Data = new Uint8Array(pData.buffer, pData.byteOffset, pData.byteLength);
                }
                pU8Data = pU8Data.subarray(0, iSize);
                pWebGLContext.bufferSubData(0x8892, iOffset, pU8Data);
                if (this.isBackupPresent()) {
                    this._pBackupCopy.writeData(pU8Data, iOffset);
                }
                this.notifyAltered();
                return true;
            };
            WebGLVertexBuffer.prototype.resize = function (iSize) {
                var eUsage;
                var pData;
                var iMax = 0;
                var pVertexData;
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                if (!this.isBackupPresent()) {
 {
                        logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 164);
                        logger.log("Not resized, because backup not present!");
                    }
                    ;
                    return false;
                }
 {
                    logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 168);
                    logger.log("WebGLVertexBuffer resized from " + this.byteLength + " to " + iSize + "(" + this.getGuid() + ")");
                }
                ;
                if (iSize < this.byteLength) {
                    for(var k = 0; k < this._pVertexDataArray.length; ++k) {
                        pVertexData = this._pVertexDataArray[k];
                        if (pVertexData.byteOffset + pVertexData.byteLength > iMax) {
                            iMax = pVertexData.byteOffset + pVertexData.byteLength;
                        }
                    }
 {
                        logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 181);
                        logger.assert(iMax <= iSize, "Уменьшение невозможно. Страая разметка не укладывается в новый размер");
                    }
                    ;
                }
                if (pWebGLContext.isBuffer(this._pWebGLBuffer)) {
                    pWebGLRenderer.deleteWebGLBuffer(this._pWebGLBuffer);
                }
                eUsage = getWebGLUsage(this._iFlags);
                this._pWebGLBuffer = pWebGLRenderer.createWebGLBuffer();
                if (!this._pWebGLBuffer) {
 {
                        logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 193);
                        logger.criticalError("Не удалось создать буфер");
                    }
                    ;
                    this.destroy();
                    return false;
                }
                pWebGLRenderer.bindWebGLBuffer(0x8892, this._pWebGLBuffer);
                pWebGLContext.bufferData(0x8892, iSize, eUsage);
                pData = new Uint8Array(this._iByteSize);
                if (!this.readData(pData)) {
 {
                        logger.setSourceLocation("webgl/WebGLVertexBuffer.ts", 206);
                        logger.warning("cannot read data from buffer");
                    }
                    ;
                    return false;
                }
                this.writeData(pData, 0, this._iByteSize);
                this._pBackupCopy.resize(iSize);
                this._iByteSize = iSize;
                this.notifyAltered();
                return true;
            };
            WebGLVertexBuffer.prototype.lockImpl = function (iOffset, iSize, iLockFlags) {
                var pRetData = new Uint8Array(iSize);
                this.readData(iOffset, iSize, pRetData);
                this._pLockData = pRetData;
                return pRetData;
            };
            WebGLVertexBuffer.prototype.unlockImpl = function () {
                this.writeData(this._pLockData, this._iLockStart, this._iLockSize);
            };
            WebGLVertexBuffer.prototype.copyBackupToRealImpl = function (pRealData, pBackupData, iLockFlags) {
                pRealData.set(pBackupData);
            };
            return WebGLVertexBuffer;
        })(core.pool.resources.VertexBuffer);
        webgl.WebGLVertexBuffer = WebGLVertexBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLVertexTexture = (function (_super) {
            __extends(WebGLVertexTexture, _super);
            function WebGLVertexTexture() {
                _super.call(this);
                this._iWidth = 0;
                this._iHeight = 0;
                this._pWebGLTexture = null;
                this._ePixelFormat = EPixelFormats.FLOAT32_RGBA;
                this._bForceUpdateBackupCopy = true;
                this._pHeader = null;
                this._pLockData = null;
                this.inline = get;
                this.inline = get;
                this.inline = getWebGLTexture();
                this.WebGLTexture = {
                    return: this._pWebGLTexture
                };
            }
            WebGLVertexTexture.prototype.type = function () {
                return EVertexBufferTypes.TBO;
            };
            WebGLVertexTexture.prototype.byteLength = function () {
                return pixelUtil.getMemorySize(this._iWidth, this._iHeight, 1, this._ePixelFormat);
            };
            WebGLVertexTexture.prototype.create = function (iByteSize, iFlags, pData) {
                if (typeof iFlags === "undefined") { iFlags = EHardwareBufferFlags.STATIC; }
                if (typeof pData === "undefined") { pData = null; }
                var iMinWidth = 32;
                var iWidth, iHeight;
                var pTextureData = null;
                var pDataU8 = pData;
                var iAdditionalHeaderSize = (isDefAndNotNull(pData)) ? 32 : 0;
                iByteSize = math.max(iByteSize + iAdditionalHeaderSize, pixelUtil.getMemorySize(iMinWidth, iMinWidth, 1, this._ePixelFormat));
                if ((((iFlags) & (EHardwareBufferFlags.READABLE)) != 0)) {
                    ((iFlags) |= (EHardwareBufferFlags.BACKUP_COPY));
                }
                _super.prototype.create.call(this, iByteSize, iFlags, pData);
                var pPOTSize = math.calcPOTtextureSize(math.ceil(iByteSize / pixelUtil.getNumElemBytes(this._ePixelFormat)));
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var i;
                iWidth = pPOTSize[0];
                iHeight = pPOTSize[1];
 {
                    logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 77);
                    logger.assert(this._pWebGLTexture == null, "webgl texture already allocated");
                }
                ;
                this._iWidth = iWidth;
                this._iHeight = iHeight;
                this._iFlags = iFlags;
 {
                    logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 83);
                    logger.assert(pWebGLContext !== null, "cannot grab webgl context");
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 86);
                    logger.assert(!this.isSoftware(), "no software rendering");
                }
                ;
                if (this.isBackupPresent()) {
                    ((this._iFlags) |= (EHardwareBufferFlags.READABLE));
                }
 {
                    logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 94);
                    logger.assert(!pData || pData.byteLength <= iByteSize, "Размер переданного массива больше переданного размера буфера");
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 97);
                    logger.assert(loadExtension(pWebGLContext, "OES_texture_float"), "OES_texture_float extension is necessary for correct work.");
                }
                ;
                this._pWebGLTexture = pWebGLRenderer.createWebGLTexture();
                this._eWebGLFormat = getWebGLFormat(this._ePixelFormat);
                this._eWebGLType = getWebGLDataType(this._ePixelFormat);
                if (!this._pWebGLTexture) {
 {
                        logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 104);
                        logger.criticalError("Не удалось создать буфер");
                    }
                    ;
                    this.destroy();
                    return false;
                }
                if (isDefAndNotNull(pData)) {
                    if (pData.BYTES_PER_ELEMENT > 1) {
                        pDataU8 = new Uint8Array(pData, pData.byteOffset, pData.byteLength);
                    }
                    pTextureData = new Uint8Array(this.byteLength);
                    pTextureData.set(pDataU8);
                }
                pWebGLRenderer.bindWebGLTexture(0x0DE1, this._pWebGLTexture);
                pWebGLContext.texImage2D(0x0DE1, 0, this._eWebGLFormat, this._iWidth, this._iHeight, 0, this._eWebGLFormat, this._eWebGLType, pTextureData);
                pWebGLContext.texParameterf(pWebGLContext.TEXTURE_2D, pWebGLContext.TEXTURE_MAG_FILTER, pWebGLContext.NEAREST);
                pWebGLContext.texParameterf(pWebGLContext.TEXTURE_2D, pWebGLContext.TEXTURE_MIN_FILTER, pWebGLContext.NEAREST);
                pWebGLContext.texParameterf(pWebGLContext.TEXTURE_2D, pWebGLContext.TEXTURE_WRAP_S, pWebGLContext.CLAMP_TO_EDGE);
                pWebGLContext.texParameterf(pWebGLContext.TEXTURE_2D, pWebGLContext.TEXTURE_WRAP_T, pWebGLContext.CLAMP_TO_EDGE);
                this._pHeader = this.allocateData([
                    VE_VEC2(DeclarationUsages.TEXTURE_HEADER)
                ], this._header());
                var pProgram = this.getManager().shaderProgramPool.findResource("WEBGL_vertex_texture_update");
                if (isNull(pProgram)) {
                    pProgram = this.getManager().shaderProgramPool.createResource("WEBGL_vertex_texture_update");
                    pProgram.create("																									\n	        	uniform sampler2D sourceTexture;																	\n				attribute vec4  VALUE;																				\n				attribute float INDEX;																				\n				attribute float SHIFT;																				\n				                      																				\n				uniform vec2 size;																					\n				varying vec4 color;																					\n				                   																					\n				void main(void){																					\n				    vec4 value = VALUE;																				\n				    float  serial = INDEX;																			\n				                          																			\n				    int shift = int(SHIFT);																			\n				    if (shift != 0) {																				\n				        color = texture2D(sourceTexture,                                        					\n				            vec2((mod(serial, size.x) +.5 ) / size.x, (floor(serial / size.x) + .5) / size.y)		\n				            );																						\n																													\n																													\n				        if (shift == 1) {																			\n				            color = vec4(color.r, value.gba);														\n				        }																							\n				        else if (shift == 2) {																		\n				            color = vec4(color.rg, value.ba);														\n				        }																							\n				        else if (shift == 3) {																		\n				            color = vec4(color.rgb, value.a);														\n				        }																							\n				        else if (shift == -1) {																		\n				            color = vec4(value.r, color.gba);														\n				        }																							\n				        else if (shift == -2) {																		\n				            color = vec4(value.rg, color.ba);														\n				        }																							\n				        else {																						\n				            color = vec4(value.rgb, color.a);														\n				        }																							\n				    }																								\n				    else {																							\n				        color = value;																				\n				    }																								\n				    gl_PointSize = 1.;																				\n				    gl_Position = vec4(2. * (mod(serial, size.x) + .5) / size.x - 1.,								\n				                    2. * (floor(serial / size.x)  + .5) / size.y - 1., 0., 1.);						\n				}																									\n				", "									\n				#ifdef GL_ES                        \n				    precision highp float;          \n				#endif								\n				varying vec4 color;                 \n				                                    \n				void main(void) {                   \n				    gl_FragColor = color;           \n				}                                   \n				");
                }
                pProgram = this.getManager().shaderProgramPool.findResource("WEBGL_vertex_texture_resize");
                if (isNull(pProgram)) {
                    pProgram = this.getManager().shaderProgramPool.createResource("WEBGL_vertex_texture_resize");
                    pProgram.create("																									\n	        	attribute float INDEX;																				\n	        																										\n	        	uniform sampler2D sourceTexture;																	\n				                      																				\n				uniform vec2 v2fSrcTexSize;																			\n				uniform vec2 v2fDstTexSize;																			\n																													\n				varying vec4 v4fValue;																				\n				                   																					\n				void main(void){																					\n					                       																			\n				    vec2 v2fSrcPosition = vec2((mod(INDEX, v2fSrcTexSize.x) + 0.5)/v2fSrcTexSize.x,					\n				    						   (floor(INDEX/v2fSrcTexSize.x) + 0.5)/v2fSrcTexSize.y);				\n	        																										\n	        		vec2 v2fDstPosition = vec2((mod(INDEX, v2fDstTexSize.x) + 0.5)/v2fDstTexSize.x,					\n				    						   (floor(INDEX/v2fDstTexSize.x) + 0.5)/v2fDstTexSize.y);				\n	        																										\n	        		v4fValue = texture2D(sourceTexture, v2fSrcPosition);											\n	        																										\n	        		gl_PointSize = 1.;																				\n	        		gl_Position = vec4(v2fDstPosition*2. - 1., 0., 1.);												\n				}																									\n				", "									\n				#ifdef GL_ES                        \n				    precision highp float;          \n				#endif								\n				varying vec4 v4fValue;              \n				                                    \n				void main(void) {                   \n				    gl_FragColor = v4fValue;        \n				}                                   \n				");
                }
                if (isNull(WebGLVertexTexture._pWebGLBuffer1)) {
                    WebGLVertexTexture._pWebGLBuffer1 = pWebGLRenderer.createWebGLBuffer();
                }
                if (isNull(WebGLVertexTexture._pWebGLBuffer2)) {
                    WebGLVertexTexture._pWebGLBuffer2 = pWebGLRenderer.createWebGLBuffer();
                }
                if (isNull(WebGLVertexTexture._pWebGLBuffer3)) {
                    WebGLVertexTexture._pWebGLBuffer3 = pWebGLRenderer.createWebGLBuffer();
                }
                return true;
            };
            WebGLVertexTexture.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                pWebGLRenderer.deleteWebGLTexture(this._pWebGLTexture);
                this._pWebGLTexture = null;
            };
            WebGLVertexTexture.prototype.readData = function (iOffset, iSize, ppDest) {
 {
                    logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 271);
                    logger.assert(!isNull(this._pWebGLTexture), "Буффер еще не создан");
                }
                ;
                if (!this.isBackupPresent()) {
                    return false;
                }
                if (arguments.length === 1) {
                    this._pBackupCopy.readData(arguments[0]);
                } else {
                    this._pBackupCopy.readData(iOffset, iSize, ppDest);
                }
                return true;
            };
            WebGLVertexTexture.prototype.writeData = function (pData, iOffset, iSize, bDiscardWholeBuffer) {
                if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
                var iTypeSize = pixelUtil.getComponentTypeBits(this._ePixelFormat) / 8, nElementsPerPix = pixelUtil.getComponentCount(this._ePixelFormat), iFrom, iCount;
                var pBufferData;
                var iLeftShift, iRightShift, iBeginPix, iEndPix, nPixels, nElements;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var pDataU8 = pData;
 {
                    logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 309);
                    logger.assert(bDiscardWholeBuffer === false, "Discard option temporary unsupported.");
                }
                ;
                if (pData.BYTES_PER_ELEMENT > 1) {
                    pDataU8 = new Uint8Array(pData.buffer, pData.byteOffset, pData.byteLength);
                }
                iOffset = iOffset || 0;
                iSize = iSize || pData.byteLength;
                pDataU8 = pDataU8.subarray(0, iSize);
                if (this.byteLength < iOffset + iSize) {
                    this.resize(iOffset + iSize);
                }
                if (this.isBackupPresent() && this._bForceUpdateBackupCopy) {
                    this._pBackupCopy.writeData(pDataU8, iOffset);
                }
                this._bForceUpdateBackupCopy = true;
 {
                    logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 330);
                    logger.assert(iOffset % iTypeSize === 0 && iSize % iTypeSize === 0, "Incorrect data size or offset");
                }
                ;
                iFrom = iOffset / iTypeSize;
                iCount = iSize / iTypeSize;
                iLeftShift = iFrom % nElementsPerPix;
                iRightShift = ((iFrom + iCount) % nElementsPerPix);
                iBeginPix = Math.floor(iFrom / nElementsPerPix);
                iEndPix = Math.floor((iFrom + iCount) / nElementsPerPix);
                nPixels = Math.ceil((iFrom + iCount) / nElementsPerPix) - Math.floor(iFrom / nElementsPerPix);
                nElements = nPixels * nElementsPerPix;
                pBufferData = new Float32Array(pDataU8.buffer, pDataU8.byteOffset);
                if (iLeftShift === 0 && iRightShift === 0) {
                    var iWidth = this._iWidth;
                    var iYmin = Math.floor(iBeginPix / iWidth);
                    var iYmax = Math.ceil(iEndPix / iWidth);
                    var iXbegin = iBeginPix % iWidth;
                    var iXend = iEndPix % iWidth;
                    var iHeight = iYmax - iYmin;
                    var iBeginElement = 0, iEndElement = 0;
                    iXend = (iXend === 0 ? iWidth : iXend);
                    var me = this;
                    function updatePixelRect(iX, iY, iW, iH) {
                        iBeginElement = iEndElement;
                        iEndElement = iW * iH * nElementsPerPix + iEndElement;
                        pWebGLRenderer.bindWebGLTexture(0x0DE1, me._pWebGLTexture);
                        pWebGLContext.texSubImage2D(0x0DE1, 0, iX, iY, iW, iH, me._eWebGLFormat, me._eWebGLType, pBufferData.subarray(iBeginElement, iEndElement));
                    }
                    ;
                    if (iHeight === 1) {
                        updatePixelRect(iXbegin, iYmin, iXend - iXbegin, 1);
                    } else {
                        updatePixelRect(iXbegin, iYmin, iWidth - iXbegin, 1);
                        if (iHeight > 2) {
                            updatePixelRect(0, iYmin + 1, iWidth, iHeight - 2);
                        }
                        updatePixelRect(0, iYmax - 1, iXend, 1);
                    }
                } else if (this.isBackupPresent()) {
                    var iRealOffset = iBeginPix * nElementsPerPix * iTypeSize;
                    var iRealSize = nElements * iTypeSize;
                    var pTempData = this._pBackupCopy.lock(iRealOffset, iRealSize);
                    this._pBackupCopy.unlock();
                    this._bForceUpdateBackupCopy = false;
                    return this.writeData(pTempData, iRealOffset, iRealSize);
                } else {
                    var pMarkupDataIndex = new Float32Array(nPixels);
                    var pMarkupDataShift = new Float32Array(nPixels);
                    var pRealData = new Float32Array(nElements);
                    pMarkupDataIndex[0] = iBeginPix;
                    pMarkupDataShift[0] = iLeftShift;
                    pMarkupDataIndex[nPixels - 1] = iBeginPix + nPixels - 1;
                    pMarkupDataShift[nPixels - 1] = -iRightShift;
                    for(var i = 1; i < nPixels - 1; ++i) {
                        pMarkupDataIndex[i] = iBeginPix + i;
                    }
                    for(var i = 0; i < iCount; i++) {
                        pRealData[iLeftShift + i] = pBufferData[i];
                    }
                    var pOldFrameBuffer = pWebGLContext.getParameter(0x8CA6);
                    var pWebGLFramebuffer = pWebGLRenderer.createWebGLFramebuffer();
                    var pWebGLProgram = this.getManager().shaderProgramPool.findResource("WEBGL_vertex_texture_update");
                    var pValueBuffer = WebGLVertexTexture._pWebGLBuffer1;
                    var pMarkupIndexBuffer = WebGLVertexTexture._pWebGLBuffer2;
                    var pMarkupShiftBuffer = WebGLVertexTexture._pWebGLBuffer3;
 {
                        logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 428);
                        logger.assert(isDef(pWebGLProgram), "cound not find WEBGL_vertex_texture_update program");
                    }
                    ;
                    pWebGLRenderer.disableAllWebGLVertexAttribs();
                    pWebGLRenderer.bindWebGLFramebuffer(0x8D40, pWebGLFramebuffer);
                    pWebGLRenderer.useWebGLProgram(pWebGLProgram.getWebGLProgram());
                    pWebGLContext.disable(0x0B71);
                    pWebGLContext.disable(0x0C11);
                    pWebGLContext.disable(0x0BE2);
                    pWebGLContext.disable(0x0B44);
                    var iValueAttribLocation = pWebGLProgram.getWebGLAttributeLocation("VALUE");
                    var iIndexAttribLocation = pWebGLProgram.getWebGLAttributeLocation("INDEX");
                    var iShiftAttribLocation = pWebGLProgram.getWebGLAttributeLocation("SHIFT");
                    pWebGLContext.enableVertexAttribArray(iValueAttribLocation);
                    pWebGLContext.enableVertexAttribArray(iIndexAttribLocation);
                    pWebGLContext.enableVertexAttribArray(iShiftAttribLocation);
                    pWebGLContext.framebufferTexture2D(0x8D40, 0x8CE0, 0x0DE1, this._pWebGLTexture, 0);
                    pWebGLRenderer.bindWebGLBuffer(0x8892, pValueBuffer);
                    pWebGLContext.bufferData(0x8892, pRealData, 0x88E0);
                    pWebGLContext.vertexAttribPointer(iValueAttribLocation, 4, 0x1406, false, 0, 0);
                    pWebGLRenderer.bindWebGLBuffer(0x8892, pMarkupIndexBuffer);
                    pWebGLContext.bufferData(0x8892, pMarkupDataIndex, 0x88E0);
                    pWebGLContext.vertexAttribPointer(iIndexAttribLocation, 1, 0x1406, false, 0, 0);
                    pWebGLRenderer.bindWebGLBuffer(0x8892, pMarkupShiftBuffer);
                    pWebGLContext.bufferData(0x8892, pMarkupDataShift, 0x88E0);
                    pWebGLContext.vertexAttribPointer(iShiftAttribLocation, 1, 0x1406, false, 0, 0);
                    pWebGLRenderer.activateWebGLTexture(0x84C0);
                    pWebGLRenderer.bindWebGLTexture(0x0DE1, this._pWebGLTexture);
                    pWebGLProgram.setInt("sourceTexture", 0);
                    pWebGLProgram.setVec2("size", this._iWidth, this._iHeight);
                    pWebGLContext.viewport(0, 0, this._iWidth, this._iHeight);
                    pWebGLContext.drawArrays(0x0000, 0, nPixels);
                    pWebGLContext.flush();
                    pWebGLContext.framebufferTexture2D(0x8D40, 0x8CE0, 0x0DE1, null, 0);
                    pWebGLRenderer.bindWebGLBuffer(0x8892, null);
                    pWebGLContext.disableVertexAttribArray(iValueAttribLocation);
                    pWebGLContext.disableVertexAttribArray(iIndexAttribLocation);
                    pWebGLContext.disableVertexAttribArray(iShiftAttribLocation);
                    pWebGLRenderer.bindWebGLFramebuffer(0x8D40, pOldFrameBuffer);
                    pWebGLRenderer.deleteWebGLFramebuffer(pWebGLFramebuffer);
                }
                return true;
            };
            WebGLVertexTexture.prototype.resize = function (iSize) {
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var iMax = 0;
                if (iSize < this.byteLength) {
                    for(var k = 0; k < this._pVertexDataArray.length; ++k) {
                        var pVertexData = this._pVertexDataArray[k];
                        if (pVertexData.byteOffset + pVertexData.byteLength > iMax) {
                            iMax = pVertexData.byteOffset + pVertexData.byteLength;
                        }
                    }
                    if (iMax > iSize) {
 {
                            logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 510);
                            logger.assert(false, "Уменьшение невозможно. Страая разметка не укладывается в новый размер");
                        }
                        ;
                        return false;
                    }
                }
                var pPOTSize = math.calcPOTtextureSize(math.ceil(iSize / pixelUtil.getNumElemBytes(this._ePixelFormat)));
                pPOTSize[0] = (pPOTSize[0] < 32) ? 32 : pPOTSize[0];
                pPOTSize[1] = (pPOTSize[1] < 32) ? 32 : pPOTSize[1];
                if (pPOTSize[0] !== this._iWidth || pPOTSize[1] !== this._iHeight) {
                    if (this.isBackupPresent()) {
                        this._iWidth = pPOTSize[0];
                        this._iHeight = pPOTSize[1];
                        pWebGLRenderer.bindWebGLTexture(0x0DE1, this._pWebGLTexture);
                        pWebGLContext.texImage2D(0x0DE1, 0, this._eWebGLFormat, this._iWidth, this._iHeight, 0, this._eWebGLFormat, this._eWebGLType, null);
                        var iByteLength = this.byteLength;
                        this._pBackupCopy.resize(iByteLength);
                        var pData = new Uint8Array(iByteLength);
                        if (!this.readData(pData)) {
 {
                                logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 538);
                                logger.warning("cannot read data from buffer");
                            }
                            ;
                            return false;
                        }
                        this.writeData(pData, 0, iByteLength);
                    } else {
                        var pWebGLProgram = this.getManager().shaderProgramPool.findResource("WEBGL_vertex_texture_resize");
 {
                            logger.setSourceLocation("webgl/WebGLVertexTexture.ts", 547);
                            logger.assert(isDef(pWebGLProgram), "cound not find WEBGL_vertex_texture_resize program");
                        }
                        ;
                        pWebGLRenderer.useWebGLProgram(pWebGLProgram.getWebGLProgram());
                        var pTexture = pWebGLRenderer.createWebGLTexture();
                        pWebGLRenderer.activateWebGLTexture(0x84C1);
                        pWebGLRenderer.bindWebGLTexture(0x0DE1, pTexture);
                        pWebGLContext.texImage2D(0x0DE1, 0, this._eWebGLFormat, pPOTSize[0], pPOTSize[1], 0, this._eWebGLFormat, this._eWebGLType, null);
                        pWebGLContext.texParameterf(pWebGLContext.TEXTURE_2D, pWebGLContext.TEXTURE_MAG_FILTER, pWebGLContext.NEAREST);
                        pWebGLContext.texParameterf(pWebGLContext.TEXTURE_2D, pWebGLContext.TEXTURE_MIN_FILTER, pWebGLContext.NEAREST);
                        pWebGLContext.texParameterf(pWebGLContext.TEXTURE_2D, pWebGLContext.TEXTURE_WRAP_S, pWebGLContext.CLAMP_TO_EDGE);
                        pWebGLContext.texParameterf(pWebGLContext.TEXTURE_2D, pWebGLContext.TEXTURE_WRAP_T, pWebGLContext.CLAMP_TO_EDGE);
                        var pOldFrameBuffer = pWebGLContext.getParameter(0x8CA6);
                        var pWebGLFramebuffer = pWebGLRenderer.createWebGLFramebuffer();
                        pWebGLRenderer.bindWebGLFramebuffer(0x8D40, pWebGLFramebuffer);
                        pWebGLContext.framebufferTexture2D(0x8D40, 0x8CE0, 0x0DE1, pTexture, 0);
                        if (iSize >= this.byteLength) {
                            for(var k = 0; k < this._pVertexDataArray.length; ++k) {
                                var pVertexData = this._pVertexDataArray[k];
                                if (pVertexData.byteOffset + pVertexData.byteLength > iMax) {
                                    iMax = pVertexData.byteOffset + pVertexData.byteLength;
                                }
                            }
                        }
                        var iTypeSize = pixelUtil.getComponentTypeBits(this._ePixelFormat) / 8;
                        var nElementsPerPix = pixelUtil.getComponentCount(this._ePixelFormat);
                        var nPixels = math.ceil(iMax / iTypeSize / nElementsPerPix);
                        var pIndexBufferData = new Float32Array(nPixels);
                        for(var i = 0; i < nPixels; i++) {
                            pIndexBufferData[i] = i;
                        }
                        pWebGLRenderer.disableAllWebGLVertexAttribs();
                        var iIndexAttribLocation = pWebGLProgram.getWebGLAttributeLocation("INDEX");
                        pWebGLContext.enableVertexAttribArray(iIndexAttribLocation);
                        if (isNull(WebGLVertexTexture._pWebGLBuffer1)) {
                            WebGLVertexTexture._pWebGLBuffer1 = pWebGLRenderer.createWebGLBuffer();
                        }
                        var pIndexBuffer = WebGLVertexTexture._pWebGLBuffer1;
                        pWebGLRenderer.bindWebGLBuffer(0x8892, pIndexBuffer);
                        pWebGLContext.bufferData(0x8892, pIndexBufferData, 0x88E0);
                        pWebGLContext.vertexAttribPointer(iIndexAttribLocation, 1, 0x1406, false, 0, 0);
                        pWebGLContext.disable(0x0B71);
                        pWebGLContext.disable(0x0C11);
                        pWebGLContext.disable(0x0BE2);
                        pWebGLContext.disable(0x0B44);
                        pWebGLRenderer.activateWebGLTexture(0x84C0);
                        pWebGLRenderer.bindWebGLTexture(0x0DE1, this._pWebGLTexture);
                        pWebGLProgram.setInt("sourceTexture", 0);
                        pWebGLProgram.setVec2("v2fSrcTexSize", this._iWidth, this._iHeight);
                        pWebGLProgram.setVec2("v2fDstTexSize", pPOTSize[0], pPOTSize[1]);
                        pWebGLContext.viewport(0, 0, pPOTSize[0], pPOTSize[1]);
                        pWebGLContext.drawArrays(0x0000, 0, nPixels);
                        pWebGLContext.flush();
                        pWebGLContext.framebufferTexture2D(0x8D40, 0x8CE0, 0x0DE1, null, 0);
                        pWebGLContext.disableVertexAttribArray(iIndexAttribLocation);
                        pWebGLRenderer.bindWebGLBuffer(0x8892, null);
                        pWebGLRenderer.bindWebGLFramebuffer(0x8D40, pOldFrameBuffer);
                        pWebGLRenderer.deleteWebGLFramebuffer(pWebGLFramebuffer);
                        pWebGLRenderer.deleteWebGLTexture(this._pWebGLTexture);
                        this._pWebGLTexture = pTexture;
                        this._iWidth = pPOTSize[0];
                        this._iHeight = pPOTSize[1];
                    }
                }
                this._pHeader.setData(this._header());
                this.notifyAltered();
                return true;
            };
            WebGLVertexTexture.prototype.lockImpl = function (iOffset, iSize, iLockFlags) {
                var pRetData = new Uint8Array(iSize);
                this.readData(iOffset, iSize, pRetData);
                this._pLockData = pRetData;
                return pRetData;
            };
            WebGLVertexTexture.prototype.unlockImpl = function () {
                this.writeData(this._pLockData, this._iLockStart, this._iLockSize);
            };
            WebGLVertexTexture.prototype.copyBackupToRealImpl = function (pRealData, pBackupData, iLockFlags) {
                pRealData.set(pBackupData);
            };
            WebGLVertexTexture.prototype._header = function (iTextureSizeX, iTextureSizeY) {
                if (typeof iTextureSizeX === "undefined") { iTextureSizeX = this._iWidth; }
                if (typeof iTextureSizeY === "undefined") { iTextureSizeY = this._iHeight; }
                var pHeader = new Float32Array(8);
                pHeader[0] = iTextureSizeX;
                pHeader[1] = iTextureSizeY;
                pHeader[2] = 1 / iTextureSizeX;
                pHeader[3] = 1 / iTextureSizeY;
                pHeader[4] = iTextureSizeX * iTextureSizeY;
                pHeader[5] = pHeader[4] * pixelUtil.getNumElemBytes(this._ePixelFormat);
                return pHeader;
            };
            WebGLVertexTexture._pWebGLBuffer1 = null;
            WebGLVertexTexture._pWebGLBuffer2 = null;
            WebGLVertexTexture._pWebGLBuffer3 = null;
            return WebGLVertexTexture;
        })(core.pool.resources.VertexBuffer);
        webgl.WebGLVertexTexture = WebGLVertexTexture;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (data) {
        var IndexData = (function () {
            function IndexData(pIndexBuffer, id, iOffset, iCount, ePrimitiveType, eElementsType) {
                if (typeof ePrimitiveType === "undefined") { ePrimitiveType = EPrimitiveTypes.TRIANGLELIST; }
                if (typeof eElementsType === "undefined") { eElementsType = EDataTypes.UNSIGNED_SHORT; }
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = getPrimitiveType();
                this.EPrimitiveTypes = {
                    return: this._ePrimitiveType
                };
                this.inline = getPrimitiveCount(iIndexCount, number = this.length);
                this.number = {
                    return: IndexData.getPrimitiveCount(this._ePrimitiveType, iIndexCount)
                };
                this.inline = getBufferHandle();
                this.number = {
                    return: this._pIndexBuffer.resourceHandle
                };
 {
                    logger.setSourceLocation("data/IndexData.ts", 36);
                    logger.assert(eElementsType == EDataTypes.UNSIGNED_SHORT || eElementsType == EDataTypes.UNSIGNED_BYTE || eElementsType == EDataTypes.UNSIGNED_INT, "supported only short, byte, uint data types.");
                }
                ;
                this._pIndexBuffer = pIndexBuffer;
                this._iOffset = iOffset;
                this._iLength = iCount;
                this._iId = id;
                this._ePrimitiveType = ePrimitiveType;
                this._eElementsType = eElementsType;
 {
                    logger.setSourceLocation("data/IndexData.ts", 46);
                    logger.assert(pIndexBuffer.byteLength >= this.byteLength + this.byteOffset, "out of buffer limits.");
                }
                ;
            }
            IndexData.prototype.id = function () {
                return this._iId;
            };
            IndexData.prototype.type = function () {
                return this._eElementsType;
            };
            IndexData.prototype.length = function () {
                return this._iLength;
            };
            IndexData.prototype.bytesPerIndex = function () {
                return getTypeSize(this._eElementsType);
            };
            IndexData.prototype.byteOffset = function () {
                return this._iOffset;
            };
            IndexData.prototype.byteLength = function () {
                return this._iLength * this.bytesPerIndex;
            };
            IndexData.prototype.buffer = function () {
                return this._pIndexBuffer;
            };
            IndexData.prototype.getData = function (iOffset, iSize) {
 {
                    logger.setSourceLocation("data/IndexData.ts", 51);
                    logger.assert(iOffset + iSize <= this.byteLength, "out of buffer limits");
                }
                ;
                var pBuffer = new Uint8Array(iSize);
                if (this._pIndexBuffer.readData(this.byteOffset + iOffset, iSize, pBuffer)) {
                    return pBuffer.buffer;
                }
 {
                    logger.setSourceLocation("data/IndexData.ts", 58);
                    logger.error("cannot read data from index buffer");
                }
                ;
                return null;
            };
            IndexData.prototype.getTypedData = function (iStart, iCount) {
 {
                    logger.setSourceLocation("data/IndexData.ts", 64);
                    logger.assert((iStart + iCount) <= this._iLength, "out of buffer limits");
                }
                ;
                var iTypeSize = getTypeSize(this._eElementsType);
                var iOffset = iStart * iTypeSize;
                var iSize = iCount * iTypeSize;
                var pBuffer = new Uint8Array(iSize);
                if (this._pIndexBuffer.readData(this.byteOffset + iOffset, iSize, pBuffer)) {
                    switch(this._eElementsType) {
                        case EDataTypes.UNSIGNED_BYTE:
                            return pBuffer;
                        case EDataTypes.UNSIGNED_SHORT:
                            return new Uint16Array(pBuffer.buffer);
                        case EDataTypes.UNSIGNED_INT:
                            return new Uint32Array(pBuffer.buffer);
                        default:
                            return null;
                    }
                }
                return null;
            };
            IndexData.prototype.setData = function (pData, iOffset, iCount) {
                if (typeof iOffset === "undefined") { iOffset = 0; }
                if (typeof iCount === "undefined") { iCount = pData.byteLength / this.bytesPerIndex; }
 {
                    logger.setSourceLocation("data/IndexData.ts", 90);
                    logger.assert((iOffset + iCount) * this.bytesPerIndex <= this.byteLength, "out of buffer limits.");
                }
                ;
                return this._pIndexBuffer.writeData(pData, this.byteOffset + iOffset * this.bytesPerIndex, iCount * this.bytesPerIndex);
            };
            IndexData.prototype.destroy = function () {
                this._pIndexBuffer = null;
                this._iOffset = undefined;
                this._iLength = undefined;
                this._eElementsType = undefined;
                this._eElementsType = undefined;
            };
            IndexData.getPrimitiveCount = function getPrimitiveCount(eType, nVertices) {
                switch(eType) {
                    case EPrimitiveTypes.POINTLIST:
                        return nVertices;
                    case EPrimitiveTypes.LINELIST:
                        return nVertices / 2;
                    case EPrimitiveTypes.LINESTRIP:
                        return nVertices - 1;
                    case EPrimitiveTypes.LINELOOP:
                        return nVertices;
                    case EPrimitiveTypes.TRIANGLELIST:
                        return nVertices / 3;
                    case EPrimitiveTypes.TRIANGLEFAN:
                    case EPrimitiveTypes.TRIANGLESTRIP:
                        return nVertices - 2;
                }
 {
                    logger.setSourceLocation("data/IndexData.ts", 135);
                    logger.error("unhandled case detected..");
                }
                ;
                return 0;
            };
            return IndexData;
        })();
        data.IndexData = IndexData;        
    })(akra.data || (akra.data = {}));
    var data = akra.data;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var IndexBuffer = (function (_super) {
                    __extends(IndexBuffer, _super);
                    function IndexBuffer() {
                        _super.call(this);
                        this._pIndexDataArray = [];
                        this._iDataCounter = 0;
                        this.inline = get;
                    }
                    IndexBuffer.prototype.length = function () {
                        return this._pIndexDataArray.length;
                    };
                    IndexBuffer.prototype.create = function (iByteSize, iFlags, pData) {
                        _super.prototype.create.call(this, 0, iFlags || 0);
                        if ((((iFlags) & (EHardwareBufferFlags.BACKUP_COPY)) != 0)) {
                            this._pBackupCopy = new MemoryBuffer();
                            this._pBackupCopy.create(iByteSize);
                            this._pBackupCopy.writeData(pData, 0, iByteSize);
                        }
                        return true;
                    };
                    IndexBuffer.prototype.destroy = function () {
                        _super.prototype.destroy.call(this);
                        this._pBackupCopy.destroy();
                        this.freeIndexData();
                        this._iDataCounter = 0;
                    };
                    IndexBuffer.prototype.getIndexData = function (iOffset, iCount, ePrimitiveType, eElementsType) {
                        var pIndexData = new data.IndexData(this, this._iDataCounter++, iOffset, iCount, ePrimitiveType, eElementsType);
                        this._pIndexDataArray.push(pIndexData);
                        return pIndexData;
                    };
                    IndexBuffer.prototype.getEmptyIndexData = function (iCount, ePrimitiveType, eElementsType) {
                        var pHole = new Array();
                        var i;
                        var pIndexData;
                        pHole[0] = {
                            start: 0,
                            end: this.byteLength
                        };
                        for(var k = 0; k < this._pIndexDataArray.length; ++k) {
                            pIndexData = this._pIndexDataArray[k];
                            for(i = 0; i < pHole.length; i++) {
                                if (pIndexData.byteOffset > pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength < pHole[i].end) {
                                    var iTemp = pHole[i].end;
                                    pHole[i].end = pIndexData.byteOffset;
                                    pHole.splice(i + 1, 0, {
                                        start: pIndexData.byteOffset + pIndexData.byteLength,
                                        end: iTemp
                                    });
                                    i--;
                                } else if (pIndexData.byteOffset == pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength < pHole[i].end) {
                                    pHole[i].start = pIndexData.byteOffset + pIndexData.byteLength;
                                } else if (pIndexData.byteOffset > pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength == pHole[i].end) {
                                } else if (pIndexData.byteOffset == pHole[i].start && pIndexData.byteLength == (pHole[i].end - pHole[i].start)) {
                                    pHole.splice(i, 1);
                                    i--;
                                } else if (pIndexData.byteOffset < pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength > pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength < pHole[i].end) {
                                    pHole[i].start = pIndexData.byteOffset + pIndexData.byteLength;
                                } else if (pIndexData.byteOffset < pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength > pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength == pHole[i].end) {
                                    pHole.splice(i, 1);
                                    i--;
                                } else if (pIndexData.byteOffset + pIndexData.byteLength > pHole[i].end && pIndexData.byteOffset > pHole[i].start && pIndexData.byteOffset < pHole[i].end) {
                                    pHole[i].end = pIndexData.byteOffset;
                                } else if (pIndexData.byteOffset + pIndexData.byteLength > pHole[i].end && pIndexData.byteOffset == pHole[i].start && pIndexData.byteOffset < pHole[i].end) {
                                    pHole.splice(i, 1);
                                    i--;
                                } else if (pIndexData.byteOffset < pHole[i].start && pIndexData.byteOffset + pIndexData.byteLength > pHole[i].end) {
                                    i--;
                                }
                            }
                        }
                        pHole.sort(function (a, b) {
                            return ((a.end - a.start) - (b.end - b.start));
                        });
                        for(i = 0; i < pHole.length; i++) {
                            if ((pHole[i].end - pHole[i].start) >= iCount * getTypeSize(eElementsType)) {
                                pIndexData = new data.IndexData(this, this._iDataCounter++, pHole[i].start, iCount, ePrimitiveType, eElementsType);
                                this._pIndexDataArray.push(pIndexData);
                                return pIndexData;
                            }
                        }
                        return null;
                    };
                    IndexBuffer.prototype.freeIndexData = function (pIndexData) {
                        if (arguments.length == 0) {
                            for(var i = 0; i < this._pIndexDataArray.length; i++) {
                                this._pIndexDataArray[Number(i)].destroy();
                            }
                            this._pIndexDataArray = null;
                        } else {
                            for(var i = 0; i < this._pIndexDataArray.length; i++) {
                                if (this._pIndexDataArray[i] == pIndexData) {
                                    pIndexData.destroy();
                                    this._pIndexDataArray.splice(i, 1);
                                    this.notifyAltered();
                                    return true;
                                }
                            }
                            return false;
                        }
                        this.notifyAltered();
                        return true;
                    };
                    IndexBuffer.prototype.allocateData = function (ePrimitiveType, eElementsType, pData) {
                        var pIndexData;
                        var iCount = pData.byteLength / getTypeSize(eElementsType);
 {
                            logger.setSourceLocation("core/pool/resources/IndexBuffer.ts", 164);
                            logger.assert(iCount === math.floor(iCount), "data size should be a multiple of the vertex declaration");
                        }
                        ;
                        pIndexData = this.getEmptyIndexData(iCount, ePrimitiveType, eElementsType);
                        pIndexData.setData(pData);
                        return pIndexData;
                    };
                    return IndexBuffer;
                })(HardwareBuffer);
                resources.IndexBuffer = IndexBuffer;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLIndexBuffer = (function (_super) {
            __extends(WebGLIndexBuffer, _super);
            function WebGLIndexBuffer() {
                _super.call(this);
                this._pLockData = null;
                this.inline = get;
                this.inline = getWebGLBuffer();
                this.WebGLBuffer = {
                    return: this._pWebGLBuffer
                };
            }
            WebGLIndexBuffer.prototype.byteLength = function () {
                return this._iByteSize;
            };
            WebGLIndexBuffer.prototype.create = function (iByteSize, iFlags, pData) {
                if (typeof iFlags === "undefined") { iFlags = EHardwareBufferFlags.STATIC; }
                if (typeof pData === "undefined") { pData = null; }
                iByteSize = math.max(iByteSize, 1024);
                if ((((iFlags) & (EHardwareBufferFlags.READABLE)) != 0)) {
                    ((iFlags) |= (EHardwareBufferFlags.BACKUP_COPY));
                }
                _super.prototype.create.call(this, iByteSize, iFlags, pData);
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                var i;
 {
                    logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 45);
                    logger.assert(this._pWebGLBuffer == null, "webgl buffer already allocated");
                }
                ;
                this._iByteSize = iByteSize;
                this._iFlags = iFlags;
                pWebGLContext = pWebGLRenderer.getWebGLContext();
 {
                    logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 51);
                    logger.assert(pWebGLContext !== null, "cannot grab webgl context");
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 54);
                    logger.assert(!this.isSoftware(), "no sftware rendering");
                }
                ;
                if (this.isBackupPresent()) {
                    ((this._iFlags) |= (EHardwareBufferFlags.READABLE));
                }
 {
                    logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 62);
                    logger.assert(!pData || pData.byteLength <= iByteSize, "Размер переданного массива больше переданного размера буфера");
                }
                ;
                this._pWebGLBuffer = pWebGLRenderer.createWebGLBuffer();
                if (!this._pWebGLBuffer) {
 {
                        logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 68);
                        logger.criticalError("cannot create WebGL index buffer");
                    }
                    ;
                    this.destroy();
                    return false;
                }
                pWebGLRenderer.bindWebGLBuffer(0x8893, this._pWebGLBuffer);
                pWebGLContext.bufferData(0x8893, this._iByteSize, getWebGLUsage(this._iFlags));
                if (pData) {
                    pWebGLContext.bufferSubData(0x8893, 0, (isArrayBuffer(pData) ? pData : (pData).buffer));
                }
                return true;
            };
            WebGLIndexBuffer.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                var pWebGLRenderer = this.getEngine().getRenderer();
                pWebGLRenderer.deleteWebGLBuffer(this._pWebGLBuffer);
                this._pWebGLBuffer = null;
                this._iByteSize = 0;
            };
            WebGLIndexBuffer.prototype.readData = function (iOffset, iSize, ppDest) {
 {
                    logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 99);
                    logger.assert(!isNull(this._pWebGLBuffer), "WebGL buffer not exists");
                }
                ;
                if (!this.isBackupPresent()) {
                    return false;
                }
                if (arguments.length === 1) {
                    this._pBackupCopy.readData(arguments[0]);
                } else {
                    this._pBackupCopy.readData(iOffset, iSize, ppDest);
                }
                return true;
            };
            WebGLIndexBuffer.prototype.writeData = function (pData, iOffset, iSize, bDiscardWholeBuffer) {
                if (typeof bDiscardWholeBuffer === "undefined") { bDiscardWholeBuffer = false; }
 {
                    logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 119);
                    logger.assert(!isNull(this._pWebGLBuffer), "WebGL buffer not exists");
                }
                ;
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLRenderer.bindWebGLBuffer(0x8893, this._pWebGLBuffer);
 {
                    logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 126);
                    logger.assert(pData.byteLength <= iSize, "Размер переданного массива больше переданного размера");
                }
                ;
 {
                    logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 127);
                    logger.assert(this.byteLength >= iOffset + iSize, "Данные выйдут за предел буфера");
                }
                ;
                var pU8Data = null;
                if (isArrayBuffer(pData)) {
                    pU8Data = new Uint8Array(pData);
                } else {
                    pU8Data = new Uint8Array(pData.buffer, pData.byteOffset, pData.byteLength);
                }
                pU8Data = pU8Data.subarray(0, iSize);
                pWebGLContext.bufferSubData(0x8893, iOffset, pU8Data);
                if (this.isBackupPresent()) {
                    this._pBackupCopy.writeData(pU8Data, iOffset);
                }
                this.notifyAltered();
                return true;
            };
            WebGLIndexBuffer.prototype.resize = function (iSize) {
                var eUsage;
                var pData;
                var iMax = 0;
                var pIndexData;
                var pWebGLRenderer = this.getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                if (this.isBackupPresent()) {
                    return false;
                }
                if (iSize < this.byteLength) {
                    for(var k = 0; k < this._pIndexDataArray.length; ++k) {
                        pIndexData = this._pIndexDataArray[k];
                        if (pIndexData.byteOffset + pIndexData.byteLength > iMax) {
                            iMax = pIndexData.byteOffset + pIndexData.byteLength;
                        }
                    }
 {
                        logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 174);
                        logger.assert(iMax <= iSize, "Уменьшение невозможно. Страая разметка не укладывается в новый размер");
                    }
                    ;
                }
                if (pWebGLContext.isBuffer(this._pWebGLBuffer)) {
                    pWebGLRenderer.deleteWebGLBuffer(this._pWebGLBuffer);
                }
                eUsage = getWebGLUsage(this._iFlags);
                this._pWebGLBuffer = pWebGLRenderer.createWebGLBuffer();
                if (!this._pWebGLBuffer) {
 {
                        logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 186);
                        logger.criticalError("cannot create WebGL index buffer");
                    }
                    ;
                    this.destroy();
                    return false;
                }
                pWebGLRenderer.bindWebGLBuffer(0x8893, this._pWebGLBuffer);
                pWebGLContext.bufferData(0x8893, iSize, eUsage);
                pData = new Uint8Array(this._iByteSize);
                if (this.readData(pData)) {
 {
                        logger.setSourceLocation("webgl/WebGLIndexBuffer.ts", 199);
                        logger.warning("cannot read data from buffer");
                    }
                    ;
                    return false;
                }
                this.writeData(pData, 0, this._iByteSize);
                this._pBackupCopy.resize(iSize);
                this._iByteSize = iSize;
                this.notifyAltered();
                return true;
            };
            WebGLIndexBuffer.prototype.lockImpl = function (iOffset, iSize, iLockFlags) {
                var pRetData = new Uint8Array(iSize);
                this.readData(iOffset, iSize, pRetData);
                this._pLockData = pRetData;
                return pRetData;
            };
            WebGLIndexBuffer.prototype.unlockImpl = function () {
                this.writeData(this._pLockData, this._iLockStart, this._iLockSize);
            };
            WebGLIndexBuffer.prototype.copyBackupToRealImpl = function (pRealData, pBackupData, iLockFlags) {
                pRealData.set(pBackupData);
            };
            return WebGLIndexBuffer;
        })(core.pool.resources.IndexBuffer);
        webgl.WebGLIndexBuffer = WebGLIndexBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLInternalRenderBuffer = (function (_super) {
            __extends(WebGLInternalRenderBuffer, _super);
            function WebGLInternalRenderBuffer() {
                _super.call(this);
                this._pWebGLRenderbuffer = null;
            }
            WebGLInternalRenderBuffer.prototype.create = function () {
                if (arguments.length !== 4) {
 {
                        logger.setSourceLocation("webgl/WebGLInternalRenderbuffer.ts", 20);
                        logger.criticalError("Invalid number of arguments. For PixelBuffer it must be four");
                    }
                    ;
                }
                var iWebGLFormat = arguments[0];
                var iWidth = arguments[1];
                var iHeight = arguments[2];
                var bCreateStorage = arguments[3];
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                _super.prototype.create.call(this, iWidth, iHeight, 1, webgl.getClosestAkraFormat(iWebGLFormat, EPixelFormats.A8R8G8B8), 0);
                this._iWebGLInternalFormat = iWebGLFormat;
                this._pWebGLRenderbuffer = pWebGLRenderer.createWebGLRenderbuffer();
                pWebGLRenderer.bindWebGLRenderbuffer(0x8D41, this._pWebGLRenderbuffer);
                if (bCreateStorage) {
                    pWebGLContext.renderbufferStorage(0x8D41, iWebGLFormat, iWidth, iHeight);
                }
                this.notifyCreated();
                return true;
            };
            WebGLInternalRenderBuffer.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                pWebGLRenderer.deleteWebGLRenderbuffer(this._pWebGLRenderbuffer);
                this._pWebGLRenderbuffer = null;
            };
            WebGLInternalRenderBuffer.prototype._bindToFramebuffer = function (iAttachment, iZOffset) {
 {
                    logger.setSourceLocation("webgl/WebGLInternalRenderbuffer.ts", 55);
                    logger.assert(iZOffset < this._iDepth);
                }
                ;
                var pWebGLRenderer = this.getManager().getEngine().getRenderer();
                var pWebGLContext = pWebGLRenderer.getWebGLContext();
                pWebGLContext.framebufferRenderbuffer(0x8D40, iAttachment, 0x8D41, this._pWebGLRenderbuffer);
            };
            return WebGLInternalRenderBuffer;
        })(WebGLPixelBuffer);
        webgl.WebGLInternalRenderBuffer = WebGLInternalRenderBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            (function (resources) {
                var DepthBuffer = (function (_super) {
                    __extends(DepthBuffer, _super);
                    function DepthBuffer() {
                        _super.call(this);
                        this._iBitDepth = 0;
                        this._iWidth = 0;
                        this._iHeight = 0;
                        this._isManual = false;
                        this._pAttachedRenderTargetsList = null;
                        this.inline = get;
                        this.inline = get;
                        this.inline = get;
                    }
                    DepthBuffer.prototype.bitDepth = function () {
                        return this._iBitDepth;
                    };
                    DepthBuffer.prototype.width = function () {
                        return this._iWidth;
                    };
                    DepthBuffer.prototype.height = function () {
                        return this._iHeight;
                    };
                    DepthBuffer.prototype.create = function (iBitDepth, iWidth, iHeight, isManual) {
                        this._iBitDepth = iBitDepth;
                        this._iWidth = iWidth;
                        this._iHeight = iHeight;
                        this._isManual = isManual;
                        this._pAttachedRenderTargetsList = [];
                        this.notifyCreated();
                        return true;
                    };
                    DepthBuffer.prototype.destroy = function () {
                        this.detachFromAllRenderTargets();
                        this._pAttachedRenderTargetsList = null;
                    };
                    DepthBuffer.prototype.destroyResource = function () {
                        this.destroy();
                        this.notifyDestroyed();
                        return true;
                    };
                    DepthBuffer.prototype.isManual = function () {
                        return this._isManual;
                    };
                    DepthBuffer.prototype.isCompatible = function (pTarget) {
                        if (this._iWidth >= pTarget.width && this._iHeight >= pTarget.height) {
                            return true;
                        }
                        return false;
                    };
                    DepthBuffer.prototype._notifyRenderTargetAttached = function (pTarget) {
 {
                            logger.setSourceLocation("core/pool/resources/DepthBuffer.ts", 70);
                            logger.assert(this._pAttachedRenderTargetsList.indexOf(pTarget) === -1, "RenderTarget alrady has been attached to this DepthBuffer");
                        }
                        ;
                        this._pAttachedRenderTargetsList.push(pTarget);
                    };
                    DepthBuffer.prototype._notifyRenderTargetDetached = function (pTarget) {
                        var index = this._pAttachedRenderTargetsList.indexOf(pTarget);
 {
                            logger.setSourceLocation("core/pool/resources/DepthBuffer.ts", 78);
                            logger.assert(index !== -1, "Can not detach RenderTarget from DepthBuffer beacuse it hasn`t been attached to it");
                        }
                        ;
                        this._pAttachedRenderTargetsList.splice(index, 1);
                    };
                    DepthBuffer.prototype.detachFromAllRenderTargets = function () {
                        var i = 0;
                        for(i = 0; i < this._pAttachedRenderTargetsList.length; i++) {
                            this._pAttachedRenderTargetsList[i].detachDepthBuffer();
                        }
                        this._pAttachedRenderTargetsList.clear();
                    };
                    return DepthBuffer;
                })(ResourcePoolItem);
                resources.DepthBuffer = DepthBuffer;                
            })(pool.resources || (pool.resources = {}));
            var resources = pool.resources;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var RenderTexture = (function (_super) {
            __extends(RenderTexture, _super);
            function RenderTexture(pRenderer, pBuffer, iZOffset) {
                _super.call(this, pRenderer);
                this._pBuffer = null;
                this._iZOffset = 0;
                this.inline = suggestPixelFormat();
                this.EPixelFormats = {
                    return: this._pBuffer.format
                };
                this._pBuffer = pBuffer;
                this._iZOffset = iZOffset;
                this._iWidth = pBuffer.width;
                this._iHeight = pBuffer.height;
                this._iColorDepth = pixelUtil.getNumElemBits(pBuffer.format);
            }
            RenderTexture.prototype.destroy = function () {
                this._pBuffer._clearRTT(this._iZOffset);
                this._pBuffer = null;
            };
            RenderTexture.prototype.copyContentsToMemory = function (pDest, eBuffer) {
                if (eBuffer === EFramebuffer.AUTO) {
                    eBuffer = EFramebuffer.FRONT;
                }
                if (eBuffer !== EFramebuffer.FRONT) {
 {
                        logger.setSourceLocation("render/RenderTexture.ts", 41);
                        logger.criticalError("Invalid buffer.");
                    }
                    ;
                }
                this._pBuffer.blitToMemory(pDest);
            };
            return RenderTexture;
        })(RenderTarget);
        render.RenderTexture = RenderTexture;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLRenderTexture = (function (_super) {
            __extends(WebGLRenderTexture, _super);
            function WebGLRenderTexture(pRenderer, pTarget) {
                _super.call(this, pRenderer, pTarget, 0);
                this._pFrameBuffer = null;
                this.inline = get;
                this.inline = get;
                this._pFrameBuffer = new WebGLInternalFrameBuffer(pRenderer);
                this._pFrameBuffer.bindSurface(0x8CE0, pTarget);
                this._iWidth = this._pFrameBuffer.width;
                this._iHeight = this._pFrameBuffer.height;
            }
            WebGLRenderTexture.prototype.width = function () {
                return this._iWidth = this._pFrameBuffer.width;
            };
            WebGLRenderTexture.prototype.height = function () {
                return this._iHeight = this._pFrameBuffer.height;
            };
            WebGLRenderTexture.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
            };
            WebGLRenderTexture.prototype.requiresTextureFlipping = function () {
                return true;
            };
            WebGLRenderTexture.prototype.getCustomAttribute = function (sName) {
                if (sName === "FBO") {
                    return this._pFrameBuffer;
                }
                return null;
            };
            WebGLRenderTexture.prototype.swapBuffers = function () {
                this._pFrameBuffer.swapBuffers();
            };
            WebGLRenderTexture.prototype.attachDepthBuffer = function (pDepthBuffer) {
                var bResult = false;
                bResult = _super.prototype.attachDepthBuffer.call(this, pDepthBuffer);
                if (bResult) {
                    this._pFrameBuffer.attachDepthBuffer(pDepthBuffer);
                }
                return bResult;
            };
            WebGLRenderTexture.prototype.attachDepthPixelBuffer = function (pBuffer) {
                var bResult = false;
                bResult = _super.prototype.attachDepthPixelBuffer.call(this, pBuffer);
                if (bResult) {
                    if (pBuffer.format !== EPixelFormats.DEPTH8) {
                        this.detachDepthPixelBuffer();
                        return false;
                    }
                    this._pFrameBuffer.bindSurface(0x8D00, pBuffer);
                    (pBuffer).addRef();
                }
                return bResult;
            };
            WebGLRenderTexture.prototype.attachDepthTexture = function (pTexture) {
                this._pFrameBuffer.attachDepthTexture(pTexture);
                return true;
            };
            WebGLRenderTexture.prototype.detachDepthPixelBuffer = function () {
                this._pFrameBuffer.unbindSurface(0x8D00);
                (this._pDepthPixelBuffer).release();
                _super.prototype.detachDepthPixelBuffer.call(this);
            };
            WebGLRenderTexture.prototype.detachDepthBuffer = function () {
                this._pFrameBuffer.detachDepthBuffer();
                _super.prototype.detachDepthBuffer.call(this);
            };
            WebGLRenderTexture.prototype.detachDepthTexture = function () {
                this._pFrameBuffer.detachDepthTexture();
            };
            return WebGLRenderTexture;
        })(render.RenderTexture);
        webgl.WebGLRenderTexture = WebGLRenderTexture;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLInternalFrameBuffer = (function () {
            function WebGLInternalFrameBuffer(pWebGLRenderer) {
                this._pWebGLRenderer = null;
                this._pWebGLFramebuffer = null;
                this._pAttachments = null;
                this._iWebglActiveAttachment = 0;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = getColorAttachment(iAttachment, number);
                this.WebGLPixelBuffer = {
                    return: this._pAttachments[0x8CE0 + iAttachment]
                };
                this.inline = getAttachment(iWebGLAttachment, number);
                this.WebGLPixelBuffer = {
                    return: this._pAttachments[iWebGLAttachment]
                };
                this.inline = bindColorSurface(iAttachment, number, pSurface, IPixelBuffer);
                this._pWebGLRenderer = pWebGLRenderer;
                this._pWebGLFramebuffer = this._pWebGLRenderer.createWebGLFramebuffer();
                this._pAttachments = {};
                for(var i = 0; i < webgl.maxColorAttachments; i++) {
                    this._pAttachments[0x8CE0 + i] = null;
                }
                this._pAttachments[0x8D00] = null;
                this._pAttachments[0x8D20] = null;
                this._pAttachments[0x821A] = null;
            }
            WebGLInternalFrameBuffer.prototype.destroy = function () {
                this._pWebGLRenderer.deleteWebGLFramebuffer(this._pWebGLFramebuffer);
                this._pWebGLFramebuffer = null;
            };
            WebGLInternalFrameBuffer.prototype.width = function () {
                return this._pAttachments[0x8CE0].width;
            };
            WebGLInternalFrameBuffer.prototype.height = function () {
                return this._pAttachments[0x8CE0].height;
            };
            WebGLInternalFrameBuffer.prototype.format = function () {
                return this._pAttachments[0x8CE0].format;
            };
            WebGLInternalFrameBuffer.prototype.bindSurface = function (iWebGLAttachment, pSurface) {
                if (!isDef(this._pAttachments[iWebGLAttachment])) {
                    return;
                }
                this.releaseAttachment(iWebGLAttachment);
                this._pAttachments[iWebGLAttachment] = pSurface;
                if (this.checkAttachment(iWebGLAttachment)) {
                    this._bind();
                    (pSurface)._bindToFramebuffer(iWebGLAttachment, 0);
                    (pSurface).addRef();
                }
            };
            WebGLInternalFrameBuffer.prototype.unbindSurface = function (iWebGLAttachment) {
                if (!isDef(this._pAttachments[iWebGLAttachment])) {
                    return;
                }
                var pWebGLContext = this._pWebGLRenderer.getWebGLContext();
                this.releaseAttachment(iWebGLAttachment);
                this._pAttachments[iWebGLAttachment] = null;
                pWebGLContext.framebufferRenderbuffer(0x8D40, iWebGLAttachment, 0x8D41, null);
            };
            return WebGLInternalFrameBuffer;
        })();
        webgl.WebGLInternalFrameBuffer = WebGLInternalFrameBuffer;        
        void {
            this: ,
            bindSurface: (0x8CE0 + iAttachment, 
pSurface)
        };
        inline;
        _bind();
        void {
            this: ,
            _pWebGLRenderer: ,
            bindWebGLFramebuffer: (0x8D40, 
this._pWebGLFramebuffer)
        };
        attachDepthBuffer(pDepthBuffer, IDepthBuffer);
        void {
            var: pWebGLContext,
            WebGLRenderingContext:  = this._pWebGLRenderer.getWebGLContext()
        };
        var pOldFramebuffer = pWebGLContext.getParameter(0x8CA6);
        this._pWebGLRenderer.bindWebGLFramebuffer(0x8D40, this._pWebGLFramebuffer);
        if (!isNull(pDepthBuffer)) {
            var pDepthRenderBuffer = (pDepthBuffer).depthBuffer;
            var pStencilRenderBuffer = (pDepthBuffer).stencilBuffer;
            if (!isNull(pDepthRenderBuffer)) {
                pDepthRenderBuffer._bindToFramebuffer(0x8D00, 0);
                this.releaseAttachment(0x8D00);
                this._pAttachments[0x8D00] = pDepthRenderBuffer;
                pDepthRenderBuffer.addRef();
            }
            if (!isNull(pStencilRenderBuffer)) {
                pStencilRenderBuffer._bindToFramebuffer(0x8D20, 0);
                this.releaseAttachment(0x8D20);
                this._pAttachments[0x8D20] = pStencilRenderBuffer;
                pDepthRenderBuffer.addRef();
            }
            if (!this.checkAttachment(0x8D00) || !this.checkAttachment(0x8D20)) {
 {
                    logger.setSourceLocation("webgl/WebGLInternalFrameBuffer.ts", 124);
                    logger.error("Invalid frame buffer depthbuffer attachment. Wrong size.");
                }
                ;
                return;
            }
        } else {
            pWebGLContext.framebufferRenderbuffer(0x8D40, 0x8D00, 0x8D41, null);
            pWebGLContext.framebufferRenderbuffer(0x8D40, 0x8D20, 0x8D41, null);
            this.releaseAttachment(0x8D00);
            this.releaseAttachment(0x8D20);
            this._pAttachments[0x8D00] = null;
            this._pAttachments[0x8D20] = null;
        }
        this._pWebGLRenderer.bindWebGLFramebuffer(0x8D40, pOldFramebuffer);
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
attachDepthTexture(pDepthTexture, ITexture);
void {
    var: pTextureBuffer,
    WebGLTextureBuffer:  = (pDepthTexture).getBuffer()
};
this._bind();
this.bindSurface(0x8D00, pTextureBuffer);
detachDepthTexture();
void {
    this: ,
    _bind: 
};
this.unbindSurface(0x8D00);
detachDepthBuffer();
void {
    var: pWebGLContext,
    WebGLRenderingContext:  = this._pWebGLRenderer.getWebGLContext()
};
var pOldFramebuffer = pWebGLContext.getParameter(0x8CA6);
this._pWebGLRenderer.bindWebGLFramebuffer(0x8D40, this._pWebGLFramebuffer);
pWebGLContext.framebufferRenderbuffer(0x8D40, 0x8D00, 0x8D41, null);
pWebGLContext.framebufferRenderbuffer(0x8D40, 0x8D20, 0x8D41, null);
this.releaseAttachment(0x8D00);
this.releaseAttachment(0x8D20);
this._pAttachments[0x8D00] = null;
this._pAttachments[0x8D20] = null;
this._pWebGLRenderer.bindWebGLFramebuffer(0x8D40, pOldFramebuffer);
swapBuffers();
void {};
checkAttachment(iWebGLAttachment, number);
bool;
 {
    if (iWebGLAttachment === 0x8CE0) {
        var isOk = true;
        for(var i = 1; i < webgl.maxColorAttachments; i++) {
            isOk = this.checkAttachment(0x8CE0 + i);
            if (!isOk) {
                return false;
            }
        }
        isOk = this.checkAttachment(0x8D00);
        if (!isOk) {
            return false;
        }
        isOk = this.checkAttachment(0x8D20);
        if (!isOk) {
            return false;
        }
        isOk = this.checkAttachment(0x821A);
        if (!isOk) {
            return false;
        }
        return true;
    } else {
        var pBuffer = this._pAttachments[iWebGLAttachment];
        if (isNull(pBuffer)) {
            return true;
        }
        if (this.width === 0 && this.height === 0) {
            return true;
        }
        if (this.width !== pBuffer.width && this.height !== pBuffer.height) {
            return false;
        }
        if (iWebGLAttachment > 0x8CE0 && iWebGLAttachment < 0x8CE0 + webgl.maxColorAttachments) {
            if (!isNull(this._pAttachments[0x8CE0]) && this.format !== pBuffer.format) {
                return false;
            }
        }
        return true;
    }
}
inline;
releaseAttachment(iWebGLAttachment);
void {
    if: (!isNull(this._pAttachments[iWebGLAttachment]))
};
 {
    this._pAttachments[iWebGLAttachment].release();
}
var akra;
(function (akra) {
    (function (webgl) {
        var WebGLDepthBuffer = (function (_super) {
            __extends(WebGLDepthBuffer, _super);
            function WebGLDepthBuffer() {
                _super.call(this);
                this._pDepthBuffer = null;
                this._pStencilBuffer = null;
                this.inline = get;
                this.inline = get;
            }
            WebGLDepthBuffer.prototype.depthBuffer = function () {
                return this._pDepthBuffer;
            };
            WebGLDepthBuffer.prototype.stencilBuffer = function () {
                return this._pStencilBuffer;
            };
            WebGLDepthBuffer.prototype.create = function () {
                if (arguments.length !== 5) {
 {
                        logger.setSourceLocation("webgl/WebGLDepthBuffer.ts", 30);
                        logger.criticalError("Invalid number of arguments. For WebGLDepthBuffer it must be five");
                    }
                    ;
                }
                _super.prototype.create.call(this, 0, arguments[2], arguments[3], arguments[4]);
                var pDepth = arguments[0];
                var pStencil = arguments[1];
                this._pDepthBuffer = pDepth;
                this._pStencilBuffer = pStencil;
                if (!isNull(pDepth)) {
                    switch(pDepth._getWebGLFormat()) {
                        case 0x81A5:
                            this._iBitDepth = 16;
                            break;
                        case 0x81A6:
                        case 0x81A7:
                        case 0x88F0:
                            if (webgl.hasExtension("OES_depth24") || webgl.hasExtension("OES_depth32") || webgl.hasExtension("OES_packed_depth_stencil")) {
                                this._iBitDepth = 32;
                            }
                            break;
                    }
                }
                return true;
            };
            WebGLDepthBuffer.prototype.destroy = function () {
                _super.prototype.destroy.call(this);
                if (!isNull(this._pStencilBuffer) && this._pStencilBuffer !== this._pDepthBuffer) {
                    this._pStencilBuffer.release();
                }
                if (!isNull(this._pDepthBuffer)) {
                    this._pDepthBuffer.release();
                }
                this._pStencilBuffer = null;
                this._pDepthBuffer = null;
            };
            WebGLDepthBuffer.prototype.isCompatible = function (pTarget) {
                if (this._iWidth >= pTarget.width && this._iHeight >= pTarget.height) {
                    return true;
                }
                return false;
            };
            return WebGLDepthBuffer;
        })(core.pool.resources.DepthBuffer);
        webgl.WebGLDepthBuffer = WebGLDepthBuffer;        
    })(akra.webgl || (akra.webgl = {}));
    var webgl = akra.webgl;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        (function (pool) {
            var ResourcePoolManager = (function () {
                function ResourcePoolManager(pEngine) {
                    this.pResourceFamilyList = null;
                    this.pResourceTypeMap = null;
                    this.pWaiterResource = null;
                    this.inline = getEngine();
                    this.Engine = {
                        return: this.pEngine
                    };
                    this.inline = createRenderMethod(sResourceName, string);
                    this.IRenderMethod = {
                        return: this.renderMethodPool.createResource(sResourceName)
                    };
                    this.inline = createTexture(sResourceName, string);
                    this.ITexture = {
                        return: this.texturePool.createResource(sResourceName)
                    };
                    this.inline = createEffect(sResourceName, string);
                    this.IEffect = {
                        return: this.effectPool.createResource(sResourceName)
                    };
                    this.inline = createSurfaceMaterial(sResourceName, string);
                    this.ISurfaceMaterial = {
                        return: this.surfaceMaterialPool.createResource(sResourceName)
                    };
                    this.inline = createVertexBuffer(sResourceName, string);
                    this.IVertexBuffer = {
                        return: this.vertexBufferPool.createResource(sResourceName)
                    };
                    this.inline = createVideoBuffer(sResourceName, string);
                    this.IVertexBuffer = {
                        return: this.videoBufferPool.createResource(sResourceName)
                    };
                    this.inline = createIndexBuffer(sResourceName, string);
                    this.IIndexBuffer = {
                        return: this.indexBufferPool.createResource(sResourceName)
                    };
                    this.inline = createShaderProgram(sResourceName, string);
                    this.IShaderProgram = {
                        return: this.shaderProgramPool.createResource(sResourceName)
                    };
                    this.inline = createModel(sResourceName, string);
                    this.IModel = {
                        return: this.colladaPool.createResource(sResourceName)
                    };
                    this.inline = createImg(sResourceName, string);
                    this.IImg = {
                        return: this.imagePool.createResource(sResourceName)
                    };
                    this.inline = loadModel(sFilename, string, pOptions, any = null);
                    this.IModel = {
                        if: (util.pathinfo(sFilename).ext.toLowerCase() === "dae")
                    };
                    this.pEngine = pEngine;
                    this.pResourceFamilyList = new Array(EResourceFamilies.TOTAL_RESOURCE_FAMILIES);
                    for(var i = 0; i < EResourceFamilies.TOTAL_RESOURCE_FAMILIES; i++) {
                        this.pResourceFamilyList[i] = new Array();
                    }
                    this.pResourceTypeMap = new Array();
                    this.pWaiterResource = new pool.ResourcePoolItem();
                    this.createDeviceResource();
                }
                Object.defineProperty(ResourcePoolManager.prototype, "surfaceMaterialPool", {
                    get: function () {
                        return this.pSurfaceMaterialPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "effectPool", {
                    get: function () {
                        return this.pEffectPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "renderMethodPool", {
                    get: function () {
                        return this.pRenderMethodPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "vertexBufferPool", {
                    get: function () {
                        return this.pVertexBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "indexBufferPool", {
                    get: function () {
                        return this.pIndexBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "colladaPool", {
                    get: function () {
                        return this.pColladaPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "imagePool", {
                    get: function () {
                        return this.pImagePool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "texturePool", {
                    get: function () {
                        return this.pTexturePool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "videoBufferPool", {
                    get: function () {
                        return this.pVideoBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "shaderProgramPool", {
                    get: function () {
                        return this.pShaderProgramPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "componentPool", {
                    get: function () {
                        return this.pComponentPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "textureBufferPool", {
                    get: function () {
                        return this.pTextureBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "renderBufferPool", {
                    get: function () {
                        return this.pRenderBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "depthBufferPool", {
                    get: function () {
                        return this.pDepthBufferPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(ResourcePoolManager.prototype, "effectDataPool", {
                    get: function () {
                        return this.pEffectDataPool;
                    },
                    enumerable: true,
                    configurable: true
                });
                ResourcePoolManager.prototype.initialize = function () {
                    this.registerDeviceResources();
                    return true;
                };
                ResourcePoolManager.prototype.destroy = function () {
                    this.unregisterDeviceResources();
                };
                ResourcePoolManager.prototype.registerResourcePool = function (pCode, pPool) {
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 115);
                        logger.assert(pCode.family >= 0 && pCode.family < EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid code familyi index");
                    }
                    ;
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 117);
                        logger.assert(!isDef(this.pResourceTypeMap[pCode.toNumber()]), "Resource type code already registered");
                    }
                    ;
                    this.pResourceTypeMap[pCode.toNumber()] = pPool;
                    this.pResourceFamilyList[pCode.family].push(pPool);
                };
                ResourcePoolManager.prototype.unregisterResourcePool = function (pCode) {
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 124);
                        logger.assert(pCode.family >= 0, "invalid family index");
                    }
                    ;
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 125);
                        logger.assert(pCode.family < EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid family index");
                    }
                    ;
                    var iCode = pCode.toNumber();
                    var pPool = null;
                    if (this.pResourceTypeMap[iCode] != undefined) {
                        pPool = this.pResourceTypeMap[iCode];
                        delete this.pResourceTypeMap[iCode];
                    }
                    if (pPool != null) {
                        for(var i in this.pResourceFamilyList[pCode.family]) {
                            if (this.pResourceFamilyList[pCode.family][i] == pPool) {
                                delete this.pResourceFamilyList[pCode.family][i];
                                return pPool;
                            }
                        }
                    }
                    return pPool;
                };
                ResourcePoolManager.prototype.destroyResourceFamily = function (eFamily) {
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 148);
                        logger.assert(eFamily < EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid family index");
                    }
                    ;
                    for(var i in this.pResourceFamilyList[eFamily]) {
                        this.pResourceFamilyList[eFamily][i].destroyAll();
                    }
                };
                ResourcePoolManager.prototype.restoreResourceFamily = function (eFamily) {
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 157);
                        logger.assert(eFamily >= 0, "invalid family index");
                    }
                    ;
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 158);
                        logger.assert(eFamily < EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid family index");
                    }
                    ;
                    for(var i in this.pResourceFamilyList[eFamily]) {
                        this.pResourceFamilyList[eFamily][i].restoreAll();
                    }
                };
                ResourcePoolManager.prototype.disableResourceFamily = function (eFamily) {
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 166);
                        logger.assert(eFamily >= 0, "invalid family index");
                    }
                    ;
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 167);
                        logger.assert(eFamily < EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid family index");
                    }
                    ;
                    for(var i in this.pResourceFamilyList[eFamily]) {
                        this.pResourceFamilyList[eFamily][i].disableAll();
                    }
                };
                ResourcePoolManager.prototype.cleanResourceFamily = function (eFamily) {
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 175);
                        logger.assert(eFamily >= 0, "invalid family index");
                    }
                    ;
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 176);
                        logger.assert(eFamily < EResourceFamilies.TOTAL_RESOURCE_FAMILIES, "invalid family index");
                    }
                    ;
                    for(var i in this.pResourceFamilyList[eFamily]) {
                        this.pResourceFamilyList[eFamily][i].clean();
                    }
                };
                ResourcePoolManager.prototype.destroyResourceType = function (pCode) {
                    if (isDef(this.pResourceTypeMap[pCode.toNumber()])) {
                        this.pResourceTypeMap[pCode.toNumber()].destroyAll();
                    }
                };
                ResourcePoolManager.prototype.restoreResourceType = function (pCode) {
                    if (isDef(this.pResourceTypeMap[pCode.toNumber()])) {
                        this.pResourceTypeMap[pCode.toNumber()].restoreAll();
                    }
                };
                ResourcePoolManager.prototype.disableResourceType = function (pCode) {
                    if (isDef(this.pResourceTypeMap[pCode.toNumber()])) {
                        this.pResourceTypeMap[pCode.toNumber()].disableAll();
                    }
                };
                ResourcePoolManager.prototype.cleanResourceType = function (pCode) {
                    if (isDef(this.pResourceTypeMap[pCode.toNumber()])) {
                        this.pResourceTypeMap[pCode.toNumber()].clean();
                    }
                };
                ResourcePoolManager.prototype.findResourcePool = function (pCode) {
                    if (isDef(this.pResourceTypeMap[pCode.toNumber()])) {
                        return this.pResourceTypeMap[pCode.toNumber()];
                    }
                    return null;
                };
                ResourcePoolManager.prototype.findResourceHandle = function (pCode, sName) {
                    var pPool = this.findResourcePool(pCode);
                    var iHandle = INVALID_INDEX;
                    if (!isNull(pPool)) {
                        iHandle = pPool.findResourceHandle(sName);
                    }
                    return iHandle;
                };
                ResourcePoolManager.prototype.findResource = function (pCode, sName) {
                    var pPool = this.findResourcePool(pCode);
                    var pResult = null;
                    var iHandle = 0;
                    if (isString(arguments[1])) {
                        iHandle = pPool.findResourceHandle(sName);
                    } else if (isInt(arguments[1])) {
                        iHandle = arguments[1];
                    }
                    if (pPool != null && iHandle != INVALID_INDEX) {
                        pResult = pPool.getResource(iHandle);
                    }
                    return pResult;
                };
                ResourcePoolManager.prototype.monitorInitResources = function (fnMonitor) {
                    var me = this;
                    this.pWaiterResource.setStateWatcher(EResourceItemEvents.LOADED, function () {
                        fnMonitor.apply(me, arguments);
                    });
                };
                ResourcePoolManager.prototype.setLoadedAllRoutine = function (fnCallback) {
                    var pPool;
                    var pResource;
                    var iHandleResource;
                    var pWaiterResouse = this.pWaiterResource;
                    var fnResCallback = function (iFlagBit, iResourceFlags, isSetting) {
                        if (iFlagBit == EResourceItemEvents.LOADED && isSetting) {
                            fnCallback();
                        }
                    };
                    pWaiterResouse.notifyLoaded();
                    for(var n = 0; n < EResourceFamilies.TOTAL_RESOURCE_FAMILIES; n++) {
                        for(var i = 0; i < ResourcePoolManager.pTypedResourseTotal[n]; i++) {
                            pPool = this.findResourcePool(new ResourceCode(n, i));
                            if (pPool) {
                                var pResources = pPool.getResources();
                                var pResource;
                                for(var i = 0; i < pResources.length; ++i) {
                                    pResource = pResources[i];
                                    pWaiterResouse.sync(pResource, EResourceItemEvents.LOADED);
                                }
                            }
                        }
                    }
                    if (pWaiterResouse.isResourceLoaded()) {
                        fnCallback();
                    } else {
                        pWaiterResouse.setChangesNotifyRoutine(fnResCallback);
                    }
                };
                ResourcePoolManager.prototype.destroyAll = function () {
                    for(var i = 0; i < EResourceFamilies.TOTAL_RESOURCE_FAMILIES; i++) {
                        this.destroyResourceFamily(i);
                    }
                };
                ResourcePoolManager.prototype.restoreAll = function () {
                    for(var i = 0; i < EResourceFamilies.TOTAL_RESOURCE_FAMILIES; i++) {
                        this.restoreResourceFamily(i);
                    }
                };
                ResourcePoolManager.prototype.disableAll = function () {
                    for(var i = 0; i < EResourceFamilies.TOTAL_RESOURCE_FAMILIES; i++) {
                        this.disableResourceFamily(i);
                    }
                };
                ResourcePoolManager.prototype.clean = function () {
                    for(var i = 0; i < EResourceFamilies.TOTAL_RESOURCE_FAMILIES; i++) {
                        this.cleanResourceFamily(i);
                    }
                };
                ResourcePoolManager.prototype.createDeviceResources = function () {
                    return true;
                };
                ResourcePoolManager.prototype.destroyDeviceResources = function () {
                    this.disableDeviceResources();
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 327);
                        logger.log("Destroying Video Device Resources\n");
                    }
                    ;
                    this.destroyResourceFamily(EResourceFamilies.VIDEO_RESOURCE);
                    return true;
                };
                ResourcePoolManager.prototype.restoreDeviceResources = function () {
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 335);
                        logger.log("Restoring Video Device Resources\n");
                    }
                    ;
                    this.restoreResourceFamily(EResourceFamilies.VIDEO_RESOURCE);
                    return true;
                };
                ResourcePoolManager.prototype.disableDeviceResources = function () {
 {
                        logger.setSourceLocation("pool/ResourcePoolManager.ts", 341);
                        logger.log("Disabling Video Device Resources\n");
                    }
                    ;
                    this.disableResourceFamily(EResourceFamilies.VIDEO_RESOURCE);
                    return true;
                };
                return ResourcePoolManager;
            })();
            pool.ResourcePoolManager = ResourcePoolManager;            
 {
                var pCollada = this.colladaPool.findResource(sFilename);
                if (isNull(pCollada)) {
                    pCollada = this.colladaPool.createResource(sFilename);
                }
                if (!pCollada.isResourceLoaded()) {
                    pCollada.loadResource(sFilename, pOptions);
                }
                return pCollada;
            }
            return null;
        })(core.pool || (core.pool = {}));
        var pool = core.pool;
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
loadImage(sFilename, string);
IImg;
 {
    var pImg = this.imagePool.findResource(sFilename);
    if (isNull(pImg)) {
        pImg = this.imagePool.createResource(sFilename);
        if (!pImg.isResourceLoaded()) {
            pImg.loadResource(sFilename);
        }
    }
    return pImg;
}
createDeviceResource();
void {
    this: ,
    pSurfaceMaterialPool:  = new ResourcePool(this, resources.SurfaceMaterial)
};
this.pSurfaceMaterialPool.initialize(16);
this.pEffectPool = new ResourcePool(this, resources.Effect);
this.pEffectPool.initialize(16);
this.pRenderMethodPool = new ResourcePool(this, resources.RenderMethod);
this.pRenderMethodPool.initialize(16);
this.pColladaPool = new ResourcePool(this, resources.Collada);
this.pColladaPool.initialize(0);
this.pImagePool = new ResourcePool(this, resources.Img);
this.pImagePool.initialize(16);
this.pTexturePool = new ResourcePool(this, webgl.WebGLInternalTexture);
this.pTexturePool.initialize(16);
this.pIndexBufferPool = new ResourcePool(this, webgl.WebGLIndexBuffer);
this.pIndexBufferPool.initialize(16);
this.pVertexBufferPool = new ResourcePool(this, webgl.WebGLVertexBuffer);
this.pVertexBufferPool.initialize(16);
this.pVideoBufferPool = new ResourcePool(this, webgl.WebGLVertexTexture);
this.pVideoBufferPool.initialize(16);
this.pTextureBufferPool = new ResourcePool(this, webgl.WebGLTextureBuffer);
this.pTextureBufferPool.initialize(16);
this.pShaderProgramPool = new ResourcePool(this, webgl.WebGLShaderProgram);
this.pShaderProgramPool.initialize(16);
this.pRenderBufferPool = new ResourcePool(this, webgl.WebGLInternalRenderBuffer);
this.pRenderBufferPool.initialize(16);
this.pDepthBufferPool = new ResourcePool(this, webgl.WebGLDepthBuffer);
this.pDepthBufferPool.initialize(16);
this.pEffectDataPool = new ResourcePool(this, resources.EffectData);
this.pEffectDataPool.initialize(8);
this.pComponentPool = new ResourcePool(this, resources.Component);
this.pComponentPool.initialize(16);
registerDeviceResources();
void {};
 {
    logger.setSourceLocation("pool/ResourcePoolManager.ts", 475);
    logger.log("Registering Video Device Resources\n");
}
;
this.pTexturePool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.TEXTURE_RESOURCE));
this.pVertexBufferPool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.VERTEXBUFFER_RESOURCE));
this.pIndexBufferPool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.INDEXBUFFER_RESOURCE));
this.pEffectPool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.EFFECT_RESOURCE));
this.pRenderMethodPool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.RENDERMETHOD_RESOURCE));
this.pColladaPool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.MODEL_RESOURCE));
this.pImagePool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.IMAGE_RESOURCE));
this.pSurfaceMaterialPool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.SURFACEMATERIAL_RESOURCE));
this.pVideoBufferPool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.VIDEOBUFFER_RESOURCE));
this.pShaderProgramPool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.SHADERPROGRAM_RESOURCE));
this.pComponentPool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.COMPONENT_RESOURCE));
this.pEffectDataPool.registerResourcePool(new ResourceCode(EResourceFamilies.VIDEO_RESOURCE, EVideoResources.EFFECTDATA_RESOURCE));
unregisterDeviceResources();
void {};
 {
    logger.setSourceLocation("pool/ResourcePoolManager.ts", 527);
    logger.log("Unregistering Video Device Resources");
}
;
this.pTexturePool.unregisterResourcePool();
this.pVertexBufferPool.unregisterResourcePool();
this.pIndexBufferPool.unregisterResourcePool();
this.pEffectPool.unregisterResourcePool();
this.pRenderMethodPool.unregisterResourcePool();
this.pColladaPool.unregisterResourcePool();
this.pImagePool.unregisterResourcePool();
this.pSurfaceMaterialPool.unregisterResourcePool();
this.pVideoBufferPool.unregisterResourcePool();
this.pShaderProgramPool.unregisterResourcePool();
this.pComponentPool.unregisterResourcePool();
pTypedResourseTotal:
number[] = [
    EVideoResources.TOTAL_VIDEO_RESOURCES, 
    EAudioResources.TOTAL_AUDIO_RESOURCES, 
    EGameResources.TOTAL_GAME_RESOURCES
]
var akra;
(function (akra) {
    (function (scene) {
        (function (objects) {
            var ModelEntry = (function (_super) {
                __extends(ModelEntry, _super);
                function ModelEntry(pScene, pModel) {
                    _super.call(this, pScene, EEntityTypes.MODEL_ENTRY);
                    this._pModelResource = null;
                    this._pController = null;
                    this.inline = get;
                    this.inline = get;
                    this.inline = set;
                    this._pModelResource = pModel;
                }
                ModelEntry.prototype.resource = function () {
                    return this._pModelResource;
                };
                ModelEntry.prototype.controller = function () {
                    return this._pController;
                };
                ModelEntry.prototype.controller = function (pController) {
                    this._pController = pController;
                };
                return ModelEntry;
            })(SceneNode);
            objects.ModelEntry = ModelEntry;            
            function isModelEntry(pEntity) {
                return !isNull(pEntity) && pEntity.type === EEntityTypes.MODEL_ENTRY;
            }
            objects.isModelEntry = isModelEntry;
        })(scene.objects || (scene.objects = {}));
        var objects = scene.objects;
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        var DisplayList = (function () {
            function DisplayList() {
                this._pScene = null;
                this._sName = "";
                this.inline = get;
                this.inline = set;
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.inline = getEventTable();
                this.IEventTable = {
                    return: DisplayList._pEventTable
                };
                this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = _syncTable(pFrom, IEventProvider);
            }
            DisplayList.prototype.name = function () {
                return this._sName;
            };
            DisplayList.prototype.name = function (sName) {
                this._sName = sName;
            };
            DisplayList.prototype._onNodeAttachment = function (pScene, pNode) {
                this.attachObject(pNode);
            };
            DisplayList.prototype._onNodeDetachment = function (pScene, pNode) {
                this.detachObject(pNode);
            };
            DisplayList.prototype.attachObject = function (pNode) {
 {
                    logger.setSourceLocation("DisplayList.ts", 29);
                    logger.error("pure virtual method DisplayList::attachObject()");
                }
                ;
            };
            DisplayList.prototype.detachObject = function (pNode) {
 {
                    logger.setSourceLocation("DisplayList.ts", 33);
                    logger.error("pure virtual method DisplayList::detachObject()");
                }
                ;
            };
            DisplayList.prototype._setup = function (pScene) {
                if (isDefAndNotNull(this._pScene)) {
 {
                        logger.setSourceLocation("DisplayList.ts", 38);
                        logger.criticalError("list movement from scene to another scene temprary unsupported!");
                    }
                    ;
                }
                this._pScene = pScene;
                this.connect(pScene, "nodeAttachment", "_onNodeAttachment");
                this.connect(pScene, "nodeDetachment", "_onNodeDetachment");
                var me = this;
                pScene.getRootNode().explore(function (pEntity) {
                    me._onNodeAttachment(pScene, pEntity);
                });
            };
            DisplayList.prototype._findObjects = function (pCamera, pResultArray, bQuickSearch) {
                if (typeof bQuickSearch === "undefined") { bQuickSearch = false; }
 {
                    logger.setSourceLocation("DisplayList.ts", 54);
                    logger.error("pure virtual method");
                }
                ;
                return null;
            };
            DisplayList._pEventTable = new events.EventTable();
            return DisplayList;
        })();
        scene.DisplayList = DisplayList;        
        void {
            this: ,
            getEventTable: ._sync(this, pFrom)
        };
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        ;
        var ObjectList = (function () {
            function ObjectList() {
                this._pHead = null;
                this._pTail = null;
                this._pCurrent = null;
                this._iLength = 0;
                this._bLock = false;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = lock();
            }
            ObjectList.prototype.length = function () {
                return this._iLength;
            };
            ObjectList.prototype.first = function () {
                this._pCurrent = this._pHead;
                return (isDefAndNotNull(this._pCurrent)) ? this._pCurrent.data : null;
            };
            ObjectList.prototype.last = function () {
                this._pCurrent = this._pTail;
                return (isDefAndNotNull(this._pCurrent)) ? this._pCurrent.data : null;
            };
            ObjectList.prototype.current = function () {
                return (isDefAndNotNull(this._pCurrent)) ? this._pCurrent.data : null;
            };
            return ObjectList;
        })();
        util.ObjectList = ObjectList;        
        void {
            this: ,
            _bLock:  = true
        };
        inline;
        unlock();
        void {
            this: ,
            _bLock:  = false
        };
        inline;
        isLocked();
        bool;
 {
            return this._bLock;
        }
        inline;
        value(n, number);
        any;
 {
            return this.find(n).data;
        }
        ;
        constructor(pData ?  : any[]);
 {
            if (arguments.length) {
                this.fromArray(pData);
            }
        }
        indexOf(pData, any, iFrom, number = 0.);
        number;
 {
            var pItem = this.find(iFrom);
            for(var i = iFrom; i < this._iLength; i++) {
                if (pItem.data === pData) {
                    return i;
                }
                pItem = pItem.next;
            }
            return -1;
        }
        ;
        mid(iPos, number = 0, iSize, number = this._iLength);
        IObjectList;
 {
            iSize = Math.min(this._iLength - iPos, iSize);
            if (iPos > this._iLength - 1) {
                return null;
            }
            var pNewList = new ObjectList();
            var pItem = this.find(iPos);
            for(var i = 0; i < iSize; ++i) {
                pNewList.push(pItem.data);
                pItem = pItem.next;
            }
            ;
            return pNewList;
        }
        ;
        inline;
        slice(iStart, number = 0, iEnd, number = Math.max(this._iLength - iStart, 0));
        IObjectList;
 {
            return this.mid(iStart, iEnd - iStart);
        }
        inline;
        move(iFrom, number, iTo, number);
        IObjectList;
 {
            return this.insert(iTo - 1, this.takeAt(iFrom));
        }
        ;
        inline;
        replace(iPos, number, pData, any);
        IObjectList;
 {
 {
                logger.setSourceLocation("util/ObjectList.ts", 102);
                logger.assert(!this.isLocked(), "list locked.");
            }
            ;
            this.find(iPos).data = pData;
            return this;
        }
        ;
        erase(pos, number);
        IObjectList;
        erase(begin, number, end, number);
        IObjectList;
        erase(begin, number, end ?  : number);
        IObjectList;
 {
            if (arguments.length < 2) {
                this.takeAt(arguments[0]);
            } else {
                end = Math.min(end, this._iLength);
                for(var i = begin; i < end; i++) {
                    this.takeAt(i);
                }
            }
            return this;
        }
        ;
        inline;
        contains(pData, any);
        bool;
 {
            return (this.indexOf(pData) >= 0);
        }
        ;
        inline;
        removeAt(n, number);
        void {
            this: ,
            takeAt: (n)
        };
        inline;
        removeOne(pData, any);
        void {
            this: ,
            removeAt: (this.indexOf(pData))
        };
        inline;
        removeAll(pData, any);
        number;
 {
            var i;
            var n = this.length;
            while((i = this.indexOf(pData)) >= 0) {
                this.removeAt(i);
                i--;
            }
            return n;
        }
        swap(i, number, j, number);
        IObjectList;
 {
 {
                logger.setSourceLocation("util/ObjectList.ts", 147);
                logger.assert(!this.isLocked(), "list locked.");
            }
            ;
            i = Math.min(i, this._iLength - 1);
            j = Math.min(j, this._iLength - 1);
            if (i != j) {
                var pItem1 = this.find(i);
                var pItem2 = this.find(j);
                var pTmp = pItem1.data;
                pItem1.data = pItem2.data;
                pItem2.data = pTmp;
            }
            return this;
        }
        add(pList, IObjectList);
        IObjectList;
 {
            pList.seek(0);
            if (pList.length > 1) {
                this.push(pList.first());
            }
            for(var i = 1; i < pList.length; i++) {
                this.push(pList.next());
            }
            return this;
        }
        seek(n, number = 0);
        IObjectList;
 {
            var pElement;
            n = Math.min(n, this._iLength - 1);
            if (n > this._iLength / 2) {
                pElement = this._pTail;
                for(var m = this._iLength - 1 - n; m > 0; --m) {
                    pElement = pElement.prev;
                }
            } else {
                pElement = this._pHead;
                for(var i = 0; i < n; ++i) {
                    pElement = pElement.next;
                }
            }
            this._pCurrent = pElement;
            return this;
        }
        ;
        inline;
        next();
        any;
 {
            return (isDefAndNotNull(this._pCurrent) && isDefAndNotNull(this._pCurrent.next)) ? (this._pCurrent = this._pCurrent.next).data : null;
        }
        inline;
        prev();
        any;
 {
            return (isDefAndNotNull(this._pCurrent) && isDefAndNotNull(this._pCurrent.prev)) ? (this._pCurrent = this._pCurrent.prev).data : null;
        }
        inline;
        push(pElement, any);
        IObjectList;
 {
            return this.insert(this._iLength, pElement);
        }
        ;
        inline;
        takeAt(n, number);
        any;
 {
 {
                logger.setSourceLocation("util/ObjectList.ts", 217);
                logger.assert(!this.isLocked(), "list locked.");
            }
            ;
            if (n < 0) {
                return null;
            }
            return this.pullElement(this.find(n));
        }
        ;
        pullElement(pItem, IObjectListItem);
        any;
 {
            if (isNull(pItem)) {
                return null;
            }
            if (isNull(pItem.prev)) {
                this._pHead = pItem.next;
            } else {
                pItem.prev.next = pItem.next;
            }
            if (isNull(pItem.next)) {
                this._pTail = pItem.prev;
            } else {
                pItem.next.prev = pItem.prev;
            }
            this._iLength--;
            if (isNull(pItem.next)) {
                this._pCurrent = this._pTail;
            } else {
                this._pCurrent = pItem.next;
            }
            return this.releaseItem(pItem);
        }
        ;
        inline;
        takeFirst();
        any;
 {
            return this.takeAt(0);
        }
        ;
        inline;
        takeLast();
        any;
 {
            return this.takeAt(this._iLength - 1);
        }
        ;
        inline;
        takeCurrent(isPrev, bool = false);
        any;
 {
            return this.pullElement(this._pCurrent);
        }
        inline;
        pop();
        any;
 {
            return this.takeAt(this._iLength - 1);
        }
        ;
        inline;
        prepend(pElement, any);
        IObjectList;
 {
            return this.insert(0, pElement);
        }
        ;
        inline;
        find(n, number);
        IObjectListItem;
 {
            if (n < this._iLength) {
                this.seek(n);
                return this._pCurrent;
            }
            return null;
        }
        ;
        inline;
        releaseItem(pItem, IObjectListItem);
        any;
 {
            var pData = pItem.data;
            pItem.next = null;
            pItem.prev = null;
            pItem.data = null;
            ObjectList.listItemPool.push(pItem);
            return pData;
        }
        ;
        inline;
        createItem();
        IObjectListItem;
 {
            if (ObjectList.listItemPool.length == 0) {
                return {
                    next: null,
                    prev: null,
                    data: null
                };
            }
            return ObjectList.listItemPool.pop();
        }
        fromArray(elements, any[], iOffset, number = 0, iSize, number = elements.length);
        IObjectList;
 {
            iOffset = Math.min(iOffset, this._iLength);
            for(var i = 0; i < iSize; i++) {
                this.insert(iOffset + i, elements[i]);
            }
            return this;
        }
        insert(n, number, pData, any);
        IObjectList;
 {
 {
                logger.setSourceLocation("util/ObjectList.ts", 321);
                logger.assert(!this.isLocked(), "list locked.");
            }
            ;
            var pNew = this.createItem();
            var pItem;
            n = Math.min(n, this._iLength);
            pNew.data = pData;
            if (n == 0) {
                if (isNull(this._pHead)) {
                    this._pTail = pNew;
                }
                pNew.next = this._pHead;
                this._pHead = pNew;
            } else {
                pItem = this.find(n - 1);
                if (pItem == null) {
                    this._pHead = pNew;
                } else {
                    if (pItem.next == null) {
                        this._pTail = pNew;
                    } else {
                        pNew.next = pItem.next;
                        pItem.next.prev = pNew;
                    }
                    pItem.next = pNew;
                    pNew.prev = pItem;
                }
            }
            this._iLength++;
            this._pCurrent = pNew;
            return this;
        }
        ;
        isEqual(pList, IObjectList);
        bool;
 {
            if (this._iLength == pList.length) {
                if (this === pList) {
                    return true;
                }
                var l1 = this.first;
                var l2 = pList.first;
                for(var i = 0; i < this._iLength; ++i) {
                    if (l1 != l2) {
                        return false;
                    }
                    l1 = this.next();
                    l2 = pList.next();
                }
                return true;
            }
            return false;
        }
        clear();
        IObjectList;
 {
 {
                logger.setSourceLocation("util/ObjectList.ts", 390);
                logger.assert(!this.isLocked(), "list locked.");
            }
            ;
            var pPrev;
            var pNext;
            this._pCurrent = this._pHead;
            for(var i = 0; i < this._iLength; ++i) {
                pPrev = this._pCurrent;
                pNext = this._pCurrent = this._pCurrent.next;
                this.releaseItem(pPrev);
            }
            this._pHead = this._pCurrent = this._pTail = null;
            this._iLength = 0;
            return this;
        }
        forEach(fn, IListExplorerFunc);
        void {
            var: pItem,
            IObjectListItem:  = this._pHead
        };
        var n = 0;
        do {
            if (fn(pItem.data, n++) === false) {
                return;
            }
        } while((pItem = pItem.next));
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
listItemPool:
IObjectArray = new ObjectArray()
var akra;
(function (akra) {
    akra.ObjectList = util.ObjectList;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        var OcTreeNode = (function () {
            function OcTreeNode(pTree) {
                this.level = 0;
                this.index = 0;
                this.rearNodeLink = null;
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.inline = getEventTable();
                this.IEventTable = {
                    return: OcTreeNode._pEventTable
                };
                this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = _syncTable(pFrom, IEventProvider);
                this.membersList = new util.ObjectList();
                this.worldBounds = new geometry.Rect3d();
                this.childrenList = new Array(8);
                for(var i = 0; i < 8; i++) {
                    this.childrenList[i] = new util.ObjectList();
                }
                this.tree = pTree;
            }
            OcTreeNode.prototype.addMember = function (pObject) {
                this.membersList.push(pObject);
                this.connect(pObject, "worldBoundsUpdated", "OcTreeObjectMoved", EEventTypes.UNICAST);
            };
            OcTreeNode.prototype.removeMember = function (pObject) {
                var i = this.membersList.indexOf(pObject);
 {
                    logger.setSourceLocation("OcTreeNode.ts", 69);
                    logger.assert(i >= 0, "error removing member cannot find member");
                }
                ;
                if (i >= 0) {
                    this.membersList.takeAt(i);
                    this.disconnect(pObject, "worldBoundsUpdated", "OcTreeObjectMoved", EEventTypes.UNICAST);
                }
                if (this.membersList.length === 0) {
                    this.tree.deleteNodeFromTree(this);
                }
            };
            OcTreeNode._pEventTable = new events.EventTable();
            return OcTreeNode;
        })();
        scene.OcTreeNode = OcTreeNode;        
        void {
            this: ,
            getEventTable: ._sync(this, pFrom)
        };
        OcTreeObjectMoved(pObject, ISceneObject);
 {
            var pNode = this.tree.findTreeNode(pObject);
            if (pNode !== this) {
                this.removeMember(pObject);
                pNode.addMember(pObject);
            }
        }
        ;
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
;
var OcTreeRootNode = (function (_super) {
    __extends(OcTreeRootNode, _super);
    function OcTreeRootNode(pTree) {
        _super.call(this, pTree);
        var iTmp = (1 << this.tree.depth);
        this._pBasicWorldBounds = new geometry.Rect3d(0, iTmp, 0, iTmp, 0, iTmp);
        this._pBasicWorldBounds.divSelf(this.tree.worldScale);
        this._pBasicWorldBounds.subSelf(this.tree.worldOffset);
        this.worldBounds.set(this._pBasicWorldBounds);
    }
    OcTreeRootNode.prototype.addMember = function (pMember) {
        _super.prototype.addMember.call(this, pMember);
        this._updateNodeBoundingBox();
    };
    OcTreeRootNode.prototype.removeMember = function (pObject) {
        var i = this.membersList.indexOf(pObject);
 {
            logger.setSourceLocation("OcTreeNode.ts", 120);
            logger.assert(i >= 0, "error removing member cannot find member");
        }
        ;
        if (i >= 0) {
            this.membersList.takeAt(i);
            this.disconnect(pObject, "worldBoundsUpdated", "OcTreeObjectMoved", EEventTypes.UNICAST);
        }
        this._updateNodeBoundingBox();
    };
    OcTreeRootNode.prototype._updateNodeBoundingBox = function () {
        var pNodeWorldBounds = this.worldBounds;
        pNodeWorldBounds.set(this._pBasicWorldBounds);
        var pObject = this.membersList.first;
        while(isDefAndNotNull(pObject)) {
            pNodeWorldBounds.unionRect(pObject.worldBounds);
            pObject = this.membersList.next();
        }
    };
    return OcTreeRootNode;
})(OcTreeNode);
exports.OcTreeRootNode = OcTreeRootNode;
var akra;
(function (akra) {
    (function (geometry) {
        var Ray2d = (function () {
            function Ray2d() {
                this.point = new Vec2();
                this.normal = new Vec2();
            }
            return Ray2d;
        })();
        geometry.Ray2d = Ray2d;        
        ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
        var Ray3d = (function () {
            function Ray3d() {
                this.point = new Vec3();
                this.normal = new Vec3();
            }
            return Ray3d;
        })();
        geometry.Ray3d = Ray3d;        
        ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
        function intersectPlane2dRay2d(pPlane, pRay) {
            var fDistance = pPlane.signedDistance(pRay.point);
            var fNdotV = pPlane.normal.dot(pRay.normal);
            if (fDistance == 0.) {
                return true;
            } else {
                if (fNdotV == 0.) {
                    return false;
                } else {
                    if (fDistance / fNdotV < 0.) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        }
        geometry.intersectPlane2dRay2d = intersectPlane2dRay2d;
        ;
        function intersectPlane3dRay3d(pPlane, pRay) {
            var fDistance = pPlane.signedDistance(pRay.point);
            var fNdotV = pPlane.normal.dot(pRay.normal);
            if (fDistance == 0.) {
                return true;
            } else {
                if (fNdotV == 0.) {
                    return false;
                } else {
                    if (fDistance / fNdotV < 0.) {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        }
        geometry.intersectPlane3dRay3d = intersectPlane3dRay3d;
        ;
        function intersectCircleRay2d(pCircle, pRay) {
            var v2fCenterToPoint = pRay.point.subtract(pCircle.center, vec2());
            var v2fNormal = pRay.normal;
            var fA = v2fNormal.lengthSquare();
            var fB = v2fCenterToPoint.dot(v2fNormal);
            var fC = v2fCenterToPoint.lengthSquare() - pCircle.radius * pCircle.radius;
            var fDiscriminant = fB * fB - fA * fC;
            if (fDiscriminant < 0.) {
                return false;
            }
            var fSqrtDiscriminant = math.sqrt(fDiscriminant);
            var fT1 = (-fB + fSqrtDiscriminant) / fA;
            if (fT1 < 0.) {
                return false;
            } else {
                return true;
            }
        }
        geometry.intersectCircleRay2d = intersectCircleRay2d;
        ;
        function intersectSphereRay3d(pSphere, pRay) {
            var v3fCenterToPoint = pRay.point.subtract(pSphere.center, vec3());
            var v3fNormal = pRay.normal;
            var fA = v3fNormal.lengthSquare();
            var fB = v3fCenterToPoint.dot(v3fNormal);
            var fC = v3fCenterToPoint.lengthSquare() - pSphere.radius * pSphere.radius;
            var fDiscriminant = fB * fB - fA * fC;
            if (fDiscriminant < 0.) {
                return false;
            }
            var fSqrtDiscriminant = math.sqrt(fDiscriminant);
            var fT1 = (-fB + fSqrtDiscriminant) / fA;
            if (fT1 < 0.) {
                return false;
            } else {
                return true;
            }
        }
        geometry.intersectSphereRay3d = intersectSphereRay3d;
        ;
        function intersectRect2dRay2d(pRect, pRay) {
            var v2fNormal = pRay.normal;
            var v2fPoint = pRay.point;
            var fT1, fT2;
            var fX1, fX2;
            var fY1, fY2;
            if (v2fNormal.x != 0.) {
                fT1 = (pRect.x0 - v2fPoint.x) / v2fNormal.x;
                fT2 = (pRect.x1 - v2fPoint.x) / v2fNormal.x;
            } else {
                fT1 = (pRect.y0 - v2fPoint.y) / v2fNormal.y;
                fT2 = (pRect.y1 - v2fPoint.y) / v2fNormal.y;
            }
            if (fT1 < 0 && fT2 < 0) {
                return false;
            }
            fT1 = math.max(fT1, 0.);
            fT2 = math.max(fT2, 0.);
            fX1 = v2fPoint.x + fT1 * v2fNormal.x;
            fX2 = v2fPoint.x + fT2 * v2fNormal.x;
            fY1 = v2fPoint.y + fT1 * v2fNormal.y;
            fY2 = v2fPoint.y + fT2 * v2fNormal.y;
            if ((fX1 < pRect.x0 && fX2 < pRect.x0) || (fX1 > pRect.x1 && fX2 > pRect.x1) || (fY1 < pRect.y0 && fY2 < pRect.y0) || (fY1 > pRect.y1 && fY2 > pRect.y1)) {
                return false;
            }
            return true;
        }
        geometry.intersectRect2dRay2d = intersectRect2dRay2d;
        ;
        function intersectRect3dRay3d(pRect, pRay) {
            var v3fNormal = pRay.normal;
            var v3fPoint = pRay.point;
            var fT1, fT2;
            var fX1, fX2;
            var fY1, fY2;
            var fZ1, fZ2;
            if (v3fNormal.x != 0.) {
                fT1 = (pRect.x0 - v3fPoint.x) / v3fNormal.x;
                fT2 = (pRect.x1 - v3fPoint.x) / v3fNormal.x;
            } else if (v3fNormal.y != 0.) {
                fT1 = (pRect.y0 - v3fPoint.y) / v3fNormal.y;
                fT2 = (pRect.y1 - v3fPoint.y) / v3fNormal.y;
            } else {
                fT1 = (pRect.z0 - v3fPoint.z) / v3fNormal.z;
                fT2 = (pRect.z1 - v3fPoint.z) / v3fNormal.z;
            }
            if (fT1 < 0 && fT2 < 0) {
                return false;
            }
            fT1 = math.max(fT1, 0.);
            fT2 = math.max(fT2, 0.);
            fX1 = v3fPoint.x + fT1 * v3fNormal.x;
            fX2 = v3fPoint.x + fT2 * v3fNormal.x;
            fY1 = v3fPoint.y + fT1 * v3fNormal.y;
            fY2 = v3fPoint.y + fT2 * v3fNormal.y;
            fZ1 = v3fPoint.z + fT1 * v3fNormal.z;
            fZ2 = v3fPoint.z + fT2 * v3fNormal.z;
            if ((fX1 < pRect.x0 && fX2 < pRect.x0) || (fX1 > pRect.x1 && fX2 > pRect.x1) || (fY1 < pRect.y0 && fY2 < pRect.y0) || (fY1 > pRect.y1 && fY2 > pRect.y1) || (fZ1 < pRect.z0 && fZ2 < pRect.z0) || (fZ1 > pRect.z1 && fZ2 > pRect.z1)) {
                return false;
            }
            return true;
        }
        geometry.intersectRect3dRay3d = intersectRect3dRay3d;
        ;
        function intersectCircleCircle(pCircle1, pCircle2) {
            var v2fCenter1 = pCircle1.center;
            var v2fCenter2 = pCircle2.center;
            var fX = v2fCenter2.x - v2fCenter1.x;
            var fY = v2fCenter2.y - v2fCenter1.y;
            var fContactRadius = pCircle1.radius + pCircle2.radius;
            if ((fX * fX + fY * fY) > fContactRadius * fContactRadius) {
                return false;
            }
            return true;
        }
        geometry.intersectCircleCircle = intersectCircleCircle;
        ;
        function intersectSphereSphere(pSphere1, pSphere2) {
            var v3fCenter1 = pSphere1.center;
            var v3fCenter2 = pSphere2.center;
            var fX = v3fCenter2.x - v3fCenter1.x;
            var fY = v3fCenter2.y - v3fCenter1.y;
            var fZ = v3fCenter2.z - v3fCenter1.z;
            var fContactRadius = pSphere1.radius + pSphere2.radius;
            if ((fX * fX + fY * fY + fZ * fZ) > fContactRadius * fContactRadius) {
                return false;
            }
            return true;
        }
        geometry.intersectSphereSphere = intersectSphereSphere;
        ;
        function intersectRect2dCircle(pRect, pCircle) {
            var v2fCenter = pCircle.center;
            var fOffsetX = 0., fOffsetY = 0.;
            var nInside = 0;
            if (v2fCenter.x < pRect.x0) {
                fOffsetX = pRect.x0 - v2fCenter.x;
            } else if (v2fCenter.x > pRect.x1) {
                fOffsetX = v2fCenter.x - pRect.x1;
            } else {
                nInside++;
            }
            if (v2fCenter.y < pRect.y0) {
                fOffsetY = pRect.y0 - v2fCenter.y;
            } else if (v2fCenter.y > pRect.y1) {
                fOffsetY = v2fCenter.y - pRect.y1;
            } else {
                nInside++;
            }
            if (nInside === 2) {
                return true;
            }
            var fOffsetLengthSquare = fOffsetX * fOffsetX + fOffsetY * fOffsetY;
            var fRadius = pCircle.radius;
            if (fOffsetLengthSquare > fRadius * fRadius) {
                return false;
            }
            return true;
        }
        geometry.intersectRect2dCircle = intersectRect2dCircle;
        ;
        function intersectRect3dSphere(pRect, pSphere) {
            var v3fCenter = pSphere.center;
            var fOffsetX = 0., fOffsetY = 0., fOffsetZ = 0.;
            var nInside = 0;
            if (v3fCenter.x < pRect.x0) {
                fOffsetX = pRect.x0 - v3fCenter.x;
            } else if (v3fCenter.x > pRect.x1) {
                fOffsetX = v3fCenter.x - pRect.x1;
            } else {
                nInside++;
            }
            if (v3fCenter.y < pRect.y0) {
                fOffsetY = pRect.y0 - v3fCenter.y;
            } else if (v3fCenter.y > pRect.y1) {
                fOffsetY = v3fCenter.y - pRect.y1;
            } else {
                nInside++;
            }
            if (v3fCenter.z < pRect.z0) {
                fOffsetZ = pRect.z0 - v3fCenter.z;
            } else if (v3fCenter.z > pRect.z1) {
                fOffsetZ = v3fCenter.z - pRect.z1;
            } else {
                nInside++;
            }
            if (nInside === 3) {
                return true;
            }
            var fOffsetLengthSquare = fOffsetX * fOffsetX + fOffsetY * fOffsetY + fOffsetZ * fOffsetZ;
            var fRadius = pSphere.radius;
            if (fOffsetLengthSquare > fRadius * fRadius) {
                return false;
            }
            return true;
        }
        geometry.intersectRect3dSphere = intersectRect3dSphere;
        ;
        function intersectRect2dRect2d(pRect1, pRect2, pResult) {
            if (!isDef(pResult)) {
                var fX0 = math.max(pRect1.x0, pRect2.x0);
                var fX1 = math.min(pRect1.x1, pRect2.x1);
                if (fX0 <= fX1) {
                    var fY0 = math.max(pRect1.y0, pRect2.y0);
                    var fY1 = math.min(pRect1.y1, pRect2.y1);
                    if (fY0 <= fY1) {
                        return true;
                    }
                }
                return false;
            } else {
                pResult.x0 = math.max(pRect1.x0, pRect2.x0);
                pResult.x1 = math.min(pRect1.x1, pRect2.x1);
                pResult.y0 = math.max(pRect1.y0, pRect2.y0);
                pResult.y1 = math.min(pRect1.y1, pRect2.y1);
                return pResult.isValid();
            }
        }
        geometry.intersectRect2dRect2d = intersectRect2dRect2d;
        ;
        function intersectRect3dRect3d(pRect1, pRect2, pResult) {
            if (!isDef(pResult)) {
                var fX0 = math.max(pRect1.x0, pRect2.x0);
                var fX1 = math.min(pRect1.x1, pRect2.x1);
                if (fX0 <= fX1) {
                    var fY0 = math.max(pRect1.y0, pRect2.y0);
                    var fY1 = math.min(pRect1.y1, pRect2.y1);
                    if (fY0 <= fY1) {
                        var fZ0 = math.max(pRect1.z0, pRect2.z0);
                        var fZ1 = math.min(pRect1.z1, pRect2.z1);
                        if (fZ0 <= fZ1) {
                            return true;
                        }
                    }
                }
                return false;
            } else {
                pResult.x0 = math.max(pRect1.x0, pRect2.x0);
                pResult.x1 = math.min(pRect1.x1, pRect2.x1);
                pResult.y0 = math.max(pRect1.y0, pRect2.y0);
                pResult.y1 = math.min(pRect1.y1, pRect2.y1);
                pResult.z0 = math.max(pRect1.z0, pRect2.z0);
                pResult.z1 = math.min(pRect1.z1, pRect2.z1);
                return pResult.isValid();
            }
        }
        geometry.intersectRect3dRect3d = intersectRect3dRect3d;
        ;
                                                                                                        function intersect(pRect1, pRect2, pResult) {
            var nArgumentsLength = arguments.length;
            if (nArgumentsLength === 3) {
                if (arguments[2] instanceof Rect2d) {
                    return intersectRect2dRect2d(arguments[0], arguments[1], arguments[2]);
                } else {
                    return intersectRect3dRect3d(arguments[0], arguments[1], arguments[2]);
                }
            } else {
                var pArg0 = arguments[0];
                var pArg1 = arguments[1];
                if (pArg1 instanceof Ray2d) {
                    if (pArg0 instanceof Plane2d) {
                        return intersectPlane2dRay2d(pArg0, pArg1);
                    } else if (pArg0 instanceof Circle) {
                        return intersectCircleRay2d(pArg0, pArg1);
                    } else {
                        return intersectRect2dRay2d(pArg0, pArg1);
                    }
                } else if (pArg1 instanceof Ray3d) {
                    if (pArg0 instanceof Plane3d) {
                        return intersectPlane3dRay3d(pArg0, pArg1);
                    } else if (pArg0 instanceof Sphere) {
                        return intersectSphereRay3d(pArg0, pArg1);
                    } else {
                        return intersectRect3dRay3d(pArg0, pArg1);
                    }
                } else if (pArg1 instanceof Circle) {
                    if (pArg0 instanceof Circle) {
                        return intersectCircleCircle(pArg0, pArg1);
                    } else {
                        return intersectRect2dCircle(pArg0, pArg1);
                    }
                } else if (pArg1 instanceof Sphere) {
                    if (pArg0 instanceof Sphere) {
                        return intersectSphereSphere(pArg0, pArg1);
                    } else {
                        return intersectRect3dSphere(pArg0, pArg1);
                    }
                } else {
                    if (pArg0 instanceof Rect2d) {
                        return intersectRect2dRect2d(pArg0, pArg1);
                    } else {
                        return intersectRect3dRect3d(pArg0, pArg1);
                    }
                }
            }
        }
        geometry.intersect = intersect;
        ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
;
var akra;
(function (akra) {
    (function (scene) {
        (function (EOcTreeConstants) {
            EOcTreeConstants._map = [];
            EOcTreeConstants.k_MinimumTreeDepth = 0;
            EOcTreeConstants.k_MaximumTreeDepth = 10;
        })(scene.EOcTreeConstants || (scene.EOcTreeConstants = {}));
        var EOcTreeConstants = scene.EOcTreeConstants;
        ;
        var OcTree = (function (_super) {
            __extends(OcTree, _super);
            function OcTree() {
                _super.call(this);
                this._pHead = null;
                this._v3fWorldExtents = new Vec3();
                this._v3fWorldScale = new Vec3();
                this._v3fWorldOffset = new Vec3();
                this._iDepth = 0;
                this._pFreeNodePool = null;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.name = "OcTree";
            }
            OcTree.prototype.depth = function () {
                return this._iDepth;
            };
            OcTree.prototype.worldScale = function () {
                return this._v3fWorldScale;
            };
            OcTree.prototype.worldOffset = function () {
                return this._v3fWorldOffset;
            };
            OcTree.prototype.create = function (pWorldBoundingBox, iDepth, nNodes) {
                if (typeof nNodes === "undefined") { nNodes = 64; }
                var v3fTemp = vec3();
                var i = 0;
 {
                    logger.setSourceLocation("OcTree.ts", 72);
                    logger.assert(!this.isReady(), "the Oc tree has already been created");
                }
                ;
 {
                    logger.setSourceLocation("OcTree.ts", 74);
                    logger.assert(iDepth >= EOcTreeConstants.k_MinimumTreeDepth && iDepth <= EOcTreeConstants.k_MaximumTreeDepth, "invalid tree depth");
                }
                ;
                this._iDepth = iDepth;
                this._v3fWorldExtents.set(pWorldBoundingBox.size(v3fTemp));
                this._v3fWorldOffset.set(pWorldBoundingBox.minPoint(v3fTemp).negate());
                var iSize = 1 << iDepth;
                this._v3fWorldScale.x = iSize / this._v3fWorldExtents.x;
                this._v3fWorldScale.y = iSize / this._v3fWorldExtents.y;
                this._v3fWorldScale.z = iSize / this._v3fWorldExtents.z;
                this._pHead = new OcTreeRootNode(this);
                this._pHead.level = 0;
                this._pFreeNodePool = new Array();
                for(i = 0; i < nNodes; ++i) {
                    this._pFreeNodePool.push(new OcTreeNode(this));
                }
            };
            OcTree.prototype.isReady = function () {
                if (this._iDepth > 0) {
                    return true;
                } else {
                    return false;
                }
            };
            OcTree.prototype.findTreeNode = function (pObject) {
                var pRect = pObject.worldBounds;
                var iX0 = pRect.x0, iX1 = pRect.x1, iY0 = pRect.y0, iY1 = pRect.y1, iZ0 = pRect.z0, iZ1 = pRect.z1;
                var v3fWorldOffset = this._v3fWorldOffset;
                var v3fWorldScale = this._v3fWorldScale;
                iX0 += v3fWorldOffset.x;
                iX1 += v3fWorldOffset.x;
                iY0 += v3fWorldOffset.y;
                iY1 += v3fWorldOffset.y;
                iZ0 += v3fWorldOffset.z;
                iZ1 += v3fWorldOffset.z;
                iX0 *= v3fWorldScale.x;
                iX1 *= v3fWorldScale.x;
                iY0 *= v3fWorldScale.y;
                iY1 *= v3fWorldScale.y;
                iZ0 *= v3fWorldScale.z;
                iZ1 *= v3fWorldScale.z;
                iX0 = math.floor(iX0);
                iX1 = math.ceil(iX1);
                iY0 = math.floor(iY0);
                iY1 = math.ceil(iY1);
                iZ0 = math.floor(iZ0);
                iZ1 = math.ceil(iZ1);
                iX1 = (iX1 === iX0) ? iX0 + 1 : iX1;
                iY1 = (iY1 === iY0) ? iY0 + 1 : iY1;
                iZ1 = (iZ1 === iZ0) ? iZ0 + 1 : iZ1;
                var pNode = this.findTreeNodeByRect(iX0, iX1, iY0, iY1, iZ0, iZ1);
                return pNode;
            };
            OcTree.prototype.findTreeNodeByRect = function (iX0, iX1, iY0, iY1, iZ0, iZ1) {
                var nMax = (1 << this._iDepth);
                if (iX0 < 0 || iX1 > nMax || iY0 < 0 || iY1 > nMax || iZ0 < 0 || iZ1 > nMax) {
                    return this._pHead;
                }
                var iDepth = this._iDepth;
                var iLevel;
                iLevel = this._findNodeLevel(iX0, iX1, iY0, iY1, iZ0, iZ1);
                if (iLevel == 0) {
                    return this._pHead;
                }
                var iComposedIndex;
                var iShift = iDepth - iLevel;
                iComposedIndex = (iX0 >> (iDepth - iLevel)) << (2 * iDepth + iShift);
                iComposedIndex += (iY0 >> (iDepth - iLevel)) << (iDepth + iShift);
                iComposedIndex += (iZ0 >> (iDepth - iLevel)) << (iShift);
                var iWay;
                var pParentNode, pNode;
                pParentNode = this._pHead;
                pNode = null;
                var iTmpX, iTmpY, iTmpZ;
                var iX, iY, iZ;
                var i = 0;
                while(i < iLevel) {
                    iTmpX = iX0;
                    iTmpY = iY0;
                    iTmpZ = iZ0;
                    iX = (iTmpX >> (iDepth - i - 1)) & 1;
                    iY = (iTmpY >> (iDepth - i - 1)) & 1;
                    iZ = (iTmpZ >> (iDepth - i - 1)) & 1;
                    iWay = 4 * iX + 2 * iY + iZ;
                    var pNodeList = pParentNode.childrenList[iWay];
                    if (pNodeList.length === 0) {
                        pNode = this.getAndSetFreeNode(iLevel, iComposedIndex, pParentNode);
                        pNodeList.push(pNode);
                        return pNode;
                    }
                    var iPosition = 0;
                    var pTestNode = pNodeList.first;
                    var iTestMask = (iDepth >= i + 2) ? 1 << (iDepth - i - 2) : 0;
                    var iMask = (iTestMask << (2 * iDepth)) + (iTestMask << iDepth) + iTestMask;
                    var pParentNodeOld = pParentNode;
                    while(isDefAndNotNull(pTestNode)) {
                        var iTest = pTestNode.index & iComposedIndex;
                        var iResult1 = pTestNode.index & iMask;
                        var iResult2 = iComposedIndex & iMask;
                        if (iResult1 === iResult2) {
                            if (pTestNode.level === iLevel) {
                                return pTestNode;
                            } else if (pTestNode.level < iLevel) {
                                pParentNode = pTestNode;
                                i = pTestNode.level;
                                break;
                            } else {
                                if (pNode === null) {
                                    pNode = this.getAndSetFreeNode(iLevel, iComposedIndex, pParentNode);
                                    pParentNode.childrenList[iWay].push(pNode);
                                    i = iLevel;
                                }
                                var iTestIndex = pTestNode.index;
                                var iShift = iDepth - i - 1;
                                iX = (iTestIndex >> (2 * iDepth + iShift)) & 1;
                                iY = (iTestIndex >> (iDepth + iShift)) & 1;
                                iZ = (iTestIndex >> iShift) & 1;
                                var iTestWay = 4 * iX + 2 * iY + iZ;
                                pNodeList.takeAt(iPosition);
                                pNodeList.seek(iPosition - 1);
                                iPosition--;
                                pNode.childrenList[iTestWay].push(pTestNode);
                                pTestNode.rearNodeLink = pNode;
                            }
                        }
                        pTestNode = pNodeList.next();
                        iPosition++;
                    }
                    if (pNode === null && pParentNodeOld === pParentNode) {
                        pNode = this.getAndSetFreeNode(iLevel, iComposedIndex, pParentNode);
                        pParentNode.childrenList[iWay].push(pNode);
                        break;
                    }
                }
                return pNode;
            };
            OcTree.prototype._findNodeLevel = function (iX0, iX1, iY0, iY1, iZ0, iZ1) {
                var iLengthX = iX1 - iX0;
                var iLengthY = iY1 - iY0;
                var iLengthZ = iZ1 - iZ0;
                var iLength = math.max(iLengthX, math.max(iLengthY, iLengthZ));
                var iLevel = this._iDepth - math.floor(math.log(iLength) / math.LN2);
                while(iLevel > 0) {
                    var iPitch = 1 << (this._iDepth - iLevel);
                    var iTest1, iTest2;
                    var i;
                    for(i = 0; i < 3; i++) {
                        iTest1 = math.floor(arguments[2 * i] / iPitch);
                        iTest2 = math.floor(arguments[2 * i + 1] / iPitch);
                        if (iTest1 != iTest2) {
                            if ((iTest1 + 1) == iTest2) {
                                if ((arguments[2 * i + 1] % iPitch) != 0) {
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                    }
                    if (i != 3) {
                        iLevel--;
                    } else {
                        break;
                    }
                }
                return iLevel;
            };
            OcTree.prototype.getAndSetFreeNode = function (iLevel, iComposedIndex, pParentNode) {
                var pNode = this._pFreeNodePool.pop();
                if (!isDefAndNotNull(pNode)) {
                    pNode = new OcTreeNode(this);
                }
                var iDepth = this._iDepth;
                var iMask = (1 << this._iDepth) - 1;
                var iIndexX = (iComposedIndex >> (2 * iDepth)) & iMask;
                var iIndexY = (iComposedIndex >> (iDepth)) & iMask;
                var iIndexZ = iComposedIndex & iMask;
                var iSize = 1 << (this._iDepth - iLevel);
                pNode.level = iLevel;
                pNode.index = iComposedIndex;
                pNode.rearNodeLink = pParentNode;
                pNode.worldBounds.set(iIndexX, iIndexX + iSize, iIndexY, iIndexY + iSize, iIndexZ, iIndexZ + iSize);
                pNode.worldBounds.divSelf(this._v3fWorldScale);
                pNode.worldBounds.subSelf(this._v3fWorldOffset);
                return pNode;
            };
            OcTree.prototype.deleteNodeFromTree = function (pNode) {
                var pParentNode = pNode.rearNodeLink;
 {
                    logger.setSourceLocation("OcTree.ts", 413);
                    logger.assert(pNode.membersList.length == 0, "list members of node don't empty");
                }
                ;
                var iDepth = this._iDepth;
                var iParentLevel = pParentNode.level;
                var iIndex = pNode.index;
                var iShift = iDepth - iParentLevel - 1;
                var iX = (iIndex >> (2 * iDepth + iShift)) & 1;
                var iY = (iIndex >> (iDepth + iShift)) & 1;
                var iZ = (iIndex >> iShift) & 1;
                var iWay = 4 * iX + 2 * iY + iZ;
                var pParentBranch = pParentNode.childrenList[iWay];
                var iNode = pParentBranch.indexOf(pNode);
 {
                    logger.setSourceLocation("OcTree.ts", 432);
                    logger.assert(iNode != -1, "can't remove node from parent, node not found");
                }
                ;
                pParentBranch.takeAt(iNode);
                for(var i = 0; i < 8; i++) {
                    var pChildrens = pNode.childrenList[i];
                    while(pChildrens.length) {
                        var pChildNode = pChildrens.pop();
                        pChildNode.rearNodeLink = pParentNode;
                        pParentBranch.push(pChildNode);
                    }
                }
                pNode.level = 0;
                pNode.rearNodeLink = null;
                pNode.worldBounds.clear();
                this._pFreeNodePool.push(pNode);
            };
            OcTree.prototype._findObjects = function (pCamera, pResultArray, bFastSearch) {
                if (typeof pResultArray === "undefined") { pResultArray = new util.ObjectArray(); }
                if (typeof bFastSearch === "undefined") { bFastSearch = false; }
                pResultArray.clear();
                if (!isDef(pCamera.frustum)) {
                    this._buildSearchResultsByRect(pCamera.searchRect, this._pHead, pResultArray);
                } else {
                    this._buildSearchResultsByRectAndFrustum(pCamera.searchRect, pCamera.frustum, this._pHead, pResultArray);
                }
                return pResultArray;
            };
            OcTree.prototype._buildSearchResultsByRect = function (pSearchRect, pNode, pResultList) {
                var pNodeRect = pNode.worldBounds;
                var kResult = geometry.classifyRect3d(pSearchRect, pNodeRect);
                if (kResult == EVolumeClassifications.B_CONTAINS_A || kResult == EVolumeClassifications.INTERSECTING) {
                    var pMemberList = pNode.membersList;
                    var pObject = pMemberList.first;
                    while(isDefAndNotNull(pObject)) {
                        if (geometry.intersectRect3dRect3d(pSearchRect, pObject.worldBounds)) {
                            pResultList.push(pObject);
                        }
                        pObject = pMemberList.next();
                    }
                    for(var i = 0; i < 8; i++) {
                        var pChildrenList = pNode.childrenList[i];
                        var pChildNode = pChildrenList.first;
                        while(isDefAndNotNull(pChildNode)) {
                            this._buildSearchResultsByRect(pSearchRect, pChildNode, pResultList);
                            pChildNode = pChildrenList.next();
                        }
                    }
                } else if (kResult != EVolumeClassifications.NO_RELATION) {
                    this._includeAllTreeSubbranch(pNode, pResultList);
                }
            };
            OcTree.prototype._buildSearchResultsByRectAndFrustum = function (pSearchRect, pFrustum, pNode, pResultList) {
                var pNodeRect = pNode.worldBounds;
                if (geometry.intersectRect3dRect3d(pSearchRect, pNodeRect)) {
                    var kTestResult = geometry.classifyFrustumRect3d(pFrustum, pNodeRect);
                    if (kTestResult == EVolumeClassifications.A_CONTAINS_B) {
                        this._includeAllTreeSubbranch(pNode, pResultList);
                    } else if (kTestResult == EVolumeClassifications.INTERSECTING) {
                        var pMemberList = pNode.membersList;
                        var pObject = pMemberList.first;
                        while(isDefAndNotNull(pObject)) {
                            if (pFrustum.testRect(pObject.worldBounds)) {
                                pResultList.push(pObject);
                            }
                            pObject = pMemberList.next();
                        }
                        for(var i = 0; i < 8; i++) {
                            var pChildrenList = pNode.childrenList[i];
                            var pChildNode = pChildrenList.first;
                            while(isDefAndNotNull(pChildNode)) {
                                this._buildSearchResultsByRectAndFrustum(pSearchRect, pFrustum, pChildNode, pResultList);
                                pChildNode = pChildrenList.next();
                            }
                        }
                    }
                }
            };
            OcTree.prototype._includeAllTreeSubbranch = function (pNode, pResultList) {
                var pMemberList = pNode.membersList;
                var pObject = pMemberList.first;
                while(isDefAndNotNull(pObject)) {
                    pResultList.push(pObject);
                    pObject = pMemberList.next();
                }
                for(var i = 0; i < 8; i++) {
                    var pChildrenList = pNode.childrenList[i];
                    var pChildNode = pChildrenList.first;
                    while(isDefAndNotNull(pChildNode)) {
                        this._includeAllTreeSubbranch(pChildNode, pResultList);
                        pChildNode = pChildrenList.next();
                    }
                }
            };
            OcTree.prototype.attachObject = function (pNode) {
                if (isSceneObject(pNode)) {
                    var pOcTreeNode = this.findTreeNode(pNode);
                    pOcTreeNode.addMember(pNode);
                }
            };
            OcTree.prototype.detachObject = function (pNode) {
                if (isSceneObject(pNode)) {
                    var pOcTreeNode = this.findTreeNode(pNode);
                    pOcTreeNode.removeMember(pNode);
                }
            };
            OcTree.prototype._toSimpleObject = function (pNode) {
                if (typeof pNode === "undefined") { pNode = this._pHead; }
                var pResult = {};
                pResult.members = [];
                pResult.childrens = new Array(8);
                for(var i = 0; i < 8; i++) {
                    pResult.childrens[i] = [];
                }
                pResult.level = pNode.level;
                pResult.index = pNode.index;
                pResult.worldBounds = pNode.worldBounds;
                var pMemberList = pNode.membersList;
                var pObject = pMemberList.first;
                while(isDefAndNotNull(pObject)) {
                    pResult.members.push(pObject.worldBounds);
                    pObject = pMemberList.next();
                }
                for(var i = 0; i < 8; i++) {
                    var pList = pNode.childrenList[i];
                    var pChildNode = pList.first;
                    while(isDefAndNotNull(pChildNode)) {
                        pResult.childrens[i].push(this._toSimpleObject(pChildNode));
                        pChildNode = pList.next();
                    }
                }
                return pResult;
            };
            return OcTree;
        })(DisplayList);
        scene.OcTree = OcTree;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
;
var akra;
(function (akra) {
    (function (scene) {
        (function (light) {
            var LightParameters = (function () {
                function LightParameters() {
                    this.ambient = new Color();
                    this.diffuse = new Color();
                    this.specular = new Color();
                    this.attenuation = new Vec3();
                }
                return LightParameters;
            })();
            light.LightParameters = LightParameters;            
            var LightPoint = (function (_super) {
                __extends(LightPoint, _super);
                function LightPoint(pScene, eType) {
                    if (typeof eType === "undefined") { eType = ELightTypes.UNKNOWN; }
                    _super.call(this, pScene, EEntityTypes.LIGHT);
                    this._isShadowCaster = false;
                    this._isEnabled = true;
                    this._iMaxShadowResolution = 256;
                    this._pLightParameters = new LightParameters();
                    this.inline = get;
                    this.inline = get;
                    this.inline = set;
                    this.inline = get;
                    this.inline = get;
                    this.inline = set;
                    this._eLightType = eType;
                }
                LightPoint.prototype.lightType = function () {
                    return this._eLightType;
                };
                LightPoint.prototype.enabled = function () {
                    return this._isEnabled;
                };
                LightPoint.prototype.enabled = function (bValue) {
                    this._isEnabled = bValue;
                };
                LightPoint.prototype.params = function () {
                    return this._pLightParameters;
                };
                LightPoint.prototype.isShadowCaster = function () {
                    return this._isShadowCaster;
                };
                LightPoint.prototype.isShadowCaster = function (bValue) {
                    this._isShadowCaster = bValue;
                };
                LightPoint.prototype.create = function (isShadowCaster, iMaxShadowResolution) {
                    if (typeof isShadowCaster === "undefined") { isShadowCaster = true; }
                    if (typeof iMaxShadowResolution === "undefined") { iMaxShadowResolution = 256; }
                    var isOk = _super.prototype.create.call(this);
                    this._isShadowCaster = isShadowCaster;
                    this._iMaxShadowResolution = iMaxShadowResolution;
                    return isOk;
                };
                LightPoint.prototype._prepareForLighting = function (pCamera) {
 {
                        logger.setSourceLocation("light/LightPoint.ts", 66);
                        logger.warning("pure virtual method");
                    }
                    ;
                    return false;
                };
                LightPoint.prototype._calculateShadows = function () {
 {
                        logger.setSourceLocation("light/LightPoint.ts", 71);
                        logger.criticalError("NOT IMPLEMENTED!");
                    }
                    ;
                };
                return LightPoint;
            })(SceneNode);
            light.LightPoint = LightPoint;            
            function isLightPoint(pNode) {
                return pNode.type === EEntityTypes.LIGHT;
            }
            light.isLightPoint = isLightPoint;
        })(scene.light || (scene.light = {}));
        var light = scene.light;
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        var LightGraph = (function (_super) {
            __extends(LightGraph, _super);
            function LightGraph() {
                _super.call(this);
                this._pLightPoints = new util.ObjectList();
                this.name = "LightGraph";
            }
            LightGraph.prototype._findObjects = function (pCamera, pResultArray, bFastSearch) {
                if (typeof pResultArray === "undefined") { pResultArray = new util.ObjectArray(); }
                if (typeof bFastSearch === "undefined") { bFastSearch = false; }
                pResultArray.clear();
                var pList = this._pLightPoints;
                var pLightPoint = pList.first;
                while(isDefAndNotNull(pLightPoint)) {
                    if (pLightPoint._prepareForLighting(pCamera)) {
                        pResultArray.push(pLightPoint);
                    }
                    pLightPoint = pList.next();
                }
                return pResultArray;
            };
            LightGraph.prototype.attachObject = function (pNode) {
                if (light.isLightPoint(pNode)) {
                    this._pLightPoints.push(pNode);
                }
            };
            LightGraph.prototype.detachObject = function (pNode) {
                if (light.isLightPoint(pNode)) {
                    var iPosition = this._pLightPoints.indexOf(pNode);
                    if (iPosition != -1) {
                        this._pLightPoints.takeAt(iPosition);
                    } else {
 {
                            logger.setSourceLocation("LightGraph.ts", 58);
                            logger.assert(false, "cannot find light point");
                        }
                        ;
                    }
                }
            };
            return LightGraph;
        })(DisplayList);
        scene.LightGraph = LightGraph;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (model) {
        var Skin = (function () {
            function Skin(pMesh) {
                this._pSkeleton = null;
                this._pNodeNames = null;
                this._m4fBindMatrix = new Mat4(1);
                this._pBoneTransformMatrices = null;
                this._pBoneOffsetMatrixBuffer = null;
                this._pBoneOffsetMatrices = null;
                this._pAffectingNodes = null;
                this._pInfMetaData = null;
                this._pInfData = null;
                this._pBoneTransformMatrixData = null;
                this._pWeights = null;
                this._pTiedData = [];
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = get;
 {
                    logger.setSourceLocation("Skin.ts", 101);
                    logger.assert(isDefAndNotNull(pMesh), "you must specify mesh for skin");
                }
                ;
                this._pMesh = pMesh;
            }
            Skin.prototype.data = function () {
                return this._pMesh.data;
            };
            Skin.prototype.skeleton = function () {
                return this._pSkeleton;
            };
            Skin.prototype.skeleton = function (pSkeleton) {
                if (isNull(pSkeleton) || pSkeleton.totalBones < this.totalBones) {
 {
                        logger.setSourceLocation("Skin.ts", 83);
                        logger.warning("cannnot set skeletonm because skeleton has to little bones");
                    }
                    ;
                    return;
                }
                for(var i = 0, nMatrices = this.totalBones; i < nMatrices; i++) {
                    this._pAffectingNodes[i] = pSkeleton.findJoint(this._pNodeNames[i]);
 {
                        logger.setSourceLocation("Skin.ts", 89);
                        logger.assert(isDefAndNotNull(this._pAffectingNodes[i]), "joint<" + this._pNodeNames[i] + "> must exists...");
                    }
                    ;
                }
                this._pSkeleton = pSkeleton;
            };
            Skin.prototype.totalBones = function () {
                return this._pNodeNames.length;
            };
            Skin.prototype.setBindMatrix = function (m4fMatrix) {
                this._m4fBindMatrix.set(m4fMatrix);
            };
            Skin.prototype.getBindMatrix = function () {
                return this._m4fBindMatrix;
            };
            Skin.prototype.getBoneOffsetMatrices = function () {
                return this._pBoneOffsetMatrices;
            };
            Skin.prototype.getBoneOffsetMatrix = function (sBoneName) {
                var pBoneNames = this._pNodeNames;
                for(var i = 0; i < pBoneNames.length; i++) {
                    if (pBoneNames[i] === sBoneName) {
                        return this._pBoneOffsetMatrices[i];
                    }
                }
                ;
                return null;
            };
            Skin.prototype.setSkeleton = function (pSkeleton) {
                if (!pSkeleton || pSkeleton.totalBones < this.totalBones) {
 {
                        logger.setSourceLocation("Skin.ts", 133);
                        logger.warning("number of bones in skeleton (" + pSkeleton.totalBones + ") less then number of bones in skin (" + this.totalBones + ").");
                    }
                    ;
                    return false;
                }
                for(var i = 0, nMatrices = this.totalBones; i < nMatrices; i++) {
                    this._pAffectingNodes[i] = pSkeleton.findJoint(this._pNodeNames[i]);
 {
                        logger.setSourceLocation("Skin.ts", 139);
                        logger.assert(!isNull(this._pAffectingNodes[i]), "joint<" + this._pNodeNames[i] + "> must exists...");
                    }
                    ;
                }
                this._pSkeleton = pSkeleton;
                return true;
            };
            Skin.prototype.attachToScene = function (pRootNode) {
                for(var i = 0, nMatrices = this.totalBones; i < nMatrices; i++) {
                    this._pAffectingNodes[i] = pRootNode.findEntity(this._pNodeNames[i]);
 {
                        logger.setSourceLocation("Skin.ts", 150);
                        logger.assert(isDefAndNotNull(this._pAffectingNodes[i]), "node<" + this._pNodeNames[i] + "> must exists...");
                    }
                    ;
                }
                return true;
            };
            Skin.prototype.setBoneNames = function (pNames) {
                if (isNull(pNames)) {
                    return false;
                }
                this._pNodeNames = pNames;
                this._pAffectingNodes = new Array(pNames.length);
                return true;
            };
            Skin.prototype.setBoneOffsetMatrices = function (pMatrices) {
                var pMatrixNames = this._pNodeNames;
 {
                    logger.setSourceLocation("Skin.ts", 173);
                    logger.assert(isDefAndNotNull(pMatrices) && isDefAndNotNull(pMatrixNames) && pMatrixNames.length === pMatrices.length, "number of matrix names must equal matrices data length:\n" + pMatrixNames.length + " / " + pMatrices.length);
                }
                ;
                var nMatrices = pMatrixNames.length;
                var pData = this.data;
                var pMatrixData = new Float32Array(nMatrices * 16);
                this._pBoneOffsetMatrices = pMatrices;
                this._pBoneTransformMatrixData = pData._allocateData([
                    VE_MAT4("BONE_MATRIX")
                ], pMatrixData);
                this._pBoneTransformMatrices = new Array(nMatrices);
                for(var i = 0; i < nMatrices; i++) {
                    this._pBoneTransformMatrices[i] = new Mat4(pMatrixData.subarray(i * 16, (i + 1) * 16), true);
                }
                this._pBoneOffsetMatrixBuffer = pMatrixData;
            };
            Skin.prototype.setWeights = function (pWeights) {
                this._pWeights = pWeights;
                return true;
            };
            Skin.prototype.getInfluenceMetaData = function () {
                return this._pInfMetaData;
            };
            Skin.prototype.getInfluences = function () {
                return this._pInfData;
            };
            Skin.prototype.setInfluences = function (pInfluencesCount, pInfluences) {
 {
                    logger.setSourceLocation("Skin.ts", 206);
                    logger.assert(this._pInfMetaData == null && this._pInfData == null, "vertex weights already setuped.");
                }
                ;
 {
                    logger.setSourceLocation("Skin.ts", 207);
                    logger.assert(!isNull(this._pWeights), "you must set weight data before setup influences");
                }
                ;
                var pData = this.data;
                var pInfluencesMeta = new Float32Array(pInfluencesCount.length * 2);
                var pWeights = this._pWeights;
                var iInfLoc = 0;
                var iTransformLoc = 0;
                pInfluences = new Float32Array(pInfluences);
                iTransformLoc = this._pBoneTransformMatrixData.byteOffset / EDataTypeSizes.BYTES_PER_FLOAT;
                for(var i = 0, n = pInfluences.length; i < n; i += 2) {
                    pInfluences[i] = pInfluences[i] * 16 + iTransformLoc;
                    pInfluences[i + 1] = pWeights[pInfluences[i + 1]];
                }
                this._pInfData = pData._allocateData([
                    VE_FLOAT('BONE_INF_DATA'), 
                    VE_FLOAT('BONE_WEIGHT')
                ], pInfluences);
                iInfLoc = this._pInfData.byteOffset / EDataTypeSizes.BYTES_PER_FLOAT;
                for(var i = 0, j = 0, n = iInfLoc; i < pInfluencesMeta.length; i += 2) {
                    var iCount = pInfluencesCount[j++];
                    pInfluencesMeta[i] = iCount;
                    pInfluencesMeta[i + 1] = n;
                    n += 2 * iCount;
                }
                this._pInfMetaData = pData._allocateData([
                    VE_FLOAT('BONE_INF_COUNT'), 
                    VE_FLOAT('BONE_INF_LOC'), 
                    
                ], pInfluencesMeta);
                return this._pInfMetaData !== null && this._pInfData !== null;
            };
            Skin.prototype.setVertexWeights = function (pInfluencesCount, pInfluences, pWeights) {
 {
                    logger.setSourceLocation("Skin.ts", 257);
                    logger.assert(arguments.length > 1, 'you must specify all parameters');
                }
                ;
                if (pWeights) {
                    this.setWeights(pWeights);
                }
                return this.setInfluences(pInfluencesCount, pInfluences);
            };
            Skin.prototype.applyBoneMatrices = function (bForce) {
                if (typeof bForce === "undefined") { bForce = false; }
                var pData;
                var bResult;
                var pNode;
                var isUpdated = false;
                for(var i = 0, nMatrices = this.totalBones; i < nMatrices; ++i) {
                    pNode = this._pAffectingNodes[i];
                    if (pNode.isWorldMatrixNew() || bForce) {
                        pNode.worldMatrix.multiply(this._pBoneOffsetMatrices[i], this._pBoneTransformMatrices[i]);
                        isUpdated = true;
                    }
                }
                if (isUpdated) {
                    pData = this._pBoneOffsetMatrixBuffer;
                    return this._pBoneTransformMatrixData.setData(pData, 0, pData.byteLength);
                }
                return false;
            };
            Skin.prototype.isReady = function () {
                return !(isNull(this._pInfMetaData) || isNull(this._pInfData) || isNull(this._pWeights) || isNull(this._pBoneOffsetMatrixBuffer) || isNull(this._pBoneOffsetMatrices) || isNull(this._pNodeNames) || isNull(this._m4fBindMatrix));
            };
            Skin.prototype.getBoneTransforms = function () {
                return this._pBoneTransformMatrixData;
            };
            Skin.prototype.isAffect = function (pData) {
                if (isDefAndNotNull(pData)) {
                    for(var i = 0; i < this._pTiedData.length; i++) {
                        if (this._pTiedData[i] === pData) {
                            return true;
                        }
                    }
                }
                return false;
            };
            Skin.prototype.attach = function (pData) {
 {
                    logger.setSourceLocation("Skin.ts", 315);
                    logger.assert(pData.stride === 16, "you cannot add skin to mesh with POSITION: {x, y, z}" + "\nyou need POSITION: {x, y, z, w}");
                }
                ;
                pData.getVertexDeclaration().append(VE_FLOAT(DeclUsages.BLENDMETA, 12));
                this._pTiedData.push(pData);
            };
            return Skin;
        })();
        model.Skin = Skin;        
        function createSkin(pMesh) {
            return new Skin(pMesh);
        }
        model.createSkin = createSkin;
    })(akra.model || (akra.model = {}));
    var model = akra.model;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
        var Segment2d = (function () {
            function Segment2d() {
                this.ray = new Ray2d();
                this.distance = 0.;
            }
            Object.defineProperty(Segment2d.prototype, "point", {
                get: function () {
                    return this.ray.point;
                },
                set: function (v2fPoint) {
                    this.ray.point.set(v2fPoint);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Segment2d.prototype, "normal", {
                get: function () {
                    return this.ray.normal;
                },
                set: function (v2fNormal) {
                    this.ray.normal.set(v2fNormal);
                },
                enumerable: true,
                configurable: true
            });
            return Segment2d;
        })();
        geometry.Segment2d = Segment2d;        
        ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
        var Segment3d = (function () {
            function Segment3d() {
                this.ray = new Ray3d();
                this.distance = 0.;
            }
            Object.defineProperty(Segment3d.prototype, "point", {
                get: function () {
                    return this.ray.point;
                },
                set: function (v3fPoint) {
                    this.ray.point.set(v3fPoint);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Segment3d.prototype, "normal", {
                get: function () {
                    return this.ray.normal;
                },
                set: function (v3fNormal) {
                    this.ray.normal.set(v3fNormal);
                },
                enumerable: true,
                configurable: true
            });
            return Segment3d;
        })();
        geometry.Segment3d = Segment3d;        
        ;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (geometry) {
                                                                function computeBoundingBox(pVertexData, pBoundingBox) {
            var fX0 = 0, fY0 = 0, fZ0 = 0, fX1 = 0, fY1 = 0, fZ1 = 0;
            var fTemp, pTempData;
            var i = 0;
            var pVertexDeclaration, pVertexElement, pData;
            var nStride, nCount;
            pVertexDeclaration = pVertexData.getVertexDeclaration();
            if (isNull(pVertexDeclaration)) {
                return false;
            }
            pVertexElement = pVertexDeclaration.findElement(DeclUsages.POSITION, 3);
            if (isNull(pVertexElement)) {
                return false;
            }
            nCount = pVertexData.length;
            nStride = pVertexElement.size;
            pData = pVertexData.getData(pVertexElement.offset, pVertexElement.size);
            if (isNull(pData)) {
                return false;
            }
            pTempData = new Float32Array(pData, 0, 3);
            fX0 = fX1 = pTempData[0];
            fY0 = fY1 = pTempData[1];
            fZ0 = fZ1 = pTempData[2];
            for(i = nStride; i < nStride * nCount; i += nStride) {
                pTempData = new Float32Array(pData, i, 3);
                fTemp = pTempData[0];
                fX0 = fX0 > fTemp ? fTemp : fX0;
                fX1 = fX1 > fTemp ? fX1 : fTemp;
                fTemp = pTempData[1];
                fY0 = fY0 > fTemp ? fTemp : fY0;
                fY1 = fY1 > fTemp ? fY1 : fTemp;
                fTemp = pTempData[2];
                fZ0 = fZ0 > fTemp ? fTemp : fZ0;
                fZ1 = fZ1 > fTemp ? fZ1 : fTemp;
            }
            pBoundingBox.set(fX0, fX1, fY0, fY1, fZ0, fZ1);
            return true;
        }
        geometry.computeBoundingBox = computeBoundingBox;
        ;
        function computeDataForCascadeBoundingBox(pBoundingBox, ppVertexes, ppIndexes, fMinSize) {
            if (typeof fMinSize === "undefined") { fMinSize = .25; }
            var pInd;
            var pPoints;
            var i, j, k;
            pPoints = new Array(8);
            for(i = 0; i < 8; i++) {
                pPoints[i] = new Array(4);
                for(j = 0; j < 4; j++) {
                    pPoints[i][j] = new Vec3(0);
                }
            }
            pPoints[0][0].set([
                pBoundingBox.x0, 
                pBoundingBox.y0, 
                pBoundingBox.z0
            ]);
            pPoints[1][0].set([
                pBoundingBox.x0, 
                pBoundingBox.y1, 
                pBoundingBox.z0
            ]);
            pPoints[2][0].set([
                pBoundingBox.x0, 
                pBoundingBox.y0, 
                pBoundingBox.z1
            ]);
            pPoints[3][0].set([
                pBoundingBox.x0, 
                pBoundingBox.y1, 
                pBoundingBox.z1
            ]);
            pPoints[4][0].set([
                pBoundingBox.x1, 
                pBoundingBox.y0, 
                pBoundingBox.z0
            ]);
            pPoints[5][0].set([
                pBoundingBox.x1, 
                pBoundingBox.y1, 
                pBoundingBox.z0
            ]);
            pPoints[6][0].set([
                pBoundingBox.x1, 
                pBoundingBox.y0, 
                pBoundingBox.z1
            ]);
            pPoints[7][0].set([
                pBoundingBox.x1, 
                pBoundingBox.y1, 
                pBoundingBox.z1
            ]);
            var fTempFunc = function (pPoints, iPoint, iToPoint1, iToPoint2, iToPoint3) {
                for(var i = 0; i < 3; i++) {
                    pPoints[arguments[i + 2]][0].subtract(pPoints[iPoint][0], pPoints[iPoint][i + 1]);
                    if (pPoints[iPoint][i + 1].length() > fMinSize) {
                        pPoints[iPoint][i + 1].scale(0.1);
                    }
                    pPoints[iPoint][i + 1].add(pPoints[iPoint][0]);
                }
            };
            fTempFunc(pPoints, 0, 1, 2, 4);
            fTempFunc(pPoints, 1, 0, 3, 5);
            fTempFunc(pPoints, 2, 0, 3, 6);
            fTempFunc(pPoints, 3, 1, 2, 7);
            fTempFunc(pPoints, 4, 0, 5, 6);
            fTempFunc(pPoints, 5, 1, 4, 7);
            fTempFunc(pPoints, 6, 2, 4, 7);
            fTempFunc(pPoints, 7, 3, 5, 6);
            for(i = 0; i < 8; i++) {
                for(j = 0; j < 4; j++) {
                    ppVertexes[i * 12 + j * 3 + 0] = pPoints[i][j].x;
                    ppVertexes[i * 12 + j * 3 + 1] = pPoints[i][j].y;
                    ppVertexes[i * 12 + j * 3 + 2] = pPoints[i][j].z;
                }
            }
            pInd = [
                0, 
                1, 
                0, 
                2, 
                0, 
                3, 
                4, 
                5, 
                4, 
                6, 
                4, 
                7, 
                8, 
                9, 
                8, 
                10, 
                8, 
                11, 
                12, 
                13, 
                12, 
                14, 
                12, 
                15, 
                16, 
                17, 
                16, 
                18, 
                16, 
                19, 
                20, 
                21, 
                20, 
                22, 
                20, 
                23, 
                24, 
                25, 
                24, 
                26, 
                24, 
                27, 
                28, 
                29, 
                28, 
                30, 
                28, 
                31
            ];
            for(var i = 0; i < pInd.length; ++i) {
                ppIndexes[i] = pInd[i];
            }
            return true;
        }
        geometry.computeDataForCascadeBoundingBox = computeDataForCascadeBoundingBox;
        function computeGeneralizingSphere(pSphereA, pSphereB, pSphereDest) {
            if (!isDef(pSphereDest)) {
                pSphereDest = pSphereA;
            }
            var fR1 = pSphereA.radius;
            var fR2 = pSphereB.radius;
            var v3fC1 = pSphereA.center;
            var v3fC2 = pSphereB.center;
            var v3fD = new Vec3();
            v3fC1.subtract(v3fC2, v3fD);
            var fD = v3fD.length();
            if (fD < fR1 && fR1 > fR2) {
                pSphereDest.set(pSphereA);
                return false;
            }
            if (fD < fR2) {
                pSphereDest.set(pSphereB);
                return false;
            }
            var v3fN = new Vec3();
            v3fD.normalize(v3fN);
            pSphereDest.radius = v3fD.add(v3fN.scale(fR1 + fR2)).length() / 2.0;
            var v3fTemp = v3fD;
            pSphereDest.center = v3fC1.add(v3fC2, v3fTemp).add(v3fN.scale((fR1 - fR2) / (fR1 + fR2))).scale(.5);
            return true;
        }
        geometry.computeGeneralizingSphere = computeGeneralizingSphere;
        function computeDataForCascadeBoundingSphere(pBoundingSphere, ppVertexes, ppIndexes, fMinSize) {
            if (typeof fMinSize === "undefined") { fMinSize = 0.25; }
            var fTheta, fDelta, fAlpha;
            var nCount = 10;
            var i, j, k, a;
            fDelta = 2 * Math.PI / nCount;
            for(i = 0; i <= nCount / 2; i++) {
                fTheta = -Math.PI + (i * fDelta);
                for(j = 0; j <= nCount; j++) {
                    fAlpha = j * fDelta;
                    ppVertexes[(i * (nCount + 1) + j) * 3 + 0] = pBoundingSphere.center.x + pBoundingSphere.radius * Math.sin(fTheta) * Math.cos(fAlpha);
                    ppVertexes[(i * (nCount + 1) + j) * 3 + 1] = pBoundingSphere.center.y + pBoundingSphere.radius * Math.sin(fTheta) * Math.sin(fAlpha);
                    ppVertexes[(i * (nCount + 1) + j) * 3 + 2] = pBoundingSphere.center.z + pBoundingSphere.radius * Math.cos(fTheta);
                }
            }
            for(i = 0; i < nCount / 2; i++) {
                for(j = 0; j < nCount; j++) {
                    ppIndexes[(i * (nCount) + j) * 12 + 0] = i * (nCount + 1) + j;
                    ppIndexes[(i * (nCount) + j) * 12 + 1] = i * (nCount + 1) + j + 1;
                    ppIndexes[(i * (nCount) + j) * 12 + 2] = i * (nCount + 1) + j + 2 + nCount;
                    ppIndexes[(i * (nCount) + j) * 12 + 3] = i * (nCount + 1) + j;
                    ppIndexes[(i * (nCount) + j) * 12 + 4] = i * (nCount + 1) + j + 1;
                    ppIndexes[(i * (nCount) + j) * 12 + 5] = i * (nCount + 1) + j + 2 + nCount;
                    ppIndexes[(i * (nCount) + j) * 12 + 6] = i * (nCount + 1) + j;
                    ppIndexes[(i * (nCount) + j) * 12 + 7] = i * (nCount + 1) + j + 1 + nCount;
                    ppIndexes[(i * (nCount) + j) * 12 + 8] = i * (nCount + 1) + j + 2 + nCount;
                    ppIndexes[(i * (nCount) + j) * 12 + 9] = i * (nCount + 1) + j + 1 + nCount;
                    ppIndexes[(i * (nCount) + j) * 12 + 10] = i * (nCount + 1) + j + 2 + nCount;
                    ppIndexes[(i * (nCount) + j) * 12 + 11] = i * (nCount + 1) + j;
                }
            }
            return true;
        }
        geometry.computeDataForCascadeBoundingSphere = computeDataForCascadeBoundingSphere;
        function computeBoundingSphere(pVertexData, pSphere, bFastMethod, pBoundingBox) {
            if (typeof bFastMethod === "undefined") { bFastMethod = true; }
            if (typeof pBoundingBox === "undefined") { pBoundingBox = null; }
            if (bFastMethod) {
                return computeBoundingSphereFast(pVertexData, pSphere, pBoundingBox);
            } else {
                return computeBoundingSphereMinimal(pVertexData, pSphere);
            }
        }
        geometry.computeBoundingSphere = computeBoundingSphere;
        function computeBoundingSphereFast(pVertexData, pSphere, pBoundingBox) {
            if (typeof pBoundingBox === "undefined") { pBoundingBox = null; }
            var i;
            var pVertexDeclaration, pVertexElement;
            var nCount, nStride;
            var pData, pTempData;
            pVertexDeclaration = pVertexData.getVertexDeclaration();
            if (isNull(pVertexDeclaration)) {
                return false;
            }
            pVertexElement = pVertexDeclaration.findElement(DeclUsages.POSITION, 3);
            if (isNull(pVertexElement)) {
                return false;
            }
            nCount = pVertexData.length;
            nStride = pVertexElement.size;
            pData = pVertexData.getData(pVertexElement.offset, pVertexElement.size);
            if (isNull(pData)) {
                return false;
            }
            if (isNull(pBoundingBox)) {
                pBoundingBox = Rect3d.stackCeil;
            }
            if (pBoundingBox.isClear()) {
                if (!computeBoundingBox(pVertexData, pBoundingBox)) {
                    return false;
                }
            }
            var fCenterX = (pBoundingBox.x0 + pBoundingBox.x1) / 2;
            var fCenterY = (pBoundingBox.y0 + pBoundingBox.y1) / 2;
            var fCenterZ = (pBoundingBox.z0 + pBoundingBox.z1) / 2;
            var fRadius = 0;
            var fDistance = 0;
            for(i = 0; i < nStride * nCount; i += nStride) {
                pTempData = new Float32Array(pData, i, 3);
                fDistance = (pTempData[0] - fCenterX) * (pTempData[0] - fCenterX) + (pTempData[1] - fCenterY) * (pTempData[1] - fCenterY) + (pTempData[2] - fCenterZ) * (pTempData[2] - fCenterZ);
                fRadius = fDistance > fRadius ? fDistance : fRadius;
            }
            pSphere.set(fCenterX, fCenterY, fCenterZ, Math.sqrt(fRadius));
            return true;
        }
        geometry.computeBoundingSphereFast = computeBoundingSphereFast;
        function computeBoundingSphereMinimal(pVertexData, pSphere) {
            var i = 0, j = 0, k = 0;
            var points = [];
            var length = 0;
            var isAdd = false;
            var isNew = true;
            var fDiametr = 0;
            var fDistance = 0;
            var pVertexDeclaration, pVertexElement;
            var nCount, nStride;
            var pData, pTempData1, pTempData2;
            pVertexDeclaration = pVertexData.getVertexDeclaration();
            if (isNull(pVertexData)) {
                return false;
            }
            if (isNull(pVertexDeclaration)) {
                return false;
            }
            pVertexElement = pVertexDeclaration.findElement(DeclUsages.POSITION, 3);
            if (isNull(pVertexElement)) {
                return false;
            }
            nCount = pVertexData.length;
            nStride = pVertexElement.size;
            pData = pVertexData.getData(pVertexElement.offset, pVertexElement.size);
            if (!pData) {
                return false;
            }
            for(i = 0; i < nStride * nCount; i += nStride) {
                isNew = true;
                isAdd = false;
                pTempData1 = new Float32Array(pData, i, 3);
                for(k = 0; k < points.length; k += 3) {
                    if (points[k] == pTempData1[0] && points[k + 1] == pTempData1[1] && points[k + 2] == pTempData1[2]) {
                        isNew = false;
                        break;
                    }
                }
                if (isNew) {
                    for(j = i + nStride; j < nStride * nCount; j += nStride) {
                        pTempData2 = new Float32Array(pData, j, 3);
                        fDistance = (pTempData1[0] - pTempData2[0]) * (pTempData1[0] - pTempData2[0]) + (pTempData1[1] - pTempData2[1]) * (pTempData1[1] - pTempData2[1]) + (pTempData1[2] - pTempData2[2]) * (pTempData1[2] - pTempData2[2]);
                        if (fDistance > fDiametr) {
                            fDiametr = fDistance;
                            isAdd = true;
                            points[0] = pTempData2[0];
                            points[1] = pTempData2[1];
                            points[2] = pTempData2[2];
                            length = 3;
                        } else if (fDistance.toFixed(7) == fDiametr.toFixed(7)) {
                            isAdd = true;
                            for(k = 0; k < points.length; k += 3) {
                                if (points[k] == pTempData2[0] && points[k + 1] == pTempData2[1] && points[k + 2] == pTempData2[2]) {
                                    isNew = false;
                                    break;
                                }
                            }
                            if (isNew) {
                                points[length] = pTempData2[0];
                                points[length + 1] = pTempData2[1];
                                points[length + 2] = pTempData2[2];
                                length += 3;
                            }
                        }
                    }
                    if (isAdd) {
                        points[length] = pTempData1[0];
                        points[length + 1] = pTempData1[1];
                        points[length + 2] = pTempData1[2];
                        length += 3;
                    }
                }
            }
            var fX = 0, fY = 0, fZ = 0;
            for(i = 0; i < points.length; i += 3) {
                fX += points[i];
                fY += points[i + 1];
                fZ += points[i + 2];
            }
            var x = pSphere.center.x = fX / points.length * 3;
            var y = pSphere.center.y = fY / points.length * 3;
            var z = pSphere.center.z = fZ / points.length * 3;
            pSphere.radius = Math.sqrt((points[0] - x) * (points[0] - x) + (points[1] - y) * (points[1] - y) + (points[2] - z) * (points[2] - z));
            return true;
        }
        geometry.computeBoundingSphereMinimal = computeBoundingSphereMinimal;
    })(akra.geometry || (akra.geometry = {}));
    var geometry = akra.geometry;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (model) {
        var MeshSubset = (function (_super) {
            __extends(MeshSubset, _super);
            function MeshSubset(pMesh, pRenderData, sName) {
                if (typeof sName === "undefined") { sName = null; }
                _super.call(this, ERenderDataTypes.MESH_SUBSET);
                this._sName = null;
                this._pMesh = null;
                this._pSkin = null;
                this._pBoundingBox = null;
                this._pBoundingSphere = null;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.setup(pMesh, pRenderData, sName);
            }
            MeshSubset.prototype.boundingBox = function () {
                return this._pBoundingBox;
            };
            MeshSubset.prototype.boundingSphere = function () {
                return this._pBoundingSphere;
            };
            MeshSubset.prototype.skin = function () {
                return this._pSkin;
            };
            MeshSubset.prototype.name = function () {
                return this._sName;
            };
            MeshSubset.prototype.mesh = function () {
                return this._pMesh;
            };
            MeshSubset.prototype.setup = function (pMesh, pRenderData, sName) {
 {
                    logger.setSourceLocation("MeshSubset.ts", 36);
                    logger.assert(this._pMesh === null, "mesh subset already prepared");
                }
                ;
                this._pMesh = pMesh;
                this._pRenderData = pRenderData;
                this._sName = sName;
                _super.prototype._setup.call(this, pMesh.getEngine().getRenderer());
            };
            MeshSubset.prototype.createBoundingBox = function () {
                var pVertexData;
                var pNewBoundingBox;
                pNewBoundingBox = new geometry.Rect3d();
                pVertexData = this.data._getData(DeclUsages.POSITION);
                if (isNull(pVertexData)) {
                    return false;
                }
                if (geometry.computeBoundingBox(pVertexData, pNewBoundingBox) == false) {
                    return false;
                }
                this._pBoundingBox = pNewBoundingBox;
                return true;
            };
            MeshSubset.prototype.deleteBoundingBox = function () {
                this._pBoundingBox = null;
                return true;
            };
            MeshSubset.prototype.showBoundingBox = function () {
                var pMaterial;
                var iData;
                var iCurrentIndexSet;
                var pPoints, pIndexes;
                if (isNull(this._pBoundingBox)) {
                    return false;
                }
                pPoints = new Array();
                pIndexes = new Array();
                geometry.computeDataForCascadeBoundingBox(this._pBoundingBox, pPoints, pIndexes, 10.0);
                iCurrentIndexSet = this.data.getIndexSet();
                if (!this.data.selectIndexSet(".BoundingBox")) {
                    if (this.data.addIndexSet(true, EPrimitiveTypes.LINELIST, ".BoundingBox") == -1) {
 {
                            logger.setSourceLocation("MeshSubset.ts", 89);
                            logger.error("could not add index set '.BoundingBox'");
                        }
                        ;
                        return false;
                    }
                    iData = this.data.allocateData([
                        VE_FLOAT3(DeclUsages.POSITION)
                    ], new Float32Array(pPoints));
                    this.data.allocateIndex([
                        VE_FLOAT(DeclUsages.INDEX0)
                    ], new Float32Array(pIndexes));
                    this.data.index(iData, DeclUsages.INDEX0);
                    this.applyFlexMaterial(".MaterialBoundingBox");
                    pMaterial = this.getFlexMaterial(".MaterialBoundingBox");
                    pMaterial.emissive = new Color(0.0, 0.0, 1.0, 1.0);
                    pMaterial.diffuse = new Color(0.0, 0.0, 1.0, 1.0);
                } else {
                    this.data._getData(DeclUsages.POSITION).setData(new Float32Array(pPoints), DeclUsages.POSITION);
                }
                this.data.setRenderable(this.data.getIndexSet(), true);
                this.data.selectIndexSet(iCurrentIndexSet);
                return true;
            };
            MeshSubset.prototype.hideBoundingBox = function () {
                var iCurrentIndexSet;
                iCurrentIndexSet = this.data.getIndexSet();
                if (!this.data.selectIndexSet(".BoundingBox")) {
                    return false;
                } else {
                    this.data.setRenderable(this.data.getIndexSet(), false);
                }
                return this.data.selectIndexSet(iCurrentIndexSet);
            };
            MeshSubset.prototype.createBoundingSphere = function () {
                var pVertexData;
                var pNewBoundingSphere;
                pNewBoundingSphere = new geometry.Sphere();
                pVertexData = this.data._getData(DeclUsages.POSITION);
                if (!pVertexData) {
                    return false;
                }
                if (!geometry.computeBoundingSphere(pVertexData, pNewBoundingSphere, false, this._pBoundingBox)) {
                    return false;
                }
                this._pBoundingSphere = pNewBoundingSphere;
                return true;
            };
            MeshSubset.prototype.deleteBoundingSphere = function () {
                this._pBoundingSphere = null;
                return true;
            };
            MeshSubset.prototype.showBoundingSphere = function () {
                var pMaterial;
                var iData;
                var iCurrentIndexSet;
                var pPoints, pIndexes;
                if (isNull(this._pBoundingSphere)) {
                    return false;
                }
                pPoints = new Array();
                pIndexes = new Array();
                geometry.computeDataForCascadeBoundingSphere(this._pBoundingSphere, pPoints, pIndexes);
                iCurrentIndexSet = this.data.getIndexSet();
                if (!this.data.selectIndexSet(".BoundingSphere")) {
                    this.data.addIndexSet(false, EPrimitiveTypes.LINELIST, ".BoundingSphere");
                    iData = this.data.allocateData([
                        VE_FLOAT3(DeclUsages.POSITION)
                    ], new Float32Array(pPoints));
                    this.data.allocateIndex([
                        VE_FLOAT(DeclUsages.INDEX0)
                    ], new Float32Array(pIndexes));
                    this.data.index(iData, DeclUsages.INDEX0);
                    this.applyFlexMaterial(".MaterialBoundingSphere");
                    pMaterial = this.getFlexMaterial(".MaterialBoundingSphere");
                    pMaterial.emissive = new Color(0.0, 0.0, 1.0, 1.0);
                    pMaterial.diffuse = new Color(0.0, 0.0, 1.0, 1.0);
                } else {
                    this.data._getData(DeclUsages.POSITION).setData(new Float32Array(pPoints), DeclUsages.POSITION);
                }
                this.data.setRenderable(this.data.getIndexSet(), true);
                this.data.selectIndexSet(iCurrentIndexSet);
                return true;
            };
            MeshSubset.prototype.hideBoundingSphere = function () {
                var iCurrentIndexSet = this.data.getIndexSet();
                if (!this.data.selectIndexSet(".BoundingSphere")) {
                    return false;
                } else {
                    this.data.setRenderable(this.data.getIndexSet(), false);
                }
                return this.data.selectIndexSet(iCurrentIndexSet);
            };
            MeshSubset.prototype.computeNormals = function () {
            };
            MeshSubset.prototype.computeTangents = function () {
            };
            MeshSubset.prototype.computeBinormals = function () {
            };
            MeshSubset.prototype.isSkinned = function () {
                return this._pSkin !== null;
            };
            MeshSubset.prototype.getSkin = function () {
                return this._pSkin;
            };
            MeshSubset.prototype.applyFlexMaterial = function (sMaterial, pMaterialData) {
                if (typeof pMaterialData === "undefined") { pMaterialData = null; }
                if (this._pMesh.addFlexMaterial(sMaterial, pMaterialData)) {
                    return this.setFlexMaterial(sMaterial);
                }
                return false;
            };
            MeshSubset.prototype.getFlexMaterial = function (iMaterial) {
                return this._pMesh.getFlexMaterial(iMaterial);
            };
            MeshSubset.prototype.hasFlexMaterial = function () {
                return this._pRenderData.hasSemantics(DeclUsages.MATERIAL);
            };
            MeshSubset.prototype.setFlexMaterial = function (iMaterial) {
                var pMaterial = this._pMesh.getFlexMaterial(iMaterial);
                if (isNull(pMaterial)) {
 {
                        logger.setSourceLocation("MeshSubset.ts", 255);
                        logger.warning("could not find material <" + iMaterial + "> in sub mesh <" + this.name + ">");
                    }
                    ;
                    return false;
                }
                var pRenderData = this._pRenderData;
                var pIndexData = pRenderData.getIndices();
                var pMatFlow = pRenderData._getFlow(DeclUsages.MATERIAL);
                var eSemantics = DeclUsages.INDEX10;
                var pIndexDecl, pFloatArray;
                var iMatFlow;
                var iMat = (pMaterial).data.byteOffset;
                if (pMatFlow) {
                    iMatFlow = pMatFlow.flow;
                    eSemantics = pMatFlow.mapper.semantics;
                    pIndexData = pMatFlow.mapper.data;
                    pRenderData._addData((pMaterial).data, iMatFlow);
                    return pRenderData.index(iMat, eSemantics, true);
                }
                pIndexDecl = createVertexDeclaration([
                    VE_FLOAT(eSemantics)
                ]);
                pFloatArray = new Float32Array((pIndexData).length);
                iMatFlow = pRenderData._addData((pMaterial).data);
 {
                    logger.setSourceLocation("MeshSubset.ts", 281);
                    logger.assert(iMatFlow >= 0, "cannot add data flow with material for mesh subsset");
                }
                ;
                if (!pRenderData.allocateIndex(pIndexDecl, pFloatArray)) {
 {
                        logger.setSourceLocation("MeshSubset.ts", 284);
                        logger.warning("cannot allocate index for material!!!");
                    }
                    ;
                    return false;
                }
                return pRenderData.index(iMat, eSemantics, true);
            };
            MeshSubset.prototype._draw = function () {
 {
                    logger.setSourceLocation("MeshSubset.ts", 293);
                    logger.criticalError("Need to do.");
                }
                ;
            };
            MeshSubset.prototype.show = function () {
                this.data.setRenderable(true);
            };
            MeshSubset.prototype.hide = function () {
                this.data.setRenderable(false);
            };
            MeshSubset.prototype.setSkin = function (pSkin) {
                var pPosData;
                var pPositionFlow;
                var pMetaData;
                var pInfMetaData;
                var iInfMetaDataLoc;
                var iInfMetaDataStride;
                pPositionFlow = this.data._getFlow(DeclUsages.POSITION);
 {
                    logger.setSourceLocation("MeshSubset.ts", 324);
                    logger.assert(isDefAndNotNull(pPositionFlow), "skin require position with indices in mesh subset");
                }
                ;
                pPosData = pPositionFlow.data;
                if (pPosData.hasSemantics(DeclUsages.BLENDMETA)) {
                    if (pSkin.isAffect(pPosData)) {
                        this._pSkin = pSkin;
                        return true;
                    }
 {
                        logger.setSourceLocation("MeshSubset.ts", 336);
                        logger.error("mesh subset already has another skin");
                    }
                    ;
                    return false;
                }
 {
                    logger.setSourceLocation("MeshSubset.ts", 343);
                    logger.assert(this.data.buffer == pSkin.data, "can not bind to skin mesh subset that does not belong skin's mesh.");
                }
                pSkin.attach(pPosData);
                var pDeclaration = pPosData.getVertexDeclaration();
                var pVEMeta = pDeclaration.findElement(DeclUsages.BLENDMETA);
 {
                    logger.setSourceLocation("MeshSubset.ts", 374);
                    logger.assert(isDefAndNotNull(pVEMeta), "you must specify location for storage blending data");
                }
                ;
                pMetaData = new Float32Array(pPosData.getData(0, pDeclaration.stride));
                pInfMetaData = pSkin.getInfluenceMetaData();
                iInfMetaDataLoc = pInfMetaData.byteOffset / EDataTypeSizes.BYTES_PER_FLOAT;
                iInfMetaDataStride = pInfMetaData.stride / EDataTypeSizes.BYTES_PER_FLOAT;
                var iCount = pMetaData.byteLength / pDeclaration.stride;
                var iOffset = pVEMeta.offset / EDataTypeSizes.BYTES_PER_FLOAT;
                var iStride = pDeclaration.stride / EDataTypeSizes.BYTES_PER_FLOAT;
                for(var i = 0; i < iCount; ++i) {
                    pMetaData[iOffset + i * iStride] = iInfMetaDataLoc + i * iInfMetaDataStride;
                }
                pPosData.setData(pMetaData, 0, pDeclaration.stride);
                this._pSkin = pSkin;
                return true;
            };
            MeshSubset.prototype.update = function () {
                return this.isSkinned() ? this.skin.applyBoneMatrices() : false;
            };
            return MeshSubset;
        })(render.RenderableObject);
        model.MeshSubset = MeshSubset;        
    })(akra.model || (akra.model = {}));
    var model = akra.model;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (model) {
        var Mesh = (function () {
            function Mesh() { }
            return Mesh;
        })();        
        util.ReferenceCounter;
 {
            _sName:
string
            _pFlexMaterials:
IMaterial[] = null
            _pBuffer:
IRenderDataCollection = null
            _pEngine:
IEngine
            _eOptions:
number = 0
            _pSkeleton:
ISkeleton = null
            _pBoundingBox:
IRect3d = null
            _pBoundingSphere:
ISphere = null
            _pSubMeshes:
IMeshSubset[] = []
            _bShadow:
bool = true
            inline;
            get;
            length();
            number;
 {
                return this._pSubMeshes.length;
            }
            inline;
            get;
            flexMaterials();
            IMaterial[];
 {
                return this._pFlexMaterials;
            }
            inline;
            get;
            name();
            string;
 {
                return this._sName;
            }
            inline;
            get;
            data();
            IRenderDataCollection;
 {
                return this._pBuffer;
            }
            inline;
            get;
            skeleton();
            ISkeleton;
 {
                return this._pSkeleton;
            }
            inline;
            set;
            skeleton(pSkeleton, ISkeleton);
 {
                this._pSkeleton = pSkeleton;
            }
            inline;
            get;
            boundingBox();
            IRect3d;
 {
                if (isNull(this._pBoundingBox)) {
                    if (!this.createBoundingBox()) {
 {
                            logger.setSourceLocation("model/Mesh.ts", 66);
                            logger.warning("could not compute bounding box fo mesh");
                        }
                        ;
                    }
                }
                return this._pBoundingBox;
            }
            inline;
            get;
            boundingSphere();
            ISphere;
 {
                if (isNull(this._pBoundingSphere)) {
                    if (!this.createBoundingSphere()) {
 {
                            logger.setSourceLocation("model/Mesh.ts", 76);
                            logger.warning("could not compute bounding sphere for mesh");
                        }
                        ;
                    }
                }
                return this._pBoundingSphere;
            }
            constructor(pEngine, IEngine, eOptions, number, sName, string, pDataBuffer, IRenderDataCollection);
 {
                _super.prototype();
                this._sName = sName || null;
                this._pEngine = pEngine;
                this.setup(sName, eOptions, pDataBuffer);
            }
            setSkeleton(pSkeleton, ISkeleton);
            void {
                this: ,
                skeleton:  = pSkeleton
            };
            getOptions();
            number;
 {
                return this._eOptions;
            }
            getEngine();
            IEngine;
 {
                return this._pEngine;
            }
            _drawSubset(iSubset, number);
            void {
                this: ,
                _pBuffer: ,
                _draw: (iSubset)
            };
            _draw();
            void {
                for: 
            };
            var i = 0;
            i < this.length;
            i++;
 {
                this._pSubMeshes[i]._draw();
            }
            ;
        }
        isReadyForRender();
        bool;
 {
            for(var i = 0; i < this._pSubMeshes.length; ++i) {
                if (!this._pSubMeshes[i].isReadyForRender()) {
                    return false;
                }
            }
            return true;
        }
        setup(sName, string, eOptions, number, pDataCollection ?  : IRenderDataCollection);
        bool;
 {
 {
                logger.setSourceLocation("model/Mesh.ts", 124);
                logger.assert(this._pBuffer === null, "mesh already setuped.");
            }
            ;
            if (isNull(pDataCollection)) {
                this._pBuffer = this._pEngine.createRenderDataCollection(eOptions);
            } else {
 {
                    logger.setSourceLocation("model/Mesh.ts", 131);
                    logger.assert(pDataCollection.getEngine() === this.getEngine(), "you can not use a buffer with a different context");
                }
                ;
                this._pBuffer = pDataCollection;
                eOptions |= pDataCollection.getOptions();
            }
            this._pBuffer.addRef();
            this._eOptions = eOptions || 0;
            this._sName = sName || "unknown";
            return true;
        }
        createSubset(sName, string, ePrimType, EPrimitiveTypes, eOptions, number = 0);
        IMeshSubset;
 {
            var pData;
            pData = this._pBuffer.getEmptyRenderData(ePrimType, eOptions);
            pData.addRef();
            if (isNull(pData)) {
                return null;
            }
            return this.appendSubset(sName, pData);
        }
        appendSubset(sName, string, pData, IRenderData);
        IMeshSubset;
 {
 {
                logger.setSourceLocation("model/Mesh.ts", 158);
                logger.assert(pData.buffer === this._pBuffer, "invalid data used");
            }
            ;
            var pSubMesh = new MeshSubset(this, pData, sName);
            this._pSubMeshes.push(pSubMesh);
            this.connect(pSubMesh, "shadow", "shadow", EEventTypes.UNICAST);
            return pSubMesh;
        }
        replaceFlexMaterials(pFlexMaterials, IMaterial[]);
        void {
            this: ,
            _pFlexMaterials:  = pFlexMaterials
        };
        freeSubset(sName, string);
        bool;
 {
 {
                logger.setSourceLocation("model/Mesh.ts", 174);
                logger.error("Метод freeSubset не реализован");
            }
            ;
            return false;
        }
        getFlexMaterial(iMaterial, number);
        IMaterial;
        getFlexMaterial(sName, string);
        IMaterial;
        getFlexMaterial(arg);
 {
            if (!this._pFlexMaterials) {
                return null;
            }
            if (typeof arguments[0] === 'number') {
                return this._pFlexMaterials[arguments[0]] || null;
            } else {
                for(var i = 0, pMaterials = this._pFlexMaterials; i < pMaterials.length; ++i) {
                    if (pMaterials[i].name === arguments[0]) {
                        return pMaterials[i];
                    }
                }
            }
            return null;
        }
        addFlexMaterial(sName, string = 'unknown', pMaterialData, IMaterial = null);
        bool;
 {
            var pMaterial;
            var pMaterialId;
 {
                logger.setSourceLocation("model/Mesh.ts", 203);
                logger.assert(arguments.length < 7, "only base material supported now...");
            }
            ;
            pMaterial = this.getFlexMaterial(sName);
            if (pMaterial) {
                if (pMaterialData) {
                    pMaterial.set(pMaterialData);
                }
                return true;
            }
            if (!this._pFlexMaterials) {
                this._pFlexMaterials = [];
            }
            pMaterialId = this._pFlexMaterials.length;
            pMaterial = material._createFlex(sName, this._pBuffer._allocateData(material.VERTEX_DECL, null));
            if (!pMaterialData) {
                pMaterialData = material.create(null, material.DEFAULT);
            }
            pMaterial.set(pMaterialData);
            this._pFlexMaterials.push(pMaterial);
            return true;
        }
        setFlexMaterial(iMaterial, number);
        bool;
        setFlexMaterial(csName, string);
        bool;
        setFlexMaterial(iMaterial);
        bool;
 {
            var bResult = true;
            for(var i = 0; i < this.length; ++i) {
                if (!this._pSubMeshes[i].setFlexMaterial(iMaterial)) {
 {
                        logger.setSourceLocation("model/Mesh.ts", 243);
                        logger.warning("cannot set material<" + iMaterial + "> for mesh<" + this.name + "> subset<" + this._pSubMeshes[i].name + ">");
                    }
                    ;
                    bResult = false;
                }
            }
            return bResult;
        }
        destroy();
        void {
            this: ,
            _pFlexMaterials:  = null
        };
        this._pSubMeshes = null;
        this._pBuffer.destroy();
    })(akra.model || (akra.model = {}));
    var model = akra.model;
})(akra || (akra = {}));
getSubset(sName, string);
IMeshSubset;
getSubset(i, number);
IMeshSubset;
getSubset(i, any);
IMeshSubset;
 {
    if (isInt(arguments[0])) {
        return this._pSubMeshes[arguments[0]];
    } else {
        for(var i = 0; i < this.length; ++i) {
            if (this._pSubMeshes[i].name === arguments[0]) {
                return this._pSubMeshes[i];
            }
        }
    }
    return null;
}
setSkin(pSkin, ISkin);
void {
    for: 
};
var i = 0;
i < this.length;
++i;
 {
    this._pSubMeshes[i].setSkin(pSkin);
}
;
createSkin();
ISkin;
 {
    var pSkin = createSkin(this);
    return pSkin;
}
clone(iCloneOptions, number);
IMesh;
 {
    var pClone = null;
    var pRenderData;
    var pSubMesh;
    if (iCloneOptions & EMeshCloneOptions.SHARED_GEOMETRY) {
        pClone = this.getEngine().createMesh(this.name, this.getOptions(), this.data);
        for(var i = 0; i < this.length; ++i) {
            pRenderData = this._pSubMeshes[i].data;
            pRenderData.addRef();
            pClone.appendSubset(this._pSubMeshes[i].name, pRenderData);
        }
        pClone.replaceFlexMaterials(this.flexMaterials);
    } else {
    }
    if (iCloneOptions & EMeshCloneOptions.GEOMETRY_ONLY) {
        return pClone;
    } else {
    }
    return pClone;
}
createAndShowSubBoundingBox();
void {
    for: 
};
var i = 0;
i < this.length;
i++;
 {
    var pSubMesh = this.getSubset(i);
    if (pSubMesh.createBoundingBox()) {
        if (!pSubMesh.showBoundingBox()) {
 {
                logger.setSourceLocation("model/Mesh.ts", 321);
                logger.error("could not show sub bounding box");
            }
            ;
        }
    } else {
 {
            logger.setSourceLocation("model/Mesh.ts", 325);
            logger.error("could not create sub bounding box.");
        }
        ;
    }
}
createAndShowSubBoundingSphere();
void {
    for: 
};
var i = 0;
i < this.length;
i++;
 {
    var pSubMesh = this.getSubset(i);
    pSubMesh.createBoundingSphere();
    pSubMesh.showBoundingSphere();
}
createBoundingBox();
bool;
 {
    var pVertexData;
    var pSubMesh;
    var pNewBoundingBox;
    var pTempBoundingBox;
    var i;
    pNewBoundingBox = new geometry.Rect3d();
    pTempBoundingBox = new geometry.Rect3d();
    pSubMesh = this.getSubset(0);
    pVertexData = pSubMesh.data._getData(DeclUsages.POSITION);
    if (isNull(pVertexData)) {
        return false;
    }
    if (geometry.computeBoundingBox(pVertexData, pNewBoundingBox) == false) {
        return false;
    }
    if (pSubMesh.isSkinned()) {
        pNewBoundingBox.transform(pSubMesh.skin.getBindMatrix());
        pNewBoundingBox.transform(pSubMesh.skin.getBoneOffsetMatrix(pSubMesh.skin.skeleton.root.boneName));
    }
    for(i = 1; i < this.length; i++) {
        pSubMesh = this.getSubset(i);
        pVertexData = pSubMesh.data._getData(DeclUsages.POSITION);
        if (!pVertexData) {
            return false;
        }
        if (geometry.computeBoundingBox(pVertexData, pTempBoundingBox) == false) {
            return false;
        }
        if (pSubMesh.isSkinned()) {
            pTempBoundingBox.transform(pSubMesh.skin.getBindMatrix());
            pTempBoundingBox.transform(pSubMesh.skin.getBoneOffsetMatrix(pSubMesh.skin.skeleton.root.boneName));
        }
        pNewBoundingBox.x0 = Math.min(pNewBoundingBox.x0, pTempBoundingBox.x0);
        pNewBoundingBox.y0 = Math.min(pNewBoundingBox.y0, pTempBoundingBox.y0);
        pNewBoundingBox.z0 = Math.min(pNewBoundingBox.z0, pTempBoundingBox.z0);
        pNewBoundingBox.x1 = Math.max(pNewBoundingBox.x1, pTempBoundingBox.x1);
        pNewBoundingBox.y1 = Math.max(pNewBoundingBox.y1, pTempBoundingBox.y1);
        pNewBoundingBox.z1 = Math.max(pNewBoundingBox.z1, pTempBoundingBox.z1);
    }
    this._pBoundingBox = pNewBoundingBox;
    return true;
}
deleteBoundingBox();
bool;
 {
    this._pBoundingBox = null;
    return true;
}
showBoundingBox();
bool;
 {
    var pSubMesh;
    var pMaterial;
    var iData;
    var pPoints, pIndexes;
    if (isNull(this._pBoundingBox)) {
        return false;
    }
    pPoints = new Array();
    pIndexes = new Array();
    geometry.computeDataForCascadeBoundingBox(this._pBoundingBox, pPoints, pIndexes, 0.1);
    pSubMesh = this.getSubset(".BoundingBox");
    if (!pSubMesh) {
        pSubMesh = this.createSubset(".BoundingBox", EPrimitiveTypes.LINELIST, EHardwareBufferFlags.STATIC);
        if (isNull(pSubMesh)) {
            return false;
        }
        iData = pSubMesh.data.allocateData([
            VE_FLOAT3(DeclUsages.POSITION)
        ], new Float32Array(pPoints));
        pSubMesh.data.allocateIndex([
            VE_FLOAT(DeclUsages.INDEX0)
        ], new Float32Array(pIndexes));
        pSubMesh.data.index(iData, DeclUsages.INDEX0);
        pMaterial = pSubMesh.material;
        pMaterial.emissive = new Color(1.0, 1.0, 1.0, 1.0);
        pMaterial.diffuse = new Color(1.0, 1.0, 1.0, 1.0);
        pMaterial.ambient = new Color(1.0, 1.0, 1.0, 1.0);
        pMaterial.specular = new Color(1.0, 1.0, 1.0, 1.0);
        pSubMesh.effect.addComponent("akra.system.mesh_texture");
        pSubMesh.effect.addComponent("akra.system.prepareForDeferredShading");
    } else {
        pSubMesh.data._getData(DeclUsages.POSITION).setData(new Float32Array(pPoints), DeclUsages.POSITION);
    }
    pSubMesh.data.setRenderable(pSubMesh.data.getIndexSet(), true);
    return true;
}
hideBoundingBox();
bool;
 {
    var pSubMesh = this.getSubset(".BoundingBox");
    if (!pSubMesh) {
        return false;
    }
    return false;
}
createBoundingSphere();
bool;
 {
    var pVertexData;
    var pSubMesh;
    var pNewBoundingSphere, pTempBoundingSphere;
    var i;
    pNewBoundingSphere = new geometry.Sphere();
    pTempBoundingSphere = new geometry.Sphere();
    pSubMesh = this.getSubset(0);
    pVertexData = pSubMesh.data._getData(DeclUsages.POSITION);
    if (!pVertexData) {
        return false;
    }
    if (geometry.computeBoundingSphere(pVertexData, pNewBoundingSphere) == false) {
        return false;
    }
    if (pSubMesh.isSkinned()) {
        pNewBoundingSphere.transform(pSubMesh.skin.getBindMatrix());
        pNewBoundingSphere.transform(pSubMesh.skin.getBoneOffsetMatrix(pSubMesh.skin.skeleton.root.boneName));
    }
    for(i = 1; i < this.length; i++) {
        pSubMesh = this.getSubset(i);
        pVertexData = pSubMesh.data._getData(DeclUsages.POSITION);
        if (isNull(pVertexData)) {
            return false;
        }
        if (geometry.computeBoundingSphere(pVertexData, pTempBoundingSphere) == false) {
            return false;
        }
        if (pSubMesh.isSkinned()) {
            pTempBoundingSphere.transform(pSubMesh.skin.getBindMatrix());
            pTempBoundingSphere.transform(pSubMesh.skin.getBoneOffsetMatrix(pSubMesh.skin.skeleton.root.boneName));
        }
        geometry.computeGeneralizingSphere(pNewBoundingSphere, pTempBoundingSphere);
    }
    this._pBoundingSphere = pNewBoundingSphere;
    return true;
}
deleteBoundingSphere();
bool;
 {
    this._pBoundingSphere = null;
    return true;
}
showBoundingSphere();
bool;
 {
    var pSubMesh, pMaterial;
    var iData;
    var pPoints, pIndexes;
    if (!this._pBoundingSphere) {
        return false;
    }
    pPoints = new Array();
    pIndexes = new Array();
    geometry.computeDataForCascadeBoundingSphere(this._pBoundingSphere, pPoints, pIndexes);
    pSubMesh = this.getSubset(".BoundingSphere");
    if (!pSubMesh) {
        pSubMesh = this.createSubset(".BoundingSphere", EPrimitiveTypes.LINELIST, EHardwareBufferFlags.STATIC);
        if (isNull(pSubMesh)) {
            return false;
        }
        iData = pSubMesh.data.allocateData([
            VE_FLOAT3(DeclUsages.POSITION)
        ], new Float32Array(pPoints));
        pSubMesh.data.allocateIndex([
            VE_FLOAT(DeclUsages.INDEX0)
        ], new Float32Array(pIndexes));
        pSubMesh.data.index(iData, DeclUsages.INDEX0);
        pMaterial = pSubMesh.material;
        pMaterial.emissive = new Color(1.0, 0.0, 0.0, 1.0);
        pMaterial.diffuse = new Color(1.0, 0.0, 0.0, 1.0);
        pMaterial.ambient = new Color(1.0, 0.0, 0.0, 1.0);
        pMaterial.specular = new Color(1.0, 0.0, 0.0, 1.0);
    } else {
        pSubMesh.data._getData(DeclUsages.POSITION).setData(new Float32Array(pPoints), DeclUsages.POSITION);
    }
    pSubMesh.data.setRenderable(pSubMesh.data.getIndexSet(), true);
    return true;
}
hideBoundingSphere();
bool;
 {
    var pSubMesh;
    pSubMesh = this.getSubset(".BoundingSphere");
    if (!pSubMesh) {
        return false;
    }
    return false;
}
inline;
get;
hasShadow();
bool;
 {
    return this._bShadow;
}
set;
hasShadow(bValue, bool);
 {
    for(var i = 0; i < this._pSubMeshes.length; ++i) {
        this._pSubMeshes[i].hasShadow = bValue;
    }
}
toSceneModel(pParent, ISceneNode, sName, string = null);
ISceneModel;
 {
    if (isNull(pParent)) {
        return null;
    }
    var pSceneModel = pParent.scene.createModel(sName);
    if (!pSceneModel.create()) {
        return null;
    }
    pSceneModel.mesh = this;
    pSceneModel.attachToParent(pParent);
    return pSceneModel;
}
update();
bool;
 {
    var isOk = false;
    for(var i = 0; i < this.length; ++i) {
        isOk = this._pSubMeshes[i].update() ? true : isOk;
    }
    return isOk;
}
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return Mesh._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
shadow(pSubMesh, IMeshSubset, bShadow, bool);
void {
    this: ,
    _bShadow:  = bShadow
};
if (!bShadow) {
    for(var i = 0; i < this._pSubMeshes.length; ++i) {
        if (this._pSubMeshes[i].hasShadow) {
            this._bShadow = true;
            break;
        }
    }
}
this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
var _broadcast = (this._pBroadcastSlotList).shadow;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pSubMesh, bShadow) : _broadcast[i].listener(_recivier, pSubMesh, bShadow);
    }
}
;
function createMesh(pEngine, sName, eOptions, pDataBuffer) {
    if (typeof sName === "undefined") { sName = null; }
    if (typeof eOptions === "undefined") { eOptions = 0; }
    if (typeof pDataBuffer === "undefined") { pDataBuffer = null; }
    return new Mesh(pEngine, eOptions, sName, pDataBuffer);
}
exports.createMesh = createMesh;
var akra;
(function (akra) {
    (function (scene) {
        var SceneModel = (function (_super) {
            __extends(SceneModel, _super);
            function SceneModel(pScene) {
                _super.call(this, pScene, EEntityTypes.MODEL);
                this._pMesh = null;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = getRenderable(i, number = 0);
                this.IRenderableObject = {
                    if: (isNull(this._pMesh))
                };
            }
            SceneModel.prototype.mesh = function () {
                return this._pMesh;
            };
            SceneModel.prototype.mesh = function (pMesh) {
                if (!isNull(this._pMesh)) {
                    this.accessLocalBounds().set(0.01, 0.01, 0.01);
                    this._pMesh.disconnect(this.scene, "preUpdate", "update");
                    this._pMesh = null;
                }
                if (!isNull(pMesh)) {
                    this.accessLocalBounds().set(pMesh.boundingBox);
                    this._pMesh = pMesh;
                    pMesh.connect(this.scene, "preUpdate", "update");
                }
            };
            SceneModel.prototype.totalRenderable = function () {
                return isNull(this._pMesh) ? 0 : this._pMesh.length;
            };
            return SceneModel;
        })(SceneObject);
        scene.SceneModel = SceneModel;        
 {
 {
                logger.setSourceLocation("SceneModel.ts", 43);
                logger.warning(this);
            }
            ;
        }
        return this._pMesh.getSubset(i);
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
inline;
get;
hasShadow();
bool;
 {
    return this._pMesh.hasShadow;
}
inline;
set;
hasShadow(bValue);
 {
    this._pMesh.hasShadow = bValue;
}
toString(isRecursive, bool = false, iDepth, number = 0);
string;
 {
    if (!isRecursive) {
        var sData = "<model" + (this.name ? " " + this.name : "") + "(" + (isNull(this._pMesh) ? 0 : this._pMesh.length) + ")" + '>';
        if (!isNull(this._pMesh)) {
            sData += "( " + this._pMesh.name + " )";
        }
        return sData;
    }
    return _super.prototype.toString.call(this, isRecursive, iDepth);
}
var iUpdatedOnce = 0;
inline;
function isModel(pEntity) {
    return pEntity.type === EEntityTypes.MODEL;
}
var akra;
(function (akra) {
    (function (render) {
        ;
        var RenderData = (function (_super) {
            __extends(RenderData, _super);
            function RenderData(pCollection) {
                if (typeof pCollection === "undefined") { pCollection = null; }
                _super.call(this);
                this._eOptions = 0;
                this._pBuffer = null;
                this._iId = -1;
                this._pIndexBuffer = null;
                this._pAttribBuffer = null;
                this._pIndexData = null;
                this._pAttribData = null;
                this._pMap = null;
                this._pIndicesArray = [];
                this._iIndexSet = 0;
                this._iRenderable = 1;
                this._pComposer = null;
                this.inline = get;
                this.inline = private;
                this.inline = hasAttributes();
                this.bool = {
                    return: !isNull(this._pAttribData)
                };
                this._pBuffer = pCollection;
                this._pComposer = pCollection.getEngine().getComposer();
            }
            RenderData.prototype.buffer = function () {
                return this._pBuffer;
            };
            Object.defineProperty(RenderData.prototype, "indexSet", {
                get: function () {
                    return this._pIndicesArray[this._iIndexSet];
                },
                enumerable: true,
                configurable: true
            });
            RenderData.prototype.allocateData = function (pDecl, pData, hasIndex) {
                if (typeof hasIndex === "undefined") { hasIndex = true; }
                var pDataDecl = createVertexDeclaration(pDecl);
                var eType = ERenderDataTypes.INDEXED;
                if (!hasIndex || this.useSingleIndex()) {
                    eType = ERenderDataTypes.DIRECT;
                } else if (this.useAdvancedIndex()) {
                    eType = ERenderDataTypes.I2I;
                }
                return this._allocateData(pDataDecl, pData, eType);
            };
            RenderData.prototype.releaseData = function (iDataLocation) {
            };
            RenderData.prototype.allocateAttribute = function (pAttrDecl, pData) {
                var pIndexData = this._pIndexData;
                var pAttribData = this._pAttribData;
                var pAttribBuffer = this._pAttribBuffer;
                var pBuffer = this._pBuffer;
                if (!pAttribData) {
                    if (!pAttribBuffer) {
                        pAttribBuffer = pBuffer.getEngine().getResourceManager().createVertexBuffer('render_data_attrs_' + sid());
                        pAttribBuffer.create((pData).byteLength, EHardwareBufferFlags.BACKUP_COPY);
                        this._pAttribBuffer = pAttribBuffer;
                    }
                    this._pAttribData = this._pAttribBuffer.allocateData(pAttrDecl, pData);
                    this._pIndicesArray[this._iIndexSet].pAttribData = this._pAttribData;
                    this._pMap.flow(this._pAttribData);
                    return this._pAttribData !== null;
                }
                if (!pAttribData.extend(pAttrDecl, pData)) {
 {
                        logger.setSourceLocation("RenderData.ts", 139);
                        logger.log('invalid data for allocation:', arguments);
                    }
                    ;
 {
                        logger.setSourceLocation("RenderData.ts", 140);
                        logger.warning('cannot allocate attribute in data subset..');
                    }
                    ;
                    return false;
                }
                return true;
            };
            RenderData.prototype.allocateIndex = function (pDecl, pData) {
                var pAttrDecl = createVertexDeclaration(pDecl);
                if (this.useAdvancedIndex()) {
                    return this._allocateAdvancedIndex(pAttrDecl, pData);
                }
                return this._allocateIndex(pAttrDecl, pData);
            };
            RenderData.prototype.getAdvancedIndexData = function (sSemantics) {
                return this._getData(sSemantics, true);
            };
            RenderData.prototype.addIndexSet = function (usePreviousDataSet, ePrimType, sName) {
                if (typeof usePreviousDataSet === "undefined") { usePreviousDataSet = true; }
                if (typeof ePrimType === "undefined") { ePrimType = EPrimitiveTypes.TRIANGLELIST; }
                if (typeof sName === "undefined") { sName = null; }
                if (usePreviousDataSet) {
                    this._pMap = this._pMap.clone(false);
                    if (!this._pMap) {
 {
                            logger.setSourceLocation("RenderData.ts", 181);
                            logger.warning("could not clone buffer map");
                        }
                        ;
                        return -1;
                    }
                } else {
                    this._pMap = this._pBuffer.getEngine().createBufferMap();
                    this._pAttribData = null;
                }
                this._pMap.primType = ePrimType;
                this._pIndexData = null;
                this._iIndexSet = this._pIndicesArray.length;
                this._pIndicesArray.push({
                    pMap: this._pMap,
                    pIndexData: this._pIndexData,
                    pAttribData: this._pAttribData,
                    sName: sName,
                    pI2IDataCache: null,
                    pAdditionCache: null
                });
                return this._iIndexSet;
            };
            RenderData.prototype.getNumIndexSet = function () {
                return this._pIndicesArray.length;
            };
            RenderData.prototype.getIndexSetName = function (iSet) {
                if (typeof iSet === "undefined") { iSet = this._iIndexSet; }
                return this._pIndicesArray[iSet].sName;
            };
            RenderData.prototype.selectIndexSet = function (a) {
                var iSet = -1;
                if (isString(arguments[0])) {
                    for(var i = 0; i < this._pIndicesArray.length; ++i) {
                        if (this._pIndicesArray[i].sName === arguments[0]) {
                            iSet = i;
                            break;
                        }
                    }
                    ;
                    if (iSet < 0) {
                        return false;
                    }
                }
                var pIndexSet = this._pIndicesArray[iSet];
                if (pIndexSet) {
                    this._pMap = pIndexSet.pMap;
                    this._pIndexData = pIndexSet.pIndexData;
                    this._pAttribData = pIndexSet.pAttribData;
                    this._iIndexSet = iSet;
                    return true;
                }
                return false;
            };
            RenderData.prototype.getIndexSet = function () {
                return this._iIndexSet;
            };
            RenderData.prototype.useAdvancedIndex = function () {
                return (this._eOptions & ERenderDataOptions.ADVANCED_INDEX) != 0;
            };
            RenderData.prototype.useSingleIndex = function () {
                return (this._eOptions & ERenderDataOptions.SINGLE_INDEX) != 0;
            };
            RenderData.prototype.useMultiIndex = function () {
                return (this._eOptions & ERenderDataOptions.SINGLE_INDEX) == 0;
            };
            RenderData.prototype.setRenderable = function (iIndexSet, bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (arguments.length < 2) {
                    if (arguments[0]) {
                        ((this._eOptions) |= (ERenderDataOptions.RENDERABLE));
                    } else {
                        ((this._eOptions) &= ~(ERenderDataOptions.RENDERABLE));
                    }
                }
                (bValue ? ((this._iRenderable) |= (1 << (iIndexSet))) : ((this._iRenderable) &= ~(1 << (iIndexSet))));
            };
            RenderData.prototype.isRenderable = function (iIndexSet) {
                if (arguments.length > 0) {
                    return ((this._iRenderable & (1 << (iIndexSet))) != 0);
                }
                return this._eOptions & ERenderDataOptions.RENDERABLE ? true : false;
            };
            RenderData.prototype.hasSemantics = function (sSemantics, bSearchComplete) {
                if (typeof bSearchComplete === "undefined") { bSearchComplete = true; }
                return this._getFlow(sSemantics, bSearchComplete) !== null;
            };
            RenderData.prototype.getDataLocation = function (sSemantics) {
                var pData = this._getData(sSemantics);
                return pData ? pData.byteOffset : -1;
            };
            RenderData.prototype.getIndices = function () {
                return this._pIndexData;
            };
            RenderData.prototype.getPrimitiveCount = function () {
                return this._pMap.primCount;
            };
            RenderData.prototype.index = function (data, sSemantics, useSame, iBeginWith) {
                if (typeof useSame === "undefined") { useSame = false; }
                if (typeof iBeginWith === "undefined") { iBeginWith = 0; }
                var iData = arguments[0];
                var iFlow = -1;
                var iAddition, iRealAddition, iPrevAddition;
                var pFlow;
                var pData, pRealData;
                var pFloat32Array;
                var iIndexOffset;
                var pIndexData = this._pIndexData;
                var sData;
                var iStride;
                var iTypeSize = EDataTypeSizes.BYTES_PER_FLOAT;
                if (this.useAdvancedIndex()) {
                    pRealData = this._getData(arguments[0]);
                    iAddition = pRealData.byteOffset;
                    iStride = pRealData.stride;
                    pData = this._getData(sSemantics, true);
                    pData.applyModifier(sSemantics, function (pTypedData) {
                        for(var i = 0; i < pTypedData.length; i++) {
                            pTypedData[i] = (pTypedData[i] * iStride + iAddition) / iTypeSize;
                        }
                    });
                    iData = pData.byteOffset;
                    sSemantics = "INDEX_" + sSemantics;
                } else if (isString(arguments[0])) {
                    if (arguments[0] === "TEXCOORD") {
                        iData = this.getDataLocation("TEXCOORD0");
                    } else {
                        iData = this.getDataLocation(arguments[0]);
                    }
 {
                        logger.setSourceLocation("RenderData.ts", 376);
                        logger.assert(iData >= 0, "cannot find data with semantics: " + arguments[0]);
                    }
                    ;
                }
                pFlow = this._getFlow(iData);
                if (pFlow === null) {
 {
                        logger.setSourceLocation("RenderData.ts", 382);
                        logger.warning("Could not find data flow <" + iData + "> int buffer map: " + this._pMap.toString(true));
                    }
                    ;
                    return false;
                }
                iFlow = pFlow.flow;
                iIndexOffset = (pIndexData).getVertexDeclaration().findElement(sSemantics).offset;
                pFloat32Array = (pIndexData).getTypedData(sSemantics);
                iAddition = iData;
                if (!pFloat32Array) {
                    return false;
                }
                iStride = pFlow.data.stride;
                if (this.indexSet.pAdditionCache[iIndexOffset] !== iAddition) {
                    if (!useSame) {
                        iPrevAddition = this.indexSet.pAdditionCache[iIndexOffset] || 0;
                        iRealAddition = iAddition - iPrevAddition;
                        for(var i = 0; i < pFloat32Array.length; i++) {
                            pFloat32Array[i] = (pFloat32Array[i] * iStride + iRealAddition) / iTypeSize;
                        }
                        ;
                    } else {
                        iRealAddition = iAddition;
                        for(var i = 0; i < pFloat32Array.length; i++) {
                            pFloat32Array[i] = (iBeginWith + iRealAddition) / iTypeSize;
                        }
                        ;
                    }
                    this.indexSet.pAdditionCache[iIndexOffset] = iAddition;
                    if (!(pIndexData).setData(pFloat32Array, sSemantics)) {
                        return false;
                    }
                }
                return this._pMap.mapping(iFlow, pIndexData, sSemantics);
            };
            RenderData.prototype._setup = function (pCollection, iId, ePrimType, eOptions) {
                if (typeof ePrimType === "undefined") { ePrimType = EPrimitiveTypes.TRIANGLELIST; }
                if (typeof eOptions === "undefined") { eOptions = 0; }
                if (this._pBuffer === null && arguments.length < 2) {
                    return false;
                }
                this.setRenderable(true);
                this._eOptions |= eOptions;
                this._pBuffer = pCollection;
                this._iId = iId;
                this._pMap = pCollection.getEngine().createBufferMap();
                this._pMap.primType = ePrimType;
                this._pIndicesArray.push({
                    sName: ".main",
                    pMap: this._pMap,
                    pIndexData: null,
                    pAttribData: null,
                    pI2IDataCache: {},
                    pAdditionCache: null
                });
 {
                    logger.setSourceLocation("RenderData.ts", 454);
                    logger.assert(this.useSingleIndex() === false, "single indexed data not implimented");
                }
                ;
                return true;
            };
            RenderData.prototype._allocateData = function (pDataDecl, pData, eType) {
                if (eType === ERenderDataTypes.DIRECT) {
                    return this.allocateAttribute(pDataDecl, pData) ? 0 : -1;
                }
                var iFlow;
                var pVertexData = this._pBuffer._allocateData(pDataDecl, pData);
                var iOffset = pVertexData.byteOffset;
                iFlow = this._addData(pVertexData, undefined, eType);
                if (iFlow < 0) {
 {
                        logger.setSourceLocation("RenderData.ts", 474);
                        logger.log("invalid data", pDataDecl, pData);
                    }
                    ;
 {
                        logger.setSourceLocation("RenderData.ts", 475);
                        logger.error("cannot allocate data for submesh");
                    }
                    ;
                    return -1;
                }
                return iOffset;
            };
            RenderData.prototype._addData = function (pVertexData, iFlow, eType) {
                if (typeof eType === "undefined") { eType = ERenderDataTypes.DIRECT; }
                if ((arguments.length < 3 && this.useAdvancedIndex()) || arguments[2] === ERenderDataTypes.I2I) {
                    return this._registerData(pVertexData);
                }
                return (!isDef(iFlow) ? this._pMap.flow(pVertexData) : this._pMap.flow(iFlow, pVertexData));
            };
            RenderData.prototype._registerData = function (pVertexData) {
                'use strict';
                var iOffset = pVertexData.byteOffset;
                var pDataDecl = pVertexData.getVertexDeclaration();
                for(var i = 0; i < pDataDecl.length; i++) {
                    this.indexSet.pI2IDataCache[pDataDecl.element(i).usage] = iOffset;
                }
                return 0;
            };
            RenderData.prototype._allocateAdvancedIndex = function (pAttrDecl, pData) {
                var pDecl = createVertexDeclaration(pAttrDecl);
                var nCount = pData.byteLength / pDecl.stride;
                var iIndLoc = this._allocateData(pAttrDecl, pData, ERenderDataTypes.INDEXED);
                var pI2IData = new Float32Array(nCount);
                var pI2IDecl = [];
                for(var i = 0; i < pDecl.length; i++) {
                    pI2IDecl.push(VE_FLOAT('INDEX_' + pDecl.element(i).usage, 0));
                }
                for(var i = 0; i < pI2IData.length; i++) {
                    pI2IData[i] = i;
                }
                if (!this._allocateIndex(pI2IDecl, pI2IData)) {
                    this.releaseData(iIndLoc);
                    pI2IData = null;
                    pI2IDecl = null;
 {
                        logger.setSourceLocation("RenderData.ts", 547);
                        logger.warning('cannot allocate index for index in render data subset');
                    }
                    ;
                    return false;
                }
                return true;
            };
            RenderData.prototype._createIndex = function (pAttrDecl, pData) {
                'use strict';
                if (!this._pIndexBuffer) {
                    if (this.useMultiIndex()) {
                        this._pIndexBuffer = this._pBuffer.getEngine().getResourceManager().createVertexBuffer('subset_' + sid());
                        this._pIndexBuffer.create(((pData).byteLength), EHardwareBufferFlags.BACKUP_COPY);
                    } else {
                    }
                }
                this._pIndexData = (this._pIndexBuffer).allocateData(pAttrDecl, pData);
                this.indexSet.pIndexData = this._pIndexData;
                this.indexSet.pAdditionCache = {};
                return this._pIndexData !== null;
            };
            RenderData.prototype._allocateIndex = function (pDecl, pData) {
                'use strict';
                var pAttrDecl = createVertexDeclaration(pDecl);
                var pIndexData = this._pIndexData;
                var pIndexBuffer = this._pIndexBuffer;
                var pBuffer = this._pBuffer;
                for(var i = 0; i < pAttrDecl.length; i++) {
                    if (pAttrDecl.element(i).type !== EDataTypes.FLOAT) {
                        return false;
                    }
                }
                if (!this._pIndexData) {
                    return this._createIndex(pAttrDecl, pData);
                }
                if (!(this._pIndexData).extend(pAttrDecl, pData)) {
 {
                        logger.setSourceLocation("RenderData.ts", 608);
                        logger.log('invalid data for allocation:', arguments);
                    }
                    ;
 {
                        logger.setSourceLocation("RenderData.ts", 609);
                        logger.warning('cannot allocate index in data subset..');
                    }
                    ;
                    return false;
                }
                return true;
            };
            RenderData.prototype._setIndexLength = function (iLength) {
                var bResult = (this._pIndexData).resize(iLength);
                if (bResult) {
                    this._pMap._length = iLength;
                }
                return bResult;
            };
            RenderData.prototype._getFlow = function (a, b) {
                if (typeof arguments[0] === 'string') {
                    return this._pMap.getFlow(arguments[0], arguments[1]);
                }
                for(var i = 0, n = this._pMap.limit; i < n; ++i) {
                    var pFlow = this._pMap.getFlow(i, false);
                    if (pFlow.data && pFlow.data.byteOffset === arguments[0]) {
                        return pFlow;
                    }
                }
                return null;
            };
            RenderData.prototype._getData = function (a, b) {
                var pFlow;
                if (this.useAdvancedIndex() && arguments.length < 2) {
                    if (typeof arguments[0] === 'string') {
                        return this._getData(this.indexSet.pI2IDataCache[arguments[0]]);
                    }
                    return this._pBuffer.getData(arguments[0]);
                }
                if (typeof arguments[0] === 'string') {
                    for(var i = 0, n = this._pMap.limit; i < n; ++i) {
                        pFlow = this._pMap.getFlow(i, false);
                        if (pFlow.data != null && pFlow.data.hasSemantics(arguments[0])) {
                            return pFlow.data;
                        }
                    }
                }
                pFlow = this._getFlow(arguments[0]);
                return pFlow === null ? null : pFlow.data;
            };
            RenderData.prototype._draw = function (pTechnique, pViewport, pRenderable, pSceneObject) {
                for(var i = 0; i < this._pIndicesArray.length; i++) {
                    if (this.isRenderable(i)) {
                        this._pComposer.applyBufferMap(this._pIndicesArray[i].pMap);
                        pTechnique._renderTechnique(pViewport, pRenderable, pSceneObject);
                    }
                }
            };
            RenderData.prototype.toString = function () {
                var s;
                s = "\nRENDER DATA SUBSET: #" + this._iId + "\n";
                s += "        ATTRIBUTES: " + (this._pAttribData ? "TRUE" : "FALSE") + "\n";
                s += "----------------------------------------------------------------\n";
                s += this._pMap.toString();
                return s;
            };
            return RenderData;
        })(util.ReferenceCounter);
        render.RenderData = RenderData;        
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (render) {
        var RenderDataCollection = (function (_super) {
            __extends(RenderDataCollection, _super);
            function RenderDataCollection(pEngine, eOptions) {
                if (typeof eOptions === "undefined") { eOptions = 0; }
                _super.call(this);
                this._pDataBuffer = null;
                this._pEngine = null;
                this._eDataOptions = 0;
                this._pDataArray = [];
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this._pEngine = pEngine;
                this.setup(eOptions);
            }
            RenderDataCollection.prototype.buffer = function () {
                return this._pDataBuffer;
            };
            RenderDataCollection.prototype.length = function () {
                return this._pDataArray.length;
            };
            RenderDataCollection.prototype.byteLength = function () {
                return this._pDataBuffer.byteLength;
            };
            RenderDataCollection.prototype.clone = function (pSrc) {
 {
                    logger.setSourceLocation("render/RenderDataCollection.ts", 37);
                    logger.criticalError("TODO: RenderDataCollection::clone();");
                }
                ;
                return false;
            };
            RenderDataCollection.prototype.getEngine = function () {
                return this._pEngine;
            };
            RenderDataCollection.prototype.getOptions = function () {
                return this._eDataOptions;
            };
            RenderDataCollection.prototype.getData = function (a) {
                var pBuffer = this._pDataBuffer;
                var pData;
                var n;
                if (!isNull(pBuffer)) {
                    n = this._pDataBuffer.length;
                    if (isString(arguments[0])) {
                        for(var i = 0; i < n; i++) {
                            pData = pBuffer.getVertexData(i);
                            if (pData.hasSemantics(arguments[0])) {
                                return pData;
                            }
                        }
                        ;
                    } else {
                        for(var i = 0; i < n; i++) {
                            pData = pBuffer.getVertexData(i);
                            if (pData.byteOffset === arguments[0]) {
                                return pData;
                            }
                        }
                        ;
                    }
                }
                return null;
            };
            RenderDataCollection.prototype._allocateData = function (pDecl, pData) {
                if (!this._pDataBuffer) {
                    this.createDataBuffer();
                }
                var pVertexDecl = createVertexDeclaration(pDecl);
                var pVertexData;
                if ((arguments.length < 2) || isNumber(arguments[1]) || isNull(arguments[1])) {
                    pVertexData = this._pDataBuffer.getEmptyVertexData(pData || 1, pVertexDecl);
                } else {
                    pVertexData = this._pDataBuffer.allocateData(pVertexDecl, pData);
                }
 {
                    logger.setSourceLocation("render/RenderDataCollection.ts", 108);
                    logger.assert(pVertexData !== null, "cannot allocate data:\n" + pVertexDecl.toString());
                }
                ;
                return pVertexData;
            };
            RenderDataCollection.prototype.allocateData = function (pDecl, pData, isCommon) {
                if (typeof isCommon === "undefined") { isCommon = true; }
                var pVertexData;
                var pDataDecl = createVertexDeclaration(pDecl);
                for(var i = 0; i < pDataDecl.length; i++) {
                    if (this.getData(pDataDecl.element(i).usage) !== null && pDataDecl.element(i).count !== 0) {
 {
                            logger.setSourceLocation("render/RenderDataCollection.ts", 127);
                            logger.warning("data buffer already contains data with similar vertex decloration <" + pDataDecl.element(i).usage + ">.");
                        }
                        ;
                    }
                }
                ;
                pVertexData = this._allocateData(pDataDecl, pData);
                if (isCommon) {
                    for(var i = 0; i < this._pDataArray.length; ++i) {
                        this._pDataArray[i]._addData(pVertexData);
                    }
                }
                return pVertexData.byteOffset;
            };
            RenderDataCollection.prototype.getDataLocation = function (sSemantics) {
                if (this._pDataBuffer) {
                    var pData;
                    for(var i = 0, n = this._pDataBuffer.length; i < n; i++) {
                        pData = this._pDataBuffer.getVertexData(i);
                        if (pData.hasSemantics(sSemantics)) {
                            return pData.byteOffset;
                        }
                    }
                    ;
                }
                return -1;
            };
            RenderDataCollection.prototype.createDataBuffer = function () {
                var iVbOption = 0;
                var eOptions = this._eDataOptions;
                if (eOptions & ERenderDataBufferOptions.VB_READABLE) {
                    iVbOption = ERenderDataBufferOptions.VB_READABLE;
                }
                this._pDataBuffer = this._pEngine.getResourceManager().createVideoBuffer("render_data_buffer" + "_" + sid());
                this._pDataBuffer.create(0, iVbOption);
                this._pDataBuffer.addRef();
                return this._pDataBuffer !== null;
            };
            RenderDataCollection.prototype.getRenderData = function (iSubset) {
                return this._pDataArray[iSubset];
            };
            RenderDataCollection.prototype.getEmptyRenderData = function (ePrimType, eOptions) {
                if (typeof eOptions === "undefined") { eOptions = 0; }
                var iSubsetId = this._pDataArray.length;
                var pDataset = new RenderData(this);
                eOptions |= this._eDataOptions;
                if (!pDataset._setup(this, iSubsetId, ePrimType, eOptions)) {
 {
                        logger.setSourceLocation("render/RenderDataCollection.ts", 187);
                        logger.error("cannot setup submesh...");
                    }
                    ;
                }
                this._pDataArray.push(pDataset);
                return pDataset;
            };
            RenderDataCollection.prototype._draw = function (iSubset) {
 {
                    logger.setSourceLocation("render/RenderDataCollection.ts", 205);
                    logger.criticalError("TODO");
                }
                ;
            };
            RenderDataCollection.prototype.destroy = function () {
                this._pDataArray = null;
                if (this._pDataBuffer) {
                    this._pDataBuffer.destroy();
                    this._pDataBuffer = null;
                }
                this._pEngine = null;
                this._eDataOptions = 0;
            };
            RenderDataCollection.prototype.setup = function (eOptions) {
                if (typeof eOptions === "undefined") { eOptions = 0; }
                this._eDataOptions = eOptions;
            };
            return RenderDataCollection;
        })(util.ReferenceCounter);
        render.RenderDataCollection = RenderDataCollection;        
        function createRenderDataCollection(pEngine, eOptions) {
            if (typeof eOptions === "undefined") { eOptions = 0; }
            return new RenderDataCollection(pEngine, eOptions);
        }
        render.createRenderDataCollection = createRenderDataCollection;
    })(akra.render || (akra.render = {}));
    var render = akra.render;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ERPCPacketTypes) {
        ERPCPacketTypes._map = [];
        ERPCPacketTypes._map[0] = "FAILURE";
        ERPCPacketTypes.FAILURE = 0;
        ERPCPacketTypes._map[1] = "REQUEST";
        ERPCPacketTypes.REQUEST = 1;
        ERPCPacketTypes._map[2] = "RESPONSE";
        ERPCPacketTypes.RESPONSE = 2;
    })(akra.ERPCPacketTypes || (akra.ERPCPacketTypes = {}));
    var ERPCPacketTypes = akra.ERPCPacketTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EPipeTypes) {
        EPipeTypes._map = [];
        EPipeTypes._map[0] = "UNKNOWN";
        EPipeTypes.UNKNOWN = 0;
        EPipeTypes._map[1] = "WEBSOCKET";
        EPipeTypes.WEBSOCKET = 1;
        EPipeTypes._map[2] = "WEBWORKER";
        EPipeTypes.WEBWORKER = 2;
    })(akra.EPipeTypes || (akra.EPipeTypes = {}));
    var EPipeTypes = akra.EPipeTypes;
    (function (EPipeDataTypes) {
        EPipeDataTypes._map = [];
        EPipeDataTypes._map[0] = "BINARY";
        EPipeDataTypes.BINARY = 0;
        EPipeDataTypes._map[1] = "STRING";
        EPipeDataTypes.STRING = 1;
    })(akra.EPipeDataTypes || (akra.EPipeDataTypes = {}));
    var EPipeDataTypes = akra.EPipeDataTypes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (net) {
        net.WEBSOCKET_PORT = 1337;
        var Pipe = (function () {
            function Pipe(sAddr) {
                if (typeof sAddr === "undefined") { sAddr = null; }
                this._pAddr = null;
                this._nMesg = 0;
                this._eType = EPipeTypes.UNKNOWN;
                this._pConnect = null;
                this._bSetupComplete = false;
                this.inline = get;
                this.inline = isCreated();
                this.bool = {
                    return: !isNull(this._pConnect)
                };
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.inline = getEventTable();
                this.IEventTable = {
                    return: Pipe._pEventTable
                };
                this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = _syncTable(pFrom, IEventProvider);
                if (!isNull(sAddr)) {
                    this.open(sAddr);
                }
            }
            Pipe.prototype.uri = function () {
                return util.uri(this._pAddr.toString());
            };
            Pipe.prototype.open = function (sAddr) {
                if (typeof sAddr === "undefined") { sAddr = null; }
                var pAddr;
                var eType;
                var pSocket = null;
                var pWorker = null;
                var pPipe = this;
                if (!isNull(sAddr)) {
                    pAddr = util.uri(sAddr);
                } else {
                    if (this.isCreated()) {
                        this.close();
                    }
                    pAddr = this.uri;
                }
                if (pAddr.protocol.toLowerCase() === "ws") {
                    if (!(pAddr.port > 0)) {
                        pAddr.port = net.WEBSOCKET_PORT;
                    }
                    if (!isDefAndNotNull(WebSocket)) {
 {
                            logger.setSourceLocation("Pipe.ts", 64);
                            logger.error("Your browser does not support websocket api.");
                        }
                        ;
                        return false;
                    }
                    pSocket = new WebSocket(pAddr.toString());
                    pSocket.binaryType = "arraybuffer";
                    eType = EPipeTypes.WEBSOCKET;
                } else if (util.pathinfo(pAddr.path).ext.toLowerCase() === "js") {
                    if (!isDefAndNotNull(Worker)) {
 {
                            logger.setSourceLocation("Pipe.ts", 76);
                            logger.error("Your browser does not support webworker api.");
                        }
                        ;
                        return false;
                    }
                    pWorker = new Worker(pAddr.toString());
                    eType = EPipeTypes.WEBWORKER;
                } else {
 {
                        logger.setSourceLocation("Pipe.ts", 84);
                        logger.error("Pipe supported only websockets/webworkers.");
                    }
                    ;
                    return false;
                }
                this._pConnect = pWorker || pSocket;
                this._pAddr = pAddr;
                this._eType = eType;
                if (isDefAndNotNull(window)) {
                    window.onunload = function () {
                        pPipe.close();
                    };
                }
                if (!isNull(this._pConnect)) {
                    this.setupConnect();
                    return true;
                }
                return false;
            };
            Pipe.prototype.setupConnect = function () {
                var pConnect = this._pConnect;
                var pPipe = this;
                var pAddr = this._pAddr;
                if (this._bSetupComplete) {
                    return;
                }
                pConnect.onmessage = function (pMessage) {
                    if (isArrayBuffer(pMessage.data)) {
                        pPipe.message(pMessage.data, EPipeDataTypes.BINARY);
                    } else {
                        pPipe.message(pMessage.data, EPipeDataTypes.STRING);
                    }
                };
                pConnect.onopen = function (pEvent) {
 {
                        logger.setSourceLocation("Pipe.ts", 126);
                        logger.log("created connect to: " + pAddr.toString());
                    }
                    ;
                    pPipe.opened(pEvent);
                };
                pConnect.onerror = function (pErr) {
 {
                        logger.setSourceLocation("Pipe.ts", 132);
                        logger.warning("pipe error detected: " + pErr.message);
                    }
                    ;
                    pPipe.error(pErr);
                };
                pConnect.onclose = function (pEvent) {
 {
                        logger.setSourceLocation("Pipe.ts", 137);
                        logger.log("connection to " + pAddr.toString() + " closed");
                    }
                    ;
                    pPipe.closed(pEvent);
                };
                this._bSetupComplete = true;
            };
            Pipe.prototype.close = function () {
                var pSocket;
                var pWorker;
                if (this.isOpened()) {
                    switch(this._eType) {
                        case EPipeTypes.WEBSOCKET:
                            pSocket = this._pConnect;
                            pSocket.onmessage = null;
                            pSocket.onerror = null;
                            pSocket.onopen = null;
                            pSocket.close();
                            break;
                        case EPipeTypes.WEBWORKER:
                            pWorker = this._pConnect;
                            pWorker.terminate();
                    }
                }
                this._pConnect = null;
                this._bSetupComplete = false;
            };
            Pipe.prototype.write = function (pValue) {
                var pSocket;
                var pWorker;
                if (this.isOpened()) {
                    this._nMesg++;
                    switch(this._eType) {
                        case EPipeTypes.WEBSOCKET:
                            pSocket = this._pConnect;
                            if (isObject(pValue)) {
                                pValue = JSON.stringify(pValue);
                            }
                            pSocket.send(pValue);
                            return true;
                        case EPipeTypes.WEBWORKER:
                            pWorker = this._pConnect;
                            if (isDef(pValue.byteLength)) {
                                pWorker.postMessage(pValue, [
                                    pValue
                                ]);
                            } else {
                                pWorker.postMessage(pValue);
                            }
                            return true;
                    }
                }
                return false;
            };
            Pipe.prototype.isClosed = function () {
                switch(this._eType) {
                    case EPipeTypes.WEBSOCKET:
                        return isNull(this._pConnect) || ((this._pConnect).readyState === WebSocket.CLOSED);
                }
                return isNull(this._pConnect);
            };
            Pipe.prototype.isOpened = function () {
                switch(this._eType) {
                    case EPipeTypes.WEBSOCKET:
                        return !isNull(this._pConnect) && (this._pConnect).readyState === WebSocket.OPEN;
                }
                return !isNull(this._pConnect);
            };
            Pipe._pEventTable = new events.EventTable();
            return Pipe;
        })();        
        void {
            this: ,
            getEventTable: ._sync(this, pFrom)
        };
        opened();
        void {
            this: ,
            _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
        };
        var _broadcast = (this._pBroadcastSlotList).opened;
        var _recivier = this;
        if (isDef(_broadcast)) {
            for(var i = 0; i < _broadcast.length; ++i) {
                _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
            }
        }
    })(akra.net || (akra.net = {}));
    var net = akra.net;
})(akra || (akra = {}));
;
;
closed(ev);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).closed;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, ev) : _broadcast[i].listener(_recivier, ev);
    }
}
;
;
error(err);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).error;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, err) : _broadcast[i].listener(_recivier, err);
    }
}
;
;
message(data, type);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).message;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, data, type) : _broadcast[i].listener(_recivier, data, type);
    }
}
;
;
function createPipe(sAddr) {
    if (typeof sAddr === "undefined") { sAddr = null; }
    return new Pipe(sAddr);
}
exports.createPipe = createPipe;
var akra;
(function (akra) {
    (function (net) {
        var ERpcStates;
        (function (ERpcStates) {
            ERpcStates._map = [];
            ERpcStates._map[0] = "k_Deteached";
            ERpcStates.k_Deteached = 0;
            ERpcStates._map[1] = "k_Joined";
            ERpcStates.k_Joined = 1;
            ERpcStates._map[2] = "k_Closing";
            ERpcStates.k_Closing = 2;
        })(ERpcStates || (ERpcStates = {}));
        var RPC = (function () {
            function RPC(pAddr, pContext) {
                if (typeof pAddr === "undefined") { pAddr = null; }
                if (typeof pContext === "undefined") { pContext = null; }
                this._pPipe = null;
                this._pDefferedRequests = new ObjectList();
                this._pCallbacks = new ObjectList();
                this._nCalls = 0;
                this._iReconnect = -1;
                this._pRemoteAPI = {};
                this._pContext = null;
                this._eState = ERpcStates.k_Deteached;
                this._iSystemRoutine = -1;
                this.inline = get;
                this.inline = _systemRoutine();
                if (!isNull(pAddr)) {
                    this.join(pAddr);
                }
            }
            RPC.prototype.remote = function () {
                return this._pRemoteAPI;
            };
            RPC.prototype.join = function (sAddr) {
                if (typeof sAddr === "undefined") { sAddr = null; }
                var pPipe = this._pPipe;
                var pRPC = this;
                var pDeffered = this._pDefferedRequests;
                if (isNull(pPipe)) {
                    pPipe = net.createPipe();
                    pPipe.bind("message", function (pPipe, pMessage, eType) {
                        if (eType !== EPipeDataTypes.BINARY) {
                            pRPC.parse(JSON.parse(pMessage));
                        } else {
                            pRPC.parseBinary(pMessage);
                        }
                    });
                    pPipe.bind("opened", function (pPipe, pEvent) {
                        pRPC._startSystemRoutine();
                        if (pDeffered.length) {
                            pDeffered.seek(0);
                            while(pDeffered.length > 0) {
                                pPipe.write(pDeffered.current);
                                pRPC._releaseRequest(pDeffered.takeCurrent());
                            }
 {
                                logger.setSourceLocation("net/RPC.ts", 94);
                                logger.assert(pDeffered.length === 0, "something going wrong. length is: " + pDeffered.length);
                            }
                            ;
                        }
                        pRPC.proc(RPC.PROC_LIST, function (pError, pList) {
                            if (!akra.isNull(pError)) {
 {
                                    logger.setSourceLocation("net/RPC.ts", 100);
                                    logger.criticalError("could not get proc. list");
                                }
                                ;
                            }
                            if (!akra.isNull(pList) && akra.isArray(pList)) {
                                for(var i = 0; i < pList.length; ++i) {
                                    (function (sMethod) {
                                        pRPC.remote[sMethod] = function () {
                                            var pArguments = [
                                                sMethod
                                            ];
                                            for(var j = 0; j < arguments.length; ++j) {
                                                pArguments.push(arguments[j]);
                                            }
                                            return pRPC.proc.apply(pRPC, pArguments);
                                        };
                                    })(String(pList[i]));
                                }
                            }
                            pRPC.joined();
                        });
                    });
                    pPipe.bind("error", function (pPipe, pError) {
 {
                            logger.setSourceLocation("net/RPC.ts", 129);
                            logger.error("pipe error occured...");
                        }
                        ;
                    });
                    pPipe.bind("closed", function (pPipe, pEvent) {
                        pRPC._stopSystemRoutine();
                        pRPC.rejoin();
                    });
                }
                pPipe.open(sAddr);
                this._pPipe = pPipe;
                this._eState = ERpcStates.k_Joined;
            };
            RPC.prototype.rejoin = function () {
                var pRPC = this;
                clearTimeout(this._iReconnect);
                if (this._pPipe.isOpened()) {
                    this._eState = ERpcStates.k_Joined;
                    return;
                }
                if (this._eState == ERpcStates.k_Closing) {
                    this._eState = ERpcStates.k_Deteached;
                    return;
                }
                if (this._pPipe.isClosed()) {
                    this.freeCallbacks();
                    this._iReconnect = setTimeout(function () {
                        pRPC.join();
                    }, RPC.OPTIONS.RECONNECT_TIMEOUT);
                }
            };
            RPC.prototype.parse = function (pRes) {
                if (!isDef(pRes.n)) {
 {
                        logger.setSourceLocation("net/RPC.ts", 177);
                        logger.log(pRes);
                    }
                    ;
 {
                        logger.setSourceLocation("net/RPC.ts", 178);
                        logger.warning("message droped, because seriial not recognized.");
                    }
                    ;
                }
                ;
                this.response(pRes.n, pRes.type, pRes.res);
            };
            RPC.prototype.parseBinary = function (pBuffer) {
                var pHeader = new Uint32Array(pBuffer, 0, 2);
                var nMsg = pHeader[0];
                var eType = pHeader[1];
                var pResult = new Uint8Array(pBuffer, 8);
                this.response(nMsg, eType, pResult);
            };
            RPC.prototype.response = function (nSerial, eType, pResult) {
                var pStack = this._pCallbacks;
                var fn = null;
                if (eType === ERPCPacketTypes.RESPONSE) {
                    var pCallback = pStack.last;
                    do {
                        if (pCallback.n === nSerial) {
                            fn = pCallback.fn;
                            this._releaseCallback(pStack.takeCurrent());
                            if (!isNull(fn)) {
                                fn(null, pResult);
                            }
                            return;
                        }
                    } while(pCallback = pStack.prev());
 {
                        logger.setSourceLocation("net/RPC.ts", 218);
                        logger.warning("package droped, invalid serial: " + nSerial);
                    }
                    ;
                } else if (eType === ERPCPacketTypes.REQUEST) {
 {
                        logger.setSourceLocation("net/RPC.ts", 221);
                        logger.error("TODO: REQUEST package type temprary unsupported.");
                    }
                    ;
                } else if (eType === ERPCPacketTypes.FAILURE) {
 {
                        logger.setSourceLocation("net/RPC.ts", 224);
                        logger.error("detected FAILURE on " + nSerial + " package");
                    }
                    ;
 {
                        logger.setSourceLocation("net/RPC.ts", 225);
                        logger.log(pResult);
                    }
                    ;
                } else {
 {
                        logger.setSourceLocation("net/RPC.ts", 228);
                        logger.error("unsupported response type detected: " + eType);
                    }
                    ;
                }
            };
            RPC.prototype.freeRequests = function () {
                var pStack = this._pDefferedRequests;
                var pReq = pStack.first;
                if (pReq) {
                    do {
                        this._releaseRequest(pReq);
                    } while(pReq = pStack.next());
                    pStack.clear();
                }
            };
            RPC.prototype.freeCallbacks = function () {
                var pStack = this._pCallbacks;
                var pCallback = pStack.first;
                if (pCallback) {
                    do {
                        this._releaseCallback(pCallback);
                    } while(pCallback = pStack.next());
                    pStack.clear();
                }
            };
            RPC.prototype.free = function () {
                this.freeRequests();
                this.freeCallbacks();
            };
            RPC.prototype.detach = function () {
                this._eState = ERpcStates.k_Closing;
                if (!isNull(this._pPipe) && this._pPipe.isOpened()) {
                    this._pPipe.close();
                }
                this.free();
            };
            RPC.prototype.proc = function () {
                var argv = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    argv[_i] = arguments[_i + 0];
                }
                var IRPCCallback = arguments.length - 1;
                var fnCallback = isFunction(arguments[IRPCCallback]) ? arguments[IRPCCallback] : null;
                var nArg = arguments.length - (fnCallback ? 2 : 1);
                var pArgv = new Array(nArg);
                var pPipe = this._pPipe;
                var pCallback = null;
                var bResult;
                for(var i = 0; i < nArg; ++i) {
                    pArgv[i] = arguments[i + 1];
                }
                var pProc = this._createRequest();
                pProc.n = this._nCalls++;
                pProc.type = ERPCPacketTypes.REQUEST;
                pProc.proc = String(arguments[0]);
                pProc.argv = pArgv;
                pCallback = this._createCallback();
                pCallback.n = pProc.n;
                pCallback.fn = fnCallback;
                pCallback.timestamp = now();
                if (isNull(pPipe) || !pPipe.isOpened()) {
                    if (this._pDefferedRequests.length <= RPC.OPTIONS.DEFFERED_CALLS_LIMIT) {
                        this._pDefferedRequests.push(pProc);
                        this._pCallbacks.push(pCallback);
                    } else {
                        pCallback.fn(RPC.ERRORS.STACK_SIZE_EXCEEDED);
 {
                            logger.setSourceLocation("net/RPC.ts", 307);
                            logger.warning(RPC.ERRORS.STACK_SIZE_EXCEEDED);
                        }
                        ;
                        this._releaseCallback(pCallback);
                        this._releaseRequest(pProc);
                    }
                    return false;
                }
                this._pCallbacks.push(pCallback);
                bResult = pPipe.write(pProc);
                this._releaseRequest(pProc);
                return bResult;
            };
            return RPC;
        })();        
        void {
            this: ,
            _removeExpiredCallbacks: 
        };
        _startSystemRoutine();
        void {
            var: pRPC,
            RPC:  = this
        };
        this._iSystemRoutine = setInterval(function () {
            pRPC._systemRoutine();
        }, RPC.OPTIONS.SYSTEM_ROUTINE_INTERVAL);
    })(akra.net || (akra.net = {}));
    var net = akra.net;
})(akra || (akra = {}));
_stopSystemRoutine();
void {
    clearInterval: (this._iSystemRoutine)
};
this._systemRoutine();
_removeExpiredCallbacks();
void {
    var: pCallbacks,
    IObjectList:  = this._pCallbacks
};
var pCallback = pCallbacks.first;
var iNow = now();
var fn = null;
while(!isNull(pCallback)) {
    if ((iNow - pCallback.timestamp) >= RPC.OPTIONS.CALLBACK_LIFETIME) {
        fn = pCallback.fn;
        this._releaseCallback(pCallbacks.takeCurrent());
        pCallback = pCallbacks.current;
        if (!isNull(fn)) {
            fn(RPC.ERRORS.CALLBACK_LIFETIME_EXPIRED, null);
        }
    } else {
        pCallback = pCallbacks.next();
    }
}
_releaseRequest(pReq, IRPCRequest);
void {
    pReq: ,
    n:  = 0,
    pReq: ,
    proc:  = null,
    pReq: ,
    argv:  = null,
    RPC: ,
    requestPool: ,
    push: (pReq)
};
_createRequest();
IRPCRequest;
 {
    if (RPC.requestPool.length == 0) {
        return {
            n: 0,
            type: ERPCPacketTypes.REQUEST,
            proc: null,
            argv: null
        };
    }
    return RPC.requestPool.pop();
}
_releaseCallback(pCallback, IRPCCallback);
void {
    pCallback: ,
    n:  = 0,
    pCallback: ,
    fn:  = null,
    pCallback: ,
    timestamp:  = 0,
    RPC: ,
    callbackPool: ,
    push: (pCallback)
};
_createCallback();
IRPCCallback;
 {
    if (RPC.callbackPool.length == 0) {
        return {
            n: 0,
            fn: null,
            timestamp: 0
        };
    }
    return RPC.callbackPool.pop();
}
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return RPC._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
joined();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).joined;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
requestPool:
IObjectArray = new ObjectArray()
callbackPool:
IObjectArray = new ObjectArray()
OPTIONS = {
    DEFFERED_CALLS_LIMIT: 1024,
    RECONNECT_TIMEOUT: 2500,
    SYSTEM_ROUTINE_INTERVAL: 10000,
    CALLBACK_LIFETIME: 999999
};
ERRORS = {
    STACK_SIZE_EXCEEDED: new Error("stack size exceeded"),
    CALLBACK_LIFETIME_EXPIRED: new Error("procedure life time expired")
};
PROC_LIST:
string = "proc_list"
function createRpc() {
    return new RPC();
}
exports.createRpc = createRpc;
var akra;
(function (akra) {
    (function (terrain) {
        var MegaTexture = (function () {
            function MegaTexture(pEngine, pObject, sSurfaceTextures) {
                this._pEngine = null;
                this._pObject = null;
                this._pWorldExtents = null;
                this._v2fCameraCoord = new Vec2(0, 0);
                this._sSurfaceTextures = "";
                this._iOriginalTextureMaxSize = 8192;
                this._iBlockSize = 32;
                this._eTextureFormat = EPixelFormats.BYTE_BGR;
                this._iTextureHeight = 1024;
                this._iTextureWidth = 1024;
                this._pTextures = null;
                this._iBufferHeight = 0;
                this._iBufferWidth = 0;
                this._pBuffer = null;
                this._pBufferMap = null;
                this._pXY = null;
                this._pDataFor = null;
                this._pMapDataFor = null;
                this._pMapDataNULL = null;
                this._pRPC = null;
                this._fTexCourdXOld = undefined;
                this._fTexCourdYOld = undefined;
                this._nCountRender = 0;
                this._pTmpBox1 = new geometry.Box();
                this._pTmpBox2 = new geometry.Box();
                this._pTmpPixelBox = new pixelUtil.PixelBox();
                this._pEngine = pEngine;
                this._pObject = pObject;
                this._pWorldExtents = pObject.worldExtents;
                this._sSurfaceTextures = sSurfaceTextures;
                var iCountTex = math.log2(this._iOriginalTextureMaxSize / math.max(this._iTextureHeight, this._iTextureWidth)) + 1;
                this._pTextures = new Array(iCountTex);
                this._pBuffer = new Array(iCountTex);
                this._pBufferMap = new Array(iCountTex);
                this._pXY = new Array(iCountTex);
                this._iBufferHeight = this._iTextureHeight * 2;
                this._iBufferWidth = this._iTextureWidth * 2;
                this._pDataFor = new pixelUtil.PixelBox(this._iBufferWidth, this._iBufferHeight, 1, this._eTextureFormat, new Uint8Array(this._iBufferWidth * this._iBufferHeight));
                this._pMapDataFor = new Uint32Array(this._iBufferHeight * this._iBufferWidth / (this._iBlockSize * this._iBlockSize));
                this._pMapDataNULL = new Uint32Array(this._iBufferHeight * this._iBufferWidth / (this._iBlockSize * this._iBlockSize));
                for(var i = 0; i < this._pMapDataNULL.length; i++) {
                    this._pMapDataNULL[i] = 0;
                }
                this.setBufferMapNULL(this._pMapDataFor);
                var pRmgr = this._pEngine.getResourceManager();
                for(var i = 0; i < this._pTextures.length; i++) {
                    this._pTextures[i] = pRmgr.createTexture(".texture-for-mega-" + i + sid());
                    this._pTextures[i].create(this._iTextureWidth, this._iTextureHeight, 1, null, ETextureFlags.DYNAMIC, 0, 1, ETextureTypes.TEXTURE_2D, this._eTextureFormat);
                    this._pTextures[i].setWrapMode(ETextureParameters.WRAP_S, ETextureWrapModes.CLAMP_TO_EDGE);
                    this._pTextures[i].setWrapMode(ETextureParameters.WRAP_T, ETextureWrapModes.CLAMP_TO_EDGE);
                    if (i == 0) {
                        this._pBufferMap[i] = new Uint32Array(this._iBufferHeight * this._iBufferWidth / (this._iBlockSize * this._iBlockSize));
                        this.setBufferMapNULL(this._pBufferMap[i]);
                        this._pBuffer[i] = new pixelUtil.PixelBox(this._iTextureWidth, this._iTextureHeight, 1, this._eTextureFormat, new Uint8Array(this._pBufferMap[i]));
                    } else {
                        this._pBuffer[i] = new pixelUtil.PixelBox(this._iBufferWidth, this._iBufferHeight, 1, this._eTextureFormat);
                        this._pBufferMap[i] = new Uint32Array(this._iBufferHeight * this._iBufferWidth / (this._iBlockSize * this._iBlockSize));
                        this.setBufferMapNULL(this._pBufferMap[i]);
                        this._pBuffer[i] = new pixelUtil.PixelBox(this._iBufferWidth, this._iBufferHeight, 1, this._eTextureFormat, new Uint8Array(this._pBufferMap[i]));
                    }
                    this._pXY[i] = {
                        iX: 0,
                        iY: 0,
                        iTexX: 0,
                        iTexY: 0,
                        isUpdated: true,
                        isLoaded: false
                    };
                }
                this._pRPC = net.createRpc();
                this._pRPC.join("ws://localhost:6112");
                this.getDataFromServer(0, 0, 0, this._iTextureWidth, this._iTextureHeight);
            }
            MegaTexture.prototype.prepareForRender = function (pViewport) {
                var pCamera = pViewport.getCamera();
                var v3fCameraPosition = pCamera.targetPos;
                var fTexCourdX = (v3fCameraPosition.x - this._pWorldExtents.x0) / math.abs(this._pWorldExtents.x1 - this._pWorldExtents.x0);
                var fTexCourdY = (v3fCameraPosition.y - this._pWorldExtents.y0) / math.abs(this._pWorldExtents.y1 - this._pWorldExtents.y0);
                this._v2fCameraCoord.set(fTexCourdX, fTexCourdY);
                var iX, iX1, iX2;
                var iY, iY1, iY2;
                var iWidth, iHeight;
                iX = math.round(fTexCourdX * (this.getWidthOrig(this._pTextures.length - 1)) - this._iTextureWidth / 2);
                iY = math.round(fTexCourdY * (this.getHeightOrig(this._pTextures.length - 1)) - this._iTextureHeight / 2);
                iWidth = this._iTextureWidth;
                iHeight = this._iTextureHeight;
                if (math.floor((iX - this._pXY[this._pTextures.length - 1].iX) / this._iBlockSize) < 8 || math.floor((iY - this._pXY[this._pTextures.length - 1].iY) / this._iBlockSize) < 8 || math.floor((this._pXY[this._pTextures.length - 1].iX + this._iBufferWidth - (iX + iWidth)) / this._iBlockSize) < 8 || math.floor((this._pXY[this._pTextures.length - 1].iY + this._iBufferHeight - (iY + iHeight)) / this._iBlockSize) < 8) {
 {
                        logger.setSourceLocation("terrain/MegaTexture.ts", 174);
                        logger.log("Да");
                    }
                    for(i = 1; i < this._pTextures.length; i++) {
 {
                            logger.setSourceLocation("terrain/MegaTexture.ts", 178);
                            logger.log("Уровень", i);
                        }
                        var iXnew = math.round(fTexCourdX * this.getWidthOrig(i) - this._iTextureWidth / 2);
                        var iYnew = math.round(fTexCourdY * this.getHeightOrig(i) - this._iTextureHeight / 2);
                        iXnew -= (this._iBufferWidth - this._iTextureWidth) / 2;
                        iYnew -= (this._iBufferHeight - this._iTextureHeight) / 2;
                        iXnew = math.round((iXnew / this._iBlockSize)) * this._iBlockSize;
                        iYnew = math.round((iYnew / this._iBlockSize)) * this._iBlockSize;
                        var iXOverlappingBlockInOldBuf = iXnew - this._pXY[i].iX;
                        var iYOverlappingBlockInOldBuf = iYnew - this._pXY[i].iY;
                        var iXOverlappingBlockInNewBuf = -iXOverlappingBlockInOldBuf;
                        var iYOverlappingBlockInNewBuf = -iYOverlappingBlockInOldBuf;
                        iXOverlappingBlockInOldBuf = math.max(0, iXOverlappingBlockInOldBuf);
                        iYOverlappingBlockInOldBuf = math.max(0, iYOverlappingBlockInOldBuf);
                        iXOverlappingBlockInNewBuf = math.max(0, iXOverlappingBlockInNewBuf);
                        iYOverlappingBlockInNewBuf = math.max(0, iYOverlappingBlockInNewBuf);
                        if (iXOverlappingBlockInOldBuf < this._iBufferWidth && iYOverlappingBlockInOldBuf < this._iBufferHeight && iXOverlappingBlockInNewBuf < this._iBufferWidth && iYOverlappingBlockInNewBuf < this._iBufferHeight) {
                            var iOverlappingBlockWidth = this._iBufferWidth - math.abs(iXnew - this._pXY[i].iX);
                            var iOverlappingBlockHeight = this._iBufferHeight - math.abs(iYnew - this._pXY[i].iY);
 {
                                logger.setSourceLocation("terrain/MegaTexture.ts", 213);
                                logger.log("Копированеи совпадающей части");
                            }
                            ;
                            this._pTmpBox1.setPosition(iXOverlappingBlockInNewBuf, iYOverlappingBlockInNewBuf, iOverlappingBlockWidth, iOverlappingBlockHeight);
                            this._pTmpBox2.setPosition(iXOverlappingBlockInOldBuf, iYOverlappingBlockInOldBuf, iOverlappingBlockWidth, iOverlappingBlockHeight);
                            var pPixelBox1 = this._pDataFor.getSubBox(this._pTmpBox1);
                            var pPixelBox2 = this._pBuffer[i].getSubBox(this._pTmpBox2);
                            pixelUtil.bulkPixelConversion(pPixelBox1, pPixelBox2);
                            this.setBufferMapNULL(this._pMapDataFor);
                            this._setDataBetweenBufferMap(this._pMapDataFor, iXOverlappingBlockInNewBuf / this._iBlockSize, iYOverlappingBlockInNewBuf / this._iBlockSize, this._pBufferMap[i], iXOverlappingBlockInOldBuf / this._iBlockSize, iYOverlappingBlockInOldBuf / this._iBlockSize, iOverlappingBlockWidth / this._iBlockSize, iOverlappingBlockHeight / this._iBlockSize);
                            var t = this._pBuffer[i];
                            this._pBuffer[i] = this._pDataFor;
                            this._pDataFor = t;
                            var s = this._pBufferMap[i];
                            this._pBufferMap[i] = this._pMapDataFor;
                            this._pMapDataFor = s;
                        } else {
                            this.setBufferMapNULL(this._pBufferMap[i]);
                        }
                        console.log(this._pXY[i].iX, this._pXY[i].iY, "==>", iXnew, iYnew);
                        this._pXY[i].iX = iXnew;
                        this._pXY[i].iY = iYnew;
                        this._pXY[i].isUpdated = true;
                        console.log(this._pXY[i].iX, this._pXY[i].iY);
                    }
                }
                for(var i = 0; i < this._pTextures.length; i++) {
                    if (i != 0) {
                        iX = math.round(fTexCourdX * this.getWidthOrig(i) - this._iTextureWidth / 2);
                        iY = math.round(fTexCourdY * this.getHeightOrig(i) - this._iTextureHeight / 2);
                        iWidth = this._iTextureWidth;
                        iHeight = this._iTextureHeight;
                        var iAreaX1 = iX;
                        var iAreaY1 = iY;
                        var iAreaX2 = iX + iWidth;
                        var iAreaY2 = iY + iHeight;
                        if (iX >= this._pXY[i].iX && iY >= this._pXY[i].iY && iX + this._iTextureWidth < this._pXY[i].iX + this._iBufferWidth && iY + this._iTextureHeight < this._pXY[i].iY + this._iBufferHeight) {
                            iX -= this._iBlockSize * 8;
                            iY -= this._iBlockSize * 8;
                            iWidth += this._iBlockSize * 16;
                            iHeight += this._iBlockSize * 16;
                            iX1 = math.clamp(iX, 0, this.getWidthOrig(i));
                            iY1 = math.clamp(iY, 0, this.getHeightOrig(i));
                            iX2 = math.clamp(iX + iWidth, 0, this.getWidthOrig(i));
                            iY2 = math.clamp(iY + iHeight, 0, this.getHeightOrig(i));
                            var iAreaX1 = math.clamp(iAreaX1, 0, this.getWidthOrig(i));
                            var iAreaY1 = math.clamp(iAreaY1, 0, this.getHeightOrig(i));
                            var iAreaX2 = math.clamp(iAreaX2, 0, this.getWidthOrig(i));
                            var iAreaY2 = math.clamp(iAreaY2, 0, this.getHeightOrig(i));
                            this.getDataFromServer(i, iX1, iY1, iX2 - iX1, iY2 - iY1, iAreaX1, iAreaY1, iAreaX2 - iAreaX1, iAreaY2 - iAreaY1);
                        } else {
 {
                                logger.setSourceLocation("terrain/MegaTexture.ts", 312);
                                logger.error("Не может такого быть чтобы буфер не попал под текстуру");
                            }
                            ;
                        }
                    } else {
                        if (!this._pXY[0].isLoaded) {
                            this.getDataFromServer(0, 0, 0, this._iTextureWidth, this._iTextureHeight);
                        }
                    }
                }
                if (((this._nCountRender++) % 10) == 0) {
                    var iTexInBufX = 0;
                    var iTexInBufY = 0;
                    i = (math.round(this._nCountRender / 10)) % this._pBuffer.length;
                    if (i == 0) {
                        if (this._pXY[i].isUpdated == true) {
                            var pPixelBox = new pixelUtil.PixelBox(this._iTextureWidth, this._iTextureHeight, 1, EPixelFormats.A8B8G8R8, this._pBuffer[0].data);
                            this._pTextures[i].getBuffer(0, 0).blitFromMemory(pPixelBox);
                        }
                    } else {
                        if (this._pXY[i].isLoaded == true && (this._pXY[i].isUpdated == true || this._fTexCourdXOld != fTexCourdX || this._fTexCourdYOld != fTexCourdY)) {
                            iTexInBufX = math.round(fTexCourdX * this.getWidthOrig(i) - this._iTextureWidth / 2);
                            iTexInBufY = math.round(fTexCourdY * this.getHeightOrig(i) - this._iTextureHeight / 2);
                            this._pXY[i].iTexX = iTexInBufX / this.getWidthOrig(i);
                            this._pXY[i].iTexY = iTexInBufY / this.getHeightOrig(i);
                            iTexInBufX -= this._pXY[i].iX;
                            iTexInBufY -= this._pXY[i].iY;
                            this._pTmpBox1.setPosition(iTexInBufX, iTexInBufY, this._iBufferWidth - iTexInBufX, this._iBufferHeight - iTexInBufY);
                            var pPixelBox = this._pBuffer[i].getSubBox(this._pTmpBox1);
                            pPixelBox.setConsecutive();
                            this._pTextures[i].getBuffer(0, 0).blitFromMemory(pPixelBox);
                        }
                    }
                    this._pXY[i].isUpdated = false;
                }
                this._fTexCourdXOld = fTexCourdX;
                this._fTexCourdYOld = fTexCourdY;
            };
            MegaTexture.prototype.applyForRender = function (pRenderPass) {
                pRenderPass.setUniform("CAMERA_COORD", this._v2fCameraCoord);
                for(var i = 0; i < this._pTextures.length; i++) {
                    pRenderPass.setUniform("textureCoord" + i, [
                        this._pXY[i].iTexX, 
                        this._pXY[i].iTexY
                    ]);
                    pRenderPass.setUniform("textureTerrainIsLoaded" + i, this._pXY[i].isLoaded);
                    pRenderPass.setTexture("TEXTURE" + i, this._pTextures[i]);
                    pRenderPass.setSamplerTexture("S_TERRAIN" + i, "TEXTURE" + i);
                }
            };
            MegaTexture.prototype.setBufferMapNULL = function (pBuffer) {
                pBuffer.set(this._pMapDataNULL, 0);
            };
            MegaTexture.prototype.setData = function (pBuffer, iX, iY, iWidth, iHeight, pBufferIn, iInX, iInY, iInWidth, iInHeight, iBlockWidth, iBlockHeight, iComponents) {
                iBlockHeight = math.max(0, iBlockHeight);
                iBlockWidth = math.max(0, iBlockWidth);
                iBlockHeight = math.min(iBlockHeight, iHeight - iY, iInHeight - iInY);
                iBlockWidth = math.min(iBlockWidth, iWidth - iX, iInWidth - iInX);
                if (pBuffer.length < ((iY + iBlockHeight - 1) * iWidth + iX + iBlockWidth) * iComponents) {
 {
                        logger.setSourceLocation("terrain/MegaTexture.ts", 527);
                        logger.error("Выход за предел массива 1");
                    }
                    ;
                }
                if (pBufferIn.length < ((iInY + iBlockHeight - 1) * iInWidth + iInX + iBlockWidth) * iComponents) {
 {
                        logger.setSourceLocation("terrain/MegaTexture.ts", 531);
                        logger.error("Выход за предел массива 2");
                    }
                    ;
                }
                for(var i = 0; i < iBlockHeight; i++) {
                    for(var j = 0; j < iBlockWidth; j++) {
                        for(var k = 0; k < iComponents; k++) {
                            pBuffer[((iY + i) * iWidth + iX + j) * iComponents + k] = pBufferIn[((iInY + i) * iInWidth + iInX + j) * iComponents + k];
                        }
                    }
                }
            };
            MegaTexture.prototype.setDataT = function (pBuffer, iX, iY, iWidth, iHeight, pBufferIn, iInX, iInY, iInWidth, iInHeight, iBlockWidth, iBlockHeight, iComponents) {
                iBlockHeight = math.max(0, iBlockHeight);
                iBlockWidth = math.max(0, iBlockWidth);
                iBlockHeight = math.min(iBlockHeight, iHeight - iY, iInHeight - iInY);
                iBlockWidth = math.min(iBlockWidth, iWidth - iX, iInWidth - iInX);
                if (pBuffer.length < ((iY + iBlockHeight - 1) * iWidth + iX + iBlockWidth) * iComponents) {
 {
                        logger.setSourceLocation("terrain/MegaTexture.ts", 553);
                        logger.error("Выход за предел массива 1");
                    }
                    ;
                }
                if (pBufferIn.length < ((iInY + iBlockHeight - 1) * iInWidth + iInX + iBlockWidth) * iComponents) {
 {
                        logger.setSourceLocation("terrain/MegaTexture.ts", 556);
                        logger.error("Выход за предел массива 2");
                    }
                    ;
                }
                var iLenStr = iBlockWidth * iComponents;
                var iStartIn = 0;
                var iStartOut = 0;
                for(var i = 0; i < iBlockHeight; i++) {
                    iStartIn = ((iInY + i) * iInWidth + iInX) * iComponents;
                    iStartOut = ((iY + i) * iWidth + iX) * iComponents;
                    if (pBufferIn.BYTES_PER_ELEMENT == 8) {
                        pBuffer.set(new Float64Array(pBufferIn.buffer.slice(iStartIn * 8, (iStartIn + iLenStr) * 8)), iStartOut);
                    } else if (pBufferIn.BYTES_PER_ELEMENT == 4) {
                        pBuffer.set(new Uint32Array(pBufferIn.buffer.slice(iStartIn * 4, (iStartIn + iLenStr) * 4)), iStartOut);
                    } else if (pBufferIn.BYTES_PER_ELEMENT == 2) {
                        pBuffer.set(new Uint16Array(pBufferIn.buffer.slice(iStartIn * 2, (iStartIn + iLenStr) * 2)), iStartOut);
                    } else {
                        pBuffer.set(new Uint8Array(pBufferIn.buffer.slice(iStartIn, iStartIn + iLenStr)), iStartOut);
                    }
                }
            };
            MegaTexture.prototype._setData = function (pBuffer, iX, iY, iWidth, iHeight, pBufferIn, iInX, iInY, iInWidth, iInHeight, iBlockWidth, iBlockHeight, iComponents) {
                this.setDataT(pBuffer, iX, iY, iWidth, iHeight, pBufferIn, iInX, iInY, iInWidth, iInHeight, iBlockWidth, iBlockHeight, iComponents);
            };
            MegaTexture.prototype._setDataBetweenBuffer = function (pBuffer, iX, iY, pBufferIn, iInX, iInY, iBlockWidth, iBlockHeight) {
                var iInWidth = this._iBufferWidth;
                var iInHeight = this._iBufferHeight;
                var iComponents = pixelUtil.getNumElemBytes(this._eTextureFormat);
                var iWidth = this._iBufferWidth;
                var iHeight = this._iBufferHeight;
                this.setDataT(pBuffer, iX, iY, iWidth, iHeight, pBufferIn, iInX, iInY, iInWidth, iInHeight, iBlockWidth, iBlockHeight, iComponents);
            };
            MegaTexture.prototype._setDataBetweenBufferMap = function (pBuffer, iX, iY, pBufferIn, iInX, iInY, iBlockWidth, iBlockHeight) {
                var iInWidth = this._iBufferWidth / this._iBlockSize;
                var iInHeight = this._iBufferHeight / this._iBlockSize;
                var iComponents = 1;
                var iWidth = this._iBufferWidth / this._iBlockSize;
                var iHeight = this._iBufferHeight / this._iBlockSize;
                this.setDataT(pBuffer, iX, iY, iWidth, iHeight, pBufferIn, iInX, iInY, iInWidth, iInHeight, iBlockWidth, iBlockHeight, iComponents);
            };
            MegaTexture.prototype._setDataFromBlock = function (pBuffer, iX, iY, pBufferIn) {
                var iInX = 0;
                var iInY = 0;
                var iInWidth = this._iBlockSize;
                var iInHeight = this._iBlockSize;
                var iBlockWidth = this._iBlockSize;
                var iBlockHeight = this._iBlockSize;
                var iComponents = pixelUtil.getNumElemBytes(this._eTextureFormat);
                var iWidth = 0;
                var iHeight = 0;
                if (pBuffer.length == this._iBufferWidth * this._iBufferHeight * iComponents) {
                    iWidth = this._iBufferWidth;
                    iHeight = this._iBufferHeight;
                } else if (pBuffer.length == this._iBufferWidth * this._iBufferHeight * iComponents / 4) {
                    iWidth = this._iBufferWidth / 2;
                    iHeight = this._iBufferHeight / 2;
                } else {
                    console.log("Странный размер массива", pBuffer, pBuffer.length, this._iBufferWidth * this._iBufferHeight * iComponents, this._iBufferWidth * this._iBufferHeight * iComponents / 4);
                }
                this.setDataT(pBuffer, iX, iY, iWidth, iHeight, pBufferIn, iInX, iInY, iInWidth, iInHeight, iBlockWidth, iBlockHeight, iComponents);
            };
            MegaTexture.prototype.getWidthOrig = function (iLevel) {
                return this._iTextureWidth << iLevel;
            };
            MegaTexture.prototype.getHeightOrig = function (iLevel) {
                return this._iTextureHeight << iLevel;
            };
            MegaTexture.prototype.getDataFromServer = function (iLevelTex, iOrigTexX, iOrigTexY, iWidth, iHeight, iAreaX, iAreaY, iAreaWidth, iAreaHeight) {
                var iOrigTexEndX = math.ceil((iOrigTexX + iWidth) / this._iBlockSize) * this._iBlockSize;
                var iOrigTexEndY = math.ceil((iOrigTexY + iHeight) / this._iBlockSize) * this._iBlockSize;
                iOrigTexX = math.max(0, iOrigTexX);
                iOrigTexY = math.max(0, iOrigTexY);
                iOrigTexX = math.floor(iOrigTexX / this._iBlockSize) * this._iBlockSize;
                iOrigTexY = math.floor(iOrigTexY / this._iBlockSize) * this._iBlockSize;
                iOrigTexEndX = math.min(iOrigTexEndX, this.getWidthOrig(iLevelTex));
                iOrigTexEndY = math.min(iOrigTexEndY, this.getHeightOrig(iLevelTex));
                var iAreaEndX = iAreaX + iAreaWidth;
                var iAreaEndY = iAreaY + iAreaHeight;
                iAreaX = math.max(0, iAreaX);
                iAreaY = math.max(0, iAreaY);
                iAreaEndX = math.min(iAreaEndX, this.getWidthOrig(iLevelTex));
                iAreaEndY = math.min(iAreaEndY, this.getHeightOrig(iLevelTex));
                var isLoaded = true;
                var me = this;
                var tCurrentTime = (me._pEngine.getTimer().absoluteTime * 1000) >>> 0;
                for(var i = iOrigTexY; i < iOrigTexEndY; i += this._iBlockSize) {
                    for(var j = iOrigTexX; j < iOrigTexEndX; j += this._iBlockSize) {
                        if (iLevelTex == 0) {
                            if (me._pBufferMap[iLevelTex][(i - me._pXY[iLevelTex].iY) / me._iBlockSize * (me._iTextureWidth / me._iBlockSize) + (j - me._pXY[iLevelTex].iX) / me._iBlockSize] != 0xFFFFFFFF) {
                                isLoaded = false;
                            }
                            if (tCurrentTime != 0 && tCurrentTime - me._pBufferMap[iLevelTex][(i - me._pXY[iLevelTex].iY) / me._iBlockSize * (me._iTextureWidth / me._iBlockSize) + (j - me._pXY[iLevelTex].iX) / me._iBlockSize] < 5000) {
                                continue;
                            }
                            if (me._pBufferMap[iLevelTex][(i - me._pXY[iLevelTex].iY) / me._iBlockSize * (me._iTextureWidth / me._iBlockSize) + (j - me._pXY[iLevelTex].iX) / me._iBlockSize] == 0xFFFFFFFF) {
                                continue;
                            }
                            me._pBufferMap[iLevelTex][(i - me._pXY[iLevelTex].iY) / me._iBlockSize * (me._iTextureWidth / me._iBlockSize) + (j - me._pXY[iLevelTex].iX) / me._iBlockSize] = tCurrentTime;
                        } else {
                            if (j >= iAreaX && j < iAreaEndX && i >= iAreaY && i < iAreaEndY && me._pBufferMap[iLevelTex][(i - me._pXY[iLevelTex].iY) / me._iBlockSize * (me._iBufferWidth / me._iBlockSize) + (j - me._pXY[iLevelTex].iX) / me._iBlockSize] != 0xFFFFFFFF) {
                                isLoaded = false;
                            }
                            if (tCurrentTime - me._pBufferMap[iLevelTex][(i - me._pXY[iLevelTex].iY) / me._iBlockSize * (me._iBufferWidth / me._iBlockSize) + (j - me._pXY[iLevelTex].iX) / me._iBlockSize] < 5000) {
                                continue;
                            }
                            if (me._pBufferMap[iLevelTex][(i - me._pXY[iLevelTex].iY) / me._iBlockSize * (me._iBufferWidth / me._iBlockSize) + (j - me._pXY[iLevelTex].iX) / me._iBlockSize] == 0xFFFFFFFF) {
                                continue;
                            }
                            me._pBufferMap[iLevelTex][(i - me._pXY[iLevelTex].iY) / me._iBlockSize * (me._iBufferWidth / me._iBlockSize) + (j - me._pXY[iLevelTex].iX) / me._iBlockSize] = tCurrentTime;
                        }
                        (function (iLev, iX, iY) {
                            var sPiecePath = me._sSurfaceTextures;
                            me._pRPC.proc('getMegaTexture', me._sSurfaceTextures, me.getWidthOrig(iLev), me.getHeightOrig(iLev), iX, iY, me._iBlockSize, me._iBlockSize, me._eTextureFormat, function (pError, pData) {
                                if (!isNull(pError)) {
 {
                                        logger.setSourceLocation("terrain/MegaTexture.ts", 747);
                                        logger.log(pError.message);
                                    }
                                    ;
                                    return;
                                }
                                var pData8 = new Uint8Array(pData);
                                var iXBuf;
                                var iYBuf;
                                if (iLev == 0) {
                                    iXBuf = iX - me._pXY[iLev].iX;
                                    iYBuf = iY - me._pXY[iLev].iY;
                                    if (iXBuf < 0 || iXBuf > me._iBufferWidth / 2 - me._iBlockSize || iYBuf < 0 || iYBuf > me._iBufferHeight / 2 - me._iBlockSize) {
                                        return;
                                    }
                                    me._pBufferMap[iLev][iYBuf / me._iBlockSize * (me._iTextureWidth / me._iBlockSize) + iXBuf / me._iBlockSize] = 0xFFFFFFFF;
                                } else {
                                    iXBuf = iX - me._pXY[iLev].iX;
                                    iYBuf = iY - me._pXY[iLev].iY;
                                    if (iLev == 2 && iY == 0) {
                                    }
                                    if (iXBuf < 0 || iXBuf > me._iBufferWidth - me._iBlockSize || iYBuf < 0 || iYBuf > me._iBufferHeight - me._iBlockSize) {
                                        return;
                                    }
                                    me._pBufferMap[iLev][iYBuf / me._iBlockSize * (me._iBufferWidth / me._iBlockSize) + iXBuf / me._iBlockSize] = 0xFFFFFFFF;
                                }
                                me._pTmpBox1.setPosition(iXBuf, iYBuf, me._iBlockSize, me._iBlockSize);
                                me._pTmpPixelBox.refresh(me._pTmpBox1, me._eTextureFormat, pData);
                                pixelUtil.bulkPixelConversion(me._pBuffer[iLev].getSubBox(me._pTmpBox1), me._pTmpPixelBox);
                                me._pXY[iLev].isUpdated = true;
                            });
                        })(iLevelTex, j, i);
                    }
                }
                me._pXY[iLevelTex].isLoaded = isLoaded;
            };
            return MegaTexture;
        })();
        terrain.MegaTexture = MegaTexture;        
    })(akra.terrain || (akra.terrain = {}));
    var terrain = akra.terrain;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    ;
    ;
    function createSingleStripGrid(pIndexValues, iXVerts, iYVerts, iXStep, iYStep, iSride, iFlags) {
        var iTotalStrips = iYVerts - 1;
        var iTotalIndexesPerStrip = iXVerts << 1;
        var iTotalIndexes = (iTotalStrips * iTotalIndexesPerStrip) + (iTotalStrips << 1) - 2;
        if (pIndexValues.length < iTotalIndexes) {
            return 0;
        }
        var iIndex = 0;
        var iStartVert = 0;
        var iLineStep = iYStep * iSride;
        for(var j = 0; j < iTotalStrips; ++j) {
            var k = 0;
            var iVert = iStartVert;
            for(k = 0; k < iXVerts; ++k) {
                pIndexValues[iIndex++] = iVert;
                pIndexValues[iIndex++] = iVert + iLineStep;
                iVert += iXStep;
            }
            iStartVert += iLineStep;
            if (j + 1 < iTotalStrips) {
                pIndexValues[iIndex++] = (iVert - iXStep) + iLineStep;
                pIndexValues[iIndex++] = iStartVert;
            }
        }
        return iTotalIndexes;
    }
    akra.createSingleStripGrid = createSingleStripGrid;
    function getCountIndexForStripGrid(iXVerts, iYVerts) {
        var iTotalStrips = iYVerts - 1;
        var iTotalIndexesPerStrip = iXVerts << 1;
        var iTotalIndexes = (iTotalStrips * iTotalIndexesPerStrip) + (iTotalStrips << 1) - 2;
        return iTotalIndexes;
    }
    akra.getCountIndexForStripGrid = getCountIndexForStripGrid;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (terrain) {
        var TerrainSection = (function () {
            function TerrainSection() { }
            return TerrainSection;
        })();
        terrain.TerrainSection = TerrainSection;        
        scene.SceneObject;
 {
            _pTerrainSystem:
ITerrain = null
            _iVertexID:
number = 0
            _iHeightMapX:
number = 0
            _iHeightMapY:
number = 0
            _iSectorX:
number = 0
            _iSectorY:
number = 0
            _iXVerts:
number = 0
            _iYVerts:
number = 0
            _pWorldRect:
IRect3d = new geometry.Rect3d()
            _pRenderableObject:
IRenderableObject = null
            _pVertexDescription:
IVertexElementInterface[] = [
                VE_FLOAT3(DeclarationUsages.POSITION), 
                VE_FLOAT2(DeclarationUsages.TEXCOORD)
            ]
            constructor(pScene, IScene3d, eType, EEntityTypes = EEntityTypes.TERRAIN_SECTION);
 {
                _super.prototype(pScene, eType);
            }
            inline;
            get;
            sectorX();
            number;
 {
                return this._iSectorX;
            }
            ;
            inline;
            get;
            sectorY();
            number;
 {
                return this._iSectorY;
            }
            ;
            inline;
            get;
            terrainSystem();
            ITerrain;
 {
                return this._pTerrainSystem;
            }
            ;
            inline;
            get;
            sectionIndex();
            number;
 {
                return (this._iSectorY * this._pTerrainSystem.sectorCountX + this._iSectorX);
            }
            inline;
            get;
            heightX();
            number;
 {
                return math.abs(this._pWorldRect.x1 - this._pWorldRect.x0);
            }
            ;
            inline;
            get;
            heightY();
            number;
 {
                return math.abs(this._pWorldRect.y1 - this._pWorldRect.y0);
            }
            ;
            inline;
            get;
            vertexDescription();
            IVertexElementInterface[];
 {
                return this._pVertexDescription;
            }
            ;
            inline;
            get;
            totalRenderable();
            number;
 {
                return !isNull(this._pRenderableObject) ? 1 : 0;
            }
            inline;
            getRenderable(i ?  : number);
            IRenderableObject;
 {
                return this._pRenderableObject;
            }
            _internalCreate(pParentSystem, ITerrain, iSectorX, number, iSectorY, number, iHeightMapX, number, iHeightMapY, number, iXVerts, number, iYVerts, number, pWorldRect, IRect2d);
            bool;
 {
                var bResult = false;
                this._pTerrainSystem = pParentSystem;
                this._iXVerts = iXVerts;
                this._iYVerts = iYVerts;
                this._iSectorX = iSectorX;
                this._iSectorY = iSectorY;
                this._pWorldRect.x0 = pWorldRect.x0;
                this._pWorldRect.x1 = pWorldRect.x1;
                this._pWorldRect.y0 = pWorldRect.y0;
                this._pWorldRect.y1 = pWorldRect.y1;
                this._iHeightMapX = iHeightMapX;
                this._iHeightMapY = iHeightMapY;
                bResult = this._createRenderDataForVertexAndIndex();
                bResult = bResult && this._buildVertexBuffer();
                bResult = bResult && this._buildIndexBuffer();
                this.accessLocalBounds().set(this._pWorldRect.x0, this._pWorldRect.x1, this._pWorldRect.y0, this._pWorldRect.y1, this._pWorldRect.z0, this._pWorldRect.z1);
                if (bResult) {
                    this.attachToParent(this._pTerrainSystem);
                    this.setInheritance(ENodeInheritance.ALL);
                    return true;
                } else {
                    return false;
                }
            }
            ;
            _createRenderable();
            void {
                if: (isNull(this._pRenderableObject))
            };
 {
                this._pRenderableObject = new render.RenderableObject();
                this._pRenderableObject._setup(this.scene.getManager().getEngine().getRenderer());
            }
        }
        _createRenderDataForVertexAndIndex();
        bool;
 {
            var pRenderable = this.getRenderable();
            if (isNull(pRenderable)) {
                return true;
            }
 {
                logger.setSourceLocation("terrain/TerrainSection.ts", 128);
                logger.assert(pRenderable.data === null, "У терраин сектиона уже созданы данные");
            }
            ;
            pRenderable._setRenderData(this.terrainSystem.dataFactory.getEmptyRenderData(EPrimitiveTypes.TRIANGLESTRIP, 0));
            if (isNull(pRenderable.data)) {
                return false;
            }
            return true;
        }
        _buildVertexBuffer();
        bool;
 {
            this._pWorldRect.z0 = MAX_FLOAT64;
            this._pWorldRect.z1 = MIN_FLOAT64;
            if (!isNull(this.getRenderable())) {
                var pVerts = new Array(this._iXVerts * this._iYVerts * (3 + 3 + 2));
                var v3fNormal = new Vec3();
                var v2fCellSize = new Vec2();
                v2fCellSize.set(this.heightX / (this._iXVerts - 1), this.heightY / (this._iYVerts - 1));
                var v2fVert = new Vec2();
                v2fVert.set(0.0, 0.0);
                for(var y = 0; y < this._iYVerts; ++y) {
                    v2fVert.set(this._pWorldRect.x0, y * v2fCellSize.y + this._pWorldRect.y0);
                    for(var x = 0; x < this._iXVerts; ++x) {
                        var fHeight = this.terrainSystem.readWorldHeight(this._iHeightMapX + x, this._iHeightMapY + y);
                        pVerts[((y * this._iXVerts) + x) * 5 + 0] = v2fVert.x;
                        pVerts[((y * this._iXVerts) + x) * 5 + 1] = v2fVert.y;
                        pVerts[((y * this._iXVerts) + x) * 5 + 2] = fHeight;
                        pVerts[((y * this._iXVerts) + x) * 5 + 3] = (this._iSectorX + x / (this._iXVerts - 1)) / this.terrainSystem.sectorCountX;
                        pVerts[((y * this._iXVerts) + x) * 5 + 4] = (this._iSectorY + y / (this._iYVerts - 1)) / this.terrainSystem.sectorCountY;
                        this._pWorldRect.z0 = math.min(this._pWorldRect.z0, fHeight);
                        this._pWorldRect.z1 = math.max(this._pWorldRect.z1, fHeight);
                        v2fVert.x += v2fCellSize.x;
                    }
                }
                this._iVertexID = this.getRenderable().data.allocateData(this.vertexDescription, new Float32Array(pVerts));
            } else {
                for(var y = 0; y < this._iYVerts; ++y) {
                    for(var x = 0; x < this._iXVerts; ++x) {
                        var fHeight = this.terrainSystem.readWorldHeight(this._iHeightMapX + x, this._iHeightMapY + y);
                        this._pWorldRect.z0 = math.min(this._pWorldRect.z0, fHeight);
                        this._pWorldRect.z1 = math.max(this._pWorldRect.z1, fHeight);
                    }
                }
            }
            return true;
        }
        _buildIndexBuffer();
        bool;
 {
            if (!isNull(this.getRenderable())) {
                var pIndexList = new Float32Array(getCountIndexForStripGrid(this._iXVerts, this._iYVerts));
                createSingleStripGrid(pIndexList, this._iXVerts, this._iYVerts, 1, 1, this._iYVerts, 0);
                this.getRenderable().data.allocateIndex(([
                    VE_FLOAT(DeclarationUsages.INDEX0)
                ]), pIndexList);
                this.getRenderable().data.index(this._iVertexID, DeclarationUsages.INDEX0);
            }
            return true;
        }
    })(akra.terrain || (akra.terrain = {}));
    var terrain = akra.terrain;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (terrain) {
        var Terrain = (function (_super) {
            __extends(Terrain, _super);
            function Terrain(pScene, eType) {
                if (typeof eType === "undefined") { eType = EEntityTypes.TERRAIN; }
                _super.call(this, pScene, eType);
                this._pEngine = null;
                this._pWorldExtents = new geometry.Rect3d();
                this._v3fWorldSize = new Vec3();
                this._v3fMapScale = new Vec3();
                this._pSectorArray = null;
                this._pDataFactory = null;
                this._v2fSectorSize = new Vec2();
                this._pHeightTable = null;
                this._pNormalMap = null;
                this._pNormalImage = null;
                this._pTempNormalColor = new Color();
                this._pMegaTexures = null;
                this._fScale = 0.0;
                this._fLimit = 0.0;
                this._pDefaultRenderMethod = null;
                this._pRenderMethod = null;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this._pEngine = pScene.getManager().getEngine();
                this._pDataFactory = render.createRenderDataCollection(this._pEngine, ERenderDataBufferOptions.VB_READABLE);
            }
            Terrain.prototype.dataFactory = function () {
                return this._pDataFactory;
            };
            Terrain.prototype.tessellationScale = function () {
                return this._fScale;
            };
            Terrain.prototype.tessellationScale = function (fScale) {
                this._fScale = fScale;
            };
            Terrain.prototype.tessellationLimit = function () {
                return this._fLimit;
            };
            Terrain.prototype.tessellationLimit = function (fLimit) {
                this._fLimit = fLimit;
            };
            Terrain.prototype.worldExtents = function () {
                return this._pWorldExtents;
            };
            Terrain.prototype.worldSize = function () {
                return this._v3fWorldSize;
            };
            Terrain.prototype.mapScale = function () {
                return this._v3fMapScale;
            };
            Terrain.prototype.sectorCountX = function () {
                return this._iSectorCountX;
            };
            Terrain.prototype.sectorCountY = function () {
                return this._iSectorCountY;
            };
            Terrain.prototype.sectorSize = function () {
                return this._v2fSectorSize;
            };
            Terrain.prototype.tableWidth = function () {
                return this._iTableWidth;
            };
            Terrain.prototype.tableHeight = function () {
                return this._iTableHeight;
            };
            Terrain.prototype.sectorShift = function () {
                return this._iSectorShift;
            };
            Terrain.prototype._initSystemData = function () {
                if (isNull(this._pDefaultRenderMethod)) {
                    var pMethod = null, pEffect = null;
                    var pEngine = this._pEngine, pRmgr = pEngine.getResourceManager();
                    pMethod = pRmgr.renderMethodPool.findResource(".terrain_render");
                    if (!isNull(pMethod)) {
                        this._pDefaultRenderMethod = pMethod;
                        return true;
                    }
                    pEffect = pRmgr.createEffect(".terrain_render");
                    pEffect.addComponent("akra.system.terrain");
                    pMethod = pRmgr.createRenderMethod(".terrain_render");
                    pMethod.effect = pEffect;
                    this._pDefaultRenderMethod = pMethod;
                }
                return true;
            };
            Terrain.prototype.init = function (pMap, worldExtents, iShift, iShiftX, iShiftY, sSurfaceTextures, pRootNode) {
                if (typeof pRootNode === "undefined") { pRootNode = null; }
                if (!isNull(pRootNode)) {
                    if (!this.attachToParent(pRootNode)) {
                        return false;
                    }
                }
                this._initSystemData();
                this._iSectorShift = iShift;
                this._iSectorUnits = 1 << iShift;
                this._iSectorVerts = this._iSectorUnits + 1;
                this._pWorldExtents = new geometry.Rect3d(worldExtents.x0, worldExtents.x1, worldExtents.y0, worldExtents.y1, worldExtents.z0, worldExtents.z1);
                this._pWorldExtents.normalize();
                this._v3fWorldSize = this._pWorldExtents.size(this._v3fWorldSize);
                this._iSectorCountX = 1 << iShiftX;
                this._iSectorCountY = 1 << iShiftY;
                this._iTableWidth = this._iSectorCountX * this._iSectorUnits + 1;
                this._iTableHeight = this._iSectorCountY * this._iSectorUnits + 1;
                this._v2fSectorSize.set(this._v3fWorldSize.x / this._iSectorCountX, this._v3fWorldSize.y / this._iSectorCountY);
                this._v3fMapScale.x = this._v3fWorldSize.x / this._iTableWidth;
                this._v3fMapScale.y = this._v3fWorldSize.y / this._iTableHeight;
                this._v3fMapScale.z = this._v3fWorldSize.z;
                this._pMegaTexures = new MegaTexture(this._pEngine, this, sSurfaceTextures);
                this._buildHeightAndNormalTables(pMap["height"], pMap["normal"]);
                for(var sImgMap in pMap) {
                    if (pMap[sImgMap].destroyResource) {
                        pMap[sImgMap].destroyResource();
                    }
                }
                if (!this._allocateSectors()) {
 {
                        logger.setSourceLocation("terrain/Terrain.ts", 197);
                        logger.error("Can not alloacte terrain sections");
                    }
                    ;
                    return false;
                }
                this.computeBoundingBox();
                return true;
            };
            Terrain.prototype.findSection = function (iX, iY) {
                var pSection = null;
                if (iX >= 0 && iX < this._iSectorCountX && iY >= 0 && iY < this._iSectorCountY) {
                    pSection = this._pSectorArray[(iY * this._iSectorCountX) + iX];
                } else {
                }
                return pSection;
            };
            Terrain.prototype._allocateSectors = function () {
                var v2fSectorPos = new Vec2();
                var r2fSectorRect = new geometry.Rect2d();
                this._pSectorArray = new Array(this._iSectorCountX * this._iSectorCountY);
                for(var y = 0; y < this._iSectorCountY; ++y) {
                    for(var x = 0; x < this._iSectorCountX; ++x) {
                        v2fSectorPos.set(this._pWorldExtents.x0 + (x * this._v2fSectorSize.x), this._pWorldExtents.y0 + (y * this._v2fSectorSize.y));
                        r2fSectorRect.set(v2fSectorPos.x, v2fSectorPos.x + this._v2fSectorSize.x, v2fSectorPos.y, v2fSectorPos.y + this._v2fSectorSize.y);
                        var iXPixel = x << this._iSectorShift;
                        var iYPixel = y << this._iSectorShift;
                        var iIndex = (y * this._iSectorCountX) + x;
                        this._pSectorArray[iIndex] = this.scene.createTerrainSection();
                        if (!this._pSectorArray[iIndex]._internalCreate(this, x, y, iXPixel, iYPixel, this._iSectorVerts, this._iSectorVerts, r2fSectorRect)) {
                            return false;
                        }
                    }
                }
                this._setRenderMethod(this._pDefaultRenderMethod);
                return true;
            };
            Terrain.prototype._setRenderMethod = function (pRenderMethod) {
                this._pRenderMethod = pRenderMethod;
                if (this._pRenderMethod) {
                    this._pRenderMethod.addRef();
                }
                var pSection = null;
                for(var i = 0; i < this._pSectorArray.length; i++) {
                    pSection = this._pSectorArray[i];
                    pSection._createRenderable();
                    pSection.getRenderable().renderMethod = pRenderMethod;
                    this.connect(pSection.getRenderable().getTechnique(), "render", "_onRender", EEventTypes.UNICAST);
                }
            };
            Terrain.prototype._buildHeightAndNormalTables = function (pImageHightMap, pImageNormalMap) {
                var fHeight = 0;
                var iComponents = 4;
                this._pHeightTable = null;
                var iMaxY = this._iTableHeight;
                var iMaxX = this._iTableWidth;
                var pColorData = new Uint8Array(4 * iMaxY * iMaxX);
                this._pHeightTable = new Array(iMaxX * iMaxY);
                if (pImageHightMap.isResourceLoaded()) {
                    if (pImageHightMap.width !== iMaxX && pImageHightMap.height !== iMaxY) {
 {
                            logger.setSourceLocation("terrain/Terrain.ts", 299);
                            logger.warning("Размеры карты высот не совпадают с другими размерами. Нужно: " + iMaxX + "x" + iMaxY + ". Есть: " + pImageHightMap.width + "x" + pImageHightMap.height);
                        }
                        ;
                        return;
                    }
                    for(var iY = 0; iY < iMaxY; iY++) {
                        for(var iX = 0; iX < iMaxX; iX++) {
                            fHeight = pImageHightMap.getColorAt(this._pTempNormalColor, iX, iY).r;
                            fHeight = (fHeight * this._v3fMapScale.z) + this._pWorldExtents.z0;
                            this._pHeightTable[iY * iMaxX + iX] = fHeight;
                        }
                    }
                } else {
 {
                        logger.setSourceLocation("terrain/Terrain.ts", 311);
                        logger.warning("Карта высот не загружена");
                    }
                }
                if (pImageNormalMap.isResourceLoaded()) {
                    this._pNormalMap = this._pEngine.getResourceManager().createTexture(".terrain-normal-texture" + sid());
                    this._pNormalMap.loadImage(pImageNormalMap);
                    this._pNormalImage = pImageNormalMap;
                } else {
 {
                        logger.setSourceLocation("terrain/Terrain.ts", 320);
                        logger.warning("Карта нормалей не загружена");
                    }
                }
            };
            Terrain.prototype.readWorldHeight = function (iMapX, iMapY) {
                if (arguments.length == 2) {
                    if (iMapX >= this._iTableWidth) {
                        iMapX = this._iTableWidth - 1;
                    }
                    if (iMapY >= this._iTableHeight) {
                        iMapY = this._iTableHeight - 1;
                    }
                    return this._pHeightTable[(iMapY * this._iTableWidth) + iMapX];
                } else {
                    var iMapIndex = iMapX;
 {
                        logger.setSourceLocation("terrain/Terrain.ts", 339);
                        logger.assert(iMapIndex < this._iTableWidth * this._iTableHeight, "invalid index");
                    }
                    ;
                    return this._pHeightTable[iMapIndex];
                }
            };
            Terrain.prototype._tableIndex = function (iMapX, iMapY) {
                if (iMapX >= this._iTableWidth) {
                    iMapX = this._iTableWidth - 1;
                }
                if (iMapY >= this._iTableHeight) {
                    iMapY = this._iTableHeight - 1;
                }
                return (iMapY * this._iTableWidth) + iMapX;
            };
            Terrain.prototype.readWorldNormal = function (v3fNormal, iMapX, iMapY) {
                if (iMapX >= this._pNormalImage.width) {
                    iMapX = this._pNormalImage.width - 1;
                }
                if (iMapY >= this._pNormalImage.height) {
                    iMapY = this._pNormalImage.height - 1;
                }
                this._pNormalImage.getColorAt(this._pTempNormalColor, iMapX, iMapY);
                v3fNormal.set(this._pTempNormalColor.r, this._pTempNormalColor.g, this._pTempNormalColor.b);
                return v3fNormal;
            };
            Terrain.prototype.calcWorldHeight = function (fWorldX, fWorldY) {
                var fMapX = (fWorldX - this._pWorldExtents.x0) / this._pWorldExtents.sizeX();
                var fMapY = (fWorldY - this._pWorldExtents.y0) / this._pWorldExtents.sizeY();
                return this._calcMapHeight(fMapX, fMapY);
            };
            Terrain.prototype.calcWorldNormal = function (v3fNormal, fWorldX, fWorldY) {
                var fMapX = (fWorldX - this._pWorldExtents.x0) / this._pWorldExtents.sizeX();
                var fMapY = (fWorldY - this._pWorldExtents.y0) / this._pWorldExtents.sizeY();
                return this._calcMapNormal(v3fNormal, fMapX, fMapY);
            };
            Terrain.prototype._calcMapHeight = function (fMapX, fMapY) {
                var fTempMapX = fMapX * (this._iTableWidth - 1);
                var fTempMapY = fMapY * (this._iTableHeight - 1);
                var iMapX0 = math.floor(fTempMapX);
                var iMapY0 = math.floor(fTempMapY);
                fTempMapX -= iMapX0;
                fTempMapY -= iMapY0;
                iMapX0 = math.clamp(iMapX0, 0, this._iTableWidth - 1);
                iMapY0 = math.clamp(iMapY0, 0, this._iTableHeight - 1);
                var iMapX1 = math.clamp(iMapX0 + 1, 0, this._iTableWidth - 1);
                var iMapY1 = math.clamp(iMapY0 + 1, 0, this._iTableHeight - 1);
                var fH0 = this.readWorldHeight(iMapX0, iMapY0);
                var fH1 = this.readWorldHeight(iMapX1, iMapY0);
                var fH2 = this.readWorldHeight(iMapX0, iMapY1);
                var fH3 = this.readWorldHeight(iMapX1, iMapY1);
                var fAvgLo = (fH1 * fTempMapX) + (fH0 * (1.0 - fTempMapX));
                var fAvgHi = (fH3 * fTempMapX) + (fH2 * (1.0 - fTempMapX));
                return (fAvgHi * fTempMapY) + (fAvgLo * (1.0 - fTempMapY));
            };
            Terrain.prototype._calcMapNormal = function (v3fNormal, fMapX, fMapY) {
                var fTempMapX = fMapX * (this._pNormalMap.width - 1);
                var fTempMapY = fMapY * (this._pNormalMap.height - 1);
                var iMapX0 = math.floor(fTempMapX);
                var iMapY0 = math.floor(fTempMapY);
                fTempMapX -= iMapX0;
                fTempMapY -= iMapY0;
                iMapX0 = math.clamp(iMapX0, 0, this._pNormalMap.width - 1);
                iMapY0 = math.clamp(iMapY0, 0, this._pNormalMap.height - 1);
                var iMapX1 = math.clamp(iMapX0 + 1, 0, this._pNormalMap.width - 1);
                var iMapY1 = math.clamp(iMapY0 + 1, 0, this._pNormalMap.height - 1);
                var v3fH0 = math.vec3();
                this.readWorldNormal(v3fH0, iMapX0, iMapY0);
                var v3fH1 = math.vec3();
                this.readWorldNormal(v3fH1, iMapX1, iMapY0);
                var v3fH2 = math.vec3();
                this.readWorldNormal(v3fH2, iMapX0, iMapY1);
                var v3fH3 = math.vec3();
                this.readWorldNormal(v3fH3, iMapX1, iMapY1);
                var v3fAvgLo = math.vec3();
                v3fAvgLo.set(v3fH1.scale(fTempMapX));
                v3fAvgLo.add(v3fH0.scale(1.0 - fTempMapX));
                var v3fAvgHi = math.vec3();
                v3fAvgHi.set(v3fH3.scale(fTempMapX));
                v3fAvgHi.add(v3fH2.scale(1.0 - fTempMapX));
                v3fNormal.set(v3fAvgHi.scale(fTempMapY));
                v3fNormal.add(v3fAvgLo.scale(1.0 - fTempMapY));
                v3fNormal.normalize();
                return v3fNormal;
            };
            Terrain.prototype._generateTerrainImage = function (pTerrainImage, pTextureList, iTextureCount) {
 {
                    logger.setSourceLocation("terrain/Terrain.ts", 468);
                    logger.criticalError("нехуй");
                }
                ;
                var bSuccess = false;
                var x, y, i;
                var iImage_width = pTerrainImage.width;
                var iImage_height = pTerrainImage.height;
                var fUStep = 1.0 / (iImage_width - 1);
                var fVStep = 1.0 / (iImage_height - 1);
                var pSamples = new Array(iTextureCount);
                for(y = 0; y < iImage_height; ++y) {
                    for(x = 0; x < iImage_width; ++x) {
                        var fU = x * fUStep;
                        var fV = y * fVStep;
                        var fTotalBlend = 0.0;
                        var fMap_height = this._calcMapHeight(fU, fV);
                        var v3fNormal = new Vec3();
                        this._calcMapNormal(v3fNormal, fU, fV);
                        for(i = 0; i < iTextureCount; ++i) {
                            var fElevationScale = 0.0;
                            var fSlopeScale = 0.0;
                            if (fMap_height >= pTextureList[i].elevation.minElevation && fMap_height <= pTextureList[i].elevation.maxElevation) {
                                var fSpan = pTextureList[i].elevation.maxElevation - pTextureList[i].elevation.minElevation;
                                fElevationScale = fMap_height - pTextureList[i].elevation.minElevation;
                                fElevationScale *= 1.0 / fSpan;
                                fElevationScale -= 0.5;
                                fElevationScale *= 2.0;
                                fElevationScale *= fElevationScale;
                                fElevationScale = 1.0 - fElevationScale;
                            }
                            if (v3fNormal.z >= pTextureList[i].elevation.minNormalZ && v3fNormal.z <= pTextureList[i].elevation.maxNormalZ) {
                                var fSpan = pTextureList[i].elevation.maxNormalZ - pTextureList[i].elevation.minNormalZ;
                                fSlopeScale = v3fNormal.z - pTextureList[i].elevation.minNormalZ;
                                fSlopeScale *= 1.0 / fSpan;
                                fSlopeScale -= 0.5;
                                fSlopeScale *= 2.0;
                                fSlopeScale *= fSlopeScale;
                                fSlopeScale = 1.0 - fSlopeScale;
                            }
                            pSamples[i] = {
                                fScale: 0,
                                iColor: 0
                            };
                            pSamples[i].fScale = pTextureList[i].elevation.strength * fElevationScale * fSlopeScale;
                            fTotalBlend += pSamples[i].fScale;
                            pTextureList[i].pImage.sampleColor(fU * pTextureList[i].fUvScale, fV * pTextureList[i].fUvScale, pSamples[i].iColor);
                        }
                        var fBlendScale = 1.0 / fTotalBlend;
                        var fRed = 0.0;
                        var fGreen = 0.0;
                        var fBlue = 0.0;
                        var fAlpha = 0.0;
                        for(i = 0; i < iTextureCount; ++i) {
                            var fScale = pSamples[i].fScale * fBlendScale;
                            fBlue += (pSamples[i].iColor & 0xff) * fScale;
                            fGreen += ((pSamples[i].iColor >> 8) & 0xff) * fScale;
                            fRed += ((pSamples[i].iColor >> 16) & 0xff) * fScale;
                            fAlpha += ((pSamples[i].iColor >> 24) & 0xff) * fScale;
                        }
                        var fR = math.clamp(fRed, 0.0, 255.0) / 255.;
                        var fG = math.clamp(fGreen, 0.0, 255.0) / 255.;
                        var fB = math.clamp(fBlue, 0.0, 255.0) / 255.;
                        var fA = math.clamp(fAlpha, 0.0, 255.0) / 255.;
                        this._pTempNormalColor.set(fR, fG, fB, fA);
                        pTerrainImage.setColorAt(this._pTempNormalColor, x, y);
                    }
                }
            };
            Terrain.prototype._computeWeight = function (fValue, fMinExtent, fMaxExtent) {
 {
                    logger.setSourceLocation("terrain/Terrain.ts", 576);
                    logger.criticalError("нехуй");
                }
                ;
                var fWeight = 0.0;
                if (fValue >= fMinExtent && fValue <= fMaxExtent) {
                    var fSpan = fMaxExtent - fMinExtent;
                    fWeight = fValue - fMinExtent;
                    fWeight *= 1.0 / fSpan;
                    fWeight -= 0.5;
                    fWeight *= 2.0;
                    fWeight *= fWeight;
                    fWeight = 1.0 - math.absoluteValue(fWeight);
                    fWeight = math.clamp(fWeight, 0.001, 1.0);
                }
                return fWeight;
            };
            Terrain.prototype._generateBlendImage = function (pBlendImage, pElevationData, iElevationDataCount, fnCallback) {
 {
                    logger.setSourceLocation("terrain/Terrain.ts", 621);
                    logger.criticalError("нехуй");
                }
                ;
                var bSuccess = false;
                var x, y, i;
                var pColor = new Uint8Array(4);
 {
                    logger.setSourceLocation("terrain/Terrain.ts", 627);
                    logger.assert(pBlendImage != null, "pBlendImage is not valid");
                }
                ;
                iElevationDataCount = math.min(iElevationDataCount, 4);
                var iImg_width = pBlendImage.getWidth();
                var iImg_height = pBlendImage.getHeight();
                var fUStep = 1.0 / (iImg_width - 1);
                var fVStep = 1.0 / (iImg_height - 1);
                var v4fMask = new Array(4);
                v4fMask[0] = new Vec4();
                v4fMask[0].set(1.0, 0.0, 0.0, 0.0);
                v4fMask[1] = new Vec4();
                v4fMask[1].set(0.0, 1.0, 0.0, 0.0);
                v4fMask[2] = new Vec4();
                v4fMask[2].set(0.0, 0.0, 1.0, 0.0);
                v4fMask[3] = new Vec4();
                v4fMask[3].set(0.0, 0.0, 0.0, 1.0);
                for(y = 0; y < iImg_height; y++) {
                    for(x = 0; x < iImg_width; x++) {
                        var fTotalBlend = 0.0;
                        var v4fBlendFactors = new Vec4();
                        v4fBlendFactors.set(0.0, 0.0, 0.0, 0.0);
                        if (iElevationDataCount == 3) {
                            v4fBlendFactors.w = 255;
                        }
                        var fU = x * fUStep;
                        var fV = y * fVStep;
                        var fMap_height = this._calcMapHeight(fU, fV);
                        var v3fNormal = new Vec3();
                        var v4fTemp = new Vec4();
                        this._calcMapNormal(v3fNormal, fU, fV);
                        for(i = 0; i < iElevationDataCount; ++i) {
                            var fElevationScale = this._computeWeight(fMap_height, pElevationData[i].fMinElevation, pElevationData[i].fMaxElevation);
                            var fSlopeScale = this._computeWeight(v3fNormal.z, pElevationData[i].fMinNormalZ, pElevationData[i].fMaxNormalZ);
                            var fScale = pElevationData[i].fStrength * fElevationScale * fSlopeScale;
                            v4fTemp.set(v4fMask[i]);
                            v4fTemp.scale(fScale);
                            v4fBlendFactors.add(v4fTemp);
                            fTotalBlend += fScale;
                        }
                        var fBlendScale = 255.0 / fTotalBlend;
                        v4fBlendFactors.scale(fBlendScale);
                        pColor[0] = math.clamp(v4fBlendFactors.x, 0.0, 255.0);
                        pColor[1] = math.clamp(v4fBlendFactors.y, 0.0, 255.0);
                        pColor[2] = math.clamp(v4fBlendFactors.z, 0.0, 255.0);
                        pColor[3] = math.clamp(v4fBlendFactors.w, 0.0, 255.0);
                        pBlendImage.setPixelRGBA(x, iImg_height - y - 1, pColor);
                    }
                }
            };
            Terrain.prototype._setTessellationParameters = function (fScale, fLimit) {
                this._fScale = fScale;
                this._fLimit = fLimit;
            };
            Terrain.prototype.prepareForRender = function (pViewport) {
                this._pMegaTexures.prepareForRender(pViewport);
            };
            Terrain.prototype.reset = function () {
            };
            Terrain.prototype.readUserInput = function () {
                if (this._fLimit < 0.001) {
                    this._fLimit = 0.001;
                }
                if (this._fScale < 0.001) {
                    this._fScale = 0.001;
                }
                document.getElementById('setinfo4').innerHTML = "fScale1 " + this._fScale;
                document.getElementById('setinfo5').innerHTML = "fLimit1 " + this._fLimit;
            };
            Terrain.prototype.computeBoundingBox = function () {
                var fX0, fY0, fZ0, fX1, fY1, fZ1;
                fX0 = fY0 = fZ0 = MAX_FLOAT64;
                fX1 = fY1 = fZ1 = MIN_FLOAT64;
                for(var i = 0; i < this._pSectorArray.length; i++) {
                    var pSectionBox = this._pSectorArray[i].localBounds;
                    fX0 = math.min(fX0, pSectionBox.x0);
                    fY0 = math.min(fY0, pSectionBox.y0);
                    fZ0 = math.min(fZ0, pSectionBox.z0);
                    fX1 = math.max(fX1, pSectionBox.x1);
                    fY1 = math.max(fY1, pSectionBox.y1);
                    fZ1 = math.max(fZ1, pSectionBox.z1);
                }
                this.accessLocalBounds().set(fX0, fX1, fY0, fY1, fZ0, fZ1);
            };
            Terrain.prototype._onRender = function (pTechnique, iPass) {
                var pPass = pTechnique.getPass(iPass);
                pPass.setTexture("TEXTURE6", this._pNormalMap);
                pPass.setSamplerTexture("S_NORMAL", "TEXTURE6");
                this._pMegaTexures.applyForRender(pPass);
            };
            return Terrain;
        })(scene.SceneObject);
        terrain.Terrain = Terrain;        
    })(akra.terrain || (akra.terrain = {}));
    var terrain = akra.terrain;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (terrain) {
        var TerrainSectionROAM = (function () {
            function TerrainSectionROAM() { }
            return TerrainSectionROAM;
        })();
        terrain.TerrainSectionROAM = TerrainSectionROAM;        
        TerrainSection;
 {
            _iTotalDetailLevels:
number
            _iTotalVariances:
number
            _iOffsetInVertexBuffer:
number
            _pRootTriangleA:
ITriTreeNode = new TriTreeNode()
            _pRootTriangleB:
ITriTreeNode = new TriTreeNode()
            _pVarianceTreeA:
number[] = null
            _pVarianceTreeB:
number[] = null
            _v3fDistance0:
IVec3 = new Vec3()
            _v3fDistance1:
IVec3 = new Vec3()
            _v3fDistance2:
IVec3 = new Vec3()
            _v3fDistance3:
IVec3 = new Vec3()
            _fDistance0:
number
            _fDistance1:
number
            _fDistance2:
number
            _fDistance3:
number
            _fQueueSortValue:
number
            _leftNeighborOfA:
ITriTreeNode = null
            _rightNeighborOfA:
ITriTreeNode = null
            _leftNeighborOfB:
ITriTreeNode = null
            _rightNeighborOfB:
ITriTreeNode = null
            _iStartIndex:
number = undefined
            _pTerrainSystem:
ITerrainROAM = null
            _iTempTotalIndices:
number = undefined
            _pTempIndexList:
Float32Array = undefined
            _iMaxIndices:
number = undefined
            constructor(pScene, IScene3d, eType, EEntityTypes = EEntityTypes.TERRAIN_SECTION_ROAM);
 {
                _super.prototype(pScene, eType);
            }
            inline;
            get;
            terrainSystem();
            ITerrainROAM;
 {
                return this._pTerrainSystem;
            }
            ;
            inline;
            get;
            triangleA();
            ITriTreeNode;
 {
                return this._pRootTriangleA;
            }
            inline;
            get;
            triangleB();
            ITriTreeNode;
 {
                return this._pRootTriangleA;
            }
            inline;
            get;
            queueSortValue();
            number;
 {
                return this._fQueueSortValue;
            }
            _internalCreate(pParentSystem, ITerrainROAM, iSectorX, number, iSectorY, number, iHeightMapX, number, iHeightMapY, number, iXVerts, number, iYVerts, number, pWorldRect, IRect2d, iStartIndex ?  : number);
            bool;
 {
 {
                    logger.setSourceLocation("terrain/TerrainSectionROAM.ts", 74);
                    logger.assert(arguments.length === 9, "Not valid arguments count.");
                }
                ;
                var iVerts = math.max(iXVerts, iYVerts);
                this._iStartIndex = iStartIndex;
                var bResult = _super.prototype._internalCreate.call(this, pParentSystem, iSectorX, iSectorY, iHeightMapX, iHeightMapY, iVerts, iVerts, pWorldRect);
                if (!bResult) {
                    return false;
                }
                this._iTotalDetailLevels = math.ceil(math.log(iVerts) / math.LN2) * 2 - 1;
                this._iTotalVariances = 1 << this._iTotalDetailLevels;
                this._pVarianceTreeA = new Array(this._iTotalVariances);
                this._pVarianceTreeB = new Array(this._iTotalVariances);
                for(var i = 0; i < this._iTotalVariances; i++) {
                    this._pVarianceTreeA[i] = 0;
                    this._pVarianceTreeB[i] = 0;
                }
                var pRoamTerrain = this.terrainSystem;
                var pNorthSection = pRoamTerrain.findSection(iSectorX, iSectorY - 1);
                var pSouthSection = pRoamTerrain.findSection(iSectorX, iSectorY + 1);
                var pEastSection = pRoamTerrain.findSection(iSectorX + 1, iSectorY);
                var pWestSection = pRoamTerrain.findSection(iSectorX - 1, iSectorY);
                if (pNorthSection) {
                    this._leftNeighborOfA = pNorthSection.triangleB;
                }
                if (pSouthSection) {
                    this._leftNeighborOfB = pSouthSection.triangleA;
                }
                if (pEastSection) {
                    this._rightNeighborOfB = pEastSection.triangleA;
                }
                if (pWestSection) {
                    this._rightNeighborOfA = pWestSection.triangleB;
                }
                this.reset();
                this.computeVariance();
                return bResult;
            }
            prepareForRender(pViewport, IViewport);
            void {
                super: ,
                prepareForRender: (pViewport)
            };
            var pCamera = pViewport.getCamera();
            var v3fViewPoint = pCamera.worldPosition;
            var fHeight0 = this.terrainSystem.readWorldHeight(math.ceil(this._iHeightMapX), math.ceil(this._iHeightMapY));
            var fHeight1 = this.terrainSystem.readWorldHeight(math.ceil(this._iHeightMapX), math.ceil(this._iHeightMapY + this._iYVerts));
            var fHeight2 = this.terrainSystem.readWorldHeight(math.ceil(this._iHeightMapX + this._iXVerts), math.ceil(this._iHeightMapY));
            var fHeight3 = this.terrainSystem.readWorldHeight(math.ceil(this._iHeightMapX + this._iXVerts), math.ceil(this._iHeightMapY + this._iYVerts));
            this._v3fDistance0.set(v3fViewPoint.x - this._pWorldRect.x0, v3fViewPoint.y - this._pWorldRect.y0, v3fViewPoint.z - fHeight0);
            this._v3fDistance1.set(v3fViewPoint.x - this._pWorldRect.x0, v3fViewPoint.y - this._pWorldRect.y1, v3fViewPoint.z - fHeight1);
            this._v3fDistance2.set(v3fViewPoint.x - this._pWorldRect.x1, v3fViewPoint.y - this._pWorldRect.y1, v3fViewPoint.z - fHeight2);
            this._v3fDistance3.set(v3fViewPoint.x - this._pWorldRect.x1, v3fViewPoint.y - this._pWorldRect.y0, v3fViewPoint.z - fHeight3);
            this._fDistance0 = this._v3fDistance0.length();
            this._fDistance1 = this._v3fDistance1.length();
            this._fDistance2 = this._v3fDistance2.length();
            this._fDistance3 = this._v3fDistance3.length();
            this._fQueueSortValue = math.min(this._v3fDistance0.length(), this._v3fDistance1.length());
            this._fQueueSortValue = math.min(this._fQueueSortValue, this._v3fDistance2.length());
            this._fQueueSortValue = math.min(this._fQueueSortValue, this._v3fDistance3.length());
            this.terrainSystem.addToTessellationQueue(this);
        }
        reset();
        void {
            this: ,
            _pRootTriangleA: ,
            leftChild:  = null
        };
        this._pRootTriangleA.rightChild = null;
        this._pRootTriangleB.leftChild = null;
        this._pRootTriangleB.rightChild = null;
        this._pRootTriangleA.baseNeighbor = this._pRootTriangleB;
        this._pRootTriangleB.baseNeighbor = this._pRootTriangleA;
        this._pRootTriangleA.leftNeighbor = this._leftNeighborOfA;
        this._pRootTriangleA.rightNeighbor = this._rightNeighborOfA;
        this._pRootTriangleB.leftNeighbor = this._leftNeighborOfB;
        this._pRootTriangleB.rightNeighbor = this._rightNeighborOfB;
    })(akra.terrain || (akra.terrain = {}));
    var terrain = akra.terrain;
})(akra || (akra = {}));
tessellate(fScale, number, fLimit, number);
void {
    this: ,
    recursiveTessellate: (this._pRootTriangleA, 
this._fDistance1, 
this._fDistance2, 
this._fDistance0, 
this._pVarianceTreeA, 
1, 
fScale, 
fLimit)
};
this.recursiveTessellate(this._pRootTriangleB, this._fDistance3, this._fDistance0, this._fDistance2, this._pVarianceTreeB, 1, fScale, fLimit);
recursiveTessellate(pTri, ITriTreeNode, fDistA, number, fDistB, number, fDistC, number, pVTree, number[], iIndex, number, fScale, number, fLimit, number);
void {
    if: ((iIndex << 1) + 1 < this._iTotalVariances)
};
 {
    var fMidDist = (fDistB + fDistC) * 0.5;
    if (!pTri.leftChild) {
        var fRatio = (pVTree[iIndex] * fScale) / (fMidDist + 0.0001);
        if (fRatio > 1) {
            this.split(pTri);
        }
    }
    if (pTri.leftChild) {
        this.recursiveTessellate(pTri.leftChild, fMidDist, fDistA, fDistB, pVTree, iIndex << 1, fScale, fLimit);
        this.recursiveTessellate(pTri.rightChild, fMidDist, fDistC, fDistA, pVTree, (iIndex << 1) + 1, fScale, fLimit);
    }
}
split(pTri, ITriTreeNode);
void {
    if: (pTri.leftChild)
};
 {
    return;
}
if (pTri.baseNeighbor && (pTri.baseNeighbor.baseNeighbor != pTri)) {
    this.split(pTri.baseNeighbor);
}
pTri.leftChild = this.terrainSystem.requestTriNode();
pTri.rightChild = this.terrainSystem.requestTriNode();
if ((!pTri.leftChild) || (!pTri.rightChild)) {
    pTri.leftChild = null;
    pTri.rightChild = null;
    return;
}
pTri.leftChild.baseNeighbor = pTri.leftNeighbor;
pTri.leftChild.leftNeighbor = pTri.rightChild;
pTri.rightChild.baseNeighbor = pTri.rightNeighbor;
pTri.rightChild.rightNeighbor = pTri.leftChild;
if (pTri.leftNeighbor) {
    if (pTri.leftNeighbor.baseNeighbor == pTri) {
        pTri.leftNeighbor.baseNeighbor = pTri.leftChild;
    } else if (pTri.leftNeighbor.leftNeighbor == pTri) {
        pTri.leftNeighbor.leftNeighbor = pTri.leftChild;
    } else if (pTri.leftNeighbor.rightNeighbor == pTri) {
        pTri.leftNeighbor.rightNeighbor = pTri.leftChild;
    } else {
        console.log(pTri);
 {
            logger.setSourceLocation("terrain/TerrainSectionROAM.ts", 272);
            logger.warning("Invalid Left Neighbor!");
        }
        ;
        debugger;

    }
}
if (pTri.rightNeighbor) {
    if (pTri.rightNeighbor.baseNeighbor == pTri) {
        pTri.rightNeighbor.baseNeighbor = pTri.rightChild;
    } else if (pTri.rightNeighbor.rightNeighbor == pTri) {
        pTri.rightNeighbor.rightNeighbor = pTri.rightChild;
    } else if (pTri.rightNeighbor.leftNeighbor == pTri) {
        pTri.rightNeighbor.leftNeighbor = pTri.rightChild;
    } else {
 {
            logger.setSourceLocation("terrain/TerrainSectionROAM.ts", 286);
            logger.warning("Invalid Right Neighbor!");
        }
        ;
    }
}
if (pTri.baseNeighbor) {
    if (pTri.baseNeighbor.leftChild) {
        pTri.baseNeighbor.leftChild.rightNeighbor = pTri.rightChild;
        pTri.baseNeighbor.rightChild.leftNeighbor = pTri.leftChild;
        pTri.leftChild.rightNeighbor = pTri.baseNeighbor.rightChild;
        pTri.rightChild.leftNeighbor = pTri.baseNeighbor.leftChild;
    } else {
        this.split(pTri.baseNeighbor);
    }
} else {
    pTri.leftChild.rightNeighbor = null;
    pTri.rightChild.leftNeighbor = null;
}
_createRenderDataForVertexAndIndex();
bool;
 {
    return true;
}
_buildIndexBuffer();
bool;
 {
    this._iMaxIndices = this.terrainSystem.maxTriTreeNodes * 3;
    return true;
}
_buildVertexBuffer();
bool;
 {
    this._pWorldRect.z0 = MAX_FLOAT64;
    this._pWorldRect.z1 = MIN_FLOAT64;
    var pVerts = this.terrainSystem.verts;
    var v3fNormal = new Vec3();
    var v2fCellSize = new Vec2();
    v2fCellSize.set(this.heightX / (this._iXVerts - 1), this.heightY / (this._iYVerts - 1));
    var v2fVert = new Vec2();
    v2fVert.set(0.0, 0.0);
    for(var y = 0; y < this._iYVerts; ++y) {
        v2fVert.set(this._pWorldRect.x0, y * v2fCellSize.y + this._pWorldRect.y0);
        for(var x = 0; x < this._iXVerts; ++x) {
            var fHeight = this.terrainSystem.readWorldHeight(this._iHeightMapX + x, this._iHeightMapY + y);
            pVerts[((y * this._iXVerts) + x) * 5 + 0 + this._iStartIndex * 5] = v2fVert.x;
            pVerts[((y * this._iXVerts) + x) * 5 + 1 + this._iStartIndex * 5] = v2fVert.y;
            pVerts[((y * this._iXVerts) + x) * 5 + 2 + this._iStartIndex * 5] = fHeight;
            pVerts[((y * this._iXVerts) + x) * 5 + 3 + this._iStartIndex * 5] = (this._iSectorX + x / (this._iXVerts - 1)) / this.terrainSystem.sectorCountX;
            pVerts[((y * this._iXVerts) + x) * 5 + 4 + this._iStartIndex * 5] = (this._iSectorY + y / (this._iYVerts - 1)) / this.terrainSystem.sectorCountY;
            this._pWorldRect.z0 = math.min(this._pWorldRect.z0, fHeight);
            this._pWorldRect.z1 = math.max(this._pWorldRect.z1, fHeight);
            v2fVert.x += v2fCellSize.x;
        }
    }
    return true;
}
buildTriangleList();
void {
    this: ,
    _iTempTotalIndices:  = this.terrainSystem.totalIndex
};
this._pTempIndexList = this.terrainSystem.index;
this._iVertexID = this.terrainSystem.vertexId;
this.recursiveBuildTriangleList(this._pRootTriangleA, 0, this._iXVerts - 1, (this._iYVerts - 1) * this._iXVerts);
this.recursiveBuildTriangleList(this._pRootTriangleB, (this._iYVerts * this._iXVerts) - 1, (this._iYVerts - 1) * this._iXVerts, this._iXVerts - 1);
this.terrainSystem.totalIndex = this._iTempTotalIndices;
this._iTempTotalIndices = undefined;
this._iVertexID = undefined;
this._pTempIndexList = null;
recursiveBuildTriangleList(pTri, ITriTreeNode, iPointBase, number, iPointLeft, number, iPointRight, number);
void {
    if: (pTri.leftChild)
};
 {
    if (!pTri.rightChild) {
 {
            logger.setSourceLocation("terrain/TerrainSectionROAM.ts", 398);
            logger.warning("invalid triangle node");
        }
        ;
    }
    var iPointMid = (iPointLeft + iPointRight) * 0.5;
    this.recursiveBuildTriangleList(pTri.leftChild, iPointMid, iPointBase, iPointLeft);
    this.recursiveBuildTriangleList(pTri.rightChild, iPointMid, iPointRight, iPointBase);
}
if (this._iTempTotalIndices + 3 < this._iMaxIndices) {
    this._pTempIndexList[this._iTempTotalIndices++] = ((iPointRight + this._iStartIndex) * 20 + this._iVertexID) / 4;
    this._pTempIndexList[this._iTempTotalIndices++] = ((iPointLeft + this._iStartIndex) * 20 + this._iVertexID) / 4;
    this._pTempIndexList[this._iTempTotalIndices++] = ((iPointBase + this._iStartIndex) * 20 + this._iVertexID) / 4;
} else {
 {
        logger.setSourceLocation("terrain/TerrainSectionROAM.ts", 416);
        logger.log("else", this._iTempTotalIndices, this._iMaxIndices);
    }
}
computeVariance();
void {
    var: iTableWidth,
    number:  = this.terrainSystem.tableWidth
};
var iTableHeight = this.terrainSystem.tableHeight;
var iIndex0 = this.terrainSystem._tableIndex(this._iHeightMapX, this._iHeightMapY);
var iIndex1 = this.terrainSystem._tableIndex(this._iHeightMapX, this._iHeightMapY + this._iYVerts - 1);
var iIndex2 = this.terrainSystem._tableIndex(this._iHeightMapX + this._iXVerts - 1, this._iHeightMapY + this._iYVerts - 1);
var iIndex3 = this.terrainSystem._tableIndex(this._iHeightMapX + this._iXVerts - 1, this._iHeightMapY);
var fHeight0 = this.terrainSystem.readWorldHeight(iIndex0);
var fHeight1 = this.terrainSystem.readWorldHeight(iIndex1);
var fHeight2 = this.terrainSystem.readWorldHeight(iIndex2);
var fHeight3 = this.terrainSystem.readWorldHeight(iIndex3);
this.recursiveComputeVariance(iIndex1, iIndex2, iIndex0, fHeight1, fHeight2, fHeight0, this._pVarianceTreeA, 1);
this.recursiveComputeVariance(iIndex3, iIndex0, iIndex2, fHeight3, fHeight0, fHeight2, this._pVarianceTreeB, 1);
recursiveComputeVariance(iCornerA, number, iCornerB, number, iCornerC, number, fHeightA, number, fHeightB, number, fHeightC, number, pVTree, number[], iIndex, number);
number;
 {
    if (iIndex < pVTree.length) {
        var iMidpoint = (iCornerB + iCornerC) >> 1;
        var fMidHeight = this.terrainSystem.readWorldHeight(iMidpoint);
        var iTW = this.terrainSystem.tableWidth;
        var iTH = this.terrainSystem.tableHeight;
        var iXB = iCornerB % iTW;
        var iYB = math.floor(iCornerB / iTW);
        var iXC = iCornerC % iTW;
        var iYC = math.floor(iCornerC / iTW);
        var pWorldSize = this.terrainSystem.worldSize;
        var fLX = math.abs(iXB - iXC) / iTW * pWorldSize.x;
        var fLY = math.abs(iYB - iYC) / iTH * pWorldSize.y;
        var fX = math.sqrt(fLY * fLY + fLX * fLX);
        var fY = math.abs(fHeightB - fHeightC);
        var fInterpolatedHeight = (fHeightB + fHeightC) * 0.5;
        var fVariance = math.abs(fMidHeight - fInterpolatedHeight);
        if (fX < fY) {
            fVariance = fInterpolatedHeight * fX / fY;
        }
        var fLeft = this.recursiveComputeVariance(iMidpoint, iCornerA, iCornerB, fMidHeight, fHeightA, fHeightB, pVTree, iIndex << 1);
        var fRight = this.recursiveComputeVariance(iMidpoint, iCornerC, iCornerA, fMidHeight, fHeightC, fHeightA, pVTree, 1 + (iIndex << 1));
        fVariance = math.max(fVariance, fLeft);
        fVariance = math.max(fVariance, fRight);
        pVTree[iIndex] = fVariance;
        return fVariance;
    }
    return 0;
}
drawVariance(iIndex, number, iCornerA, number, iCornerB, number, iCornerC, number, pVTree, number[]);
void {
    var: iLevel,
    number:  = math.floor(math.log(iIndex) / math.LN2)
};
var iStart = 0;
if (iLevel >= iStart && iLevel < iStart + 4) {
    var pCanvas = document.getElementById("variance" + (iLevel - iStart));
    var p2D = pCanvas.getContext("2d");
    p2D.fillStyle = "rgb(0," + math.floor(pVTree[iIndex]) + ",0)";
    p2D.strokeStyle = "#f00";
    p2D.lineWidth = 1;
    p2D.beginPath();
    var iTW = this.terrainSystem.tableWidth;
    var iTH = this.terrainSystem.tableHeight;
    var iXA = iCornerA % iTW;
    var iYA = math.floor(iCornerA / iTW);
    var iXB = iCornerB % iTW;
    var iYB = math.floor(iCornerB / iTW);
    var iXC = iCornerC % iTW;
    var iYC = math.floor(iCornerC / iTW);
    var iXMid = math.floor((iXA + iXB + iXC) / 3);
    var iYMid = math.floor((iYA + iYB + iYC) / 3);
    p2D.arc(math.floor(iXMid / iTW * pCanvas.width), math.floor(iYMid / iTH * pCanvas.height), 5, 0, math.PI * 2, false);
    p2D.fill();
}
var akra;
(function (akra) {
    (function (terrain) {
        var TriTreeNode = (function () {
            function TriTreeNode() {
                this._pBaseNeighbor = null;
                this._pLeftNeighbor = null;
                this._pRightNeighbor = null;
                this._pLeftChild = null;
                this._pRightChild = null;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
            }
            TriTreeNode.prototype.baseNeighbor = function () {
                return this._pBaseNeighbor;
            };
            TriTreeNode.prototype.baseNeighbor = function (pBaseNeighbor) {
                this._pBaseNeighbor = pBaseNeighbor;
            };
            TriTreeNode.prototype.leftNeighbor = function () {
                return this._pLeftNeighbor;
            };
            TriTreeNode.prototype.leftNeighbor = function (pLeftNeighbor) {
                this._pLeftNeighbor = pLeftNeighbor;
            };
            TriTreeNode.prototype.rightNeighbor = function () {
                return this._pRightNeighbor;
            };
            TriTreeNode.prototype.rightNeighbor = function (pRightNeighbor) {
                this._pRightNeighbor = pRightNeighbor;
            };
            TriTreeNode.prototype.leftChild = function () {
                return this._pLeftChild;
            };
            TriTreeNode.prototype.leftChild = function (pLeftChild) {
                this._pLeftChild = pLeftChild;
            };
            TriTreeNode.prototype.rightChild = function () {
                return this._pRightChild;
            };
            TriTreeNode.prototype.rightChild = function (pRightChild) {
                this._pRightChild = pRightChild;
            };
            return TriTreeNode;
        })();
        terrain.TriTreeNode = TriTreeNode;        
        var TriangleNodePool = (function () {
            function TriangleNodePool(iCount) {
                this._iNextTriNode = 0;
                this._iMaxCount = undefined;
                this._pPool = null;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this._iMaxCount = iCount;
                this.pool = Array(iCount);
                console.log("TriangleNodePool", this.maxCount);
                for(var i = 0; i < this.maxCount; i++) {
                    this.pool[i] = new TriTreeNode();
                }
            }
            TriangleNodePool.prototype.nextTriNode = function () {
                return this._iNextTriNode;
            };
            TriangleNodePool.prototype.nextTriNode = function (iNextTriNode) {
                this._iNextTriNode = iNextTriNode;
            };
            TriangleNodePool.prototype.maxCount = function () {
                return this._iMaxCount;
            };
            TriangleNodePool.prototype.pool = function () {
                return this._pPool;
            };
            TriangleNodePool.prototype.pool = function (pPool) {
                this._pPool = pPool;
            };
            TriangleNodePool.prototype.request = function () {
                var pNode = null;
                if (this.nextTriNode < this.maxCount) {
                    pNode = this.pool[this.nextTriNode];
                    pNode.baseNeighbor = null;
                    pNode.leftNeighbor = null;
                    pNode.rightNeighbor = null;
                    pNode.leftChild = null;
                    pNode.rightChild = null;
                    this.nextTriNode++;
                }
                return pNode;
            };
            TriangleNodePool.prototype.reset = function () {
                this.nextTriNode = 0;
            };
            return TriangleNodePool;
        })();
        terrain.TriangleNodePool = TriangleNodePool;        
    })(akra.terrain || (akra.terrain = {}));
    var terrain = akra.terrain;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (terrain) {
        var TerrainROAM = (function () {
            function TerrainROAM() { }
            return TerrainROAM;
        })();
        terrain.TerrainROAM = TerrainROAM;        
        Terrain;
 {
            _pRenderableObject:
IRenderableObject = null
            _pRenderData:
IRenderData = null
            _pDataIndex:
IVertexData = null
            _iTotalIndices:
number
            _iTotalIndicesOld:
number
            _iTotalIndicesMax:
number
            _pIndexList:
Float32Array = null
            _pVerts:
number[]
            _iVertexID:
number
            _pNodePool:
ITriangleNodePool = null
            _pThistessellationQueue:
ITerrainSectionROAM[] = null
            _iTessellationQueueCount:
number = 0
            _isCreat:
bool = false
            _isRenderInThisFrame:
bool = false
            _iMaxTriTreeNodes:
number = (1024 * 64)
            _iTessellationQueueSize:
number = undefined
            _isCreate:
bool = false
            _pSectorArray:
ITerrainSectionROAM[] = null
            constructor(pScene, IScene3d, eType, EEntityTypes = EEntityTypes.TERRAIN_ROAM);
 {
                _super.prototype(pScene, eType);
                this._pRenderData = this._pDataFactory.getEmptyRenderData(EPrimitiveTypes.TRIANGLELIST, ERenderDataBufferOptions.RD_ADVANCED_INDEX);
                this._pRenderableObject = new render.RenderableObject();
                this._pRenderableObject._setup(this._pEngine.getRenderer());
                this._pRenderableObject._setRenderData(this._pRenderData);
                this.connect(this._pRenderableObject, "beforeRender", "_onBeforeRender", EEventTypes.UNICAST);
            }
            inline;
            get;
            maxTriTreeNodes();
            number;
 {
                return this._iMaxTriTreeNodes;
            }
            inline;
            get;
            verts();
            number[];
 {
                return this._pVerts;
            }
            inline;
            get;
            index();
            Float32Array;
 {
                return this._pIndexList;
            }
            inline;
            get;
            totalIndex();
            number;
 {
                return this._iTotalIndices;
            }
            inline;
            set;
            totalIndex(iTotalIndices, number);
 {
                this._iTotalIndices = iTotalIndices;
            }
            inline;
            get;
            vertexId();
            number;
 {
                return this._iVertexID;
            }
            inline;
            get;
            totalRenderable();
            number;
 {
                return !isNull(this._pRenderableObject) ? 1 : 0;
            }
            inline;
            getRenderable(i ?  : number);
            IRenderableObject;
 {
                return this._pRenderableObject;
            }
            _iTessellationQueueCountOld:
number = undefined
            _nCountRender:
number = 0
            init(pImgMap, IImageMap, worldExtents, IRect3d, iShift, number, iShiftX, number, iShiftY, number, sSurfaceTextures, string, pRootNode ?  : ISceneObject = null);
 {
                var bResult = _super.prototype.init.call(this, pImgMap, worldExtents, iShift, iShiftX, iShiftY, sSurfaceTextures, pRootNode);
                if (bResult) {
                    this._iTessellationQueueSize = this.sectorCountX * this.sectorCountY;
                    this._pNodePool = new TriangleNodePool(this._iMaxTriTreeNodes);
                    this._pThistessellationQueue = new Array(this._iTessellationQueueSize);
                    this._iTessellationQueueCount = 0;
                    this._isCreate = true;
                    this._iTotalIndicesMax = 0;
                    this._pRenderableObject.getTechnique().setMethod(this._pDefaultRenderMethod);
                    this.connect(this._pRenderableObject.getTechnique(), "render", "_onRender", EEventTypes.UNICAST);
                    this.reset();
                }
                return bResult;
            }
            destroy();
            void {
                delete: this._pNodePool
            };
            delete this._pThistessellationQueue;
            this._iTessellationQueueCount = 0;
            this._fScale = 0;
            this._fLimit = 0;
        }
        _allocateSectors();
        bool;
 {
            this._pSectorArray = new Array(this._iSectorCountX * this._iSectorCountY);
            this._pVerts = new Array((this._iSectorCountX * this._iSectorCountY) * (this._iSectorVerts * this._iSectorVerts) * (3 + 2));
            for(var i = 0; i < this._pSectorArray.length; i++) {
                this._pSectorArray[i] = this.scene.createTerrainSectionROAM();
            }
            for(var y = 0; y < this._iSectorCountY; ++y) {
                for(var x = 0; x < this._iSectorCountX; ++x) {
                    var v2fSectorPos = new Vec2();
                    v2fSectorPos.set(this._pWorldExtents.x0 + (x * this._v2fSectorSize.x), this._pWorldExtents.y0 + (y * this._v2fSectorSize.y));
                    var r2fSectorRect = new geometry.Rect2d();
                    r2fSectorRect.set(v2fSectorPos.x, v2fSectorPos.x + this._v2fSectorSize.x, v2fSectorPos.y, v2fSectorPos.y + this._v2fSectorSize.y);
                    var iXPixel = x << this._iSectorShift;
                    var iYPixel = y << this._iSectorShift;
                    var iIndex = (y * this._iSectorCountX) + x;
                    if (!this._pSectorArray[iIndex]._internalCreate(this, x, y, iXPixel, iYPixel, this._iSectorVerts, this._iSectorVerts, r2fSectorRect, iIndex * (this._iSectorVerts * this._iSectorVerts))) {
                        return false;
                    }
                }
            }
            var pVertexDescription = [
                VE_FLOAT3(DeclarationUsages.POSITION), 
                VE_FLOAT2(DeclarationUsages.TEXCOORD)
            ];
            this._iVertexID = this._pRenderData.allocateData(pVertexDescription, new Float32Array(this._pVerts));
            this._iTotalIndices = 0;
            this._pIndexList = new Float32Array(this._iMaxTriTreeNodes * 3);
            this._pRenderData.allocateIndex([
                VE_FLOAT(DeclarationUsages.INDEX0)
            ], this._pIndexList);
            this._pRenderData.index(this._iVertexID, DeclarationUsages.INDEX0);
            this._pDataIndex = this._pRenderData.getAdvancedIndexData(DeclarationUsages.INDEX0);
            return true;
        }
        reset();
        void {
            this: ,
            _isRenderInThisFrame:  = false
        };
        if (this._isCreate) {
            _super.prototype.reset.call(this);
            this._iTessellationQueueCount = 0;
            this._pThistessellationQueue.length = this._iTessellationQueueSize;
            this._pNodePool.reset();
            for(var i in this._pSectorArray) {
                this._pSectorArray[i].reset();
            }
        }
    })(akra.terrain || (akra.terrain = {}));
    var terrain = akra.terrain;
})(akra || (akra = {}));
requestTriNode();
 {
    return this._pNodePool.request();
}
addToTessellationQueue(pSection, ITerrainSectionROAM);
bool;
 {
    if (this._iTessellationQueueCount < this._iTessellationQueueSize) {
        this._pThistessellationQueue[this._iTessellationQueueCount] = pSection;
        this._iTessellationQueueCount++;
        return true;
    }
 {
        logger.setSourceLocation("terrain/TerrainROAM.ts", 208);
        logger.warning("increase the size of the ROAM tessellation queue");
    }
    ;
    return false;
}
processTessellationQueue();
void {
    this: ,
    _pThistessellationQueue: ,
    length:  = this._iTessellationQueueCount
};
function fnSortSection(a, b) {
    return a.queueSortValue - b.queueSortValue;
}
this._pThistessellationQueue.sort(fnSortSection);
for(var i = 0; i < this._iTessellationQueueCount; ++i) {
    this._pThistessellationQueue[i].tessellate(this._fScale, this._fLimit);
}
this._iTotalIndices = 0;
for(var i = 0; i < this._iTessellationQueueCount; ++i) {
    this._pThistessellationQueue[i].buildTriangleList();
}
if (this._iTotalIndicesOld == this._iTotalIndices && this._iTotalIndices != this._iTotalIndicesMax) {
    return;
}
this._pRenderData._setIndexLength(this._iTotalIndices);
this._pDataIndex.setData(this._pIndexList, 0, getTypeSize(EDataTypes.FLOAT), 0, this._iTotalIndices);
this._iTotalIndicesOld = this._iTotalIndices;
this._iTotalIndicesMax = math.max(this._iTotalIndicesMax, this._iTotalIndices);
_onBeforeRender(pRenderableObject, IRenderableObject, pViewport, IViewport);
void {
    if: (this._isCreate)
};
 {
    if (((this._nCountRender++) % 30) === 0) {
        if (this._iTessellationQueueCount !== this._iTessellationQueueCountOld) {
            this.processTessellationQueue();
            this._iTessellationQueueCountOld = this._iTessellationQueueCount;
        }
    }
    this.reset();
}
var akra;
(function (akra) {
    (function (scene) {
        (function (light) {
            var ProjectLight = (function (_super) {
                __extends(ProjectLight, _super);
                function ProjectLight(pScene) {
                    _super.call(this, pScene, ELightTypes.PROJECT);
                    this._pDepthTexture = null;
                    this._pColorTexture = null;
                    this.inline = getDepthTexture();
                    this.ITexture = {
                        return: this._pDepthTexture
                    };
                    this.inline = getRenderTarget();
                    this.IRenderTarget = {
                        return: this._pColorTexture.getBuffer().getRenderTarget()
                    };
                    this.inline = getShadowCaster();
                    this.IShadowCaster = {
                        return: this._pShadowCaster
                    };
                    this.inline = get;
                    this._pShadowCaster = pScene._createShadowCaster(this);
                }
                ProjectLight.prototype.create = function (isShadowCaster, iMaxShadowResolution) {
                    if (typeof isShadowCaster === "undefined") { isShadowCaster = true; }
                    if (typeof iMaxShadowResolution === "undefined") { iMaxShadowResolution = 256; }
                    var isOk = _super.prototype.create.call(this, isShadowCaster, iMaxShadowResolution);
                    var pCaster = this._pShadowCaster;
                    pCaster.setParameter(ECameraParameters.CONST_ASPECT, true);
                    pCaster.setInheritance(ENodeInheritance.ALL);
                    pCaster.attachToParent(this);
                    if (this.isShadowCaster) {
                        this.initializeTextures();
                    }
                    return isOk;
                };
                ProjectLight.prototype.isShadowCaster = function () {
                    return this._isShadowCaster;
                };
                Object.defineProperty(ProjectLight.prototype, "isShadowCaster", {
                    set: function (bValue) {
                        this._isShadowCaster = bValue;
                        if (bValue && isNull(this._pDepthTexture)) {
                            this.initializeTextures();
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                ProjectLight.prototype.initializeTextures = function () {
                    var pEngine = this.scene.getManager().getEngine();
                    var pResMgr = pEngine.getResourceManager();
                    var iSize = this._iMaxShadowResolution;
                    var pDepthTexture = this._pDepthTexture = pResMgr.createTexture("depth_texture_" + this.getGuid());
                    pDepthTexture.create(iSize, iSize, 1, null, 0, 0, 0, ETextureTypes.TEXTURE_2D, EPixelFormats.DEPTH32);
                    pDepthTexture.setWrapMode(ETextureParameters.WRAP_S, ETextureWrapModes.CLAMP_TO_EDGE);
                    pDepthTexture.setWrapMode(ETextureParameters.WRAP_T, ETextureWrapModes.CLAMP_TO_EDGE);
                    pDepthTexture.setFilter(ETextureParameters.MAG_FILTER, ETextureFilters.LINEAR);
                    pDepthTexture.setFilter(ETextureParameters.MIN_FILTER, ETextureFilters.LINEAR);
                    var pColorTexture = pResMgr.createTexture("light_color_texture_" + this.getGuid());
                    pColorTexture.create(iSize, iSize, 1, null, ETextureFlags.RENDERTARGET, 0, 0, ETextureTypes.TEXTURE_2D, EPixelFormats.R8G8B8A8);
                    this._pColorTexture = pColorTexture;
                    this.getRenderTarget().attachDepthTexture(pDepthTexture);
                    this.getRenderTarget().setAutoUpdated(false);
                    this.getRenderTarget().addViewport(this._pShadowCaster, EViewportTypes.SHADOWVIEWPORT);
                };
                ProjectLight.prototype._calculateShadows = function () {
                    if (this.enabled && this.isShadowCaster) {
                        this.getRenderTarget().update();
                    }
                };
                ProjectLight.prototype._prepareForLighting = function (pCamera) {
                    if (!this.enabled) {
                        return false;
                    } else {
                        if (!this.isShadowCaster) {
                            var pResult = this._defineLightingInfluence(pCamera);
                            return (pResult.length == 0) ? false : true;
                        } else {
                            var pResult = this._defineShadowInfluence(pCamera);
                            return (pResult.length == 0) ? false : true;
                        }
                    }
                };
                ProjectLight.prototype._defineLightingInfluence = function (pCamera) {
                    var pShadowCaster = this._pShadowCaster;
                    var pCameraFrustum = pCamera.frustum;
                    var pResult = pShadowCaster.affectedObjects;
                    pResult.clear();
                    if (!pCameraFrustum.testFrustum(pShadowCaster.frustum)) {
                        return pResult;
                    }
                    var pRawResult = pShadowCaster.display(0);
                    for(var i = 0; i < pRawResult.length; i++) {
                        var pObject = pRawResult.value(i);
                        if (pCameraFrustum.testRect(pObject.worldBounds)) {
                            pResult.push(pObject);
                        }
                    }
                    return pResult;
                };
                ProjectLight.prototype._defineShadowInfluence = function (pCamera) {
                    var pShadowCaster = this._pShadowCaster;
                    var pCameraFrustum = pCamera.frustum;
                    var pResult = pShadowCaster.affectedObjects;
                    pResult.clear();
                    if (!pCameraFrustum.testFrustum(pShadowCaster.frustum)) {
                        return pResult;
                    }
                    var pRawResult = pShadowCaster.display(0);
                    var pTestArray = ProjectLight._pFrustumPlanes;
                    var pFrustumPlanesKeys = geometry.Frustum.frustumPlanesKeys;
                    var nAdditionalTestLength = 0;
                    if (pShadowCaster.projectionMatrix.isOrthogonalProjection()) {
                        var pLightFrustumVertices = pShadowCaster.frustum.frustumVertices;
                        var v3fDirection1 = vec3(0.);
                        var v3fDirection2 = vec3(0.);
                        var v3fDirection = vec3(0.);
                        for(var i = 0; i < 4; i++) {
                            v3fDirection1.add(pLightFrustumVertices[i]);
                        }
                        for(var i = 4; i < 8; i++) {
                            v3fDirection2.add(pLightFrustumVertices[i]);
                        }
                        v3fDirection2.subtract(v3fDirection1, v3fDirection);
                        v3fDirection.normalize();
                        for(var i = 0; i < 6; i++) {
                            var sKey = pFrustumPlanesKeys[i];
                            var pPlane = pCameraFrustum[sKey];
                            if (v3fDirection.dot(pPlane.normal) >= 0.) {
                                pTestArray[nAdditionalTestLength].set(pPlane);
                                nAdditionalTestLength++;
                            } else {
                                var pPlanePoints = [
                                    new Vec3(), 
                                    new Vec3(), 
                                    new Vec3(), 
                                    new Vec3()
                                ];
                                pCameraFrustum.getPlanePoints(sKey, pPlanePoints);
                                var pDirections = new Array(4);
                                for(var j = 0; j < 4; j++) {
                                    pDirections[j] = new Vec3();
                                    pPlanePoints[j].subtract(this.worldPosition, pDirections[j]);
                                }
                                var fLength1 = pDirections[0].length();
                                var fLength2 = pDirections[1].length();
                                var fLength3 = pDirections[2].length();
                                var fLength4 = pDirections[3].length();
                                var pTmp1 = [
                                    fLength1, 
                                    fLength2, 
                                    fLength3, 
                                    fLength4
                                ];
                                var pIndex = [
                                    -1, 
                                    -1, 
                                    -1, 
                                    -1
                                ];
                                for(var j = 0; j < 4; j++) {
                                    var iTest = 3;
                                    for(var k = 0; k < 4; k++) {
                                        if (k == j) {
                                            continue;
                                        }
                                        if (pTmp1[j] >= pTmp1[k]) {
                                            iTest--;
                                        }
                                    }
                                    for(var k = 0; k < 4; k++) {
                                        if (pIndex[iTest] == -1) {
                                            pIndex[iTest] = j;
                                            break;
                                        } else {
                                            iTest++;
                                        }
                                    }
                                }
                                var pPoint1 = pPlanePoints[pIndex[0]];
                                var pPoint2 = pPlanePoints[pIndex[1]];
                                var pTestPoint1 = pPlanePoints[pIndex[2]];
                                var pTestPoint2 = pPlanePoints[pIndex[3]];
                                var v3fDir = pPoint2.subtract(pPoint1, vec3());
                                var v3fNormal = v3fDir.cross(v3fDirection, vec3()).normalize();
                                var pTestPlane = pTestArray[nAdditionalTestLength];
                                pTestPlane.set(v3fNormal, -v3fNormal.dot(pPoint1));
                                var pVertices = pCamera.frustum.frustumVertices;
                                var iTest = 0;
                                for(var k = 0; k < 8; k++) {
                                    if (pTestPlane.signedDistance(pVertices[k]) > 0.1) {
                                        iTest++;
                                    }
                                }
                                if (iTest == 6) {
                                    pTestPlane.negate();
                                } else if (iTest != 0) {
                                    continue;
                                }
                                nAdditionalTestLength++;
                            }
                        }
                    } else {
                        var v3fLightPosition = this.worldPosition;
                        for(var i = 0; i < 6; i++) {
                            var sKey = pFrustumPlanesKeys[i];
                            var pPlane = pCameraFrustum[sKey];
                            var v3fNormal = vec3().set(pPlane.normal);
                            var fDistance = pPlane.distance;
                            if (pPlane.signedDistance(v3fLightPosition) > 0) {
                                var pPlanePoints = [
                                    new Vec3(), 
                                    new Vec3(), 
                                    new Vec3(), 
                                    new Vec3()
                                ];
                                pCameraFrustum.getPlanePoints(sKey, pPlanePoints);
                                var pDirections = new Array(4);
                                for(var j = 0; j < 4; j++) {
                                    pDirections[j] = new Vec3();
                                    pPlanePoints[j].subtract(v3fLightPosition, pDirections[j]);
                                }
                                var fLength1 = pDirections[0].length();
                                var fLength2 = pDirections[1].length();
                                var fLength3 = pDirections[2].length();
                                var fLength4 = pDirections[3].length();
                                var pTmp1 = [
                                    fLength1, 
                                    fLength2, 
                                    fLength3, 
                                    fLength4
                                ];
                                var pIndex = [
                                    -1, 
                                    -1, 
                                    -1, 
                                    -1
                                ];
                                for(var j = 0; j < 4; j++) {
                                    var iTest = 3;
                                    for(var k = 0; k < 4; k++) {
                                        if (k == j) {
                                            continue;
                                        }
                                        if (pTmp1[j] >= pTmp1[k]) {
                                            iTest--;
                                        }
                                    }
                                    for(var k = 0; k < 4; k++) {
                                        if (pIndex[iTest] == -1) {
                                            pIndex[iTest] = j;
                                            break;
                                        } else {
                                            iTest++;
                                        }
                                    }
                                }
                                var pDir1 = pDirections[pIndex[0]];
                                var pDir2 = pDirections[pIndex[1]];
                                var pTestPoint1 = pPlanePoints[pIndex[2]];
                                var pTestPoint2 = pPlanePoints[pIndex[3]];
                                pDir1.cross(pDir2, v3fNormal).normalize();
                                var pTestPlane = pTestArray[i];
                                pTestPlane.set(v3fNormal, -v3fNormal.dot(v3fLightPosition));
                                var fThreshold = 0.1;
                                if (math.abs(pTestPlane.signedDistance(pTestPoint1)) <= fThreshold && math.abs(pTestPlane.signedDistance(pTestPoint2)) <= fThreshold) {
                                    pTestPlane.set(pPlane.normal, -pPlane.normal.dot(v3fLightPosition));
                                } else if (pTestPlane.signedDistance(pTestPoint1) > 0 && math.abs(pTestPlane.signedDistance(pTestPoint2)) > 0) {
                                    pTestPlane.negate();
                                }
                            } else {
                                pTestArray[i].set(v3fNormal, fDistance);
                            }
                        }
                        nAdditionalTestLength = 6;
                    }
                    for(var i = 0; i < pRawResult.length; i++) {
                        var pObject = pRawResult.value(i);
                        var pWorldBounds = pObject.worldBounds;
                        if (pObject.hasShadow) {
                            var j = 0;
                            for(j = 0; j < nAdditionalTestLength; j++) {
                                var pPlane = pTestArray[j];
                                if (geometry.planeClassifyRect3d(pPlane, pWorldBounds) == EPlaneClassifications.PLANE_FRONT) {
                                    break;
                                }
                            }
                            if (j == nAdditionalTestLength) {
                                pResult.push(pObject);
                            }
                        } else {
                            if (pCameraFrustum.testRect(pWorldBounds)) {
                                pResult.push(pObject);
                            }
                        }
                    }
                    pShadowCaster._optimizeProjectionMatrix();
                    return pResult;
                };
                ProjectLight._pFrustumPlanes = new Array(6);
                return ProjectLight;
            })(LightPoint);
            light.ProjectLight = ProjectLight;            
            for(var i = 0; i < 6; i++) {
                ProjectLight._pFrustumPlanes[i] = new geometry.Plane3d();
            }
        })(scene.light || (scene.light = {}));
        var light = scene.light;
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (scene) {
        (function (light) {
            var OmniLight = (function (_super) {
                __extends(OmniLight, _super);
                function OmniLight(pScene) {
                    _super.call(this, pScene, ELightTypes.OMNI);
                    this._pDepthTextureCube = null;
                    this._pColorTextureCube = null;
                    this._pShadowCasterCube = null;
                    this.inline = getDepthTextureCube();
                    this.ITexture = [];
                    this._pShadowCasterCube = new Array(6);
                    for(var i = 0; i < 6; i++) {
                        this._pShadowCasterCube[i] = pScene._createShadowCaster(this, i);
                    }
                }
                OmniLight.prototype.create = function (isShadowCaster, iMaxShadowResolution) {
                    if (typeof isShadowCaster === "undefined") { isShadowCaster = true; }
                    if (typeof iMaxShadowResolution === "undefined") { iMaxShadowResolution = 256; }
                    var isOk = _super.prototype.create.call(this, isShadowCaster, iMaxShadowResolution);
                    var pCasterCube = this._pShadowCasterCube;
                    var pCaster;
                    for(var i = 0; i < 6; i++) {
                        pCaster = pCasterCube[i];
                        pCaster.setInheritance(ENodeInheritance.ALL);
                        pCaster.attachToParent(this);
                        pCaster.setProjParams(math.PI / 2, 1, 0.01, 1000);
                        pCaster.setParameter(ECameraParameters.CONST_ASPECT, true);
                    }
                    pCasterCube[0].localMatrix = mat4([
                        0, 
                        0, 
                        1, 
                        0, 
                        0, 
                        1, 
                        0, 
                        0, 
                        -1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        0, 
                        0, 
                        1
                    ]);
                    pCasterCube[1].localMatrix = mat4([
                        0, 
                        0, 
                        -1, 
                        0, 
                        0, 
                        1, 
                        0, 
                        0, 
                        1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        0, 
                        0, 
                        1
                    ]);
                    pCasterCube[2].localMatrix = mat4([
                        1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        0, 
                        1, 
                        0, 
                        0, 
                        -1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        0, 
                        1
                    ]);
                    pCasterCube[3].localMatrix = mat4([
                        1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        0, 
                        -1, 
                        0, 
                        0, 
                        1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        0, 
                        1
                    ]);
                    pCasterCube[4].localMatrix = mat4([
                        -1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        -1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        1
                    ]);
                    pCasterCube[5].localMatrix = mat4([
                        1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        1, 
                        0, 
                        0, 
                        0, 
                        0, 
                        1
                    ]);
                    if (this.isShadowCaster) {
                        this.initializeTextures();
                    }
                    return isOk;
                };
                return OmniLight;
            })(LightPoint);
            light.OmniLight = OmniLight;            
 {
                return this._pDepthTextureCube;
            }
            ;
            inline;
            getRenderTarget(iFace, number);
            IRenderTarget;
 {
                return this._pColorTextureCube[iFace].getBuffer().getRenderTarget();
            }
            ;
            inline;
            getShadowCaster();
            IShadowCaster[];
 {
                return this._pShadowCasterCube;
            }
            ;
            inline;
            get;
            isShadowCaster();
            bool;
 {
                return this._isShadowCaster;
            }
            ;
            set;
            isShadowCaster(bValue, bool);
 {
                this._isShadowCaster = bValue;
                if (bValue && isNull(this._pDepthTextureCube)) {
                    this.initializeTextures();
                }
            }
            ;
            initializeTextures();
            void {
                var: pEngine,
                IEngine:  = this.scene.getManager().getEngine()
            };
            var pResMgr = pEngine.getResourceManager();
            var iSize = this._iMaxShadowResolution;
            this._pDepthTextureCube = new Array(6);
            this._pColorTextureCube = new Array(6);
            for(var i = 0; i < 6; ++i) {
                var pDepthTexture = this._pDepthTextureCube[i] = pResMgr.createTexture("depth_texture_" + i + "_" + this.getGuid());
                pDepthTexture.create(iSize, iSize, 1, null, 0, 0, 0, ETextureTypes.TEXTURE_2D, EPixelFormats.DEPTH32);
                pDepthTexture.setWrapMode(ETextureParameters.WRAP_S, ETextureWrapModes.CLAMP_TO_EDGE);
                pDepthTexture.setWrapMode(ETextureParameters.WRAP_T, ETextureWrapModes.CLAMP_TO_EDGE);
                pDepthTexture.setFilter(ETextureParameters.MAG_FILTER, ETextureFilters.LINEAR);
                pDepthTexture.setFilter(ETextureParameters.MIN_FILTER, ETextureFilters.LINEAR);
                var pColorTexture = this._pColorTextureCube[i] = pResMgr.createTexture("light_color_texture_" + i + "_" + this.getGuid());
                pColorTexture.create(iSize, iSize, 1, null, ETextureFlags.RENDERTARGET, 0, 0, ETextureTypes.TEXTURE_2D, EPixelFormats.R8G8B8A8);
                this.getRenderTarget(i).attachDepthTexture(pDepthTexture);
                this.getRenderTarget(i).addViewport(this._pShadowCasterCube[i], EViewportTypes.SHADOWVIEWPORT);
                this.getRenderTarget(i).setAutoUpdated(false);
            }
        })(scene.light || (scene.light = {}));
        var light = scene.light;
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
;
_calculateShadows();
void {
    if: (this.enabled && this.isShadowCaster)
};
 {
    for(var i = 0; i < 6; i++) {
        this.getRenderTarget(i).update();
    }
}
;
_prepareForLighting(pCamera, ICamera);
bool;
 {
    if (!this.enabled) {
        return false;
    } else {
        var haveInfluence = false;
        if (!this.isShadowCaster) {
            for(var i = 0; i < 6; i++) {
                var pResult = this._defineLightingInfluence(pCamera, i);
                if (pResult.length != 0) {
                    haveInfluence = true;
                }
            }
            return haveInfluence;
        } else {
            for(var i = 0; i < 6; i++) {
                var pResult = this._defineShadowInfluence(pCamera, i);
                if (pResult.length != 0) {
                    haveInfluence = true;
                }
            }
            return haveInfluence;
        }
    }
}
;
_defineLightingInfluence(pCamera, ICamera, iFace, number);
IObjectArray;
 {
    var pShadowCaster = this._pShadowCasterCube[iFace];
    var pCameraFrustum = pCamera.frustum;
    var pResult = pShadowCaster.affectedObjects;
    pResult.clear();
    if (!pCameraFrustum.testFrustum(pShadowCaster.frustum)) {
        return pResult;
    }
    var pRawResult = pShadowCaster.display(0);
    for(var i = 0; i < pRawResult.length; i++) {
        var pObject = pRawResult.value(i);
        if (pCameraFrustum.testRect(pObject.worldBounds)) {
            pResult.push(pObject);
        }
    }
    return pResult;
}
;
_defineShadowInfluence(pCamera, ICamera, iFace, number);
IObjectArray;
 {
    var pShadowCaster = this._pShadowCasterCube[iFace];
    var pCameraFrustum = pCamera.frustum;
    var pResult = pShadowCaster.affectedObjects;
    pResult.clear();
    if (!pCameraFrustum.testFrustum(pShadowCaster.frustum)) {
        return pResult;
    }
    var pRawResult = pShadowCaster.display(0);
    var v3fLightPosition = this.worldPosition;
    var pTestArray = OmniLight._pFrustumPlanes;
    var pFrustumPlanesKeys = geometry.Frustum.frustumPlanesKeys;
    for(var i = 0; i < 6; i++) {
        var sKey = pFrustumPlanesKeys[i];
        var pPlane = pCameraFrustum[sKey];
        var v3fNormal = pPlane.normal;
        var fDistance = pPlane.distance;
        if (pPlane.signedDistance(v3fLightPosition) > 0) {
            fDistance = -v3fNormal.dot(v3fLightPosition);
        }
        pTestArray[i].set(v3fNormal, fDistance);
    }
    for(var i = 0; i < pRawResult.length; i++) {
        var pObject = pRawResult.value(i);
        var pWorldBounds = pObject.worldBounds;
        if (pObject.hasShadow) {
            var j = 0;
            for(j = 0; j < 6; j++) {
                var pPlane = pTestArray[j];
                if (geometry.planeClassifyRect3d(pPlane, pWorldBounds) == EPlaneClassifications.PLANE_FRONT) {
                    break;
                }
            }
            if (j == 6) {
                pResult.push(pObject);
            }
        } else {
            if (pCameraFrustum.testRect(pWorldBounds)) {
                pResult.push(pObject);
            }
        }
    }
    pShadowCaster._optimizeProjectionMatrix();
    return pResult;
}
;
_pFrustumPlanes:
IPlane3d[] = new Array(6)
for(var i = 0; i < 6; i++) {
    OmniLight._pFrustumPlanes[i] = new geometry.Plane3d();
}
var akra;
(function (akra) {
    (function (scene) {
        var Scene3d = (function () {
            function Scene3d(pSceneManager) {
                this._pDisplayLists = [];
                this._pDisplayListsCount = 0;
                this._isUpdated = false;
                this.inline = get;
                this.inline = get;
                this.inline = getManager();
                this.ISceneManager = {
                    return: this._pSceneManager
                };
                this.inline = isUpdated();
                this.bool = {
                    return: this._isUpdated
                };
                this.inline = getRootNode();
                this.ISceneNode = {
                    return: this._pRootNode
                };
                this.inline = getDisplayList(i, number);
                this.IDisplayList = {};
                this._pSceneManager = pSceneManager;
                this._pRootNode = this.createNode("root-node");
                this._pRootNode.create();
                var i;
                var pOctree = new scene.OcTree();
                pOctree.create(new geometry.Rect3d(1024, 1024, 1024), 5, 100);
                var i = this.addDisplayList(pOctree);
 {
                    logger.setSourceLocation("Scene3d.ts", 61);
                    logger.assert(i == 0, "invalid default list index");
                }
                ;
                var pLightGraph = new scene.LightGraph();
                i = this.addDisplayList(pLightGraph);
 {
                    logger.setSourceLocation("Scene3d.ts", 66);
                    logger.assert(i == 1, "invalid default list index");
                }
                ;
            }
            Scene3d.prototype.type = function () {
                return ESceneTypes.TYPE_3D;
            };
            Scene3d.prototype.totalDL = function () {
                return this._pDisplayListsCount;
            };
            Scene3d.prototype.recursivePreUpdate = function () {
                this._isUpdated = false;
                this.preUpdate();
                this._pRootNode.recursivePreUpdate();
            };
            Scene3d.prototype.recursiveUpdate = function () {
                this.beforeUpdate();
                this._isUpdated = this._pRootNode.recursiveUpdate();
                this.postUpdate();
            };
            Scene3d.prototype.updateCamera = function () {
                return false;
            };
            Scene3d.prototype.updateScene = function () {
                return false;
            };
            Scene3d.prototype.createObject = function (sName) {
                if (typeof sName === "undefined") { sName = null; }
                var pNode = new SceneObject(this);
                if (!pNode.create()) {
 {
                        logger.setSourceLocation("Scene3d.ts", 122);
                        logger.error("cannot create scene node..");
                    }
                    ;
                    return null;
                }
                return this.setupNode(pNode, sName);
            };
            Scene3d.prototype.createNode = function (sName) {
                if (typeof sName === "undefined") { sName = null; }
                var pNode = new SceneNode(this);
                if (!pNode.create()) {
 {
                        logger.setSourceLocation("Scene3d.ts", 135);
                        logger.error("cannot create scene node..");
                    }
                    ;
                    return null;
                }
                return this.setupNode(pNode, sName);
            };
            Scene3d.prototype.createModel = function (sName) {
                if (typeof sName === "undefined") { sName = null; }
                var pNode = new SceneModel(this);
                if (!pNode.create()) {
 {
                        logger.setSourceLocation("Scene3d.ts", 146);
                        logger.error("cannot create model..");
                    }
                    ;
                    return null;
                }
                return this.setupNode(pNode, sName);
            };
            Scene3d.prototype.createCamera = function (sName) {
                if (typeof sName === "undefined") { sName = null; }
                var pCamera = new objects.Camera(this);
                if (!pCamera.create()) {
 {
                        logger.setSourceLocation("Scene3d.ts", 157);
                        logger.error("cannot create camera..");
                    }
                    ;
                    return null;
                }
                return this.setupNode(pCamera, sName);
            };
            Scene3d.prototype.createLightPoint = function (eType, isShadowCaster, iMaxShadowResolution, sName) {
                if (typeof eType === "undefined") { eType = ELightTypes.UNKNOWN; }
                if (typeof isShadowCaster === "undefined") { isShadowCaster = true; }
                if (typeof iMaxShadowResolution === "undefined") { iMaxShadowResolution = 256; }
                if (typeof sName === "undefined") { sName = null; }
                var pLight;
                switch(eType) {
                    case ELightTypes.PROJECT:
                        pLight = (new light.ProjectLight(this));
                        break;
                    case ELightTypes.OMNI:
                        pLight = (new light.OmniLight(this));
                        break;
                    default:
                        return null;
                }
                if (!pLight.create(isShadowCaster, iMaxShadowResolution)) {
 {
                        logger.setSourceLocation("Scene3d.ts", 180);
                        logger.error("cannot create light");
                    }
                    ;
                    return null;
                }
                return this.setupNode(pLight, sName);
            };
            Scene3d.prototype.createSprite = function (sName) {
                if (typeof sName === "undefined") { sName = null; }
                return null;
            };
            Scene3d.prototype.createJoint = function (sName) {
                if (typeof sName === "undefined") { sName = null; }
                return this.setupNode(new Joint(this), sName);
            };
            Scene3d.prototype._createModelEntry = function (pModel) {
                return this.setupNode(new objects.ModelEntry(this, pModel));
            };
            Scene3d.prototype.createText3d = function (sName) {
                if (typeof sName === "undefined") { sName = null; }
                return null;
            };
            Scene3d.prototype.createTerrain = function (sName) {
                var pTerrain = new terrain.Terrain(this);
                if (!pTerrain.create()) {
 {
                        logger.setSourceLocation("Scene3d.ts", 207);
                        logger.error("cannot create terrain..");
                    }
                    ;
                    return null;
                }
                return this.setupNode(pTerrain, sName);
            };
            Scene3d.prototype.createTerrainROAM = function (sName) {
                var pTerrainROAM = new terrain.TerrainROAM(this);
                if (!pTerrainROAM.create()) {
 {
                        logger.setSourceLocation("Scene3d.ts", 218);
                        logger.error("cannot create terrain..");
                    }
                    ;
                    return null;
                }
                return this.setupNode(pTerrainROAM, sName);
            };
            Scene3d.prototype.createTerrainSection = function (sName) {
                var pNode = new terrain.TerrainSection(this);
                if (!pNode.create()) {
 {
                        logger.setSourceLocation("Scene3d.ts", 229);
                        logger.error("cannot create terrain section..");
                    }
                    ;
                    return null;
                }
                return this.setupNode(pNode, sName);
            };
            Scene3d.prototype.createTerrainSectionROAM = function (sName) {
                var pNode = new terrain.TerrainSectionROAM(this);
                if (!pNode.create()) {
 {
                        logger.setSourceLocation("Scene3d.ts", 240);
                        logger.error("cannot create terrain section roam..");
                    }
                    ;
                    return null;
                }
                return this.setupNode(pNode, sName);
            };
            Scene3d.prototype._createShadowCaster = function (pLightPoint, iFace, sName) {
                if (typeof iFace === "undefined") { iFace = ECubeFace.POSITIVE_X; }
                if (typeof sName === "undefined") { sName = null; }
                var pShadowCaster = new light.ShadowCaster(pLightPoint, iFace);
                if (!pShadowCaster.create()) {
 {
                        logger.setSourceLocation("Scene3d.ts", 251);
                        logger.error("cannot create shadow caster..");
                    }
                    ;
                    return null;
                }
                return this.setupNode(pShadowCaster, sName);
            };
            return Scene3d;
        })();
        scene.Scene3d = Scene3d;        
 {
            logger.setSourceLocation("Scene3d.ts", 268);
            logger.assert(isDefAndNotNull(this._pDisplayLists[i]), "display list not defined");
        }
        ;
        return this._pDisplayLists[i];
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
getDisplayListByName(csName, string);
number;
 {
    for(var i = 0; i < this._pDisplayLists.length; ++i) {
        if (this._pDisplayLists[i].name === csName) {
            return i;
        }
    }
    return -1;
}
_render(pCamera, ICamera, pViewport, IViewport);
void {};
setupNode(pNode, ISceneNode, sName, string = null);
ISceneNode;
 {
    pNode.name = sName;
    this.connect(pNode, "attached", "nodeAttachment", EEventTypes.UNICAST);
    this.connect(pNode, "detached", "nodeDetachment", EEventTypes.UNICAST);
    return pNode;
}
delDisplayList(index, number);
bool;
 {
    var pLists = this._pDisplayLists;
    for(var i = 0; i < pLists.length; ++i) {
        if (i === index && isDefAndNotNull(pLists[i])) {
            pLists[i] = null;
            this._pDisplayListsCount--;
            this.displayListRemoved(pLists[i], i);
            return true;
        }
    }
    ;
    return false;
}
inline;
addDisplayList(pList, IDisplayList);
number;
 {
 {
        logger.setSourceLocation("Scene3d.ts", 323);
        logger.assert(isDefAndNotNull(this.getDisplayListByName(pList.name)), "DL with name <" + pList.name + "> already exists");
    }
    ;
    var pLists = this._pDisplayLists;
    var iIndex = this._pDisplayLists.length;
    for(var i = 0; i < pLists.length; ++i) {
        if (pLists[i] === null) {
            pLists[i] = pList;
            iIndex = i;
            break;
        }
    }
    ;
    if (iIndex == this._pDisplayLists.length) {
        this._pDisplayLists.push(pList);
    }
    pList._setup(this);
    this.displayListAdded(pList, iIndex);
    this._pDisplayListsCount++;
    return iIndex;
}
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return Scene3d._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
nodeAttachment(pNode, ISceneNode);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).nodeAttachment;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pNode) : _broadcast[i].listener(_recivier, pNode);
    }
}
;
nodeDetachment(pNode, ISceneNode);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).nodeDetachment;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pNode) : _broadcast[i].listener(_recivier, pNode);
    }
}
;
displayListAdded(list, index);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).displayListAdded;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, list, index) : _broadcast[i].listener(_recivier, list, index);
    }
}
;
;
displayListRemoved(list, index);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).displayListRemoved;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, list, index) : _broadcast[i].listener(_recivier, list, index);
    }
}
;
;
beforeUpdate();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).beforeUpdate;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
postUpdate();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).postUpdate;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
preUpdate();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).preUpdate;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
var akra;
(function (akra) {
    (function (scene) {
        var SceneManager = (function () {
            function SceneManager(pEngine) {
                this._pEngine = null;
                this._pSceneList = [];
                this._fUpdateTimeCount = 0.;
                this._fMillisecondsPerTick = 0.01666;
                this._pEngine = pEngine;
            }
            SceneManager.prototype.getEngine = function () {
                return this._pEngine;
            };
            SceneManager.prototype.update = function () {
                var isSceneUpdated = false;
                this._fUpdateTimeCount += this._pEngine.elapsedTime;
                var fUpdateTime = this._fUpdateTimeCount;
                while(this._fUpdateTimeCount > this._fMillisecondsPerTick) {
                    this.notifyUpdateScene();
                    this._fUpdateTimeCount -= this._fMillisecondsPerTick;
                }
                if (fUpdateTime !== this._fUpdateTimeCount) {
                    this.notifyPreUpdateScene();
                }
            };
            SceneManager.prototype.notifyUpdateScene = function () {
                for(var i = 0; i < this._pSceneList.length; ++i) {
                    var pScene = this._pSceneList[i];
                    if (pScene.type != ESceneTypes.TYPE_3D) {
                        continue;
                    }
                    (pScene).recursiveUpdate();
                }
            };
            SceneManager.prototype.notifyPreUpdateScene = function () {
                for(var i = 0; i < this._pSceneList.length; ++i) {
                    var pScene = this._pSceneList[i];
                    if (pScene.type != ESceneTypes.TYPE_3D) {
                        continue;
                    }
                    (pScene).recursivePreUpdate();
                }
            };
            SceneManager.prototype.createScene3D = function () {
                var pScene = new Scene3d(this);
                this._pSceneList.push(pScene);
                return pScene;
            };
            SceneManager.prototype.createScene2D = function () {
                return null;
            };
            SceneManager.prototype.createUI = function () {
                var pUI = new ui.UI(this);
                return pUI;
            };
            SceneManager.prototype.getScene3D = function (iScene) {
                if (typeof iScene === "undefined") { iScene = 0; }
                var pScene;
                if (iScene === 0 && this._pSceneList.length === 0) {
                    this.createScene3D();
 {
                        logger.setSourceLocation("scene/SceneManager.ts", 109);
                        logger.log("Default scene automatically created.");
                    }
                    ;
                }
                pScene = this._pSceneList[iScene];
                if (pScene && pScene.type === ESceneTypes.TYPE_3D) {
                    return pScene;
                }
                return null;
            };
            SceneManager.prototype.getScene2D = function (IScene) {
                var pScene = this._pSceneList[IScene];
                if (pScene && pScene.type === ESceneTypes.TYPE_2D) {
                    return pScene;
                }
                return null;
            };
            SceneManager.prototype.getScene = function (IScene, eType) {
                return this._pSceneList[IScene] || null;
            };
            SceneManager.prototype.initialize = function () {
                return true;
            };
            SceneManager.prototype.destroy = function () {
            };
            return SceneManager;
        })();
        scene.SceneManager = SceneManager;        
    })(akra.scene || (akra.scene = {}));
    var scene = akra.scene;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (fx) {
        akra.logger.registerCode(2201, "You trying to redefine system type: {typeName}. In line: {line}. In column: {column}");
        akra.logger.registerCode(2202, "You trying to redefine type: {typeName}. In line: {line}. In column: {column}");
        akra.logger.registerCode(2203, "You try to use unssuported type declaration. We implement it soon. In line: {line}.");
        akra.logger.registerCode(2204, "You try to use unssuported expr: {exprName}. We implement it soon. In line: {line}.");
        akra.logger.registerCode(2205, "Unknown variable name: {varName}. In line: {line}. In column: {column}");
        akra.logger.registerCode(2206, "Invalid arithmetic operation!. There no operator '{operator}'" + " for left-type '{leftTypeName}' " + " and right-type '{rightTypeName}'. In line: {line}.");
        akra.logger.registerCode(2207, "Invalid arithmetic-assignment operation!. " + " There no operator {operator} for left-type '{leftTypeName}' " + " and right-type '{rightTypeName}'. In line: {line}.");
        akra.logger.registerCode(2208, "Invalid assignment operation!. It`s no possible to do assignment " + " between left-type '{leftTypeName}' " + " and right-type '{rightTypeName}'. In line: {line}.");
        akra.logger.registerCode(2209, "Invalid relational operation!. There no operator {operator} " + " for left-type '{leftTypeName}' " + " and right-type '{rightTypeName}'. In line: {line}.");
        akra.logger.registerCode(2210, "Invalid logical operation!. In operator: {operator}. " + " Cannot convert type '{typeName}' to 'bool'. In line: {line}.");
        akra.logger.registerCode(2211, "Invalid conditional expression!. Cannot convert type '{typeName}' to 'bool'. " + " In line: {line}.");
        akra.logger.registerCode(2212, "Invalid conditional expression!. Type '{leftTypeName}' and type '{rightTypeName}'" + " are not equal. In line: {line}.");
        akra.logger.registerCode(2213, "Invalid type cast!. Bad type casting. Only base types without usages are supported. " + " WebGL don`t support so casting. In line: {line}.");
        akra.logger.registerCode(2214, "Invalid type cast!. Bad type for casting '{typeName}'. " + " WebGL support only base-type casting. In line: {line}.");
        akra.logger.registerCode(2216, "Invalid unary expression!. Bad type: '{typeName}' " + " for operator '{opeator}'. In line: {line}.");
        akra.logger.registerCode(2217, "Invalid postfix-array expression!. " + " Type of expression is not array: '{typeName}'. In line: {line}.");
        akra.logger.registerCode(2218, "Invalid postfix-array expression!. Bad type of index: '{typeName}'. " + "Must be 'int'. In line: {line}.");
        akra.logger.registerCode(2219, "Invalid postfix-point expression!. Type '{typeName}' has no field '{fieldName}'. " + "In line: {line}.");
        akra.logger.registerCode(2220, "Invalid postfix-point expression!. Type '{typeName}' is not pointer. " + "In line: {line}.");
        akra.logger.registerCode(2221, "Invalid postfix-arithmetic expression!. Bad type '{typeName}' " + "for operator {operator}. In line: {line}.");
        akra.logger.registerCode(2222, "Invalid primary expression!. Bad type '{typeName}'." + "It`s not pointer. In line: {line}.");
        akra.logger.registerCode(2223, "Invalid function call expression!. Could not find function-signature " + "with name {funcName} and so types. In line: {line}.");
        akra.logger.registerCode(2224, "Invalid constructor call!. There are not so type. In line: {line}.");
        akra.logger.registerCode(2225, "Invalid constructor call!. Could not find constructor-signature " + "with name {typeName} and so types. In line: {line}.");
        akra.logger.registerCode(2226, "Invalid compile expression!. Could not find function-signature " + "with name {funcName} and so types. In line: {line}.");
        akra.logger.registerCode(2227, "You try to redefine function. With name {funcName}. In line: {line}.");
        akra.logger.registerCode(2228, "Bad type of while-condition. Must be 'bool' but it is '{typeName}'. " + "In line: {line}.");
        akra.logger.registerCode(2229, "Bad type of do-while-condition. Must be 'bool' but it is '{typeName}'. " + "In line: {line}.");
        akra.logger.registerCode(2230, "Bad type of if-condition. Must be 'bool' but it is '{typeName}'. " + "In line: {line}.");
        akra.logger.registerCode(2231, "Bad for-init expression. WebGL support only VariableDecl as for-init expression, " + "like \"int i = 0;\" or \"float i = 0.0;\". " + "In line: {line}.");
        akra.logger.registerCode(2232, "Bad for-init expression. WebGL support only VariableDecl as for-init expression, " + "like \"int i = 0;\" or \"float i = 0.0;\". " + "In line: {line}.");
        akra.logger.registerCode(2233, "Bad for-cond expression. WebGL does not support empty conditional expression in for-loop. " + "In line: {line}.");
        akra.logger.registerCode(2238, "Bad for-cond expression. WebGL support only relational expression for condition in for-loop. " + "In line: {line}.");
        akra.logger.registerCode(2239, "Bad for-step expression. WebGL does not support empty step expression. " + "In line: {line}.");
        akra.logger.registerCode(2240, "Bad for-step expression. WebGL does not support operator '{operator}' in step expression. " + "In line: {line}.");
        akra.logger.registerCode(2241, "Bad for-step expression. WebGL support only unary and assignment expression in for-step. " + "In line: {line}.");
        akra.logger.registerCode(2235, "You trying to redefine system variable: {varName}. In line: {line}. In column: {column}");
        akra.logger.registerCode(2234, "You trying to redefine variable: {varName}. In line: {line}. In column: {column}");
        akra.logger.registerCode(2237, "You trying to redefine system function: {funcName}. In line: {line}. In column: {column}");
        akra.logger.registerCode(2236, "You trying to redefine function: {funcName}. In line: {line}. In column: {column}");
        akra.logger.registerCode(2242, "You trying to add field to struct with name '{varName}', but it`s already in it. " + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2243, "You trying to add field to struct with semantic '{semanticName}'," + "but struct already has this semantic." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2244, "Bad variable name '{varName}'. Annotation already has variable with that name." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2245, "Bad parameter '{varName}' in function '{funcName}'. Need default value." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2246, "Bad function call. There are two or more call signatures for function '{funcName}'." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2247, "Bad function definition. There are two or more different retturn type signatures for function '{funcName}'." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2248, "Bad system function '{funcName}'. Already have this function.");
        akra.logger.registerCode(2250, "Bad type. Could not find type with name '{typeName}'." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2251, "Bad type. We don`t support vector and matrix typename." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2252, "Bad technique name '{techName}'. Effect already have technique with that name." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2253, "Bad 'memof'-operator argument. Literal for its argument is bad idea." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2254, "Bad 'memof'-operator argument. No buffer for argument." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2255, "Bad function '{funcDef}'. It is recursion.");
        akra.logger.registerCode(2256, "Bad function '{funcDef}'. It use bad-function with recursion.");
        akra.logger.registerCode(2257, "Bad function '{funcDef}'. Can not use in vertex-shader.");
        akra.logger.registerCode(2258, "Bad function '{funcDef}'. Can not use in pixel-shader.");
        akra.logger.registerCode(2259, "Bad function with defenition '{funcDef}'. Can not be used as vertex-shader.");
        akra.logger.registerCode(2260, "Bad function with defenition '{funcDef}'. Can not be used as pixel-shader.");
        akra.logger.registerCode(2261, "Bad return stmt. You try to return something in void-function." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2262, "Bad return stmt. You can not call empty return in non-void-function." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2263, "Bad return stmt. Types of return expression and return type of function are not equal." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2264, "Bad return type for '{funcName}'. Return type for function can not contain or be sampler/pointer." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2265, "Bad parameter '{varName}' in function '{funcName}'. Bad usage." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2266, "Bad variable with name 'Out'. It is sytem for used like return variable in shaders." + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2267, "Variable type is not writable. " + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2268, "Variable type is not readable. " + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2269, "Bad init expr for variable '{varName}'. " + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2270, "Don`t supported construction '[uint]' in sampler_state. " + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2271, "Incorrect texture setup for sampler. " + "In line: {line}. In column: {column}");
        akra.logger.registerCode(2272, "Can not calculate padding for type '{typeName}'.");
        akra.logger.registerCode(2273, "Can not extract type '{typeName}'.");
        akra.logger.registerCode(2274, "Bad extract exrpression.");
        akra.logger.registerCode(2275, "Bad imports in technique '{techniqueName}'.");
        akra.logger.registerCode(2276, "You try use 'engine' variable in out of pass." + "In line: {line}. In column: {column}.");
        akra.logger.registerCode(2277, "You try to import not exuisted component '{componentName}'");
        akra.logger.registerCode(2300, "We don`t support array of pinters now. Only pointe to array.                              In line: {line}. In column: {column}");
        akra.logger.registerCode(2301, "We don`t support using complex shader input like functions params.                             Shader: '{funcName}'");
        akra.logger.registerCode(2302, "We don`t support using complex shader output like functions params.                             Shader: '{funcName}'");
        akra.logger.registerCode(2303, "We don`t support 'provide ... as' operator now.");
        function sourceLocationToString(pLocation) {
            var sLocation = "[" + pLocation.file + ":" + pLocation.line.toString() + "]: ";
            return sLocation;
        }
        function syntaxErrorLogRoutine(pLogEntity) {
            var sPosition = sourceLocationToString(pLogEntity.location);
            var sError = "Code: " + pLogEntity.code.toString() + ". ";
            var pParseMessage = pLogEntity.message.split(/\{(\w+)\}/);
            var pInfo = pLogEntity.info;
            for(var i = 0; i < pParseMessage.length; i++) {
                if (isDef(pInfo[pParseMessage[i]])) {
                    pParseMessage[i] = pInfo[pParseMessage[i]];
                }
            }
            var sMessage = sPosition + sError + pParseMessage.join("");
            console["error"].call(console, sMessage);
        }
        akra.logger.setCodeFamilyRoutine("EffectSyntaxErrors", syntaxErrorLogRoutine, ELogLevel.ERROR);
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (fx) {
        (function (EScopeType) {
            EScopeType._map = [];
            EScopeType._map[0] = "k_Default";
            EScopeType.k_Default = 0;
            EScopeType._map[1] = "k_Struct";
            EScopeType.k_Struct = 1;
            EScopeType._map[2] = "k_Annotation";
            EScopeType.k_Annotation = 2;
        })(fx.EScopeType || (fx.EScopeType = {}));
        var EScopeType = fx.EScopeType;
        var ProgramScope = (function () {
            function ProgramScope() {
                this.inline = getScopeType();
                this.EScopeType = {
                    return: this._pScopeMap[this._iCurrentScope].type
                };
                this.inline = hasVariableInScope(sVariableName, string, iScope, number);
                this.bool = {
                    return: isDef(this._pScopeMap[iScope].variableMap[sVariableName])
                };
                this.inline = hasTypeInScope(sTypeName, string, iScope, number);
                this.bool = {
                    return: isDef(this._pScopeMap[iScope].typeMap[sTypeName])
                };
                this._pScopeMap = {};
                this._iCurrentScope = null;
                this._nScope = 0;
            }
            ProgramScope.prototype.isStrictMode = function (iScope) {
                if (typeof iScope === "undefined") { iScope = this._iCurrentScope; }
                var pScope = this._pScopeMap[iScope];
                while(!isNull(pScope)) {
                    if (pScope.isStrictMode) {
                        return true;
                    }
                    pScope = pScope.parent;
                }
                return false;
            };
            ProgramScope.prototype.setStrictModeOn = function (iScope) {
                if (typeof iScope === "undefined") { iScope = this._iCurrentScope; }
                this._pScopeMap[iScope].isStrictMode = true;
            };
            ProgramScope.prototype.newScope = function (eType) {
                var isFirstScope = false;
                var pParentScope;
                if (isNull(this._iCurrentScope)) {
                    pParentScope = null;
                } else {
                    pParentScope = this._pScopeMap[this._iCurrentScope];
                }
                this._iCurrentScope = this._nScope++;
                var pNewScope = {
                    parent: pParentScope,
                    index: this._iCurrentScope,
                    type: eType,
                    isStrictMode: false,
                    variableMap: null,
                    typeMap: null,
                    functionMap: null
                };
                this._pScopeMap[this._iCurrentScope] = pNewScope;
            };
            ProgramScope.prototype.resumeScope = function () {
                if (this._nScope === 0) {
                    return;
                }
                this._iCurrentScope = this._nScope - 1;
            };
            ProgramScope.prototype.setScope = function (iScope) {
                this._iCurrentScope = iScope;
            };
            ProgramScope.prototype.getScope = function () {
                return this._iCurrentScope;
            };
            ProgramScope.prototype.endScope = function () {
                if (isNull(this._iCurrentScope)) {
                    return;
                }
                var pOldScope = this._pScopeMap[this._iCurrentScope];
                var pNewScope = pOldScope.parent;
                if (isNull(pNewScope)) {
                    this._iCurrentScope = null;
                } else {
                    this._iCurrentScope = pNewScope.index;
                }
            };
            ProgramScope.prototype.getVariable = function (sVariableName, iScope) {
                if (typeof iScope === "undefined") { iScope = this._iCurrentScope; }
                if (isNull(iScope)) {
                    return null;
                }
                var pScope = this._pScopeMap[iScope];
                while(!isNull(pScope)) {
                    var pVariableMap = pScope.variableMap;
                    if (!isNull(pVariableMap)) {
                        var pVariable = pVariableMap[sVariableName];
                        if (isDef(pVariable)) {
                            return pVariable;
                        }
                    }
                    pScope = pScope.parent;
                }
                return null;
            };
            ProgramScope.prototype.getType = function (sTypeName, iScope) {
                if (typeof iScope === "undefined") { iScope = this._iCurrentScope; }
                var pTypeDecl = this.getTypeDecl(sTypeName, iScope);
                if (!isNull(pTypeDecl)) {
                    return pTypeDecl.getType();
                } else {
                    return null;
                }
            };
            ProgramScope.prototype.getTypeDecl = function (sTypeName, iScope) {
                if (typeof iScope === "undefined") { iScope = this._iCurrentScope; }
                if (isNull(iScope)) {
                    return null;
                }
                var pScope = this._pScopeMap[iScope];
                while(!isNull(pScope)) {
                    var pTypeMap = pScope.typeMap;
                    if (!isNull(pTypeMap)) {
                        var pType = pTypeMap[sTypeName];
                        if (isDef(pType)) {
                            return pType;
                        }
                    }
                    pScope = pScope.parent;
                }
                return null;
            };
            ProgramScope.prototype.getFunction = function (sFuncName, pArgumentTypes, iScope) {
                if (typeof iScope === "undefined") { iScope = 0; }
                if (isNull(iScope)) {
                    return null;
                }
                var pScope = this._pScopeMap[iScope];
                var pFunction = null;
                while(!isNull(pScope)) {
                    var pFunctionListMap = pScope.functionMap;
                    if (!isNull(pFunctionListMap)) {
                        var pFunctionList = pFunctionListMap[sFuncName];
                        if (isDef(pFunctionList)) {
                            for(var i = 0; i < pFunctionList.length; i++) {
                                var pTestedFunction = pFunctionList[i];
                                var pTestedArguments = pTestedFunction.getArguments();
                                if (pArgumentTypes.length > pTestedArguments.length || pArgumentTypes.length < pTestedFunction.getNumNeededArguments()) {
                                    continue;
                                }
                                var isParamsEqual = true;
                                for(var j = 0; j < pArgumentTypes.length; j++) {
                                    isParamsEqual = false;
                                    if (!pArgumentTypes[j].getType().isEqual(pTestedArguments[j].getType())) {
                                        break;
                                    }
                                    isParamsEqual = true;
                                }
                                if (isParamsEqual) {
                                    if (!isNull(pFunction)) {
                                        return undefined;
                                    }
                                    pFunction = pTestedFunction;
                                }
                            }
                        }
                    }
                    pScope = pScope.parent;
                }
                return pFunction;
            };
            ProgramScope.prototype.getShaderFunction = function (sFuncName, pArgumentTypes, iScope) {
                if (typeof iScope === "undefined") { iScope = 0; }
                if (isNull(iScope)) {
                    return null;
                }
                var pScope = this._pScopeMap[iScope];
                var pFunction = null;
                while(!isNull(pScope)) {
                    var pFunctionListMap = pScope.functionMap;
                    if (!isNull(pFunctionListMap)) {
                        var pFunctionList = pFunctionListMap[sFuncName];
                        if (isDef(pFunctionList)) {
                            for(var i = 0; i < pFunctionList.length; i++) {
                                var pTestedFunction = pFunctionList[i];
                                var pTestedArguments = pTestedFunction.getArguments();
                                if (pArgumentTypes.length > pTestedArguments.length) {
                                    continue;
                                }
                                var isParamsEqual = true;
                                var iArg = 0;
                                if (pArgumentTypes.length === 0) {
                                    if (!isNull(pFunction)) {
                                        return undefined;
                                    }
                                    pFunction = pTestedFunction;
                                    continue;
                                }
                                for(var j = 0; j < pTestedArguments.length; j++) {
                                    isParamsEqual = false;
                                    if (iArg >= pArgumentTypes.length) {
                                        if (pTestedArguments[j].isUniform()) {
                                            break;
                                        } else {
                                            isParamsEqual = true;
                                        }
                                    } else if (pTestedArguments[j].isUniform()) {
                                        if (!pArgumentTypes[iArg].getType().isEqual(pTestedArguments[j].getType())) {
                                            break;
                                        } else {
                                            iArg++;
                                            isParamsEqual = true;
                                        }
                                    }
                                }
                                if (isParamsEqual) {
                                    if (!isNull(pFunction)) {
                                        return undefined;
                                    }
                                    pFunction = pTestedFunction;
                                }
                            }
                        }
                    }
                    pScope = pScope.parent;
                }
                return pFunction;
            };
            ProgramScope.prototype.addVariable = function (pVariable, iScope) {
                if (typeof iScope === "undefined") { iScope = this._iCurrentScope; }
                if (isNull(iScope)) {
                    return false;
                }
                var pScope = this._pScopeMap[iScope];
                var pVariableMap = pScope.variableMap;
                if (isNull(pVariableMap)) {
                    pVariableMap = pScope.variableMap = {};
                }
                var sVariableName = pVariable.getName();
                if (!pVariable.getType().isShared()) {
                    if (this.hasVariableInScope(sVariableName, iScope)) {
                        return false;
                    }
                    pVariableMap[sVariableName] = pVariable;
                    pVariable._setScope(iScope);
                } else {
                    if (!this.hasVariableInScope(sVariableName, iScope)) {
                        pVariableMap[sVariableName] = pVariable;
                        pVariable._setScope(iScope);
                    } else {
                        var pBlendVariable = pVariableMap[sVariableName].blend(pVariable, EAFXBlendMode.k_Shared);
                        if (isNull(pBlendVariable)) {
                            return false;
                        }
                        pVariableMap[sVariableName] = pBlendVariable;
                        pBlendVariable._setScope(iScope);
                    }
                }
                return true;
            };
            ProgramScope.prototype.addType = function (pType, iScope) {
                if (typeof iScope === "undefined") { iScope = this._iCurrentScope; }
                if (isNull(iScope)) {
                    return false;
                }
                var pScope = this._pScopeMap[iScope];
                var pTypeMap = pScope.typeMap;
                if (isNull(pTypeMap)) {
                    pTypeMap = pScope.typeMap = {};
                }
                var sTypeName = pType.getName();
                if (this.hasTypeInScope(sTypeName, iScope)) {
                    return false;
                }
                pTypeMap[sTypeName] = pType;
                pType._setScope(iScope);
                return true;
            };
            ProgramScope.prototype.addFunction = function (pFunction, iScope) {
                if (typeof iScope === "undefined") { iScope = 0; }
                if (isNull(iScope)) {
                    return false;
                }
                var pScope = this._pScopeMap[iScope];
                var pFunctionMap = pScope.functionMap;
                if (isNull(pFunctionMap)) {
                    pFunctionMap = pScope.functionMap = {};
                }
                var sFuncName = pFunction.getName();
                if (this.hasFunctionInScope(pFunction, iScope)) {
                    return false;
                }
                if (!isDef(pFunctionMap[sFuncName])) {
                    pFunctionMap[sFuncName] = [];
                }
                pFunctionMap[sFuncName].push(pFunction);
                pFunction._setScope(iScope);
                return true;
            };
            ProgramScope.prototype.hasVariable = function (sVariableName, iScope) {
                if (typeof iScope === "undefined") { iScope = this._iCurrentScope; }
                if (isNull(iScope)) {
                    return false;
                }
                var pScope = this._pScopeMap[iScope];
                while(!isNull(pScope)) {
                    var pVariableMap = pScope.variableMap;
                    if (!isNull(pVariableMap)) {
                        var pVariable = pVariableMap[sVariableName];
                        if (isDef(pVariable)) {
                            return true;
                        }
                    }
                    pScope = pScope.parent;
                }
                return false;
            };
            ProgramScope.prototype.hasType = function (sTypeName, iScope) {
                if (typeof iScope === "undefined") { iScope = this._iCurrentScope; }
                if (isNull(iScope)) {
                    return false;
                }
                var pScope = this._pScopeMap[iScope];
                while(!isNull(pScope)) {
                    var pTypeMap = pScope.typeMap;
                    if (!isNull(pTypeMap)) {
                        var pType = pTypeMap[sTypeName];
                        if (isDef(pType)) {
                            return true;
                        }
                    }
                    pScope = pScope.parent;
                }
                return false;
            };
            ProgramScope.prototype.hasFunction = function (sFuncName, pArgumentTypes, iScope) {
                if (typeof iScope === "undefined") { iScope = 0; }
                if (isNull(iScope)) {
                    return false;
                }
                var pScope = this._pScopeMap[iScope];
                while(!isNull(pScope)) {
                    var pFunctionListMap = pScope.functionMap;
                    if (!isNull(pFunctionListMap)) {
                        var pFunctionList = pFunctionListMap[sFuncName];
                        if (isDef(pFunctionList)) {
                            var pFunction = null;
                            for(var i = 0; i < pFunctionList.length; i++) {
                                var pTestedFunction = pFunctionList[i];
                                var pTestedArguments = pTestedFunction.getArguments();
                                if (pArgumentTypes.length > pTestedArguments.length || pArgumentTypes.length < pTestedFunction.getNumNeededArguments()) {
                                    continue;
                                }
                                var isParamsEqual = true;
                                for(var j = 0; j < pArgumentTypes.length; j++) {
                                    isParamsEqual = false;
                                    if (!pArgumentTypes[j].getType().isEqual(pTestedArguments[j].getType())) {
                                        break;
                                    }
                                    isParamsEqual = true;
                                }
                                if (isParamsEqual) {
                                    return true;
                                }
                            }
                        }
                    }
                    pScope = pScope.parent;
                }
                return false;
            };
            ProgramScope.prototype.hasFunctionInScope = function (pFunction, iScope) {
                if (isNull(iScope)) {
                    return false;
                }
                var pScope = this._pScopeMap[iScope];
                var pFunctionListMap = pScope.functionMap;
                var pFunctionList = pFunctionListMap[pFunction.getName()];
                if (!isDef(pFunctionList)) {
                    return false;
                }
                var pFunctionArguments = pFunction.getArguments();
                var hasFunction = false;
                for(var i = 0; i < pFunctionList.length; i++) {
                    var pTestedArguments = pFunctionList[i].getArguments();
                    if (pTestedArguments.length !== pFunctionArguments.length) {
                        continue;
                    }
                    var isParamsEqual = true;
                    for(var j = 0; j < pFunctionArguments.length; j++) {
                        isParamsEqual = false;
                        if (!pTestedArguments[j].getType().isEqual(pFunctionArguments[j].getType())) {
                            break;
                        }
                        isParamsEqual = true;
                    }
                    if (isParamsEqual) {
                        hasFunction = true;
                        break;
                    }
                }
                return hasFunction;
            };
            return ProgramScope;
        })();
        fx.ProgramScope = ProgramScope;        
        var ExprTemplateTranslator = (function () {
            function ExprTemplateTranslator(sExprTemplate) {
                this._pInToOutArgsMap = null;
                this._pExprPart = null;
                this._pInToOutArgsMap = {};
                this._pExprPart = [];
                var pSplitTemplate = sExprTemplate.split(/(\$\d+)/);
                for(var i = 0; i < pSplitTemplate.length; i++) {
                    if (pSplitTemplate[i]) {
                        if (pSplitTemplate[i][0] !== '$') {
                            this._pExprPart.push(new SimpleInstruction(pSplitTemplate[i]));
                        } else {
                            this._pExprPart.push(null);
                            this._pInToOutArgsMap[this._pExprPart.length - 1] = (((pSplitTemplate[i].substr(1))) * 1 - 1);
                        }
                    }
                }
            }
            ExprTemplateTranslator.prototype.toInstructionList = function (pArguments) {
                var pOutputInstructionList = [];
                for(var i = 0; i < this._pExprPart.length; i++) {
                    if (isNull(this._pExprPart[i])) {
                        pOutputInstructionList.push(pArguments[this._pInToOutArgsMap[i]]);
                    } else {
                        pOutputInstructionList.push(this._pExprPart[i]);
                    }
                }
                return pOutputInstructionList;
            };
            return ExprTemplateTranslator;
        })();
        fx.ExprTemplateTranslator = ExprTemplateTranslator;        
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (fx) {
        function getEffectBaseType(sTypeName) {
            return !isNull(Effect.pSystemTypes[sTypeName]) ? (Effect.pSystemTypes[sTypeName] || null) : null;
        }
        fx.getEffectBaseType = getEffectBaseType;
        function isSamplerType(pType) {
            return pType.isEqual(getEffectBaseType("sampler")) || pType.isEqual(getEffectBaseType("sampler2D")) || pType.isEqual(getEffectBaseType("samplerCUBE")) || pType.isEqual(getEffectBaseType("video_buffer"));
        }
        fx.isSamplerType = isSamplerType;
        var Instruction = (function () {
            function Instruction() {
                this._pParentInstruction = null;
                this._sOperatorName = null;
                this._pInstructionList = null;
                this._nInstructions = 0;
                this._eInstructionType = 0;
                this._pLastError = null;
                this._bErrorOccured = false;
                this._iInstructionID = 0;
                this._iScope = 0xffffff;
                this._isVisible = true;
                this.inline = getGuid();
                this.number = {
                    return: this._getInstructionID()
                };
                this.inline = getParent();
                this.IAFXInstruction = {
                    return: this._pParentInstruction
                };
                this.inline = setParent(pParentInstruction, IAFXInstruction);
            }
            Instruction._nInstructionCounter = 0;
            return Instruction;
        })();
        fx.Instruction = Instruction;        
        void {
            this: ,
            _pParentInstruction:  = pParentInstruction
        };
        inline;
        getOperator();
        string;
 {
            return this._sOperatorName;
        }
        inline;
        setOperator(sOperator, string);
        void {
            this: ,
            _sOperatorName:  = sOperator
        };
        inline;
        getInstructions();
        IAFXInstruction[];
 {
            return this._pInstructionList;
        }
        inline;
        setInstructions(pInstructionList, IAFXInstruction[]);
        void {
            this: ,
            _pInstructionList:  = pInstructionList
        };
        inline;
        _getInstructionType();
        EAFXInstructionTypes;
 {
            return this._eInstructionType;
        }
        inline;
        _getInstructionID();
        number;
 {
            return this._iInstructionID;
        }
        _getScope();
        number;
 {
            return this._iScope !== 0xffffff ? this._iScope : !isNull(this.getParent()) ? this.getParent()._getScope() : 0xffffff;
        }
        inline;
        _setScope(iScope, number);
        void {
            this: ,
            _iScope:  = iScope
        };
        inline;
        _isInGlobalScope();
        bool;
 {
            return this._getScope() === 0;
        }
        inline;
        getLastError();
        IAFXInstructionError;
 {
            return this._pLastError;
        }
        inline;
        setError(eCode, number, pInfo ?  : any = null);
        void {
            this: ,
            _pLastError: ,
            code:  = eCode
        };
        this._pLastError.info = pInfo;
        this._bErrorOccured = true;
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
inline;
clearError();
void {
    this: ,
    _bErrorOccured:  = false
};
this._pLastError.code = 0;
this._pLastError.info = null;
inline;
isErrorOccured();
bool;
 {
    return this._bErrorOccured;
}
inline;
setVisible(isVisible, bool);
void {
    this: ,
    _isVisible:  = isVisible
};
inline;
isVisible();
bool;
 {
    return this._isVisible;
}
inline;
initEmptyInstructions();
void {
    this: ,
    _pInstructionList:  = []
};
constructor();
 {
    this._iInstructionID = Instruction._nInstructionCounter++;
    this._pParentInstruction = null;
    this._sOperatorName = null;
    this._pInstructionList = null;
    this._nInstructions = 0;
    this._eInstructionType = EAFXInstructionTypes.k_Instruction;
    this._pLastError = {
        code: 0,
        info: null
    };
}
push(pInstruction, IAFXInstruction, isSetParent ?  : bool = false);
void {
    if: (!isNull(this._pInstructionList))
};
 {
    this._pInstructionList[this._nInstructions] = pInstruction;
    this._nInstructions += 1;
}
if (isSetParent && !isNull(pInstruction)) {
    pInstruction.setParent(this);
}
addRoutine(fnRoutine, IAFXInstructionRoutine, iPriority ?  : number);
void {};
prepareFor(eUsedType, EFunctionType);
void {
    if: (!isNull(this._pInstructionList) && this._nInstructions > 0)
};
 {
    for(var i = 0; i < this._nInstructions; i++) {
        this._pInstructionList[i].prepareFor(eUsedType);
    }
}
check(eStage, ECheckStage, pInfo, any = null);
bool;
 {
    if (this._bErrorOccured) {
        return false;
    } else {
        return true;
    }
}
prepare();
bool;
 {
    return true;
}
toString();
string;
 {
    return null;
}
toFinalCode();
string;
 {
    return "";
}
clone(pRelationMap ?  : IAFXInstructionMap = {});
IAFXInstruction;
 {
    if (isDef(pRelationMap[this._getInstructionID()])) {
        return pRelationMap[this._getInstructionID()];
    }
    var pNewInstruction = new this["constructor"]();
    var pParent = this.getParent() || null;
    if (!isNull(pParent) && isDef(pRelationMap[pParent._getInstructionID()])) {
        pParent = pRelationMap[pParent._getInstructionID()];
    }
    pNewInstruction.setParent(pParent);
    pRelationMap[this._getInstructionID()] = pNewInstruction;
    if (!isNull(this._pInstructionList) && isNull(pNewInstruction.getInstructions())) {
        pNewInstruction.initEmptyInstructions();
    }
    for(var i = 0; i < this._nInstructions; i++) {
        pNewInstruction.push(this._pInstructionList[i].clone(pRelationMap));
    }
    pNewInstruction.setOperator(this.getOperator());
    return pNewInstruction;
}
var InstructionCollector = (function (_super) {
    __extends(InstructionCollector, _super);
    function InstructionCollector() {
        _super.call(this);
        this._pInstructionList = [];
        this._eInstructionType = EAFXInstructionTypes.k_InstructionCollector;
    }
    InstructionCollector.prototype.toFinalCode = function () {
        var sCode = "";
        for(var i = 0; i < this._nInstructions; i++) {
            sCode += this.getInstructions()[i].toFinalCode();
        }
        return sCode;
    };
    return InstructionCollector;
})(Instruction);
exports.InstructionCollector = InstructionCollector;
var SimpleInstruction = (function (_super) {
    __extends(SimpleInstruction, _super);
    function SimpleInstruction(sValue) {
        _super.call(this);
        this._sValue = "";
        this.inline = setValue(sValue, string);
        this._pInstructionList = null;
        this._eInstructionType = EAFXInstructionTypes.k_SimpleInstruction;
        this._sValue = sValue;
    }
    return SimpleInstruction;
})(Instruction);
exports.SimpleInstruction = SimpleInstruction;
void {
    this: ,
    _sValue:  = sValue
};
inline;
isValue(sValue, string);
bool;
 {
    return (this._sValue === sValue);
}
toString();
string;
 {
    return this._sValue;
}
toFinalCode();
string;
 {
    return this._sValue;
}
clone(pRelationMap ?  : IAFXInstructionMap);
SimpleInstruction;
 {
    var pClone = _super.prototype.clone.call(this, pRelationMap);
    pClone.setValue(this._sValue);
    return pClone;
}
var TypedInstruction = (function (_super) {
    __extends(TypedInstruction, _super);
    function TypedInstruction() {
        _super.call(this);
        this._pType = null;
        this._eInstructionType = EAFXInstructionTypes.k_TypedInstruction;
    }
    TypedInstruction.prototype.getType = function () {
        return this._pType;
    };
    TypedInstruction.prototype.setType = function (pType) {
        this._pType = pType;
    };
    TypedInstruction.prototype.clone = function (pRelationMap) {
        if (typeof pRelationMap === "undefined") { pRelationMap = {}; }
        var pClonedInstruction = (_super.prototype.clone.call(this, pRelationMap));
        if (!isNull(this.getType())) {
            pClonedInstruction.setType(this.getType().clone(pRelationMap));
        }
        return pClonedInstruction;
    };
    return TypedInstruction;
})(Instruction);
exports.TypedInstruction = TypedInstruction;
var DeclInstruction = (function (_super) {
    __extends(DeclInstruction, _super);
    function DeclInstruction() {
        _super.call(this);
        this._sSemantic = "";
        this._pAnnotation = null;
        this._bForPixel = true;
        this._bForVertex = true;
        this._isBuiltIn = false;
        this.inline = getSemantic();
        this.string = {
            return: this._sSemantic
        };
        this.inline = _isForAll();
        this.bool = {
            return: this._bForVertex && this._bForPixel
        };
        this.inline = _isForPixel();
        this.bool = {
            return: this._bForPixel
        };
        this.inline = _isForVertex();
        this.bool = {
            return: this._bForVertex
        };
        this.inline = _setForAll(canUse, bool);
        this._eInstructionType = EAFXInstructionTypes.k_DeclInstruction;
    }
    DeclInstruction.prototype.setSemantic = function (sSemantic) {
        this._sSemantic = sSemantic;
    };
    DeclInstruction.prototype.setAnnotation = function (pAnnotation) {
        this._pAnnotation = pAnnotation;
    };
    DeclInstruction.prototype.getName = function () {
        return "";
    };
    DeclInstruction.prototype.getRealName = function () {
        return "";
    };
    DeclInstruction.prototype.getNameId = function () {
        return null;
    };
    DeclInstruction.prototype.isBuiltIn = function () {
        return this._isBuiltIn;
    };
    DeclInstruction.prototype.setBuiltIn = function (isBuiltIn) {
        this._isBuiltIn = isBuiltIn;
    };
    return DeclInstruction;
})(TypedInstruction);
exports.DeclInstruction = DeclInstruction;
void {
    this: ,
    _bForVertex:  = canUse
};
this._bForPixel = canUse;
inline;
_setForPixel(canUse, bool);
void {
    this: ,
    _bForPixel:  = canUse
};
inline;
_setForVertex(canUse, bool);
void {
    this: ,
    _bForVertex:  = canUse
};
clone(pRelationMap ?  : IAFXInstructionMap = {});
IAFXDeclInstruction;
 {
    var pClonedInstruction = (_super.prototype.clone.call(this, pRelationMap));
    pClonedInstruction.setSemantic(this._sSemantic);
    pClonedInstruction.setAnnotation(this._pAnnotation);
    return pClonedInstruction;
}
var IdInstruction = (function (_super) {
    __extends(IdInstruction, _super);
    function IdInstruction() {
        _super.call(this);
        this._isForVarying = false;
        this.inline = isVisible();
        this.bool = {
            return: this.getParent().isVisible()
        };
        this.inline = getName();
        this.string = {
            return: this._sName
        };
        this.inline = getRealName();
        this.string = {
            if: (this._isForVarying)
        };
        this._sName = "";
        this._sRealName = "";
        this._eInstructionType = EAFXInstructionTypes.k_IdInstruction;
    }
    return IdInstruction;
})(Instruction);
exports.IdInstruction = IdInstruction;
 {
    return "V_" + this._sRealName;
}
 {
    return this._sRealName;
}
inline;
setName(sName, string);
void {
    this: ,
    _sName:  = sName
};
this._sRealName = sName;
inline;
setRealName(sRealName, string);
void {
    this: ,
    _sRealName:  = sRealName
};
inline;
_markAsVarying(bValue, bool);
void {
    this: ,
    _isForVarying:  = bValue
};
toString();
string;
 {
    return this._sRealName;
}
toFinalCode();
string;
 {
    return this.getRealName();
}
clone(pRelationMap ?  : IAFXInstructionMap);
IdInstruction;
 {
    var pClonedInstruction = (_super.prototype.clone.call(this, pRelationMap));
    pClonedInstruction.setName(this._sName);
    pClonedInstruction.setRealName(this._sRealName);
    return pClonedInstruction;
}
var KeywordInstruction = (function (_super) {
    __extends(KeywordInstruction, _super);
    function KeywordInstruction() {
        _super.call(this);
        this.inline = setValue(sValue, string);
        this._sValue = "";
        this._eInstructionType = EAFXInstructionTypes.k_KeywordInstruction;
    }
    return KeywordInstruction;
})(Instruction);
exports.KeywordInstruction = KeywordInstruction;
void {
    this: ,
    _sValue:  = sValue
};
inline;
isValue(sTestValue, string);
bool;
 {
    return this._sValue === sTestValue;
}
toString();
string;
 {
    return this._sValue;
}
toFinalCode();
string;
 {
    return this._sValue;
}
var AnnotationInstruction = (function (_super) {
    __extends(AnnotationInstruction, _super);
    function AnnotationInstruction() {
        _super.call(this);
        this._eInstructionType = EAFXInstructionTypes.k_AnnotationInstruction;
    }
    return AnnotationInstruction;
})(Instruction);
exports.AnnotationInstruction = AnnotationInstruction;
var PassInstruction = (function (_super) {
    __extends(PassInstruction, _super);
    function PassInstruction() {
        _super.call(this);
        this._pTempNodeList = null;
        this._pTempFoundedFuncList = null;
        this._pTempFoundedFuncTypeList = null;
        this._pParseNode = null;
        this._sFunctionCode = "";
        this._isComlexPass = false;
        this._pShadersMap = null;
        this._fnPassFunction = null;
        this._pVertexShader = null;
        this._pPixelShader = null;
        this._pPassStateMap = null;
        this._pSharedVariableMapV = null;
        this._pGlobalVariableMapV = null;
        this._pUniformVariableMapV = null;
        this._pForeignVariableMapV = null;
        this._pTextureVariableMapV = null;
        this._pUsedComplexTypeMapV = null;
        this._pSharedVariableMapP = null;
        this._pGlobalVariableMapP = null;
        this._pUniformVariableMapP = null;
        this._pForeignVariableMapP = null;
        this._pTextureVariableMapP = null;
        this._pUsedComplexTypeMapP = null;
        this._pFullUniformVariableMap = null;
        this._pFullForeignVariableMap = null;
        this._pFullTextureVariableMap = null;
        this.inline = _markAsComplex(isComplex, bool);
        this._pInstructionList = null;
        this._eInstructionType = EAFXInstructionTypes.k_PassInstruction;
    }
    PassInstruction.prototype._addFoundFunction = function (pNode, pShader, eType) {
        if (isNull(this._pTempNodeList)) {
            this._pTempNodeList = [];
            this._pTempFoundedFuncList = [];
            this._pTempFoundedFuncTypeList = [];
        }
        this._pTempNodeList.push(pNode);
        this._pTempFoundedFuncList.push(pShader);
        this._pTempFoundedFuncTypeList.push(eType);
    };
    PassInstruction.prototype._getFoundedFunction = function (pNode) {
        if (isNull(this._pTempNodeList)) {
            return null;
        }
        for(var i = 0; i < this._pTempNodeList.length; i++) {
            if (this._pTempNodeList[i] === pNode) {
                return this._pTempFoundedFuncList[i];
            }
        }
        return null;
    };
    PassInstruction.prototype._getFoundedFunctionType = function (pNode) {
        if (isNull(this._pTempNodeList)) {
            return null;
        }
        for(var i = 0; i < this._pTempNodeList.length; i++) {
            if (this._pTempNodeList[i] === pNode) {
                return this._pTempFoundedFuncTypeList[i];
            }
        }
        return null;
    };
    PassInstruction.prototype._setParseNode = function (pNode) {
        this._pParseNode = pNode;
    };
    PassInstruction.prototype._getParseNode = function () {
        return this._pParseNode;
    };
    PassInstruction.prototype._addCodeFragment = function (sCode) {
        if (this.isComplexPass()) {
            this._sFunctionCode += sCode;
        }
    };
    return PassInstruction;
})(DeclInstruction);
exports.PassInstruction = PassInstruction;
void {
    this: ,
    _isComlexPass:  = isComplex
};
inline;
_getSharedVariableMapV();
IAFXVariableDeclMap;
 {
    return this._pSharedVariableMapV;
}
inline;
_getGlobalVariableMapV();
IAFXVariableDeclMap;
 {
    return this._pGlobalVariableMapV;
}
inline;
_getUniformVariableMapV();
IAFXVariableDeclMap;
 {
    return this._pUniformVariableMapV;
}
inline;
_getForeignVariableMapV();
IAFXVariableDeclMap;
 {
    return this._pForeignVariableMapV;
}
inline;
_getTextureVariableMapV();
IAFXVariableDeclMap;
 {
    return this._pTextureVariableMapV;
}
inline;
_getUsedComplexTypeMapV();
IAFXTypeMap;
 {
    return this._pUsedComplexTypeMapV;
}
inline;
_getSharedVariableMapP();
IAFXVariableDeclMap;
 {
    return this._pSharedVariableMapP;
}
inline;
_getGlobalVariableMapP();
IAFXVariableDeclMap;
 {
    return this._pGlobalVariableMapP;
}
inline;
_getUniformVariableMapP();
IAFXVariableDeclMap;
 {
    return this._pUniformVariableMapP;
}
inline;
_getForeignVariableMapP();
IAFXVariableDeclMap;
 {
    return this._pForeignVariableMapP;
}
inline;
_getTextureVariableMapP();
IAFXVariableDeclMap;
 {
    return this._pTextureVariableMapP;
}
inline;
_getUsedComplexTypeMapP();
IAFXTypeMap;
 {
    return this._pUsedComplexTypeMapP;
}
inline;
_getFullUniformMap();
IAFXVariableDeclMap;
 {
    return this._pFullUniformVariableMap;
}
inline;
_getFullForeignMap();
IAFXVariableDeclMap;
 {
    return this._pFullForeignVariableMap;
}
inline;
_getFullTextureMap();
IAFXVariableDeclMap;
 {
    return this._pFullTextureVariableMap;
}
inline;
isComplexPass();
bool;
 {
    return this._isComlexPass;
}
inline;
getVertexShader();
IAFXFunctionDeclInstruction;
 {
    return this._pVertexShader;
}
inline;
getPixelShader();
IAFXFunctionDeclInstruction;
 {
    return this._pPixelShader;
}
addShader(pShader, IAFXFunctionDeclInstruction);
void {
    var: isVertex,
    bool:  = pShader.getFunctionType() === EFunctionType.k_Vertex
};
if (this.isComplexPass()) {
    if (isNull(this._pShadersMap)) {
        this._pShadersMap = {};
    }
    var iShader = pShader._getInstructionID();
    this._pShadersMap[iShader] = pShader;
    var sCode = isVertex ? "this._pVertexShader=" : "this._pPixelShader=";
    sCode += "this._pShadersMap[" + iShader.toString() + "];";
    this._addCodeFragment(sCode);
} else {
    if (isVertex) {
        this._pVertexShader = pShader;
    } else {
        this._pPixelShader = pShader;
    }
}
setState(sType, string, sValue, string);
void {
    if: (isNull(this._pPassStateMap))
};
 {
    this._pPassStateMap = {};
}
if (this.isComplexPass()) {
    this._addCodeFragment("this._pPassStateMap[" + sType + "]=" + sValue + ";");
} else {
    this._pPassStateMap[sType] = sValue;
}
finalizePass();
void {
    if: (this.isComplexPass())
};
 {
    this._fnPassFunction = (new Function("engine", "foreigns", "uniforms", this._sFunctionCode));
}
this.generateInfoAboutUsedVaraibles();
this._pTempNodeList = null;
this._pTempFoundedFuncList = null;
this._pTempFoundedFuncTypeList = null;
this._pParseNode = null;
this._sFunctionCode = "";
evaluate(pEngineStates, any, pForeigns, any, pUniforms, any);
bool;
 {
    if (this.isComplexPass()) {
        this._pVertexShader = null;
        this._pPixelShader = null;
        this._fnPassFunction.call(this, pEngineStates, pForeigns, pUniforms);
    }
    return true;
}
generateInfoAboutUsedVaraibles();
void {
    if: (isNull(this._pSharedVariableMapV))
};
 {
    this._pSharedVariableMapV = {};
    this._pGlobalVariableMapV = {};
    this._pUniformVariableMapV = {};
    this._pForeignVariableMapV = {};
    this._pTextureVariableMapV = {};
    this._pUsedComplexTypeMapV = {};
    this._pSharedVariableMapP = {};
    this._pGlobalVariableMapP = {};
    this._pUniformVariableMapP = {};
    this._pForeignVariableMapP = {};
    this._pTextureVariableMapP = {};
    this._pUsedComplexTypeMapP = {};
    this._pFullUniformVariableMap = {};
    this._pFullForeignVariableMap = {};
    this._pFullTextureVariableMap = {};
}
if (this.isComplexPass()) {
    for(var i in this._pShadersMap) {
        this.addInfoAbouUsedVariablesFromFunction(this._pShadersMap[i]);
    }
} else {
    if (!isNull(this._pVertexShader)) {
        this.addInfoAbouUsedVariablesFromFunction(this._pVertexShader);
    }
    if (!isNull(this._pPixelShader)) {
        this.addInfoAbouUsedVariablesFromFunction(this._pPixelShader);
    }
}
addInfoAbouUsedVariablesFromFunction(pFunction, IAFXFunctionDeclInstruction);
void {
    var: pSharedVars,
    IAFXVariableDeclMap:  = pFunction._getSharedVariableMap()
};
var pGlobalVars = pFunction._getGlobalVariableMap();
var pUniformVars = pFunction._getUniformVariableMap();
var pForeignVars = pFunction._getForeignVariableMap();
var pTextureVars = pFunction._getTextureVariableMap();
var pTypes = pFunction._getUsedComplexTypeMap();
var pSharedVarsTo = null;
var pGlobalVarsTo = null;
var pUniformVarsTo = null;
var pForeignVarsTo = null;
var pTextureVarsTo = null;
var pTypesTo = null;
if (pFunction.getFunctionType() === EFunctionType.k_Vertex) {
    pSharedVarsTo = this._pSharedVariableMapV;
    pGlobalVarsTo = this._pGlobalVariableMapV;
    pUniformVarsTo = this._pUniformVariableMapV;
    pForeignVarsTo = this._pForeignVariableMapV;
    pTextureVarsTo = this._pTextureVariableMapV;
    pTypesTo = this._pUsedComplexTypeMapV;
} else {
    pSharedVarsTo = this._pSharedVariableMapP;
    pGlobalVarsTo = this._pGlobalVariableMapP;
    pUniformVarsTo = this._pUniformVariableMapP;
    pForeignVarsTo = this._pForeignVariableMapP;
    pTextureVarsTo = this._pTextureVariableMapP;
    pTypesTo = this._pUsedComplexTypeMapP;
}
for(var i in pSharedVars) {
    if (!isNull(pSharedVars[i]) && !pSharedVars[i].isField()) {
        pSharedVarsTo[i] = pSharedVars[i];
    }
}
for(var i in pGlobalVars) {
    if (!isNull(pGlobalVars[i])) {
        pGlobalVarsTo[i] = pGlobalVars[i];
    }
}
for(var i in pUniformVars) {
    if (!isNull(pUniformVars[i])) {
        pUniformVarsTo[i] = pUniformVars[i];
        this._pFullUniformVariableMap[i] = pUniformVars[i];
    }
}
for(var i in pForeignVars) {
    if (!isNull(pForeignVars[i])) {
        pForeignVarsTo[i] = pForeignVars[i];
        this._pFullForeignVariableMap[i] = pForeignVars[i];
    }
}
for(var i in pTextureVars) {
    if (!isNull(pTextureVars[i])) {
        pTextureVarsTo[i] = pTextureVars[i];
        this._pFullTextureVariableMap[i] = pTextureVars[i];
    }
}
for(var i in pTypes) {
    if (!isNull(pTypes[i])) {
        pTypesTo[i] = pTypes[i];
    }
}
var TechniqueInstruction = (function (_super) {
    __extends(TechniqueInstruction, _super);
    function TechniqueInstruction() {
        _super.call(this);
        this._sName = "";
        this._hasComplexName = false;
        this._pParseNode = null;
        this._pSharedVariableListV = null;
        this._pSharedVariableListP = null;
        this._pPassList = null;
        this._pComponentList = null;
        this._pComponentShiftList = null;
        this._pFullComponentList = null;
        this._pFullComponentShiftList = null;
        this._nTotalPasses = 0;
        this.inline = getComponentList();
        this.IAFXComponent = [];
        this._pInstructionList = null;
        this._eInstructionType = EAFXInstructionTypes.k_TechniqueInstruction;
    }
    TechniqueInstruction.prototype.setName = function (sName, isComplexName) {
        this._sName = sName;
        this._hasComplexName = isComplexName;
    };
    TechniqueInstruction.prototype.getName = function () {
        return this._sName;
    };
    TechniqueInstruction.prototype.hasComplexName = function () {
        return this._hasComplexName;
    };
    TechniqueInstruction.prototype.getSharedVariablesForVertex = function () {
        return this._pSharedVariableListV;
    };
    TechniqueInstruction.prototype.getSharedVariablesForPixel = function () {
        return this._pSharedVariableListP;
    };
    TechniqueInstruction.prototype.addPass = function (pPass) {
        if (isNull(this._pPassList)) {
            this._pPassList = [];
        }
        this._pPassList.push(pPass);
    };
    TechniqueInstruction.prototype.getPassList = function () {
        return this._pPassList;
    };
    TechniqueInstruction.prototype.getPass = function (iPass) {
        return iPass < this._pPassList.length ? this._pPassList[iPass] : null;
    };
    TechniqueInstruction.prototype.totalOwnPasses = function () {
        return this._pPassList.length;
    };
    TechniqueInstruction.prototype.totalPasses = function () {
        return this._nTotalPasses;
    };
    TechniqueInstruction.prototype.addComponent = function (pComponent, iShift) {
        if (isNull(this._pComponentList)) {
            this._pComponentList = [];
            this._pComponentShiftList = [];
        }
        this._pComponentList.push(pComponent);
        this._pComponentShiftList.push(iShift);
    };
    return TechniqueInstruction;
})(DeclInstruction);
exports.TechniqueInstruction = TechniqueInstruction;
 {
    return this._pComponentList;
}
inline;
getComponentListShift();
number[];
 {
    return this._pComponentShiftList;
}
getFullComponentList();
IAFXComponent[];
 {
    return this._pFullComponentList;
}
getFullComponentShiftList();
number[];
 {
    return this._pFullComponentShiftList;
}
checkForCorrectImports();
bool;
 {
    return true;
}
finalizeTechnique(sProvideNameSpace, string, pGloabalComponentList, IAFXComponent[], pGloabalComponentShiftList, number[]);
void {
    this: ,
    generateListOfSharedVariables: 
};
if (!this.hasComplexName() && sProvideNameSpace !== "") {
    this._sName = sProvideNameSpace + "." + this._sName;
}
if (!isNull(pGloabalComponentList)) {
    if (!isNull(this._pComponentList)) {
        this._pComponentList = pGloabalComponentList.concat(this._pComponentList);
        this._pComponentShiftList = pGloabalComponentShiftList.concat(this._pComponentShiftList);
    } else {
        this._pComponentList = pGloabalComponentList.concat();
        this._pComponentShiftList = pGloabalComponentShiftList.concat();
    }
}
this.generateFullListOfComponent();
generateListOfSharedVariables();
void {
    this: ,
    _pSharedVariableListV:  = []
};
this._pSharedVariableListP = [];
for(var i = 0; i < this._pPassList.length; i++) {
    var pSharedV = this._pPassList[i]._getSharedVariableMapV();
    var pSharedP = this._pPassList[i]._getSharedVariableMapP();
    for(var j in pSharedV) {
        this.addSharedVariable(pSharedV[j], EFunctionType.k_Vertex);
    }
    for(var j in pSharedP) {
        this.addSharedVariable(pSharedP[j], EFunctionType.k_Pixel);
    }
}
addSharedVariable(pVar, IAFXVariableDeclInstruction, eType, EFunctionType);
void {
    var: pAddTo,
    IAFXVariableDeclInstruction: [] = null
};
if (eType === EFunctionType.k_Vertex) {
    pAddTo = this._pSharedVariableListV;
} else {
    pAddTo = this._pSharedVariableListP;
}
for(var i = 0; i < pAddTo.length; i++) {
    if (pAddTo[i] === pVar) {
        return;
    }
}
pAddTo.push(pVar);
generateFullListOfComponent();
void {
    this: ,
    _nTotalPasses:  = this.totalOwnPasses()
};
if (isNull(this._pComponentList)) {
    return;
}
this._pFullComponentList = [];
this._pFullComponentShiftList = [];
for(var i = 0; i < this._pComponentList.length; i++) {
    var pTechnique = this._pComponentList[i].getTechnique();
    var iMainShift = this._pComponentShiftList[i];
    var pAddComponentList = pTechnique.getFullComponentList();
    var pAddComponentShiftList = pTechnique.getFullComponentShiftList();
    if (!isNull(pAddComponentList)) {
        for(var j = 0; j < pAddComponentList.length; i++) {
            this._pFullComponentList.push(pAddComponentList[j]);
            this._pFullComponentShiftList.push(pAddComponentShiftList[j] + iMainShift);
        }
    }
    this._pFullComponentList.push(this._pComponentList[i]);
    this._pFullComponentShiftList.push(iMainShift);
    if (this._nTotalPasses < iMainShift + pTechnique.totalPasses()) {
        this._nTotalPasses = iMainShift + pTechnique.totalPasses();
    }
}
var akra;
(function (akra) {
    (function (fx) {
        var TypeDeclInstruction = (function (_super) {
            __extends(TypeDeclInstruction, _super);
            function TypeDeclInstruction() {
                _super.call(this);
                this.inline = getType();
                this.IAFXTypeInstruction = {
                    return: this._pInstructionList[0]
                };
                this.inline = getName();
                this.string = {
                    return: this.getType().getName()
                };
                this.inline = getRealName();
                this.string = {
                    return: this.getType().getRealName()
                };
                this._pInstructionList = [
                    null
                ];
                this._eInstructionType = EAFXInstructionTypes.k_TypeDeclInstruction;
            }
            TypeDeclInstruction.prototype.clone = function (pRelationMap) {
                return _super.prototype.clone.call(this, pRelationMap);
            };
            TypeDeclInstruction.prototype.toFinalCode = function () {
                return this.getType()._toDeclString() + ";";
            };
            TypeDeclInstruction.prototype.blend = function (pDecl, eBlendMode) {
                if (pDecl !== this) {
                    return null;
                }
                return this;
            };
            return TypeDeclInstruction;
        })(DeclInstruction);
        fx.TypeDeclInstruction = TypeDeclInstruction;        
        var VariableTypeInstruction = (function (_super) {
            __extends(VariableTypeInstruction, _super);
            function VariableTypeInstruction() {
                _super.call(this);
                this._pSubType = null;
                this._pUsageList = null;
                this._sName = "";
                this._isWritable = null;
                this._isReadable = null;
                this._bUsedForWrite = false;
                this._bUsedForRead = false;
                this._sHash = "";
                this._sStrongHash = "";
                this._isArray = false;
                this._isPointer = false;
                this._isStrictPointer = false;
                this._isPointIndex = null;
                this._isUniform = null;
                this._isGlobal = null;
                this._isConst = null;
                this._isShared = null;
                this._isForeign = null;
                this._iLength = 0xffffff;
                this._isNeedToUpdateLength = false;
                this._isFromVariableDecl = null;
                this._isFromTypeDecl = null;
                this._isField = false;
                this._pArrayIndexExpr = null;
                this._pArrayElementType = null;
                this._pFieldDeclMap = null;
                this._pFieldDeclBySemanticMap = null;
                this._pFieldIdMap = null;
                this._pUsedFieldMap = null;
                this._pVideoBuffer = null;
                this._pMainPointIndex = null;
                this._pUpPointIndex = null;
                this._pDownPointIndex = null;
                this._nPointDim = 0;
                this._pPointerList = null;
                this._iPadding = 0xffffff;
                this._pSubDeclList = null;
                this._pAttrOffset = null;
                this._bUnverifiable = false;
                this._bCollapsed = false;
                this.inline = _setCollapsed(bValue, bool);
                this._pInstructionList = null;
                this._eInstructionType = EAFXInstructionTypes.k_VariableTypeInstruction;
            }
            VariableTypeInstruction.prototype.toFinalCode = function () {
                var sCode = "";
                if (!isNull(this._pUsageList)) {
                    if (!this.isShared()) {
                        for(var i = 0; i < this._pUsageList.length; i++) {
                            sCode += this._pUsageList[i] + " ";
                        }
                    }
                }
                sCode += this.getSubType().toFinalCode();
                return sCode;
            };
            VariableTypeInstruction.prototype._toDeclString = function () {
                return this.getSubType()._toDeclString();
            };
            VariableTypeInstruction.prototype.isBuiltIn = function () {
                return false;
            };
            VariableTypeInstruction.prototype.setBuiltIn = function (isBuiltIn) {
            };
            return VariableTypeInstruction;
        })(Instruction);
        fx.VariableTypeInstruction = VariableTypeInstruction;        
        void {
            this: ,
            _bCollapsed:  = bValue
        };
        inline;
        _isCollapsed();
        bool;
 {
            return this._bCollapsed;
        }
        inline;
        isBase();
        bool;
 {
            return this.getSubType().isBase() && this._isArray === false;
        }
        inline;
        isArray();
        bool;
 {
            return this._isArray || (this.getSubType().isArray());
        }
        inline;
        isNotBaseArray();
        bool;
 {
            return this._isArray || (this.getSubType().isNotBaseArray());
        }
        inline;
        isComplex();
        bool;
 {
            return this.getSubType().isComplex();
        }
        isEqual(pType, IAFXTypeInstruction);
        bool;
 {
            if (this._isUnverifiable()) {
                return true;
            }
            if (this.isNotBaseArray() && pType.isNotBaseArray() && (this.getLength() !== pType.getLength() || this.getLength() === 0xffffff || pType.getLength() === 0xffffff)) {
                return false;
            }
            if (this.getHash() !== pType.getHash()) {
                return false;
            }
            return true;
        }
        isStrongEqual(pType, IAFXTypeInstruction);
        bool;
 {
            if (!this.isEqual(pType) || this.getStrongHash() !== pType.getStrongHash()) {
                return false;
            }
            return true;
        }
        isSampler();
        bool;
 {
            return this.getSubType().isSampler();
        }
        isSamplerCube();
        bool;
 {
            return this.getSubType().isSamplerCube();
        }
        isSampler2D();
        bool;
 {
            return this.getSubType().isSampler2D();
        }
        isWritable();
        bool;
 {
            if (!isNull(this._isWritable)) {
                return this._isWritable;
            }
            if ((this.isArray() && !this.isBase()) || this.isForeign() || this.isUniform()) {
                this._isWritable = false;
            } else {
                this._isWritable = this.getSubType().isWritable();
            }
            return this._isWritable;
        }
        isReadable();
        bool;
 {
            if (!isNull(this._isReadable)) {
                return this._isReadable;
            }
            if (this.hasUsage("out")) {
                this._isReadable = false;
            } else {
                this._isReadable = this.getSubType().isReadable();
            }
            return this._isReadable;
        }
        _containArray();
        bool;
 {
            return this.getSubType()._containArray();
        }
        _containSampler();
        bool;
 {
            return this.getSubType()._containSampler();
        }
        _containPointer();
        bool;
 {
            return this.getSubType()._containPointer();
        }
        _containComplexType();
        bool;
 {
            return this.getSubType()._containComplexType();
        }
        isPointer();
        bool;
 {
            return this._isPointer || (this.getSubType()._getInstructionType() === EAFXInstructionTypes.k_VariableTypeInstruction && (this.getSubType()).isPointer());
        }
        isStrictPointer();
        bool;
 {
            return this._isStrictPointer || (this.getSubType()._getInstructionType() === EAFXInstructionTypes.k_VariableTypeInstruction && (this.getSubType()).isStrictPointer());
        }
        isPointIndex();
        bool;
 {
            if (isNull(this._isPointIndex)) {
                this._isPointIndex = this.isStrongEqual(getEffectBaseType("ptr"));
            }
            return this._isPointIndex;
        }
        isFromVariableDecl();
        bool;
 {
            if (!isNull(this._isFromVariableDecl)) {
                return this._isFromVariableDecl;
            }
            if (isNull(this.getParent())) {
                this._isFromVariableDecl = false;
            } else {
                var eParentType = this.getParent()._getInstructionType();
                if (eParentType === EAFXInstructionTypes.k_VariableDeclInstruction) {
                    this._isFromVariableDecl = true;
                } else if (eParentType === EAFXInstructionTypes.k_VariableTypeInstruction) {
                    this._isFromVariableDecl = (this.getParent()).isFromVariableDecl();
                } else {
                    this._isFromVariableDecl = false;
                }
            }
            return this._isFromVariableDecl;
        }
        isFromTypeDecl();
        bool;
 {
            if (!isNull(this._isFromTypeDecl)) {
                return this._isFromTypeDecl;
            }
            if (isNull(this.getParent())) {
                this._isFromTypeDecl = false;
            } else {
                var eParentType = this.getParent()._getInstructionType();
                if (eParentType === EAFXInstructionTypes.k_TypeDeclInstruction) {
                    this._isFromTypeDecl = true;
                } else if (eParentType === EAFXInstructionTypes.k_VariableTypeInstruction) {
                    this._isFromTypeDecl = (this.getParent()).isFromVariableDecl();
                } else {
                    this._isFromTypeDecl = false;
                }
            }
            return this._isFromTypeDecl;
        }
        isUniform();
        bool;
 {
            if (isNull(this._isUniform)) {
                this._isUniform = this.hasUsage("uniform");
            }
            return this._isUniform;
        }
        isGlobal();
        bool;
 {
            if (isNull(this._isGlobal)) {
                this._isGlobal = this._getScope() === 0;
            }
            return this._isGlobal;
        }
        isConst();
        bool;
 {
            if (isNull(this._isConst)) {
                this._isConst = this.hasUsage("const");
            }
            return this._isConst;
        }
        isShared();
        bool;
 {
            if (isNull(this._isShared)) {
                this._isShared = this.hasUsage("shared");
            }
            return this._isShared;
        }
        isForeign();
        bool;
 {
            if (isNull(this._isForeign)) {
                this._isForeign = this.hasUsage("foreign");
            }
            return this._isForeign;
        }
        _isTypeOfField();
        bool;
 {
            if (isNull(this.getParent())) {
                return false;
            }
            if (this.getParent()._getInstructionType() === EAFXInstructionTypes.k_VariableDeclInstruction) {
                var pParentDecl = this.getParent();
                return pParentDecl.isField();
            }
            return false;
        }
        inline;
        _isUnverifiable();
        bool;
 {
            return this._bUnverifiable;
        }
        setName(sName, string);
        void {
            this: ,
            _sName:  = sName
        };
        inline;
        _canWrite(isWritable, bool);
        void {
            this: ,
            _isWritable:  = isWritable
        };
        inline;
        _canRead(isReadable, bool);
        void {
            this: ,
            _isReadable:  = isReadable
        };
        inline;
        setPadding(iPadding, number);
        void {
            this: ,
            _iPadding:  = iPadding
        };
        pushType(pType, IAFXTypeInstruction);
        void {
            var: eType,
            EAFXInstructionTypes:  = pType._getInstructionType()
        };
        if (eType === EAFXInstructionTypes.k_SystemTypeInstruction || eType === EAFXInstructionTypes.k_ComplexTypeInstruction) {
            this._pSubType = pType;
        } else {
            var pVarType = pType;
            if (!pVarType.isNotBaseArray() && !pVarType.isPointer()) {
                var pUsageList = pVarType.getUsageList();
                if (!isNull(pUsageList)) {
                    for(var i = 0; i < pUsageList.length; i++) {
                        this.addUsage(pUsageList[i]);
                    }
                }
                this._pSubType = pVarType.getSubType();
            } else {
                this._pSubType = pType;
            }
        }
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
addUsage(sUsage, string);
void {
    if: (isNull(this._pUsageList))
};
 {
    this._pUsageList = [];
}
if (!this.hasUsage(sUsage)) {
    this._pUsageList.push(sUsage);
}
addArrayIndex(pExpr, IAFXExprInstruction);
void {
    this: ,
    _pArrayElementType:  = new VariableTypeInstruction()
};
this._pArrayElementType.pushType(this.getSubType());
if (!isNull(this._pUsageList)) {
    for(var i = 0; i < this._pUsageList.length; i++) {
        this._pArrayElementType.addUsage(this._pUsageList[i]);
    }
}
this._pArrayElementType.setParent(this);
this._pArrayIndexExpr = pExpr;
this._iLength = this._pArrayIndexExpr.evaluate() ? this._pArrayIndexExpr.getEvalValue() : 0xffffff;
this._isArray = true;
if (this._iLength === 0xffffff) {
    this._isNeedToUpdateLength = true;
}
addPointIndex(isStrict ?  : bool = true);
void {
    this: ,
    _nPointDim: ++
};
this._isPointer = true;
if (isStrict) {
    this._isStrictPointer = true;
}
setVideoBuffer(pBuffer, IAFXVariableDeclInstruction);
void {
    if: (this.isPointIndex())
};
 {
    (this.getParent().getParent()).getType().setVideoBuffer(pBuffer);
    return;
}
this._pVideoBuffer = pBuffer;
if (!this.isComplex()) {
    return;
}
var pFieldNameList = this.getFieldNameList();
for(var i = 0; i < pFieldNameList.length; i++) {
    var pFieldType = this.getFieldType(pFieldNameList[i]);
    if (pFieldType.isPointer()) {
        pFieldType.setVideoBuffer(pBuffer);
    }
}
initializePointers();
void {
    this: ,
    _pPointerList:  = []
};
var pDownPointer = this._getParentVarDecl();
for(var i = 0; i < this.getPointDim(); i++) {
    var pPointer = new VariableDeclInstruction();
    var pPointerType = new VariableTypeInstruction();
    var pPointerId = new IdInstruction();
    pPointer.push(pPointerType, true);
    pPointer.push(pPointerId, true);
    pPointerType.pushType(getEffectBaseType("ptr"));
    pPointerId.setName("undef");
    pPointerId.setName(this._getParentVarDecl().getName() + "_pointer_" + i.toString());
    if (i > 0) {
        (this._pPointerList[i - 1].getType())._setUpDownPointers(pPointer, pDownPointer);
        pDownPointer = this._pPointerList[i - 1];
    } else {
        pPointerType._setUpDownPointers(null, pDownPointer);
    }
    pPointer.setParent(this._getParentVarDecl());
    this._pPointerList.push(pPointer);
}
this._pPointerList[this._pPointerList.length - 1].getType()._setUpDownPointers(null, pDownPointer);
this._pUpPointIndex = this._pPointerList[0];
this._pMainPointIndex = this._pPointerList[this._pPointerList.length - 1];
_setPointerToStrict();
void {
    this: ,
    _isStrictPointer:  = true
};
_addPointIndexInDepth();
void {
    if: (!this.isComplex())
};
 {
    return;
}
var pFieldNameList = this.getFieldNameList();
for(var i = 0; i < pFieldNameList.length; i++) {
    var pFieldType = this.getFieldType(pFieldNameList[i]);
    if (!pFieldType.isPointer()) {
        pFieldType.addPointIndex(false);
        pFieldType._setVideoBufferInDepth();
    }
}
_setVideoBufferInDepth();
void {
    if: (this.isPointer())
};
 {
    this.setVideoBuffer(Effect.createVideoBufferVariable());
}
if (this.isComplex() && this._containPointer()) {
    var pFieldNameList = this.getFieldNameList();
    for(var i = 0; i < pFieldNameList.length; i++) {
        var pFieldType = this.getFieldType(pFieldNameList[i]);
        pFieldType._setVideoBufferInDepth();
    }
}
inline;
_markAsUnverifiable(isUnverifiable, bool);
void {
    this: ,
    _bUnverifiable:  = true
};
_addAttrOffset(pOffset, IAFXVariableDeclInstruction);
void {
    this: ,
    _pAttrOffset:  = pOffset
};
getName();
string;
 {
    return this._sName;
}
inline;
getRealName();
string;
 {
    return this.getBaseType().getRealName();
}
getHash();
string;
 {
    if (this._sHash === "") {
        this.calcHash();
    }
    return this._sHash;
}
getStrongHash();
string;
 {
    if (this._sStrongHash === "") {
        this.calcStrongHash();
    }
    return this._sStrongHash;
}
getSize();
number;
 {
    if (this.isPointer() || this.isPointIndex()) {
        return 1;
    }
    if (this._isArray) {
        var iSize = this._pArrayElementType.getSize();
        if (this._iLength === 0xffffff || iSize === 0xffffff) {
            return 0xffffff;
        } else {
            return iSize * this._iLength;
        }
    } else {
        return this.getSubType().getSize();
    }
}
getBaseType();
IAFXTypeInstruction;
 {
    return this.getSubType().getBaseType();
}
getLength();
number;
 {
    if (!this.isNotBaseArray()) {
        this._iLength = 0;
        return 0;
    }
    if (this.isNotBaseArray() && !this._isArray) {
        this._iLength = this.getSubType().getLength();
    } else if (this._iLength === 0xffffff || this._isNeedToUpdateLength) {
        var isEval = this._pArrayIndexExpr.evaluate();
        if (isEval) {
            var iValue = this._pArrayIndexExpr.getEvalValue();
            this._iLength = isInt(iValue) ? iValue : 0xffffff;
        }
    }
    return this._iLength;
}
getPadding();
number;
 {
    return this.isPointIndex() ? this._getDownPointer().getType().getPadding() : this._iPadding;
}
getArrayElementType();
IAFXVariableTypeInstruction;
 {
    if (this._isUnverifiable()) {
        return this;
    }
    if (!this.isArray()) {
        return null;
    }
    if (isNull(this._pArrayElementType)) {
        this._pArrayElementType = new VariableTypeInstruction();
        this._pArrayElementType.pushType(this.getSubType().getArrayElementType());
        if (!isNull(this._pUsageList)) {
            for(var i = 0; i < this._pUsageList.length; i++) {
                this._pArrayElementType.addUsage(this._pUsageList[i]);
            }
        }
        this._pArrayElementType.setParent(this);
    }
    return this._pArrayElementType;
}
getTypeDecl();
IAFXTypeDeclInstruction;
 {
    if (!this.isFromTypeDecl()) {
        return null;
    }
    var eParentType = this.getParent()._getInstructionType();
    if (eParentType === EAFXInstructionTypes.k_TypeDeclInstruction) {
        return this.getParent();
    } else {
        return (this.getParent()).getTypeDecl();
    }
}
hasField(sFieldName, string);
bool;
 {
    return this._isUnverifiable() ? true : this.getSubType().hasField(sFieldName);
}
hasFieldWithSematic(sSemantic, string);
bool;
 {
    if (!this.isComplex()) {
        return false;
    }
    return this.getSubType().hasFieldWithSematic(sSemantic);
}
hasAllUniqueSemantics();
bool;
 {
    if (!this.isComplex()) {
        return false;
    }
    return this.getSubType().hasAllUniqueSemantics();
}
hasFieldWithoutSemantic();
bool;
 {
    if (!this.isComplex()) {
        return false;
    }
    return this.getSubType().hasFieldWithoutSemantic();
}
getField(sFieldName, string);
IAFXVariableDeclInstruction;
 {
    if (!this.hasField(sFieldName)) {
        return null;
    }
    if (isNull(this._pFieldDeclMap)) {
        this._pFieldDeclMap = {};
    }
    if (isDef(this._pFieldDeclMap[sFieldName])) {
        return this._pFieldDeclMap[sFieldName];
    }
    var pField = new VariableDeclInstruction();
    if (!this._isUnverifiable()) {
        var pSubField = this.getSubType().getField(sFieldName);
        var pFieldType = new VariableTypeInstruction();
        pFieldType.pushType(pSubField.getType());
        pFieldType.setPadding(pSubField.getType().getPadding());
        pField.push(pFieldType, true);
        pField.push(pSubField.getNameId(), false);
        pField.setSemantic(pSubField.getSemantic());
    } else {
        var pFieldName = new IdInstruction();
        pFieldName.setName(sFieldName);
        pFieldName.setRealName(sFieldName);
        pField.push(this, false);
        pField.push(pFieldName, true);
    }
    pField.setParent(this);
    this._pFieldDeclMap[sFieldName] = pField;
    return pField;
}
inline;
getFieldBySemantic(sSemantic, string);
IAFXVariableDeclInstruction;
 {
    if (this.hasFieldWithSematic(sSemantic)) {
        return null;
    }
    if (isNull(this._pFieldDeclBySemanticMap)) {
        this._pFieldDeclBySemanticMap = {};
    }
    if (isDef(this._pFieldDeclBySemanticMap[sSemantic])) {
        return this._pFieldDeclBySemanticMap[sSemantic];
    }
    var pField = new VariableDeclInstruction();
    var pSubField = this.getSubType().getFieldBySemantic(sSemantic);
    var pFieldType = new VariableTypeInstruction();
    pFieldType.pushType(pSubField.getType());
    pFieldType.setPadding(pSubField.getType().getPadding());
    pField.push(pFieldType, true);
    pField.push(pSubField.getNameId(), false);
    pField.setParent(this);
    this._pFieldDeclBySemanticMap[sSemantic] = pField;
    return pField;
}
getFieldType(sFieldName, string);
IAFXVariableTypeInstruction;
 {
    return this.getField(sFieldName).getType();
}
getFieldNameList();
string[];
 {
    return this.getSubType().getFieldNameList();
}
inline;
getUsageList();
string[];
 {
    return this._pUsageList;
}
inline;
getSubType();
IAFXTypeInstruction;
 {
    return this._pSubType;
}
hasUsage(sUsageName, string);
bool;
 {
    if (isNull(this._pUsageList)) {
        return false;
    }
    for(var i = 0; i < this._pUsageList.length; i++) {
        if (this._pUsageList[i] === sUsageName) {
            return true;
        }
    }
    if (!isNull(this.getSubType()) && this.getSubType()._getInstructionType() === EAFXInstructionTypes.k_VariableTypeInstruction) {
        return (this.getSubType()).hasUsage(sUsageName);
    }
    return false;
}
hasVideoBuffer();
bool;
 {
    return !isNull(this.getVideoBuffer());
}
getPointDim();
number;
 {
    return this._nPointDim || ((this.getSubType()._getInstructionType() === EAFXInstructionTypes.k_VariableTypeInstruction) ? (this.getSubType()).getPointDim() : 0);
}
getPointer();
IAFXVariableDeclInstruction;
 {
    if (!this.isFromVariableDecl() || !(this.isPointer() || this.isPointIndex()) || !this.hasVideoBuffer()) {
        return null;
    }
    if (!isNull(this._pUpPointIndex)) {
        return this._pUpPointIndex;
    }
    if (this.isPointIndex()) {
        return null;
    }
    this.initializePointers();
    return this._pUpPointIndex;
}
getVideoBuffer();
IAFXVariableDeclInstruction;
 {
    if (this.isPointIndex()) {
        return (this.getParent().getParent()).getType().getVideoBuffer();
    }
    return this._pVideoBuffer;
}
getFieldExpr(sFieldName, string);
IAFXIdExprInstruction;
 {
    if (!this.hasField(sFieldName)) {
        return null;
    }
    var pField = this.getField(sFieldName);
    var pExpr = new IdExprInstruction();
    pExpr.push(pField.getNameId(), false);
    pExpr.setType(pField.getType());
    return pExpr;
}
getFieldIfExist(sFieldName, string);
IAFXVariableDeclInstruction;
 {
    if (isNull(this._pFieldDeclMap) && isDef(this._pFieldDeclMap[sFieldName])) {
        return this._pFieldDeclMap[sFieldName];
    } else {
        return null;
    }
}
getSubVarDecls();
IAFXVariableDeclInstruction[];
 {
    if (!this.canHaveSubDecls()) {
        return null;
    }
    if (isNull(this._pSubDeclList)) {
        this.generateSubDeclList();
    }
    return this._pSubDeclList;
}
_getFullName();
string;
 {
    if (!this.isFromVariableDecl()) {
        return "Not from variable decl";
    }
    var eParentType = this.getParent()._getInstructionType();
    if (eParentType === EAFXInstructionTypes.k_VariableDeclInstruction) {
        return (this.getParent())._getFullName();
    } else {
        return (this.getParent())._getFullName();
    }
}
_getVarDeclName();
string;
 {
    if (!this.isFromVariableDecl()) {
        return "";
    }
    var eParentType = this.getParent()._getInstructionType();
    if (eParentType === EAFXInstructionTypes.k_VariableDeclInstruction) {
        return (this.getParent()).getName();
    } else {
        return (this.getParent())._getVarDeclName();
    }
}
_getTypeDeclName();
string;
 {
    if (!this.isFromVariableDecl()) {
        return "";
    }
    var eParentType = this.getParent()._getInstructionType();
    if (eParentType === EAFXInstructionTypes.k_VariableDeclInstruction) {
        return (this.getParent()).getName();
    } else {
        return (this.getParent())._getTypeDeclName();
    }
}
_getParentVarDecl();
IAFXVariableDeclInstruction;
 {
    if (!this.isFromVariableDecl()) {
        return null;
    }
    var eParentType = this.getParent()._getInstructionType();
    if (eParentType === EAFXInstructionTypes.k_VariableDeclInstruction) {
        return this.getParent();
    } else {
        return (this.getParent())._getParentVarDecl();
    }
}
_getParentContainer();
IAFXVariableDeclInstruction;
 {
    if (!this.isFromVariableDecl() || !this._isTypeOfField()) {
        return null;
    }
    var pContainerType = this._getParentVarDecl().getParent();
    if (!pContainerType.isFromVariableDecl()) {
        return null;
    }
    return pContainerType._getParentVarDecl();
}
_getMainVariable();
IAFXVariableDeclInstruction;
 {
    if (!this.isFromVariableDecl()) {
        return null;
    }
    if (this._isTypeOfField()) {
        return (this.getParent().getParent())._getMainVariable();
    } else {
        return (this._getParentVarDecl());
    }
}
_getMainPointer();
IAFXVariableDeclInstruction;
 {
    if (isNull(this._pMainPointIndex)) {
        if (isNull(this.getPointer())) {
            this._pMainPointIndex = this._getParentVarDecl();
        } else {
            this._pMainPointIndex = this._getUpPointer().getType()._getMainPointer();
        }
    }
    return this._pMainPointIndex;
}
_getUpPointer();
IAFXVariableDeclInstruction;
 {
    return this._pUpPointIndex;
}
_getDownPointer();
IAFXVariableDeclInstruction;
 {
    return this._pDownPointIndex;
}
_getAttrOffset();
IAFXVariableDeclInstruction;
 {
    return this._pAttrOffset;
}
wrap();
IAFXVariableTypeInstruction;
 {
    var pCloneType = new VariableTypeInstruction();
    pCloneType.pushType(this);
    return pCloneType;
}
clone(pRelationMap ?  : IAFXInstructionMap = {});
IAFXVariableTypeInstruction;
 {
    if (isDef(pRelationMap[this._getInstructionID()])) {
        return pRelationMap[this._getInstructionID()];
    }
    if (this._pParentInstruction === null || !isDef(pRelationMap[this._pParentInstruction._getInstructionID()]) || pRelationMap[this._pParentInstruction._getInstructionID()] === this._pParentInstruction) {
        return this;
    }
    var pClone = _super.prototype.clone.call(this, pRelationMap);
    pClone.pushType(this._pSubType.clone(pRelationMap));
    if (!isNull(this._pUsageList)) {
        for(var i = 0; i < this._pUsageList.length; i++) {
            pClone.addUsage(this._pUsageList[i]);
        }
    }
    pClone._canWrite(this._isWritable);
    pClone._canRead(this._isReadable);
    pClone._setCloneHash(this._sHash, this._sStrongHash);
    pClone.setPadding(this.getPadding());
    if (this._isArray) {
        this._setCloneArrayIndex(this._pArrayElementType.clone(pRelationMap), this._pArrayIndexExpr.clone(pRelationMap), this._iLength);
    }
    if (this._isPointer) {
        var pClonePointerList = null;
        if (!isNull(this._pPointerList)) {
            pClonePointerList = new Array(this._pPointerList.length);
            var pDownPointer = pClone._getParentVarDecl();
            for(var i = 0; i < this._pPointerList.length; i++) {
                pClonePointerList[i] = this._pPointerList[i].clone(pRelationMap);
                if (i > 0) {
                    (pClonePointerList[i - 1].getType())._setUpDownPointers(pClonePointerList[i], pDownPointer);
                    pDownPointer = pClonePointerList[i - 1];
                } else {
                    pClonePointerList[0].getType()._setUpDownPointers(null, pDownPointer);
                }
            }
            pClonePointerList[pClonePointerList.length - 1].getType()._setUpDownPointers(null, pDownPointer);
        }
        this._setClonePointeIndexes(this.getPointDim(), pClonePointerList);
    }
    if (!isNull(this._pFieldDeclMap)) {
        var sFieldName = "";
        var pCloneFieldMap = {};
        for(sFieldName in this._pFieldDeclMap) {
            pCloneFieldMap[sFieldName] = this._pFieldDeclMap[sFieldName].clone(pRelationMap);
        }
        this._setCloneFields(pCloneFieldMap);
    }
    return pClone;
}
blend(pType, IAFXVariableTypeInstruction, eMode, EAFXBlendMode);
IAFXVariableTypeInstruction;
 {
    if (this === pType) {
        return this;
    }
    if (eMode === EAFXBlendMode.k_Global) {
        return null;
    }
    if (this.isComplex() !== pType.isComplex() || (this.isNotBaseArray() !== pType.isNotBaseArray()) || (this.isPointer() !== pType.isPointer())) {
        return null;
    }
    if (this.isNotBaseArray() || this.getLength() === 0xffffff || this.getLength() !== pType.getLength()) {
        return null;
    }
    var pBlendBaseType = this.getBaseType().blend(pType.getBaseType(), eMode);
    if (isNull(pBlendBaseType)) {
        return null;
    }
    var pBlendType = new VariableTypeInstruction();
    pBlendType.pushType(pBlendBaseType);
    if (this.isNotBaseArray()) {
        var iLength = this.getLength();
        var pLengthExpr = new IntInstruction();
        pLengthExpr.setValue(iLength);
        pBlendType.addArrayIndex(pLengthExpr);
    }
    return pBlendType;
}
_setCloneHash(sHash, string, sStrongHash, string);
void {
    this: ,
    _sHash:  = sHash
};
this._sStrongHash = sStrongHash;
_setCloneArrayIndex(pElementType, IAFXVariableTypeInstruction, pIndexExpr, IAFXExprInstruction, iLength, number);
void {
    this: ,
    _isArray:  = true
};
this._pArrayElementType = pElementType;
this._pArrayIndexExpr = pIndexExpr;
this._iLength = iLength;
_setClonePointeIndexes(nDim, number, pPointerList, IAFXVariableDeclInstruction[]);
void {
    this: ,
    _isPointer:  = true
};
this._nPointDim = nDim;
this._pPointerList = pPointerList;
if (!isNull(this._pPointerList)) {
    this._pUpPointIndex = this._pPointerList[0];
}
_setCloneFields(pFieldMap, IAFXVariableDeclMap);
void {
    this: ,
    _pFieldDeclMap:  = pFieldMap
};
inline;
_setUpDownPointers(pUpPointIndex, IAFXVariableDeclInstruction, pDownPointIndex, IAFXVariableDeclInstruction);
void {
    this: ,
    _pUpPointIndex:  = pUpPointIndex
};
this._pDownPointIndex = pDownPointIndex;
calcHash();
void {
    var: sHash,
    string:  = this.getSubType().getHash()
};
if (this._isArray) {
    sHash += "[";
    var iLength = this.getLength();
    if (iLength === 0xffffff) {
        sHash += "undef";
    } else {
        sHash += iLength.toString();
    }
    sHash += "]";
}
this._sHash = sHash;
calcStrongHash();
void {
    var: sStrongHash,
    string:  = this.getSubType().getStrongHash()
};
if (this._isArray) {
    sStrongHash += "[";
    var iLength = this.getLength();
    if (iLength === 0xffffff) {
        sStrongHash += "undef";
    } else {
        sStrongHash += iLength.toString();
    }
    sStrongHash += "]";
}
if (this.isPointer()) {
    for(var i = 0; i < this.getPointDim(); i++) {
        sStrongHash = "@" + sStrongHash;
    }
}
this._sStrongHash = sStrongHash;
generateSubDeclList();
void {
    if: (!this.canHaveSubDecls())
};
 {
    return;
}
var pDeclList = [];
var i = 0;
if (!isNull(this._pAttrOffset)) {
    pDeclList.push(this._pAttrOffset);
}
if (this.isPointer()) {
    if (isNull(this._getUpPointer())) {
        this.initializePointers();
    }
    for(i = 0; i < this._pPointerList.length; i++) {
        pDeclList.push(this._pPointerList[i]);
    }
}
if (this.isComplex()) {
    var pFieldNameList = this.getFieldNameList();
    for(i = 0; i < pFieldNameList.length; i++) {
        var pField = this.getField(pFieldNameList[i]);
        var pFieldSubDeclList = pField.getSubVarDecls();
        if (!isNull(pFieldSubDeclList)) {
            for(var j = 0; j < pFieldSubDeclList.length; j++) {
                pDeclList.push(pFieldSubDeclList[j]);
            }
        }
    }
}
this._pSubDeclList = pDeclList;
inline;
canHaveSubDecls();
bool;
 {
    return this.isComplex() || this.isPointer() || !isNull(this._pAttrOffset);
}
var SystemTypeInstruction = (function (_super) {
    __extends(SystemTypeInstruction, _super);
    function SystemTypeInstruction() {
        _super.call(this);
        this._sName = "";
        this._sRealName = "";
        this._pElementType = null;
        this._iLength = 1;
        this._iSize = null;
        this._pFieldDeclMap = null;
        this._isArray = false;
        this._isWritable = true;
        this._isReadable = true;
        this._pFieldNameList = null;
        this._pWrapVariableType = null;
        this._isBuiltIn = true;
        this._sDeclString = "";
        this.inline = isBase();
        this.bool = {
            return: true
        };
        this.inline = isArray();
        this.bool = {
            return: this._isArray
        };
        this.inline = isNotBaseArray();
        this.bool = {
            return: false
        };
        this.inline = isComplex();
        this.bool = {
            return: false
        };
        this.inline = isEqual(pType, IAFXTypeInstruction);
        this.bool = {
            return: this.getHash() === pType.getHash()
        };
        this.inline = isStrongEqual(pType, IAFXTypeInstruction);
        this.bool = {
            return: this.getStrongHash() === pType.getStrongHash()
        };
        this.inline = isConst();
        this.bool = {
            return: false
        };
        this.inline = isWritable();
        this.bool = {
            return: this._isWritable
        };
        this.inline = isReadable();
        this.bool = {
            return: this._isReadable
        };
        this.inline = setName(sName, string);
        this._eInstructionType = EAFXInstructionTypes.k_SystemTypeInstruction;
        this._pWrapVariableType = new VariableTypeInstruction();
        this._pWrapVariableType.pushType(this);
    }
    SystemTypeInstruction.prototype._toDeclString = function () {
        return this._sDeclString;
    };
    SystemTypeInstruction.prototype.toFinalCode = function () {
        return this._sRealName;
    };
    SystemTypeInstruction.prototype.isBuiltIn = function () {
        return this._isBuiltIn;
    };
    SystemTypeInstruction.prototype.setBuiltIn = function (isBuiltIn) {
        this._isBuiltIn = isBuiltIn;
    };
    SystemTypeInstruction.prototype.setDeclString = function (sDecl) {
        this._sDeclString = sDecl;
    };
    SystemTypeInstruction.prototype.isSampler = function () {
        return this.getName() === "sampler" || this.getName() === "sampler2D" || this.getName() === "samplerCUBE";
    };
    SystemTypeInstruction.prototype.isSamplerCube = function () {
        return this.getName() === "samplerCUBE";
    };
    SystemTypeInstruction.prototype.isSampler2D = function () {
        return this.getName() === "sampler" || this.getName() === "sampler2D";
    };
    SystemTypeInstruction.prototype._containArray = function () {
        return false;
    };
    SystemTypeInstruction.prototype._containSampler = function () {
        return false;
    };
    SystemTypeInstruction.prototype._containPointer = function () {
        return false;
    };
    SystemTypeInstruction.prototype._containComplexType = function () {
        return false;
    };
    return SystemTypeInstruction;
})(Instruction);
exports.SystemTypeInstruction = SystemTypeInstruction;
void {
    this: ,
    _sName:  = sName
};
inline;
setRealName(sRealName, string);
void {
    this: ,
    _sRealName:  = sRealName
};
inline;
setSize(iSize, number);
void {
    this: ,
    _iSize:  = iSize
};
inline;
_canWrite(isWritable, bool);
void {
    this: ,
    _isWritable:  = isWritable
};
inline;
_canRead(isReadable, bool);
void {
    this: ,
    _isReadable:  = isReadable
};
addIndex(pType, IAFXTypeInstruction, iLength, number);
void {
    this: ,
    _pElementType:  = pType
};
this._iLength = iLength;
this._iSize = iLength * pType.getSize();
this._isArray = true;
addField(sFieldName, string, pType, IAFXTypeInstruction, isWrite ?  : bool = true, sRealFieldName ?  : string = sFieldName);
void {
    var: pField,
    IAFXVariableDeclInstruction:  = new VariableDeclInstruction()
};
var pFieldType = new VariableTypeInstruction();
var pFieldId = new IdInstruction();
pFieldType.pushType(pType);
pFieldType._canWrite(isWrite);
pFieldId.setName(sFieldName);
pFieldId.setRealName(sRealFieldName);
pField.push(pFieldType, true);
pField.push(pFieldId, true);
if (isNull(this._pFieldDeclMap)) {
    this._pFieldDeclMap = {};
}
this._pFieldDeclMap[sFieldName] = pField;
if (isNull(this._pFieldNameList)) {
    this._pFieldNameList = [];
}
this._pFieldNameList.push(sFieldName);
inline;
getName();
string;
 {
    return this._sName;
}
inline;
getRealName();
string;
 {
    return this._sRealName;
}
inline;
getHash();
string;
 {
    return this._sRealName;
}
inline;
getStrongHash();
string;
 {
    return this._sName;
}
inline;
getSize();
number;
 {
    return this._iSize;
}
inline;
getBaseType();
IAFXTypeInstruction;
 {
    return this;
}
inline;
getVariableType();
IAFXVariableTypeInstruction;
 {
    return this._pWrapVariableType;
}
inline;
getArrayElementType();
IAFXTypeInstruction;
 {
    return this._pElementType;
}
getTypeDecl();
IAFXTypeDeclInstruction;
 {
    if (this.isBuiltIn()) {
        return null;
    }
    return this.getParent();
}
inline;
getLength();
number;
 {
    return this._iLength;
}
inline;
hasField(sFieldName, string);
bool;
 {
    return isDef(this._pFieldDeclMap[sFieldName]);
}
hasFieldWithSematic(sSemantic, string);
bool;
 {
    return false;
}
hasAllUniqueSemantics();
bool;
 {
    return false;
}
hasFieldWithoutSemantic();
bool;
 {
    return false;
}
inline;
getField(sFieldName, string);
IAFXVariableDeclInstruction;
 {
    return isDef(this._pFieldDeclMap[sFieldName]) ? this._pFieldDeclMap[sFieldName] : null;
}
inline;
getFieldBySemantic(sSemantic, string);
IAFXVariableDeclInstruction;
 {
    return null;
}
inline;
getFieldType(sFieldName, string);
IAFXVariableTypeInstruction;
 {
    return isDef(this._pFieldDeclMap[sFieldName]) ? this._pFieldDeclMap[sFieldName].getType() : null;
}
inline;
getFieldNameList();
string[];
 {
    return this._pFieldNameList;
}
inline;
clone(pRelationMap ?  : IAFXInstructionMap);
SystemTypeInstruction;
 {
    return this;
}
inline;
blend(pType, IAFXTypeInstruction, eMode, EAFXBlendMode);
IAFXTypeInstruction;
 {
    if (this.isStrongEqual(pType)) {
        return this;
    }
    return null;
}
var ComplexTypeInstruction = (function (_super) {
    __extends(ComplexTypeInstruction, _super);
    function ComplexTypeInstruction() {
        _super.call(this);
        this._sName = "";
        this._sRealName = "";
        this._sHash = "";
        this._sStrongHash = "";
        this._iSize = 0;
        this._pFieldDeclMap = null;
        this._pFieldDeclList = null;
        this._pFieldNameList = null;
        this._pFieldDeclBySemanticMap = null;
        this._hasAllUniqueSemantics = true;
        this._hasFieldWithoutSemantic = false;
        this._isContainArray = false;
        this._isContainSampler = false;
        this._isContainPointer = false;
        this._isContainComplexType = false;
        this.inline = isBase();
        this.bool = {
            return: false
        };
        this.inline = isArray();
        this.bool = {
            return: false
        };
        this.inline = isNotBaseArray();
        this.bool = {
            return: false
        };
        this.inline = isComplex();
        this.bool = {
            return: true
        };
        this.inline = isEqual(pType, IAFXTypeInstruction);
        this.bool = {
            return: this.getHash() === pType.getHash()
        };
        this.inline = isStrongEqual(pType, IAFXTypeInstruction);
        this.bool = {
            return: this.getStrongHash() === pType.getStrongHash()
        };
        this.inline = isConst();
        this.bool = {
            return: false
        };
        this.inline = isWritable();
        this.bool = {
            return: true
        };
        this.inline = isReadable();
        this.bool = {
            return: true
        };
        this.inline = _containArray();
        this.bool = {
            return: this._isContainArray
        };
        this.inline = _containSampler();
        this.bool = {
            return: this._isContainSampler
        };
        this.inline = _containPointer();
        this.bool = {
            return: this._isContainPointer
        };
        this.inline = _containComplexType();
        this.bool = {
            return: this._isContainComplexType
        };
        this.inline = setName(sName, string);
        this._pInstructionList = null;
        this._eInstructionType = EAFXInstructionTypes.k_ComplexTypeInstruction;
    }
    ComplexTypeInstruction.prototype._toDeclString = function () {
        var sCode = "struct " + this._sRealName + "{";
        for(var i = 0; i < this._pFieldDeclList.length; i++) {
            sCode += "\t" + this._pFieldDeclList[i].toFinalCode() + ";\n";
        }
        sCode += "}";
        return sCode;
    };
    ComplexTypeInstruction.prototype.toFinalCode = function () {
        return this._sRealName;
    };
    ComplexTypeInstruction.prototype.isBuiltIn = function () {
        return false;
    };
    ComplexTypeInstruction.prototype.setBuiltIn = function (isBuiltIn) {
    };
    ComplexTypeInstruction.prototype.isSampler = function () {
        return false;
    };
    ComplexTypeInstruction.prototype.isSamplerCube = function () {
        return false;
    };
    ComplexTypeInstruction.prototype.isSampler2D = function () {
        return false;
    };
    return ComplexTypeInstruction;
})(Instruction);
exports.ComplexTypeInstruction = ComplexTypeInstruction;
void {
    this: ,
    _sName:  = sName
};
this._sRealName = sName;
inline;
setRealName(sRealName, string);
void {
    this: ,
    _sRealName:  = sRealName
};
inline;
setSize(iSize, number);
void {
    this: ,
    _iSize:  = iSize
};
inline;
_canWrite(isWritable, bool);
void {};
inline;
_canRead(isWritable, bool);
void {};
addField(pVariable, IAFXVariableDeclInstruction);
void {
    if: (isNull(this._pFieldDeclMap))
};
 {
    this._pFieldDeclMap = {};
    this._pFieldNameList = [];
}
if (isNull(this._pFieldDeclList)) {
    this._pFieldDeclList = [];
}
var sVarName = pVariable.getName();
this._pFieldDeclMap[sVarName] = pVariable;
if (this._iSize !== 0xffffff) {
    var iSize = pVariable.getType().getSize();
    if (iSize !== 0xffffff) {
        this._iSize += iSize;
    } else {
        this._iSize = 0xffffff;
    }
}
this._pFieldNameList.push(sVarName);
if (this._pFieldDeclList.length < this._pFieldNameList.length) {
    this._pFieldDeclList.push(pVariable);
}
var pType = pVariable.getType();
if (pType.isNotBaseArray() || pType._containArray()) {
    this._isContainArray = true;
}
if (isSamplerType(pType) || pType._containSampler()) {
    this._isContainSampler = true;
}
if (pType.isPointer() || pType._containPointer()) {
    this._isContainPointer = true;
}
if (pType.isComplex()) {
    this._isContainComplexType = true;
}
addFields(pFieldCollector, IAFXInstruction, isSetParent ?  : bool = true);
void {
    this: ,
    _pFieldDeclList:  = (pFieldCollector.getInstructions())
};
for(var i = 0; i < this._pFieldDeclList.length; i++) {
    this.addField(this._pFieldDeclList[i]);
    this._pFieldDeclList[i].setParent(this);
}
this.calculatePaddings();
inline;
getName();
string;
 {
    return this._sName;
}
inline;
getRealName();
string;
 {
    return this._sRealName;
}
getHash();
string;
 {
    if (this._sHash === "") {
        this.calcHash();
    }
    return this._sHash;
}
getStrongHash();
string;
 {
    if (this._sStrongHash === "") {
        this.calcStrongHash();
    }
    return this._sStrongHash;
}
inline;
hasField(sFieldName, string);
bool;
 {
    return isDef(this._pFieldDeclMap[sFieldName]);
}
hasFieldWithSematic(sSemantic, string);
bool;
 {
    if (isNull(this._pFieldDeclBySemanticMap)) {
        this.analyzeSemantics();
    }
    return isDef(this._pFieldDeclBySemanticMap[sSemantic]);
}
hasAllUniqueSemantics();
bool;
 {
    if (isNull(this._pFieldDeclBySemanticMap)) {
        this.analyzeSemantics();
    }
    return this._hasAllUniqueSemantics;
}
hasFieldWithoutSemantic();
bool;
 {
    if (isNull(this._pFieldDeclBySemanticMap)) {
        this.analyzeSemantics();
    }
    return this._hasFieldWithoutSemantic;
}
inline;
getField(sFieldName, string);
IAFXVariableDeclInstruction;
 {
    if (!this.hasField(sFieldName)) {
        return null;
    }
    return this._pFieldDeclMap[sFieldName];
}
getFieldBySemantic(sSemantic, string);
IAFXVariableDeclInstruction;
 {
    if (!this.hasFieldWithSematic(sSemantic)) {
        return null;
    }
    return this._pFieldDeclBySemanticMap[sSemantic];
}
inline;
getFieldType(sFieldName, string);
IAFXVariableTypeInstruction;
 {
    return isDef(this._pFieldDeclMap[sFieldName]) ? this._pFieldDeclMap[sFieldName].getType() : null;
}
inline;
getFieldNameList();
string[];
 {
    return this._pFieldNameList;
}
inline;
getSize();
number;
 {
    if (this._iSize === 0xffffff) {
        this._iSize = this._calcSize();
    }
    return this._iSize;
}
inline;
getBaseType();
IAFXTypeInstruction;
 {
    return this;
}
inline;
getArrayElementType();
IAFXTypeInstruction;
 {
    return null;
}
getTypeDecl();
IAFXTypeDeclInstruction;
 {
    return this.getParent();
}
inline;
getLength();
number;
 {
    return 0;
}
_getFieldDeclList();
IAFXVariableDeclInstruction[];
 {
    return this._pFieldDeclList;
}
inline;
clone(pRelationMap ?  : IAFXInstructionMap = {});
ComplexTypeInstruction;
 {
    if (this._pParentInstruction === null || !isDef(pRelationMap[this._pParentInstruction._getInstructionID()]) || pRelationMap[this._pParentInstruction._getInstructionID()] === this._pParentInstruction) {
        return this;
    }
    var pClone = _super.prototype.clone.call(this, pRelationMap);
    pClone._setCloneName(this._sName, this._sRealName);
    pClone._setCloneHash(this._sHash, this._sStrongHash);
    pClone._setCloneContain(this._isContainArray, this._isContainSampler);
    var pFieldDeclList = new Array(this._pFieldDeclList.length);
    var pFieldNameList = new Array(this._pFieldNameList.length);
    var pFieldDeclMap = {};
    for(var i = 0; i < this._pFieldDeclList.length; i++) {
        var pCloneVar = this._pFieldDeclList[i].clone(pRelationMap);
        var sVarName = pCloneVar.getName();
        pFieldDeclList[i] = pCloneVar;
        pFieldNameList[i] = sVarName;
        pFieldDeclMap[sVarName] = pCloneVar;
    }
    pClone._setCloneFields(pFieldDeclList, pFieldNameList, pFieldDeclMap);
    pClone.setSize(this._iSize);
    return pClone;
}
blend(pType, IAFXTypeInstruction, eMode, EAFXBlendMode);
IAFXTypeInstruction;
 {
    if (pType === this) {
        return this;
    }
    if (eMode === EAFXBlendMode.k_TypeDecl) {
        return null;
    }
    if (eMode === EAFXBlendMode.k_Uniform || eMode === EAFXBlendMode.k_Attribute) {
        if (this.hasFieldWithoutSemantic() || pType.hasFieldWithoutSemantic()) {
            return null;
        }
    }
    var pFieldList = this._pFieldDeclList;
    var pBlendType = new ComplexTypeInstruction();
    var pRelationMap = {};
    if (isNull(pFieldList)) {
 {
            logger.setSourceLocation("fx/TypeInstruction.ts", 1899);
            logger.log(this, pType);
        }
        ;
    }
    for(var i = 0; i < pFieldList.length; i++) {
        var pField = pFieldList[i];
        var pBlendField = null;
        var sFieldName = pField.getName();
        var sFieldSemantic = pField.getSemantic();
        if (eMode === EAFXBlendMode.k_Shared) {
            if (pType.hasField(sFieldName)) {
                pBlendField = pField.blend(pType.getField(sFieldName), eMode);
            } else {
                pBlendField = pField.clone(pRelationMap);
            }
        } else if (eMode === EAFXBlendMode.k_Attribute || eMode === EAFXBlendMode.k_Uniform || eMode === EAFXBlendMode.k_VertexOut) {
            if (pType.hasFieldWithSematic(sFieldSemantic)) {
                pBlendField = pField.blend(pType.getFieldBySemantic(sFieldSemantic), eMode);
            } else {
                pBlendField = pField.clone(pRelationMap);
            }
            if (!isNull(pBlendField)) {
                pBlendField.getNameId().setName(sFieldSemantic);
                pBlendField.getNameId().setRealName(sFieldSemantic);
            }
        }
        if (isNull(pBlendField)) {
            return null;
        }
        pBlendType.addField(pBlendField);
    }
    pFieldList = (pType)._getFieldDeclList();
    for(var i = 0; i < pFieldList.length; i++) {
        var pField = pFieldList[i];
        var pBlendField = null;
        var sFieldName = pField.getName();
        var sFieldSemantic = pField.getSemantic();
        if (eMode === EAFXBlendMode.k_Shared) {
            if (!this.hasField(sFieldName)) {
                pBlendField = pField.clone(pRelationMap);
            }
        } else if (eMode === EAFXBlendMode.k_Attribute || eMode === EAFXBlendMode.k_Uniform || eMode === EAFXBlendMode.k_VertexOut) {
            if (!this.hasFieldWithSematic(sFieldSemantic)) {
                pBlendField = pField.clone(pRelationMap);
                pBlendField.getNameId().setName(sFieldSemantic);
                pBlendField.getNameId().setRealName(sFieldSemantic);
            }
        }
        if (!isNull(pBlendField)) {
            pBlendType.addField(pBlendField);
        }
    }
    pBlendType.setName(this.getName());
    pBlendType.setRealName(this.getRealName());
    return pBlendType;
}
_setCloneName(sName, string, sRealName, string);
void {
    this: ,
    _sName:  = sName
};
this._sRealName = sRealName;
_setCloneHash(sHash, string, sStrongHash, string);
void {
    this: ,
    _sHash:  = sHash
};
this._sStrongHash = sStrongHash;
_setCloneContain(isContainArray, bool, isContainSampler, bool);
void {
    this: ,
    _isContainArray:  = isContainArray
};
this._isContainSampler = isContainSampler;
_setCloneFields(pFieldDeclList, IAFXVariableDeclInstruction[], pFieldNameList, string[], pFieldDeclMap, IAFXVariableDeclMap);
void {
    this: ,
    _pFieldDeclList:  = pFieldDeclList
};
this._pFieldNameList = pFieldNameList;
this._pFieldDeclMap = pFieldDeclMap;
_calcSize();
number;
 {
    var iSize = 0;
    for(var i = 0; i < this._pFieldDeclList.length; i++) {
        var iFieldSize = this._pFieldDeclList[i].getType().getSize();
        if (iFieldSize === 0xffffff) {
            iSize = 0xffffff;
            break;
        } else {
            iSize += iFieldSize;
        }
    }
    return iSize;
}
calcHash();
void {
    var: sHash,
    string:  = "{"
};
for(var i = 0; i < this._pFieldDeclList.length; i++) {
    sHash += this._pFieldDeclList[i].getType().getHash() + ";";
}
sHash += "}";
this._sHash = sHash;
calcStrongHash();
void {
    var: sStrongHash,
    string:  = "{"
};
for(var i = 0; i < this._pFieldDeclList.length; i++) {
    sStrongHash += this._pFieldDeclList[i].getType().getStrongHash() + ";";
}
sStrongHash += "}";
this._sStrongHash = sStrongHash;
analyzeSemantics();
void {
    this: ,
    _pFieldDeclBySemanticMap:  = {}
};
for(var i = 0; i < this._pFieldDeclList.length; i++) {
    var pVar = this._pFieldDeclList[i];
    var sSemantic = pVar.getSemantic();
    if (sSemantic === "") {
        this._hasFieldWithoutSemantic = true;
    }
    if (isDef(this._pFieldDeclBySemanticMap[sSemantic])) {
        this._hasAllUniqueSemantics = false;
    }
    this._pFieldDeclBySemanticMap[sSemantic] = pVar;
    this._hasFieldWithoutSemantic = this._hasFieldWithoutSemantic || pVar.getType().hasFieldWithoutSemantic();
    if (this._hasAllUniqueSemantics && pVar.getType().isComplex()) {
        this._hasAllUniqueSemantics = pVar.getType().hasAllUniqueSemantics();
    }
}
calculatePaddings();
void {
    var: iPadding,
    number:  = 0
};
for(var i = 0; i < this._pFieldDeclList.length; i++) {
    var pVarType = this._pFieldDeclList[i].getType();
    var iVarSize = pVarType.getSize();
    if (iVarSize === 0xffffff) {
        this.setError(2272, {
            typeName: this.getName()
        });
        return;
    }
    pVarType.setPadding(iPadding);
    iPadding += iVarSize;
}
var akra;
(function (akra) {
    (function (fx) {
        var ExprInstruction = (function (_super) {
            __extends(ExprInstruction, _super);
            function ExprInstruction() {
                _super.call(this);
                this._pLastEvalResult = null;
                this._eInstructionType = EAFXInstructionTypes.k_ExprInstruction;
            }
            ExprInstruction.prototype.evaluate = function () {
                return false;
            };
            ExprInstruction.prototype.simplify = function () {
                return false;
            };
            ExprInstruction.prototype.getEvalValue = function () {
                return this._pLastEvalResult;
            };
            ExprInstruction.prototype.isConst = function () {
                return false;
            };
            ExprInstruction.prototype.getType = function () {
                return _super.prototype.getType.call(this);
            };
            ExprInstruction.prototype.clone = function (pRelationMap) {
                return _super.prototype.clone.call(this, pRelationMap);
            };
            ExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
                if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
                var pInstructionList = this.getInstructions();
                if (isNull(pInstructionList)) {
                    return;
                }
                for(var i = 0; i < this._nInstructions; i++) {
                    pInstructionList[i].addUsedData(pUsedDataCollector, eUsedMode);
                }
            };
            return ExprInstruction;
        })(TypedInstruction);
        fx.ExprInstruction = ExprInstruction;        
        var IntInstruction = (function (_super) {
            __extends(IntInstruction, _super);
            function IntInstruction() {
                _super.call(this);
                this.inline = setValue(iValue, number);
                this._iValue = 0;
                this._pType = getEffectBaseType("int").getVariableType();
                this._eInstructionType = EAFXInstructionTypes.k_IntInstruction;
            }
            return IntInstruction;
        })(ExprInstruction);
        fx.IntInstruction = IntInstruction;        
        void {
            this: ,
            _iValue:  = iValue
        };
        toString();
        string;
 {
            return this._iValue;
        }
        toFinalCode();
        string;
 {
            var sCode = "";
            sCode += this._iValue.toString();
            return sCode;
        }
        evaluate();
        bool;
 {
            this._pLastEvalResult = this._iValue;
            return true;
        }
        inline;
        isConst();
        bool;
 {
            return true;
        }
        clone(pRelationMap ?  : IAFXInstructionMap);
        IAFXLiteralInstruction;
 {
            var pClonedInstruction = (_super.prototype.clone.call(this, pRelationMap));
            pClonedInstruction.setValue(this._iValue);
            return pClonedInstruction;
        }
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
var FloatInstruction = (function (_super) {
    __extends(FloatInstruction, _super);
    function FloatInstruction() {
        _super.call(this);
        this.inline = setValue(fValue, number);
        this._fValue = 0.0;
        this._pType = getEffectBaseType("float").getVariableType();
        this._eInstructionType = EAFXInstructionTypes.k_FloatInstruction;
    }
    return FloatInstruction;
})(ExprInstruction);
exports.FloatInstruction = FloatInstruction;
void {
    this: ,
    _fValue:  = fValue
};
toString();
string;
 {
    return this._fValue;
}
toFinalCode();
string;
 {
    var sCode = "";
    sCode += this._fValue.toString();
    if (this._fValue % 1 === 0) {
        sCode += ".";
    }
    return sCode;
}
evaluate();
bool;
 {
    this._pLastEvalResult = this._fValue;
    return true;
}
inline;
isConst();
bool;
 {
    return true;
}
clone(pRelationMap ?  : IAFXInstructionMap);
IAFXLiteralInstruction;
 {
    var pClonedInstruction = (_super.prototype.clone.call(this, pRelationMap));
    pClonedInstruction.setValue(this._fValue);
    return pClonedInstruction;
}
var BoolInstruction = (function (_super) {
    __extends(BoolInstruction, _super);
    function BoolInstruction() {
        _super.call(this);
        this.inline = setValue(bValue, bool);
        this._bValue = true;
        this._pType = getEffectBaseType("bool").getVariableType();
        this._eInstructionType = EAFXInstructionTypes.k_BoolInstruction;
    }
    BoolInstruction._pBoolType = null;
    return BoolInstruction;
})(ExprInstruction);
exports.BoolInstruction = BoolInstruction;
void {
    this: ,
    _bValue:  = bValue
};
toString();
string;
 {
    return this._bValue;
}
toFinalCode();
string;
 {
    if (this._bValue) {
        return "true";
    } else {
        return "false";
    }
}
evaluate();
bool;
 {
    this._pLastEvalResult = this._bValue;
    return true;
}
inline;
isConst();
bool;
 {
    return true;
}
clone(pRelationMap ?  : IAFXInstructionMap);
IAFXLiteralInstruction;
 {
    var pClonedInstruction = (_super.prototype.clone.call(this, pRelationMap));
    pClonedInstruction.setValue(this._bValue);
    return pClonedInstruction;
}
var StringInstruction = (function (_super) {
    __extends(StringInstruction, _super);
    function StringInstruction() {
        _super.call(this);
        this.inline = setValue(sValue, string);
        this._sValue = "";
        this._pType = getEffectBaseType("string").getVariableType();
        this._eInstructionType = EAFXInstructionTypes.k_StringInstruction;
    }
    StringInstruction._pStringType = null;
    return StringInstruction;
})(ExprInstruction);
exports.StringInstruction = StringInstruction;
void {
    this: ,
    _sValue:  = sValue
};
toString();
string;
 {
    return this._sValue;
}
toFinalCode();
string;
 {
    var sCode = "";
    sCode += this._sValue;
    return sCode;
}
evaluate();
bool;
 {
    this._pLastEvalResult = this._sValue;
    return true;
}
inline;
isConst();
bool;
 {
    return true;
}
clone(pRelationMap ?  : IAFXInstructionMap);
IAFXLiteralInstruction;
 {
    var pClonedInstruction = (_super.prototype.clone.call(this, pRelationMap));
    pClonedInstruction.setValue(this._sValue);
    return pClonedInstruction;
}
var IdExprInstruction = (function (_super) {
    __extends(IdExprInstruction, _super);
    function IdExprInstruction() {
        _super.call(this);
        this._pType = null;
        this._bToFinalCode = true;
        this._isInPassUnifoms = false;
        this._isInPassForeigns = false;
        this.inline = isVisible();
        this.bool = {
            return: this._pInstructionList[0].isVisible()
        };
        this._pInstructionList = [
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_IdExprInstruction;
    }
    IdExprInstruction.prototype.getType = function () {
        if (!isNull(this._pType)) {
            return this._pType;
        } else {
            var pVar = this._pInstructionList[0];
            this._pType = (pVar.getParent()).getType();
            return this._pType;
        }
    };
    IdExprInstruction.prototype.isConst = function () {
        return this.getType().isConst();
    };
    IdExprInstruction.prototype.evaluate = function () {
        if (this.getType().isForeign()) {
            var pVal = this.getType()._getParentVarDecl().getValue();
            if (!isNull(pVal)) {
                this._pLastEvalResult = pVal;
                return true;
            }
        }
        return false;
    };
    IdExprInstruction.prototype.prepareFor = function (eUsedMode) {
        if (!this.isVisible()) {
            this._bToFinalCode = false;
        }
        if (eUsedMode === EFunctionType.k_PassFunction) {
            var pVarDecl = this.getInstructions()[0].getParent();
            if (!this.getType()._isUnverifiable() && isNull(pVarDecl.getParent())) {
                if (pVarDecl.getType().isForeign()) {
                    this._isInPassForeigns = true;
                } else {
                    this._isInPassUnifoms = true;
                }
            }
        }
    };
    IdExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        if (this._bToFinalCode) {
            if (this._isInPassForeigns) {
                sCode += "foreigns[\"" + this.getInstructions()[0].toFinalCode() + "\"]";
            } else if (this._isInPassUnifoms) {
                sCode += "uniforms[\"" + this.getInstructions()[0].toFinalCode() + "\"]";
            } else {
                sCode += this.getInstructions()[0].toFinalCode();
            }
        }
        return sCode;
    };
    IdExprInstruction.prototype.clone = function (pRelationMap) {
        return _super.prototype.clone.call(this, pRelationMap);
    };
    IdExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        if (!this.getType().isFromVariableDecl()) {
            return;
        }
        var pInfo = null;
        pInfo = pUsedDataCollector[this.getType()._getInstructionID()];
        if (!isDef(pInfo)) {
            pInfo = {
                type: this.getType(),
                isRead: false,
                isWrite: false,
                numRead: 0,
                numWrite: 0,
                numUsed: 0
            };
            pUsedDataCollector[this.getType()._getInstructionID()] = pInfo;
        }
        if (eUsedMode !== EVarUsedMode.k_Write && eUsedMode !== EVarUsedMode.k_Undefined) {
            pInfo.isRead = true;
            pInfo.numRead++;
        }
        if (eUsedMode === EVarUsedMode.k_Write || eUsedMode === EVarUsedMode.k_ReadWrite) {
            pInfo.isWrite = true;
            pInfo.numWrite++;
        }
        pInfo.numUsed++;
    };
    return IdExprInstruction;
})(ExprInstruction);
exports.IdExprInstruction = IdExprInstruction;
var ArithmeticExprInstruction = (function (_super) {
    __extends(ArithmeticExprInstruction, _super);
    function ArithmeticExprInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null, 
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_ArithmeticExprInstruction;
    }
    ArithmeticExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        _super.prototype.addUsedData.call(this, pUsedDataCollector, EVarUsedMode.k_Read);
    };
    ArithmeticExprInstruction.prototype.evaluate = function () {
        var pOperands = this.getInstructions();
        var pValL = pOperands[0].evaluate() ? pOperands[0].getEvalValue() : null;
        var pValR = pOperands[1].evaluate() ? pOperands[1].getEvalValue() : null;
        if (isNull(pValL) || isNull(pValR)) {
            return false;
        }
        try  {
            switch(this.getOperator()) {
                case "+":
                    this._pLastEvalResult = pValL + pValR;
                    break;
                case "-":
                    this._pLastEvalResult = pValL - pValR;
                    break;
                case "*":
                    this._pLastEvalResult = pValL * pValR;
                    break;
                case "/":
                    this._pLastEvalResult = pValL / pValR;
                    break;
                case "%":
                    this._pLastEvalResult = pValL % pValR;
                    break;
            }
            return true;
        } catch (e) {
            return false;
        }
    };
    ArithmeticExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getInstructions()[0].toFinalCode();
        sCode += this.getOperator();
        sCode += this.getInstructions()[1].toFinalCode();
        return sCode;
    };
    return ArithmeticExprInstruction;
})(ExprInstruction);
exports.ArithmeticExprInstruction = ArithmeticExprInstruction;
var AssignmentExprInstruction = (function (_super) {
    __extends(AssignmentExprInstruction, _super);
    function AssignmentExprInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null, 
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_AssignmentExprInstruction;
    }
    AssignmentExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getInstructions()[0].toFinalCode();
        sCode += this.getOperator();
        sCode += this.getInstructions()[1].toFinalCode();
        return sCode;
    };
    AssignmentExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var sOperator = this.getOperator();
        var pSubExprLeft = this.getInstructions()[0];
        var pSubExprRight = this.getInstructions()[1];
        if (eUsedMode === EVarUsedMode.k_Read || sOperator !== "=") {
            pSubExprLeft.addUsedData(pUsedDataCollector, EVarUsedMode.k_ReadWrite);
        } else {
            pSubExprLeft.addUsedData(pUsedDataCollector, EVarUsedMode.k_Write);
        }
        pSubExprRight.addUsedData(pUsedDataCollector, EVarUsedMode.k_Read);
    };
    return AssignmentExprInstruction;
})(ExprInstruction);
exports.AssignmentExprInstruction = AssignmentExprInstruction;
var RelationalExprInstruction = (function (_super) {
    __extends(RelationalExprInstruction, _super);
    function RelationalExprInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null, 
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_RelationalExprInstruction;
    }
    RelationalExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getInstructions()[0].toFinalCode();
        sCode += this.getOperator();
        sCode += this.getInstructions()[1].toFinalCode();
        return sCode;
    };
    RelationalExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        _super.prototype.addUsedData.call(this, pUsedDataCollector, EVarUsedMode.k_Read);
    };
    return RelationalExprInstruction;
})(ExprInstruction);
exports.RelationalExprInstruction = RelationalExprInstruction;
var LogicalExprInstruction = (function (_super) {
    __extends(LogicalExprInstruction, _super);
    function LogicalExprInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null, 
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_LogicalExprInstruction;
    }
    LogicalExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getInstructions()[0].toFinalCode();
        sCode += this.getOperator();
        sCode += this.getInstructions()[1].toFinalCode();
        return sCode;
    };
    LogicalExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        _super.prototype.addUsedData.call(this, pUsedDataCollector, EVarUsedMode.k_Read);
    };
    return LogicalExprInstruction;
})(ExprInstruction);
exports.LogicalExprInstruction = LogicalExprInstruction;
var ConditionalExprInstruction = (function (_super) {
    __extends(ConditionalExprInstruction, _super);
    function ConditionalExprInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null, 
            null, 
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_ConditionalExprInstruction;
    }
    ConditionalExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getInstructions()[0].toFinalCode();
        sCode += "?";
        sCode += this.getInstructions()[1].toFinalCode();
        sCode += ":";
        sCode += this.getInstructions()[2].toFinalCode();
        return sCode;
    };
    ConditionalExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        _super.prototype.addUsedData.call(this, pUsedDataCollector, EVarUsedMode.k_Read);
    };
    return ConditionalExprInstruction;
})(ExprInstruction);
exports.ConditionalExprInstruction = ConditionalExprInstruction;
var CastExprInstruction = (function (_super) {
    __extends(CastExprInstruction, _super);
    function CastExprInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null, 
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_CastExprInstruction;
    }
    CastExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getInstructions()[0].toFinalCode();
        sCode += "(";
        sCode += this.getInstructions()[1].toFinalCode();
        sCode += ")";
        return sCode;
    };
    CastExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var pSubExpr = this.getInstructions()[1];
        pSubExpr.addUsedData(pUsedDataCollector, EVarUsedMode.k_Read);
    };
    return CastExprInstruction;
})(ExprInstruction);
exports.CastExprInstruction = CastExprInstruction;
var UnaryExprInstruction = (function (_super) {
    __extends(UnaryExprInstruction, _super);
    function UnaryExprInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_UnaryExprInstruction;
    }
    UnaryExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getOperator();
        sCode += this.getInstructions()[0].toFinalCode();
        return sCode;
    };
    UnaryExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        if (this.getOperator() === "++" || this.getOperator() === "--") {
            (this.getInstructions()[0]).addUsedData(pUsedDataCollector, EVarUsedMode.k_ReadWrite);
        } else {
            (this.getInstructions()[0]).addUsedData(pUsedDataCollector, EVarUsedMode.k_Read);
        }
    };
    return UnaryExprInstruction;
})(ExprInstruction);
exports.UnaryExprInstruction = UnaryExprInstruction;
var PostfixIndexInstruction = (function (_super) {
    __extends(PostfixIndexInstruction, _super);
    function PostfixIndexInstruction() {
        _super.call(this);
        this._pSamplerArrayDecl = null;
        this._pInstructionList = [
            null, 
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_PostfixIndexInstruction;
    }
    PostfixIndexInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        if (!isNull(this._pSamplerArrayDecl) && this._pSamplerArrayDecl.isDefinedByZero()) {
            sCode += this.getInstructions()[0].toFinalCode();
        } else {
            sCode += this.getInstructions()[0].toFinalCode();
            if (!(this.getInstructions()[0]).getType()._isCollapsed()) {
                sCode += "[" + this.getInstructions()[1].toFinalCode() + "]";
            }
        }
        return sCode;
    };
    PostfixIndexInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var pSubExpr = this.getInstructions()[0];
        var pIndex = this.getInstructions()[1];
        pSubExpr.addUsedData(pUsedDataCollector, eUsedMode);
        pIndex.addUsedData(pUsedDataCollector, EVarUsedMode.k_Read);
        if (pSubExpr.getType().isFromVariableDecl() && pSubExpr.getType().isSampler()) {
            this._pSamplerArrayDecl = pSubExpr.getType()._getParentVarDecl();
        }
    };
    return PostfixIndexInstruction;
})(ExprInstruction);
exports.PostfixIndexInstruction = PostfixIndexInstruction;
var PostfixPointInstruction = (function (_super) {
    __extends(PostfixPointInstruction, _super);
    function PostfixPointInstruction() {
        _super.call(this);
        this._bToFinalFirst = true;
        this._bToFinalSecond = true;
        this._pInstructionList = [
            null, 
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_PostfixPointInstruction;
    }
    PostfixPointInstruction.prototype.prepareFor = function (eUsedMode) {
        if (!this.getInstructions()[0].isVisible()) {
            this._bToFinalFirst = false;
        }
        if (!this.getInstructions()[1].isVisible()) {
            this._bToFinalSecond = false;
        }
        this.getInstructions()[0].prepareFor(eUsedMode);
        this.getInstructions()[1].prepareFor(eUsedMode);
    };
    PostfixPointInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this._bToFinalFirst ? this.getInstructions()[0].toFinalCode() : "";
        sCode += this._bToFinalFirst ? "." : "";
        sCode += this._bToFinalSecond ? this.getInstructions()[1].toFinalCode() : "";
        return sCode;
    };
    PostfixPointInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var pSubExpr = this.getInstructions()[0];
        var pPoint = this.getInstructions()[1];
        pSubExpr.addUsedData(pUsedDataCollector, EVarUsedMode.k_Undefined);
        pPoint.addUsedData(pUsedDataCollector, eUsedMode);
    };
    return PostfixPointInstruction;
})(ExprInstruction);
exports.PostfixPointInstruction = PostfixPointInstruction;
var PostfixArithmeticInstruction = (function (_super) {
    __extends(PostfixArithmeticInstruction, _super);
    function PostfixArithmeticInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_PostfixArithmeticInstruction;
    }
    PostfixArithmeticInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getInstructions()[0].toFinalCode();
        sCode += this.getOperator();
        return sCode;
    };
    PostfixArithmeticInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var pSubExpr = this.getInstructions()[0];
        pSubExpr.addUsedData(pUsedDataCollector, EVarUsedMode.k_ReadWrite);
    };
    return PostfixArithmeticInstruction;
})(ExprInstruction);
exports.PostfixArithmeticInstruction = PostfixArithmeticInstruction;
var PrimaryExprInstruction = (function (_super) {
    __extends(PrimaryExprInstruction, _super);
    function PrimaryExprInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_PrimaryExprInstruction;
    }
    PrimaryExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getInstructions()[0].toFinalCode();
        return sCode;
    };
    PrimaryExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var pPointerType = this.getType();
        var pInfo = pUsedDataCollector[pPointerType._getInstructionID()];
        if (!isDef(pInfo)) {
            pInfo = {
                type: pPointerType,
                isRead: false,
                isWrite: false,
                numRead: 0,
                numWrite: 0,
                numUsed: 0
            };
            pUsedDataCollector[pPointerType._getInstructionID()] = pInfo;
        }
        if (eUsedMode === EVarUsedMode.k_Read) {
            pInfo.isRead = true;
            pInfo.numRead++;
        } else if (eUsedMode === EVarUsedMode.k_Write) {
            pInfo.isWrite = true;
            pInfo.numWrite++;
        } else if (eUsedMode === EVarUsedMode.k_ReadWrite) {
            pInfo.isRead = true;
            pInfo.isWrite = true;
            pInfo.numRead++;
            pInfo.numWrite++;
        }
        pInfo.numUsed++;
    };
    return PrimaryExprInstruction;
})(ExprInstruction);
exports.PrimaryExprInstruction = PrimaryExprInstruction;
var ComplexExprInstruction = (function (_super) {
    __extends(ComplexExprInstruction, _super);
    function ComplexExprInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_ComplexExprInstruction;
    }
    ComplexExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += "(" + this.getInstructions()[0].toFinalCode() + ")";
        return sCode;
    };
    return ComplexExprInstruction;
})(ExprInstruction);
exports.ComplexExprInstruction = ComplexExprInstruction;
var FunctionCallInstruction = (function (_super) {
    __extends(FunctionCallInstruction, _super);
    function FunctionCallInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_FunctionCallInstruction;
    }
    FunctionCallInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getInstructions()[0].toFinalCode();
        sCode += "(";
        for(var i = 1; i < this._nInstructions; i++) {
            sCode += this.getInstructions()[i].toFinalCode();
            if (i !== this._nInstructions - 1) {
                sCode += ",";
            }
        }
        sCode += ")";
        return sCode;
    };
    FunctionCallInstruction.prototype.getFunction = function () {
        return (this._pInstructionList[0]).getType().getParent().getParent();
    };
    FunctionCallInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var pExprList = this.getInstructions();
        var pFunction = this.getFunction();
        var pArguments = pFunction.getArguments();
        pExprList[0].addUsedData(pUsedDataCollector, eUsedMode);
        for(var i = 0; i < pArguments.length; i++) {
            if (pArguments[i].getType().hasUsage("out")) {
                pExprList[i + 1].addUsedData(pUsedDataCollector, EVarUsedMode.k_Write);
            } else if (pArguments[i].getType().hasUsage("inout")) {
                pExprList[i + 1].addUsedData(pUsedDataCollector, EVarUsedMode.k_ReadWrite);
            } else {
                pExprList[i + 1].addUsedData(pUsedDataCollector, EVarUsedMode.k_Read);
            }
        }
    };
    return FunctionCallInstruction;
})(ExprInstruction);
exports.FunctionCallInstruction = FunctionCallInstruction;
var SystemCallInstruction = (function (_super) {
    __extends(SystemCallInstruction, _super);
    function SystemCallInstruction() {
        _super.call(this);
        this._pSystemFunction = null;
        this._pSamplerDecl = null;
        this._pInstructionList = null;
        this._eInstructionType = EAFXInstructionTypes.k_SystemCallInstruction;
    }
    SystemCallInstruction.prototype.toFinalCode = function () {
        if (!isNull(this._pSamplerDecl) && this._pSamplerDecl.isDefinedByZero()) {
            return "vec4(0.)";
        }
        var sCode = "";
        for(var i = 0; i < this.getInstructions().length; i++) {
            sCode += this.getInstructions()[i].toFinalCode();
        }
        return sCode;
    };
    SystemCallInstruction.prototype.setSystemCallFunction = function (pFunction) {
        this._pSystemFunction = pFunction;
        this.setType(pFunction.getType());
    };
    SystemCallInstruction.prototype.setInstructions = function (pInstructionList) {
        this._pInstructionList = pInstructionList;
        this._nInstructions = pInstructionList.length;
        for(var i = 0; i < pInstructionList.length; i++) {
            pInstructionList[i].setParent(this);
        }
    };
    SystemCallInstruction.prototype.fillByArguments = function (pArguments) {
        this.setInstructions(this._pSystemFunction.closeArguments(pArguments));
    };
    SystemCallInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var pInstructionList = this.getInstructions();
        for(var i = 0; i < this._nInstructions; i++) {
            if (pInstructionList[i]._getInstructionType() !== EAFXInstructionTypes.k_SimpleInstruction) {
                pInstructionList[i].addUsedData(pUsedDataCollector, EVarUsedMode.k_Read);
                if ((pInstructionList[i]).getType().isSampler()) {
                    this._pSamplerDecl = (pInstructionList[i]).getType()._getParentVarDecl();
                }
            }
        }
    };
    SystemCallInstruction.prototype.clone = function (pRelationMap) {
        var pClone = _super.prototype.clone.call(this, pRelationMap);
        pClone.setSystemCallFunction(this._pSystemFunction);
        return pClone;
    };
    return SystemCallInstruction;
})(ExprInstruction);
exports.SystemCallInstruction = SystemCallInstruction;
var ConstructorCallInstruction = (function (_super) {
    __extends(ConstructorCallInstruction, _super);
    function ConstructorCallInstruction() {
        _super.call(this);
        this._pInstructionList = [
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_ConstructorCallInstruction;
    }
    ConstructorCallInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        sCode += this.getInstructions()[0].toFinalCode();
        sCode += "(";
        for(var i = 1; i < this._nInstructions; i++) {
            sCode += this.getInstructions()[i].toFinalCode();
            if (i !== this._nInstructions - 1) {
                sCode += ",";
            }
        }
        sCode += ")";
        return sCode;
    };
    ConstructorCallInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var pInstructionList = this.getInstructions();
        for(var i = 1; i < this._nInstructions; i++) {
            pInstructionList[i].addUsedData(pUsedDataCollector, EVarUsedMode.k_Read);
        }
    };
    return ConstructorCallInstruction;
})(ExprInstruction);
exports.ConstructorCallInstruction = ConstructorCallInstruction;
var CompileExprInstruction = (function (_super) {
    __extends(CompileExprInstruction, _super);
    function CompileExprInstruction() {
        _super.call(this);
        this.inline = getFunction();
        this.IAFXFunctionDeclInstruction = {
            return: this._pInstructionList[0].getParent().getParent()
        };
        this._pInstructionList = [
            null
        ];
        this._eInstructionType = EAFXInstructionTypes.k_CompileExprInstruction;
    }
    return CompileExprInstruction;
})(ExprInstruction);
exports.CompileExprInstruction = CompileExprInstruction;
var MemExprInstruction = (function (_super) {
    __extends(MemExprInstruction, _super);
    function MemExprInstruction() {
        _super.call(this);
        this._pBuffer = null;
        this._pInstructionList = null;
        this._eInstructionType = EAFXInstructionTypes.k_MemExprInstruction;
    }
    MemExprInstruction.prototype.getBuffer = function () {
        return this._pBuffer;
    };
    MemExprInstruction.prototype.setBuffer = function (pBuffer) {
        this._pBuffer = pBuffer;
        this.setType(pBuffer.getType());
    };
    MemExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var pBufferType = this.getBuffer().getType();
        var pInfo = pUsedDataCollector[pBufferType._getInstructionID()];
        if (!isDef(pInfo)) {
            pInfo = {
                type: pBufferType,
                isRead: false,
                isWrite: false,
                numRead: 0,
                numWrite: 0,
                numUsed: 0
            };
            pUsedDataCollector[pBufferType._getInstructionID()] = pInfo;
        }
        if (eUsedMode !== EVarUsedMode.k_Undefined) {
            pInfo.isRead = true;
            pInfo.numRead++;
        }
        pInfo.numUsed++;
    };
    return MemExprInstruction;
})(ExprInstruction);
exports.MemExprInstruction = MemExprInstruction;
var InitExprInstruction = (function (_super) {
    __extends(InitExprInstruction, _super);
    function InitExprInstruction() {
        _super.call(this);
        this._pConstructorType = null;
        this._pInstructionList = [];
        this._eInstructionType = EAFXInstructionTypes.k_InitExprInstruction;
    }
    InitExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        if (!isNull(this._pConstructorType)) {
            sCode += this._pConstructorType.toFinalCode();
        }
        sCode += "(";
        for(var i = 0; i < this._nInstructions; i++) {
            sCode += this.getInstructions()[i].toFinalCode();
            if (i !== this._nInstructions - 1) {
                sCode += ",";
            }
        }
        sCode += ")";
        return sCode;
    };
    InitExprInstruction.prototype.optimizeForVariableType = function (pType) {
        if ((pType.isNotBaseArray() && pType._getScope() === 0) || (pType.isArray() && this._nInstructions > 1)) {
            if (pType.getLength() === 0xffffff || this._nInstructions !== pType.getLength()) {
                return false;
            }
            var pArrayElementType = pType.getArrayElementType();
            var pTestedInstruction = null;
            var isOk = false;
            for(var i = 0; i < this._nInstructions; i++) {
                pTestedInstruction = (this.getInstructions()[i]);
                if (pTestedInstruction._getInstructionType() === EAFXInstructionTypes.k_InitExprInstruction) {
                    isOk = (pTestedInstruction).optimizeForVariableType(pArrayElementType);
                    if (!isOk) {
                        return false;
                    }
                } else {
                    if (isSamplerType(pArrayElementType)) {
                        if (pTestedInstruction._getInstructionType() !== EAFXInstructionTypes.k_SamplerStateBlockInstruction) {
                            return false;
                        }
                    } else {
                        isOk = pTestedInstruction.getType().isEqual(pArrayElementType);
                        if (!isOk) {
                            return false;
                        }
                    }
                }
            }
            this._pConstructorType = pType.getBaseType();
            return true;
        } else {
            var pFirstInstruction = this.getInstructions()[0];
            if (this._nInstructions === 1 && pFirstInstruction._getInstructionType() !== EAFXInstructionTypes.k_InitExprInstruction) {
                if (isSamplerType(pType)) {
                    if (pFirstInstruction._getInstructionType() === EAFXInstructionTypes.k_SamplerStateBlockInstruction) {
                        return true;
                    } else {
                        return false;
                    }
                }
                if (pFirstInstruction.getType().isEqual(pType)) {
                    return true;
                } else {
                    return false;
                }
            }
            var pInstructionList = this.getInstructions();
            var pFieldNameList = pType.getFieldNameList();
            for(var i = 0; i < pInstructionList.length; i++) {
                var pFieldType = pType.getFieldType(pFieldNameList[i]);
                if (pInstructionList[i].optimizeForVariableType(pFieldType)) {
                    ;
                }
            }
            this._pConstructorType = pType.getBaseType();
            return true;
        }
    };
    return InitExprInstruction;
})(ExprInstruction);
exports.InitExprInstruction = InitExprInstruction;
var SamplerStateBlockInstruction = (function (_super) {
    __extends(SamplerStateBlockInstruction, _super);
    function SamplerStateBlockInstruction() {
        _super.call(this);
        this._pTexture = null;
        this._pSamplerParams = null;
        this.inline = getTexture();
        this.IAFXVariableDeclInstruction = {
            return: this._pTexture
        };
        this._pInstructionList = null;
        this._eInstructionType = EAFXInstructionTypes.k_SamplerStateBlockInstruction;
    }
    SamplerStateBlockInstruction.prototype.addState = function (sStateType, sStateValue) {
        if (isNull(this._pSamplerParams)) {
            this._pSamplerParams = {};
        }
        this._pSamplerParams[sStateType] = sStateValue;
        return;
    };
    SamplerStateBlockInstruction.prototype.setTexture = function (pTexture) {
        this._pTexture = pTexture;
    };
    return SamplerStateBlockInstruction;
})(ExprInstruction);
exports.SamplerStateBlockInstruction = SamplerStateBlockInstruction;
var ExtractExprInstruction = (function (_super) {
    __extends(ExtractExprInstruction, _super);
    function ExtractExprInstruction() {
        _super.call(this);
        this._eExtractExprType = 0;
        this._pPointer = null;
        this._pBuffer = null;
        this._pOffsetVar = null;
        this._sPaddingExpr = "";
        this._sExtractFunction = "";
        this._bNeedSecondBracket = false;
        this._pInstructionList = null;
        this._eInstructionType = EAFXInstructionTypes.k_ExtractExprInstruction;
    }
    ExtractExprInstruction.prototype.getExtractFunction = function () {
        var pFunction = null;
        switch(this._eExtractExprType) {
            case EExtractExprType.k_Header:
                pFunction = Effect.findSystemFunction("extractHeader", null);
                break;
            case EExtractExprType.k_Float:
            case EExtractExprType.k_Int:
            case EExtractExprType.k_Bool:
                pFunction = Effect.findSystemFunction("extractFloat", null);
                break;
            case EExtractExprType.k_Float2:
            case EExtractExprType.k_Int2:
            case EExtractExprType.k_Bool2:
                pFunction = Effect.findSystemFunction("extractFloat2", null);
                break;
            case EExtractExprType.k_Float3:
            case EExtractExprType.k_Int3:
            case EExtractExprType.k_Bool3:
                pFunction = Effect.findSystemFunction("extractFloat3", null);
                break;
            case EExtractExprType.k_Float4:
            case EExtractExprType.k_Int4:
            case EExtractExprType.k_Bool4:
                pFunction = Effect.findSystemFunction("extractFloat4", null);
                break;
            case EExtractExprType.k_Float4x4:
                pFunction = Effect.findSystemFunction("extractFloat4x4", null);
                break;
        }
        return pFunction;
    };
    ExtractExprInstruction.prototype.initExtractExpr = function (pExtractType, pPointer, pBuffer, sPaddingExpr, pOffsetVar) {
        this._pPointer = pPointer;
        this._pBuffer = pBuffer;
        this._sPaddingExpr = sPaddingExpr;
        this._pOffsetVar = pOffsetVar;
        this.setType(pExtractType);
        if (pExtractType.isEqual(Effect.getSystemType("float"))) {
            this._eExtractExprType = EExtractExprType.k_Float;
            this._sExtractFunction += "A_extractFloat(";
        } else if (pExtractType.isEqual(Effect.getSystemType("ptr"))) {
            this._eExtractExprType = EExtractExprType.k_Float;
            this._sExtractFunction += "A_extractFloat(";
        } else if (pExtractType.isEqual(Effect.getSystemType("video_buffer_header"))) {
            this._eExtractExprType = EExtractExprType.k_Header;
            this._sExtractFunction += "A_extractTextureHeader(";
        } else if (pExtractType.isEqual(Effect.getSystemType("bool"))) {
            this._eExtractExprType = EExtractExprType.k_Bool;
            this._sExtractFunction += "bool(A_extractFloat(";
            this._bNeedSecondBracket = true;
        } else if (pExtractType.isEqual(Effect.getSystemType("int"))) {
            this._eExtractExprType = EExtractExprType.k_Int;
            this._sExtractFunction += ("int(A_extractFloat(");
            this._bNeedSecondBracket = true;
        } else if (pExtractType.isEqual(Effect.getSystemType("float2"))) {
            this._eExtractExprType = EExtractExprType.k_Float2;
            this._sExtractFunction += ("A_extractVec2(");
        } else if (pExtractType.isEqual(Effect.getSystemType("float3"))) {
            this._eExtractExprType = EExtractExprType.k_Float3;
            this._sExtractFunction += ("A_extractVec3(");
        } else if (pExtractType.isEqual(Effect.getSystemType("float4"))) {
            this._eExtractExprType = EExtractExprType.k_Float4;
            this._sExtractFunction += ("A_extractVec4(");
        } else if (pExtractType.isEqual(Effect.getSystemType("int2"))) {
            this._eExtractExprType = EExtractExprType.k_Int2;
            this._sExtractFunction += ("ivec2(A_extractVec2(");
            this._bNeedSecondBracket = true;
        } else if (pExtractType.isEqual(Effect.getSystemType("int3"))) {
            this._eExtractExprType = EExtractExprType.k_Int3;
            this._sExtractFunction += ("ivec3(A_extractVec3(");
            this._bNeedSecondBracket = true;
        } else if (pExtractType.isEqual(Effect.getSystemType("int4"))) {
            this._eExtractExprType = EExtractExprType.k_Int4;
            this._sExtractFunction += ("ivec4(A_extractVec4(");
            this._bNeedSecondBracket = true;
        } else if (pExtractType.isEqual(Effect.getSystemType("bool2"))) {
            this._eExtractExprType = EExtractExprType.k_Bool2;
            this._sExtractFunction += ("bvec2(A_extractVec2(");
            this._bNeedSecondBracket = true;
        } else if (pExtractType.isEqual(Effect.getSystemType("bool3"))) {
            this._eExtractExprType = EExtractExprType.k_Bool3;
            this._sExtractFunction += ("bvec3(A_extractVec3(");
            this._bNeedSecondBracket = true;
        } else if (pExtractType.isEqual(Effect.getSystemType("bool4"))) {
            this._eExtractExprType = EExtractExprType.k_Bool4;
            this._sExtractFunction += ("bvec4(A_extractVec4(");
            this._bNeedSecondBracket = true;
        } else if (pExtractType.isEqual(Effect.getSystemType("float4x4"))) {
            this._eExtractExprType = EExtractExprType.k_Float4x4;
            this._sExtractFunction += ("A_extractMat4(");
        } else {
            this.setError(2273, {
                typeName: pExtractType.getHash()
            });
        }
    };
    ExtractExprInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
        if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
        var pPointerType = this._pPointer.getType();
        var pBufferType = this._pBuffer.getType();
        var pInfo = pUsedDataCollector[pPointerType._getInstructionID()];
        if (!isDef(pInfo)) {
            pInfo = {
                type: pPointerType,
                isRead: false,
                isWrite: false,
                numRead: 0,
                numWrite: 0,
                numUsed: 0
            };
            pUsedDataCollector[pPointerType._getInstructionID()] = pInfo;
        }
        pInfo.isRead = true;
        pInfo.numRead++;
        pInfo.numUsed++;
        pInfo = pUsedDataCollector[pBufferType._getInstructionID()];
        if (!isDef(pInfo)) {
            pInfo = {
                type: pBufferType,
                isRead: false,
                isWrite: false,
                numRead: 0,
                numWrite: 0,
                numUsed: 0
            };
            pUsedDataCollector[pBufferType._getInstructionID()] = pInfo;
        }
        pInfo.isRead = true;
        pInfo.numRead++;
        pInfo.numUsed++;
    };
    ExtractExprInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        if (this._pBuffer.isDefinedByZero()) {
            switch(this._eExtractExprType) {
                case EExtractExprType.k_Header:
                    sCode = "A_TextureHeader(0.,0.,0.,0.)";
                    break;
                case EExtractExprType.k_Float:
                    sCode = "0.";
                    break;
                case EExtractExprType.k_Int:
                    sCode = "0";
                    break;
                case EExtractExprType.k_Bool:
                    sCode = "false";
                    break;
                case EExtractExprType.k_Float2:
                    sCode = "vec2(0.)";
                    break;
                case EExtractExprType.k_Int2:
                    sCode = "ivec2(0)";
                    break;
                case EExtractExprType.k_Bool2:
                    sCode = "bvec2(false)";
                    break;
                case EExtractExprType.k_Float3:
                    sCode = "vec3(0.)";
                    break;
                case EExtractExprType.k_Int3:
                    sCode = "ivec3(0)";
                    break;
                case EExtractExprType.k_Bool3:
                    sCode = "bvec3(false)";
                    break;
                case EExtractExprType.k_Float4:
                    sCode = "vec4(0.)";
                    break;
                case EExtractExprType.k_Int4:
                    sCode = "ivec4(0)";
                    break;
                case EExtractExprType.k_Bool4:
                    sCode = "bvec4(false)";
                    break;
                case EExtractExprType.k_Float4x4:
                    sCode = "mat4(0.)";
                    break;
            }
        } else {
            sCode = this._sExtractFunction;
            sCode += this._pBuffer._getVideoBufferSampler().getNameId().toFinalCode();
            sCode += "," + this._pBuffer._getVideoBufferHeader().getNameId().toFinalCode();
            if (this._eExtractExprType !== EExtractExprType.k_Header) {
                sCode += "," + this._pPointer.getNameId().toFinalCode() + this._sPaddingExpr;
                if (!isNull(this._pOffsetVar)) {
                    sCode += "+" + this._pOffsetVar.getNameId().toFinalCode();
                }
            }
            sCode += ")";
            if (this._bNeedSecondBracket) {
                sCode += ")";
            }
        }
        return sCode;
    };
    ExtractExprInstruction.prototype.clone = function (pRelationMap) {
        var pClone = _super.prototype.clone.call(this, pRelationMap);
        pClone._setCloneParams(this._pPointer.clone(pRelationMap), this._pBuffer, this._eExtractExprType, this._sPaddingExpr, this._sExtractFunction, this._bNeedSecondBracket);
        return pClone;
    };
    ExtractExprInstruction.prototype._setCloneParams = function (pPointer, pBuffer, eExtractExprType, sPaddingExpr, sExtractFunction, bNeedSecondBracket) {
        this._pPointer = pPointer;
        this._pBuffer = pBuffer;
        this._eExtractExprType = eExtractExprType;
        this._sPaddingExpr = sPaddingExpr;
        this._sExtractFunction = sExtractFunction;
        this._bNeedSecondBracket = bNeedSecondBracket;
    };
    return ExtractExprInstruction;
})(ExprInstruction);
exports.ExtractExprInstruction = ExtractExprInstruction;
var akra;
(function (akra) {
    (function (fx) {
        var VariableDeclInstruction = (function (_super) {
            __extends(VariableDeclInstruction, _super);
            function VariableDeclInstruction() {
                _super.call(this);
                this._isVideoBuffer = null;
                this._pVideoBufferSampler = null;
                this._pVideoBufferHeader = null;
                this._pFullNameExpr = null;
                this._bDefineByZero = false;
                this._pSubDeclList = null;
                this._bShaderOutput = false;
                this._pAttrOffset = null;
                this._pAttrExtractionBlock = null;
                this._pValue = null;
                this._bLockInitializer = false;
                this.inline = hasInitializer();
                this.bool = {
                    return: this._nInstructions === 3 && !isNull(this.getInitializeExpr())
                };
                this.inline = getInitializeExpr();
                this.IAFXInitExprInstruction = {
                    return: this.getInstructions()[2]
                };
                this.inline = lockInitializer();
                this._pInstructionList = [
                    null, 
                    null, 
                    null
                ];
                this._eInstructionType = EAFXInstructionTypes.k_VariableDeclInstruction;
            }
            return VariableDeclInstruction;
        })(DeclInstruction);
        fx.VariableDeclInstruction = VariableDeclInstruction;        
        void {
            this: ,
            _bLockInitializer:  = true
        };
        inline;
        unlockInitializer();
        void {
            this: ,
            _bLockInitializer:  = false
        };
        getDefaultValue();
        any;
 {
            return null;
        }
        getValue();
        any;
 {
            return this._pValue;
        }
        setValue(pValue, any);
        any;
 {
            this._pValue = pValue;
            if (this.getType().isForeign()) {
                this.setRealName(pValue);
            }
        }
        inline;
        getType();
        IAFXVariableTypeInstruction;
 {
            return this._pInstructionList[0];
        }
        inline;
        setType(pType, IAFXVariableTypeInstruction);
        void {
            this: ,
            _pInstructionList: [
                0
            ] = pType,
            pType: ,
            setParent: (this)
        };
        if (this._nInstructions === 0) {
            this._nInstructions = 1;
        }
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
setName(sName, string);
void {
    var: pName,
    IAFXIdInstruction:  = new IdInstruction(),
    pName: ,
    setName: (sName),
    pName: ,
    setParent: (this)
};
this._pInstructionList[1] = pName;
if (this._nInstructions < 2) {
    this._nInstructions = 2;
}
setRealName(sRealName, string);
void {
    this: ,
    getNameId: .setRealName(sRealName)
};
setVideoBufferRealName(sSampler, string, sHeader, string);
void {
    if: (!this.isVideoBuffer())
};
 {
    return;
}
this._getVideoBufferSampler().setRealName(sSampler);
this._getVideoBufferHeader().setRealName(sHeader);
inline;
getName();
string;
 {
    return (this._pInstructionList[1]).getName();
}
inline;
getRealName();
string;
 {
    return (this._pInstructionList[1]).getRealName();
}
inline;
getNameId();
IAFXIdInstruction;
 {
    return this._pInstructionList[1];
}
inline;
isUniform();
bool;
 {
    return this.getType().hasUsage("uniform");
}
isField();
bool;
 {
    if (isNull(this.getParent())) {
        return false;
    }
    var eParentType = this.getParent()._getInstructionType();
    if (eParentType === EAFXInstructionTypes.k_VariableTypeInstruction || eParentType === EAFXInstructionTypes.k_ComplexTypeInstruction || eParentType === EAFXInstructionTypes.k_SystemTypeInstruction) {
        return true;
    }
    return false;
}
inline;
isPointer();
bool;
 {
    return this.getType().isPointer();
}
isVideoBuffer();
bool;
 {
    if (isNull(this._isVideoBuffer)) {
        this._isVideoBuffer = this.getType().isStrongEqual(getEffectBaseType("video_buffer"));
    }
    return this._isVideoBuffer;
}
inline;
isSampler();
bool;
 {
    return this.getType().isSampler();
}
inline;
getSubVarDecls();
IAFXVariableDeclInstruction[];
 {
    return this.getType().getSubVarDecls();
}
inline;
isDefinedByZero();
bool;
 {
    return this._bDefineByZero;
}
inline;
defineByZero(isDefine, bool);
void {
    this: ,
    _bDefineByZero:  = isDefine
};
toFinalCode();
string;
 {
    if (this._isShaderOutput()) {
        return "";
    }
    var sCode = "";
    if (this.isVideoBuffer()) {
        this._getVideoBufferHeader().lockInitializer();
        sCode = this._getVideoBufferHeader().toFinalCode();
        sCode += ";\n";
        sCode += this._getVideoBufferSampler().toFinalCode();
        this._getVideoBufferHeader().unlockInitializer();
    } else {
        sCode = this.getType().toFinalCode();
        sCode += " " + this.getNameId().toFinalCode();
        if (this.getType().isNotBaseArray()) {
            var iLength = this.getType().getLength();
            if (webgl.isANGLE && iLength === 1 && this.getType().isComplex()) {
                sCode += "[" + 2 + "]";
            } else {
                sCode += "[" + iLength + "]";
            }
        }
        if (this.hasInitializer() && !this.isSampler() && !this.isUniform() && !this._bLockInitializer) {
            sCode += "=" + this.getInitializeExpr().toFinalCode();
        }
    }
    return sCode;
}
inline;
_markAsVarying(bValue, bool);
void {
    this: ,
    getNameId: ._markAsVarying(bValue)
};
inline;
_markAsShaderOutput(isShaderOutput, bool);
void {
    this: ,
    _bShaderOutput:  = isShaderOutput
};
inline;
_isShaderOutput();
bool;
 {
    return this._bShaderOutput;
}
_setAttrExtractionBlock(pCodeBlock, IAFXInstruction);
void {
    this: ,
    _pAttrExtractionBlock:  = pCodeBlock
};
_getAttrExtractionBlock();
IAFXInstruction;
 {
    return this._pAttrExtractionBlock;
}
_getFullNameExpr();
IAFXExprInstruction;
 {
    if (!isNull(this._pFullNameExpr)) {
        return this._pFullNameExpr;
    }
    if (!this.isField() || !(this.getParent())._getParentVarDecl().isVisible()) {
        this._pFullNameExpr = new IdExprInstruction();
        this._pFullNameExpr.push(this.getNameId(), false);
    } else {
        var pMainVar = this.getType()._getParentContainer();
        if (isNull(pMainVar)) {
            return null;
        }
        var pMainExpr = pMainVar._getFullNameExpr();
        if (isNull(pMainExpr)) {
            return null;
        }
        var pFieldExpr = new IdExprInstruction();
        pFieldExpr.push(this.getNameId(), false);
        this._pFullNameExpr = new PostfixPointInstruction();
        this._pFullNameExpr.push(pMainExpr, false);
        this._pFullNameExpr.push(pFieldExpr, false);
        this._pFullNameExpr.setType(this.getType());
    }
    return this._pFullNameExpr;
}
_getFullName();
string;
 {
    if (this.isField() && (this.getParent())._getParentVarDecl().isVisible()) {
        var sName = "";
        var eParentType = this.getParent()._getInstructionType();
        if (eParentType === EAFXInstructionTypes.k_VariableTypeInstruction) {
            sName = (this.getParent())._getFullName();
        }
        sName += "." + this.getName();
        return sName;
    } else {
        return this.getName();
    }
}
_getVideoBufferSampler();
IAFXVariableDeclInstruction;
 {
    if (!this.isVideoBuffer()) {
        return null;
    }
    if (isNull(this._pVideoBufferSampler)) {
        this._pVideoBufferSampler = new VariableDeclInstruction();
        var pType = new VariableTypeInstruction();
        var pId = new IdInstruction();
        pType.pushType(getEffectBaseType("sampler2D"));
        pType.addUsage("uniform");
        pId.setName(this.getName() + "_sampler");
        this._pVideoBufferSampler.push(pType, true);
        this._pVideoBufferSampler.push(pId, true);
    }
    return this._pVideoBufferSampler;
}
_getVideoBufferHeader();
IAFXVariableDeclInstruction;
 {
    if (!this.isVideoBuffer()) {
        return null;
    }
    if (isNull(this._pVideoBufferHeader)) {
        this._pVideoBufferHeader = new VariableDeclInstruction();
        var pType = new VariableTypeInstruction();
        var pId = new IdInstruction();
        var pExtarctExpr = new ExtractExprInstruction();
        pType.pushType(getEffectBaseType("video_buffer_header"));
        pId.setName(this.getName() + "_header");
        this._pVideoBufferHeader.push(pType, true);
        this._pVideoBufferHeader.push(pId, true);
        this._pVideoBufferHeader.push(pExtarctExpr, true);
        pExtarctExpr.initExtractExpr(pType, null, this, "", null);
    }
    return this._pVideoBufferHeader;
}
_getVideoBufferInitExpr();
IAFXInitExprInstruction;
 {
    if (!this.isVideoBuffer()) {
        return null;
    }
    return this._getVideoBufferHeader().getInitializeExpr();
}
inline;
_setCollapsed(bValue, bool);
void {
    this: ,
    getType: ._setCollapsed(bValue)
};
inline;
_isCollapsed();
bool;
 {
    return this.getType()._isCollapsed();
}
clone(pRelationMap ?  : IAFXInstructionMap);
IAFXVariableDeclInstruction;
 {
    return _super.prototype.clone.call(this, pRelationMap);
}
blend(pVariableDecl, IAFXVariableDeclInstruction, eMode, EAFXBlendMode);
IAFXVariableDeclInstruction;
 {
    var pBlendType = this.getType().blend(pVariableDecl.getType(), eMode);
    if (isNull(pBlendType)) {
        return null;
    }
    var pBlendVar = new VariableDeclInstruction();
    var pId = new IdInstruction();
    pId.setName(this.getNameId().getName());
    pId.setRealName(this.getNameId().getRealName());
    pBlendVar.setSemantic(this.getSemantic());
    pBlendVar.push(pBlendType, true);
    pBlendVar.push(pId, true);
    return pBlendVar;
}
var akra;
(function (akra) {
    (function (fx) {
        var StmtInstruction = (function (_super) {
            __extends(StmtInstruction, _super);
            function StmtInstruction() {
                _super.call(this);
                this._eInstructionType = EAFXInstructionTypes.k_StmtInstruction;
            }
            StmtInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
                if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
                var pInstructionList = this.getInstructions();
                if (!isNull(pUsedDataCollector)) {
                    for(var i = 0; i < this._nInstructions; i++) {
                        pInstructionList[i].addUsedData(pUsedDataCollector, eUsedMode);
                    }
                }
            };
            return StmtInstruction;
        })(Instruction);
        fx.StmtInstruction = StmtInstruction;        
        var StmtBlockInstruction = (function (_super) {
            __extends(StmtBlockInstruction, _super);
            function StmtBlockInstruction() {
                _super.call(this);
                this._pInstructionList = [];
                this._eInstructionType = EAFXInstructionTypes.k_StmtBlockInstruction;
            }
            StmtBlockInstruction.prototype.toFinalCode = function () {
                var sCode = "{" + "\n";
                for(var i = 0; i < this._nInstructions; i++) {
                    sCode += "\t" + this._pInstructionList[i].toFinalCode() + "\n";
                }
                sCode += "}";
                return sCode;
            };
            return StmtBlockInstruction;
        })(StmtInstruction);
        fx.StmtBlockInstruction = StmtBlockInstruction;        
        var ExprStmtInstruction = (function (_super) {
            __extends(ExprStmtInstruction, _super);
            function ExprStmtInstruction() {
                _super.call(this);
                this._pInstructionList = [
                    null
                ];
                this._eInstructionType = EAFXInstructionTypes.k_ExprStmtInstruction;
            }
            ExprStmtInstruction.prototype.toFinalCode = function () {
                return this.getInstructions()[0].toFinalCode() + ";";
            };
            return ExprStmtInstruction;
        })(StmtInstruction);
        fx.ExprStmtInstruction = ExprStmtInstruction;        
        var BreakStmtInstruction = (function (_super) {
            __extends(BreakStmtInstruction, _super);
            function BreakStmtInstruction() {
                _super.call(this);
                this._pInstructionList = null;
                this._eInstructionType = EAFXInstructionTypes.k_BreakStmtInstruction;
            }
            BreakStmtInstruction.prototype.toFinalCode = function () {
                return this.getOperator() + ";";
            };
            return BreakStmtInstruction;
        })(StmtInstruction);
        fx.BreakStmtInstruction = BreakStmtInstruction;        
        var WhileStmtInstruction = (function (_super) {
            __extends(WhileStmtInstruction, _super);
            function WhileStmtInstruction() {
                _super.call(this);
                this._pInstructionList = [
                    null, 
                    null
                ];
                this._eInstructionType = EAFXInstructionTypes.k_WhileStmtInstruction;
            }
            WhileStmtInstruction.prototype.toFinalCode = function () {
                var sCode = "";
                if (this.getOperator() === "while") {
                    sCode += "while(";
                    sCode += this.getInstructions()[0].toFinalCode();
                    sCode += ")";
                    sCode += this.getInstructions()[1].toFinalCode();
                } else {
                    sCode += "do";
                    sCode += this.getInstructions()[1].toFinalCode();
                    sCode += "while(";
                    sCode += this.getInstructions()[0].toFinalCode();
                    sCode += ");";
                }
                return sCode;
            };
            return WhileStmtInstruction;
        })(StmtInstruction);
        fx.WhileStmtInstruction = WhileStmtInstruction;        
        var ForStmtInstruction = (function (_super) {
            __extends(ForStmtInstruction, _super);
            function ForStmtInstruction() {
                _super.call(this);
                this._pInstructionList = [
                    null, 
                    null, 
                    null, 
                    null
                ];
                this._eInstructionType = EAFXInstructionTypes.k_ForStmtInstruction;
            }
            ForStmtInstruction.prototype.toFinalCode = function () {
                var sCode = "for(";
                sCode += this.getInstructions()[0].toFinalCode() + ";";
                sCode += this.getInstructions()[1].toFinalCode() + ";";
                sCode += this.getInstructions()[2].toFinalCode() + ")";
                sCode += this.getInstructions()[3].toFinalCode();
                return sCode;
            };
            ForStmtInstruction.prototype.check = function (eStage, pInfo) {
                if (typeof pInfo === "undefined") { pInfo = null; }
                var pInstructionList = this.getInstructions();
                if (this._nInstructions !== 4) {
                    this.setError(2239);
                    return false;
                }
                if (isNull(pInstructionList[0])) {
                    this.setError(2232);
                    return false;
                }
                if (pInstructionList[0]._getInstructionType() !== EAFXInstructionTypes.k_VariableDeclInstruction) {
                    this.setError(2231);
                    return false;
                }
                if (isNull(pInstructionList[1])) {
                    this.setError(2233);
                    return false;
                }
                if (pInstructionList[1]._getInstructionType() !== EAFXInstructionTypes.k_RelationalExprInstruction) {
                    this.setError(2238);
                    return false;
                }
                if (pInstructionList[2]._getInstructionType() === EAFXInstructionTypes.k_UnaryExprInstruction || pInstructionList[2]._getInstructionType() === EAFXInstructionTypes.k_AssignmentExprInstruction || pInstructionList[2]._getInstructionType() === EAFXInstructionTypes.k_PostfixArithmeticInstruction) {
                    var sOperator = pInstructionList[2].getOperator();
                    if (sOperator !== "++" && sOperator !== "--" && sOperator !== "+=" && sOperator !== "-=") {
                        this.setError(2240, {
                            operator: sOperator
                        });
                        return false;
                    }
                } else {
                    this.setError(2241);
                    return false;
                }
                return true;
            };
            ForStmtInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
                if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
                var pForInit = this.getInstructions()[0];
                var pForCondition = this.getInstructions()[1];
                var pForStep = this.getInstructions()[2];
                var pForStmt = this.getInstructions()[3];
                var pIteratorType = pForInit.getType();
                pUsedDataCollector[pIteratorType._getInstructionID()] = {
                    type: pIteratorType,
                    isRead: false,
                    isWrite: true,
                    numRead: 0,
                    numWrite: 1,
                    numUsed: 1
                };
                pForCondition.addUsedData(pUsedDataCollector, eUsedMode);
                pForStep.addUsedData(pUsedDataCollector, eUsedMode);
                pForStmt.addUsedData(pUsedDataCollector, eUsedMode);
            };
            return ForStmtInstruction;
        })(StmtInstruction);
        fx.ForStmtInstruction = ForStmtInstruction;        
        var IfStmtInstruction = (function (_super) {
            __extends(IfStmtInstruction, _super);
            function IfStmtInstruction() {
                _super.call(this);
                this._pInstructionList = [
                    null, 
                    null, 
                    null
                ];
                this._eInstructionType = EAFXInstructionTypes.k_IfStmtInstruction;
            }
            IfStmtInstruction.prototype.toFinalCode = function () {
                var sCode = "";
                if (this.getOperator() === "if") {
                    sCode += "if(";
                    sCode += this.getInstructions()[0].toFinalCode() + ")";
                    sCode += this.getInstructions()[1].toFinalCode();
                } else {
                    sCode += "if(";
                    sCode += this.getInstructions()[0].toFinalCode() + ") ";
                    sCode += this.getInstructions()[1].toFinalCode();
                    sCode += "else ";
                    sCode += this.getInstructions()[2].toFinalCode();
                }
                return sCode;
            };
            return IfStmtInstruction;
        })(StmtInstruction);
        fx.IfStmtInstruction = IfStmtInstruction;        
        var DeclStmtInstruction = (function (_super) {
            __extends(DeclStmtInstruction, _super);
            function DeclStmtInstruction() {
                _super.call(this);
                this._pInstructionList = [
                    null
                ];
                this._eInstructionType = EAFXInstructionTypes.k_DeclStmtInstruction;
            }
            DeclStmtInstruction.prototype.toFinalCode = function () {
                var sCode = "";
                var pVariableList = this.getInstructions();
                for(var i = 0; i < this._nInstructions; i++) {
                    sCode += pVariableList[i].toFinalCode() + ";\n";
                }
                return sCode;
            };
            DeclStmtInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
                if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
                if (isNull(this.getInstructions()) || this._nInstructions === 0) {
                    return;
                }
                if (this.getInstructions()[0]._getInstructionType() === EAFXInstructionTypes.k_TypeDeclInstruction) {
                    return;
                }
                var pVariableList = this.getInstructions();
                for(var i = 0; i < this._nInstructions; i++) {
                    var pVarType = pVariableList[i].getType();
                    pUsedDataCollector[pVarType._getInstructionID()] = {
                        type: pVarType,
                        isRead: false,
                        isWrite: true,
                        numRead: 0,
                        numWrite: 1,
                        numUsed: 1
                    };
                    if (pVariableList[i].hasInitializer()) {
                        pVariableList[i].getInitializeExpr().addUsedData(pUsedDataCollector, EVarUsedMode.k_Read);
                    }
                }
            };
            return DeclStmtInstruction;
        })(StmtInstruction);
        fx.DeclStmtInstruction = DeclStmtInstruction;        
        var ReturnStmtInstruction = (function (_super) {
            __extends(ReturnStmtInstruction, _super);
            function ReturnStmtInstruction() {
                _super.call(this);
                this._pPreparedCode = "";
                this._isPositionReturn = false;
                this._isColorReturn = false;
                this._isOnlyReturn = false;
                this._pInstructionList = [
                    null
                ];
                this._sOperatorName = "return";
                this._eInstructionType = EAFXInstructionTypes.k_ReturnStmtInstruction;
            }
            ReturnStmtInstruction.prototype.prepareFor = function (eUsedMode) {
                var pReturn = this.getInstructions()[0];
                if (isNull(pReturn)) {
                    return;
                }
                if (eUsedMode === EFunctionType.k_Vertex) {
                    if (pReturn.getType().isBase()) {
                        this._isPositionReturn = true;
                    } else {
                        this._isOnlyReturn = true;
                    }
                } else if (eUsedMode === EFunctionType.k_Pixel) {
                    this._isColorReturn = true;
                }
                for(var i = 0; i < this._nInstructions; i++) {
                    this._pInstructionList[i].prepareFor(eUsedMode);
                }
            };
            ReturnStmtInstruction.prototype.toFinalCode = function () {
                if (this._isPositionReturn) {
                    return "Out.POSITION=" + this._pInstructionList[0].toFinalCode() + "; return;";
                }
                if (this._isColorReturn) {
                    return "gl_FragColor=" + this._pInstructionList[0].toFinalCode() + "; return;";
                }
                if (this._isOnlyReturn) {
                    return "return;";
                }
                if (this._nInstructions > 0) {
                    return "return " + this._pInstructionList[0].toFinalCode() + ";";
                } else {
                    return "return;";
                }
            };
            return ReturnStmtInstruction;
        })(StmtInstruction);
        fx.ReturnStmtInstruction = ReturnStmtInstruction;        
        var ExtractStmtInstruction = (function (_super) {
            __extends(ExtractStmtInstruction, _super);
            function ExtractStmtInstruction() {
                _super.call(this);
                this._pExtractInVar = null;
                this._pExtractInExpr = null;
                this._pExtactExpr = null;
                this._pInstructionList = [];
                this._eInstructionType = EAFXInstructionTypes.k_ExtractStmtInstruction;
            }
            ExtractStmtInstruction.prototype.generateStmtForBaseType = function (pVarDecl, pPointer, pBuffer, iPadding, pOffset) {
                if (typeof pOffset === "undefined") { pOffset = null; }
                var pVarType = pVarDecl.getType();
                var pVarNameExpr = pVarDecl._getFullNameExpr();
                if (pVarType.isComplex() || isNull(pVarNameExpr) || pVarType.getSize() === 0xffffff) {
                    this.setError(2274);
                    return;
                }
                var pBufferSampler = pBuffer._getVideoBufferSampler();
                var pBufferHeader = pBuffer._getVideoBufferHeader();
                var isArray = pVarType.isNotBaseArray();
                var iLength = pVarType.getLength();
                var sCodeFragment = "";
                var pExtractType = isArray ? pVarType.getArrayElementType() : pVarType;
                if (isArray) {
                    if (iLength === 0xffffff) {
                        this.setError(2274);
                        return;
                    }
                    sCodeFragment = "for(int i=0;i<" + iLength.toString() + ";i++){";
                    this.push(new SimpleInstruction(sCodeFragment), true);
                }
                this.push(pVarNameExpr, false);
                if (isArray) {
                    sCodeFragment = "[i]=";
                } else {
                    sCodeFragment = "=";
                }
                this.push(new SimpleInstruction(sCodeFragment), true);
                var pExtractType = isArray ? pVarType.getArrayElementType() : pVarType;
                var pExtractExpr = new ExtractExprInstruction();
                var sPaddingExpr = "";
                if (iPadding > 0) {
                    sPaddingExpr = "+" + iPadding.toString() + ".0";
                } else {
                    sPaddingExpr = "";
                }
                if (isArray) {
                    sPaddingExpr += "+float(i*" + pExtractType.getSize().toString() + ")";
                }
                pExtractExpr.initExtractExpr(pExtractType, pPointer, pBuffer, sPaddingExpr, pOffset);
                if (pExtractExpr.isErrorOccured()) {
                    this.setError(pExtractExpr.getLastError().code, pExtractExpr.getLastError().info);
                    return;
                }
                this.push(pExtractExpr, true);
                sCodeFragment = ";";
                if (isArray) {
                    sCodeFragment += "}";
                }
                this.push(new SimpleInstruction(sCodeFragment), true);
                this._pExtactExpr = pExtractExpr;
                this._pExtractInVar = pVarDecl;
                this._pExtractInExpr = pVarNameExpr;
            };
            ExtractStmtInstruction.prototype.toFinalCode = function () {
                var sCode = "";
                for(var i = 0; i < this._nInstructions; i++) {
                    sCode += this.getInstructions()[i].toFinalCode();
                }
                return sCode;
            };
            ExtractStmtInstruction.prototype.addUsedData = function (pUsedDataCollector, eUsedMode) {
                if (typeof eUsedMode === "undefined") { eUsedMode = EVarUsedMode.k_Undefined; }
                this._pExtractInExpr.addUsedData(pUsedDataCollector, EVarUsedMode.k_Write);
                this._pExtactExpr.addUsedData(pUsedDataCollector, EVarUsedMode.k_Read);
            };
            ExtractStmtInstruction.prototype.getExtractFunction = function () {
                return this._pExtactExpr.getExtractFunction();
            };
            return ExtractStmtInstruction;
        })(ExprInstruction);
        fx.ExtractStmtInstruction = ExtractStmtInstruction;        
        var SemicolonStmtInstruction = (function (_super) {
            __extends(SemicolonStmtInstruction, _super);
            function SemicolonStmtInstruction() {
                _super.call(this);
                this._pInstructionList = null;
                this._eInstructionType = EAFXInstructionTypes.k_SemicolonStmtInstruction;
            }
            SemicolonStmtInstruction.prototype.toFinalCode = function () {
                return ";";
            };
            return SemicolonStmtInstruction;
        })(StmtInstruction);
        fx.SemicolonStmtInstruction = SemicolonStmtInstruction;        
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (fx) {
        var FunctionDeclInstruction = (function (_super) {
            __extends(FunctionDeclInstruction, _super);
            function FunctionDeclInstruction() {
                _super.call(this);
                this._pFunctionDefenition = null;
                this._pImplementation = null;
                this._eFunctionType = EFunctionType.k_Function;
                this._bUsedAsFunction = false;
                this._bUsedAsVertex = false;
                this._bUsedAsPixel = false;
                this._bCanUsedAsFunction = true;
                this._bUsedInVertex = false;
                this._bUsedInPixel = false;
                this._pParseNode = null;
                this._iImplementationScope = 0xffffff;
                this._isInBlackList = false;
                this._pOutVariable = null;
                this._pUsedFunctionMap = null;
                this._pUsedFunctionList = null;
                this._pAttributeVariableMap = null;
                this._pVaryingVariableMap = null;
                this._pUsedVarTypeMap = null;
                this._pSharedVariableMap = null;
                this._pGlobalVariableMap = null;
                this._pUniformVariableMap = null;
                this._pForeignVariableMap = null;
                this._pTextureVariableMap = null;
                this._pUsedComplexTypeMap = null;
                this._pAttributeVariableKeys = null;
                this._pVaryingVariableKeys = null;
                this._pSharedVariableKeys = null;
                this._pUniformVariableKeys = null;
                this._pForeignVariableKeys = null;
                this._pGlobalVariableKeys = null;
                this._pTextureVariableKeys = null;
                this._pUsedComplexTypeKeys = null;
                this._pVertexShader = null;
                this._pPixelShader = null;
                this._pExtSystemTypeList = null;
                this._pExtSystemFunctionList = null;
                this._pExtSystemMacrosList = null;
                this.inline = getType();
                this.IAFXTypeInstruction = {
                    return: this.getReturnType()
                };
                this.inline = getName();
                this.string = {
                    return: this._pFunctionDefenition.getName()
                };
                this.inline = getRealName();
                this.string = {
                    return: this._pFunctionDefenition.getRealName()
                };
                this.inline = getNameId();
                this.IAFXIdInstruction = {
                    return: this._pFunctionDefenition.getNameId()
                };
                this.inline = getNumNeededArguments();
                this.number = {
                    return: this._pFunctionDefenition.getNumNeededArguments()
                };
                this.inline = hasImplementation();
                this.bool = {
                    return: !isNull(this._pImplementation) || !isNull(this._pParseNode)
                };
                this.inline = getReturnType();
                this.IAFXVariableTypeInstruction = {
                    return: this._pFunctionDefenition.getReturnType()
                };
                this.inline = getFunctionType();
                this.EFunctionType = {
                    return: this._eFunctionType
                };
                this.inline = setFunctionType(eFunctionType, EFunctionType);
                this._pInstructionList = [
                    null, 
                    null
                ];
                this._eInstructionType = EAFXInstructionTypes.k_FunctionDeclInstruction;
            }
            FunctionDeclInstruction.prototype.toFinalCode = function () {
                var sCode = "";
                sCode += this._pFunctionDefenition.toFinalCode();
                sCode += this._pImplementation.toFinalCode();
                return sCode;
            };
            FunctionDeclInstruction.prototype.toFinalDefCode = function () {
                return this._pFunctionDefenition.toFinalCode();
            };
            FunctionDeclInstruction.prototype.getArguments = function () {
                return this._pFunctionDefenition.getArguments();
            };
            return FunctionDeclInstruction;
        })(DeclInstruction);
        fx.FunctionDeclInstruction = FunctionDeclInstruction;        
        void {
            this: ,
            _eFunctionType:  = eFunctionType
        };
        inline;
        _setImplementationScope(iScope, number);
        void {
            this: ,
            _iImplementationScope:  = iScope
        };
        inline;
        _getImplementationScope();
        number;
 {
            return this._iImplementationScope;
        }
        inline;
        _setParseNode(pNode, IParseNode);
        void {
            this: ,
            _pParseNode:  = pNode
        };
        inline;
        _getParseNode();
        IParseNode;
 {
            return this._pParseNode;
        }
        setFunctionDef(pFunctionDef, IAFXDeclInstruction);
        void {
            this: ,
            _pFunctionDefenition:  = pFunctionDef
        };
        this._pInstructionList[0] = pFunctionDef;
        pFunctionDef.setParent(this);
        this._nInstructions = this._nInstructions === 0 ? 1 : this._nInstructions;
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
setImplementation(pImplementation, IAFXStmtInstruction);
void {
    this: ,
    _pImplementation:  = pImplementation
};
this._pInstructionList[1] = pImplementation;
pImplementation.setParent(pImplementation);
this._nInstructions = 2;
this._pParseNode = null;
clone(pRelationMap ?  : IAFXInstructionMap = {});
IAFXFunctionDeclInstruction;
 {
    var pClone = _super.prototype.clone.call(this, pRelationMap);
    if (!isNull(this._pOutVariable)) {
        pClone._setOutVariable(pRelationMap[this._pOutVariable._getInstructionID()]);
    }
    var pUsedVarTypeMap = this.cloneVarTypeUsedMap(this._pUsedVarTypeMap, pRelationMap);
    var pSharedVariableMap = this.cloneVarDeclMap(this._pSharedVariableMap, pRelationMap);
    var pGlobalVariableMap = this.cloneVarDeclMap(this._pGlobalVariableMap, pRelationMap);
    var pUniformVariableMap = this.cloneVarDeclMap(this._pUniformVariableMap, pRelationMap);
    var pForeignVariableMap = this.cloneVarDeclMap(this._pForeignVariableMap, pRelationMap);
    var pTextureVariableMap = this.cloneVarDeclMap(this._pTextureVariableMap, pRelationMap);
    var pUsedComplexTypeMap = this.cloneTypeMap(this._pUsedComplexTypeMap, pRelationMap);
    pClone._setUsedFunctions(this._pUsedFunctionMap, this._pUsedFunctionList);
    pClone._setUsedVariableData(pUsedVarTypeMap, pSharedVariableMap, pGlobalVariableMap, pUniformVariableMap, pForeignVariableMap, pTextureVariableMap, pUsedComplexTypeMap);
    pClone._initAfterClone();
    return pClone;
}
_addOutVariable(pVariable, IAFXVariableDeclInstruction);
bool;
 {
    if (!isNull(this._pOutVariable)) {
        return false;
    }
    if (!pVariable.getType().isEqual(this.getReturnType())) {
        return false;
    }
    this._pOutVariable = pVariable;
    return true;
}
_getOutVariable();
IAFXVariableDeclInstruction;
 {
    return this._pOutVariable;
}
_getVertexShader();
IAFXFunctionDeclInstruction;
 {
    return this._pVertexShader;
}
_getPixelShader();
IAFXFunctionDeclInstruction;
 {
    return this._pPixelShader;
}
_markUsedAs(eUsedType, EFunctionType);
void {
    switch: (eUsedType)
};
 {
    EFunctionType.k_Vertex;
    this._bUsedInVertex = true;
    this._bUsedAsVertex = true;
    break;
    EFunctionType.k_Pixel;
    this._bUsedInPixel = true;
    this._bUsedAsPixel = true;
    break;
    EFunctionType.k_Function;
    this._bUsedAsFunction = true;
    break;
}
_isUsedAs(eUsedType, EFunctionType);
bool;
 {
    switch(eUsedType) {
        case EFunctionType.k_Vertex:
            return this._bUsedAsVertex;
        case EFunctionType.k_Pixel:
            return this._bUsedAsPixel;
        case EFunctionType.k_Function:
            return this._bUsedAsFunction;
    }
}
_isUsedAsFunction();
bool;
 {
    return this._bUsedAsFunction;
}
_isUsedAsVertex();
bool;
 {
    return this._bUsedAsVertex;
}
_isUsedAsPixel();
bool;
 {
    return this._bUsedAsPixel;
}
_markUsedInVertex();
void {
    this: ,
    _bUsedInVertex:  = true
};
_markUsedInPixel();
void {
    this: ,
    _bUsedInPixel:  = true
};
_isUsedInVertex();
bool;
 {
    return this._bUsedInVertex;
}
_isUsedInPixel();
bool;
 {
    return this._bUsedInPixel;
}
_isUsed();
bool;
 {
    return this._bUsedAsFunction || this._bUsedAsVertex || this._bUsedAsPixel;
}
_checkVertexUsage();
bool;
 {
    return this._isUsedInVertex() ? this._isForVertex() : true;
}
_checkPixelUsage();
bool;
 {
    return this._isUsedInPixel() ? this._isForPixel() : true;
}
_checkDefenitionForVertexUsage();
bool;
 {
    return this._pFunctionDefenition._checkForVertexUsage();
}
_checkDefenitionForPixelUsage();
bool;
 {
    return this._pFunctionDefenition._checkForPixelUsage();
}
_canUsedAsFunction();
bool;
 {
    return this._bCanUsedAsFunction && this._pFunctionDefenition._canUsedAsFunction();
}
_notCanUsedAsFunction();
void {
    this: ,
    _bCanUsedAsFunction:  = false
};
_addUsedFunction(pFunction, IAFXFunctionDeclInstruction);
bool;
 {
    if (pFunction._getInstructionType() === EAFXInstructionTypes.k_SystemFunctionInstruction && !pFunction.isBuiltIn()) {
        this.addExtSystemFunction(pFunction);
        return true;
    }
    if (isNull(this._pUsedFunctionMap)) {
        this._pUsedFunctionMap = {};
        this._pUsedFunctionList = [];
    }
    var iFuncId = pFunction._getInstructionID();
    if (!isDef(this._pUsedFunctionMap[iFuncId])) {
        this._pUsedFunctionMap[iFuncId] = pFunction;
        this._pUsedFunctionList.push(pFunction);
        return true;
    }
    return false;
}
_addUsedVariable(pVariable, IAFXVariableDeclInstruction);
void {};
_getUsedFunctionList();
IAFXFunctionDeclInstruction[];
 {
    return this._pUsedFunctionList;
}
_isBlackListFunction();
bool;
 {
    return this._isInBlackList;
}
_addToBlackList();
void {
    this: ,
    _isInBlackList:  = true
};
_getStringDef();
string;
 {
    return this._pFunctionDefenition._getStringDef();
}
_convertToVertexShader();
IAFXFunctionDeclInstruction;
 {
    var pShader = null;
    if ((!this._canUsedAsFunction() || !this._isUsedAsFunction()) && (!this._isUsedInPixel())) {
        pShader = this;
    } else {
        pShader = this.clone();
    }
    pShader._prepareForVertex();
    this._pVertexShader = pShader;
    return pShader;
}
_convertToPixelShader();
IAFXFunctionDeclInstruction;
 {
    var pShader = null;
    if ((!this._canUsedAsFunction() || !this._isUsedAsFunction()) && (!this._isUsedInVertex())) {
        pShader = this;
    } else {
        pShader = this.clone();
    }
    pShader._prepareForPixel();
    this._pPixelShader = pShader;
    return pShader;
}
_prepareForVertex();
void {
    this: ,
    setFunctionType: (EFunctionType.k_Vertex)
};
var pShaderInputParamList = this._pFunctionDefenition.getParameListForShaderInput();
for(var i = 0; i < pShaderInputParamList.length; i++) {
    var pParamType = pShaderInputParamList[i].getType();
    if (pParamType.isComplex() && isDef(this._pUsedVarTypeMap[pParamType._getInstructionID()]) && this._pUsedVarTypeMap[pParamType._getInstructionID()].isRead) {
        this.setError(2301, {
            funcName: this.getName()
        });
        return;
    }
}
var pOutVariable = this._getOutVariable();
if (!isNull(pOutVariable)) {
    if (isDef(this._pUsedVarTypeMap[pOutVariable.getType()._getInstructionID()]) && this._pUsedVarTypeMap[pOutVariable.getType()._getInstructionID()].isRead) {
        this.setError(2302, {
            funcName: this.getName()
        });
        return;
    }
    pOutVariable._markAsShaderOutput(true);
}
if (this._pFunctionDefenition.isComplexShaderInput()) {
    pShaderInputParamList[0].setVisible(false);
}
this._pImplementation.prepareFor(EFunctionType.k_Vertex);
this._pFunctionDefenition.markAsShaderDef(true);
this.generatesVertexAttrubutes();
this.generateVertexVaryings();
_prepareForPixel();
void {
    this: ,
    setFunctionType: (EFunctionType.k_Pixel)
};
var pShaderInputParamList = this._pFunctionDefenition.getParameListForShaderInput();
for(var i = 0; i < pShaderInputParamList.length; i++) {
    var pParamType = pShaderInputParamList[i].getType();
    if (pParamType.isComplex() && isDef(this._pUsedVarTypeMap[pParamType._getInstructionID()]) && this._pUsedVarTypeMap[pParamType._getInstructionID()].isRead) {
        this.setError(2301, {
            funcName: this.getName()
        });
        return;
    }
}
if (this._pFunctionDefenition.isComplexShaderInput()) {
    pShaderInputParamList[0].setVisible(false);
}
this._pImplementation.prepareFor(EFunctionType.k_Pixel);
this._pFunctionDefenition.markAsShaderDef(true);
this.generatePixelVaryings();
_setOutVariable(pVar, IAFXVariableDeclInstruction);
void {
    this: ,
    _pOutVariable:  = pVar
};
_setUsedFunctions(pUsedFunctionMap, IAFXFunctionDeclMap, pUsedFunctionList, IAFXFunctionDeclInstruction[]);
void {
    this: ,
    _pUsedFunctionMap:  = pUsedFunctionMap
};
this._pUsedFunctionList = pUsedFunctionList;
_setUsedVariableData(pUsedVarTypeMap, IAFXTypeUseInfoMap, pSharedVariableMap, IAFXVariableDeclMap, pGlobalVariableMap, IAFXVariableDeclMap, pUniformVariableMap, IAFXVariableDeclMap, pForeignVariableMap, IAFXVariableDeclMap, pTextureVariableMap, IAFXVariableDeclMap, pUsedComplexTypeMap, IAFXTypeMap);
void {
    this: ,
    _pUsedVarTypeMap:  = pUsedVarTypeMap
};
this._pSharedVariableMap = pSharedVariableMap;
this._pGlobalVariableMap = pGlobalVariableMap;
this._pUniformVariableMap = pUniformVariableMap;
this._pForeignVariableMap = pForeignVariableMap;
this._pTextureVariableMap = pTextureVariableMap;
this._pUsedComplexTypeMap = pUsedComplexTypeMap;
_initAfterClone();
void {
    this: ,
    _pFunctionDefenition:  = this._pInstructionList[0]
};
this._pImplementation = this._pInstructionList[1];
_generateInfoAboutUsedData();
void {
    if: (!isNull(this._pUsedVarTypeMap))
};
 {
    return;
}
var pUsedData = {};
this._pImplementation.addUsedData(pUsedData);
this._pUsedVarTypeMap = pUsedData;
if (isNull(this._pUsedComplexTypeMap)) {
    this._pSharedVariableMap = {};
    this._pGlobalVariableMap = {};
    this._pUniformVariableMap = {};
    this._pForeignVariableMap = {};
    this._pTextureVariableMap = {};
    this._pUsedComplexTypeMap = {};
}
for(var i in pUsedData) {
    var pAnalyzedInfo = pUsedData[i];
    var pAnalyzedType = pAnalyzedInfo.type;
    if (pAnalyzedType._isInGlobalScope()) {
        this.addGlobalVariableType(pAnalyzedType, pAnalyzedInfo.isWrite, pAnalyzedInfo.isRead);
    } else if (pAnalyzedType.isUniform()) {
        this.addUniformParameter(pAnalyzedType);
    } else if (pAnalyzedType._getScope() < this._getImplementationScope()) {
        if (!this._isUsedAsFunction()) {
            if (!isNull(this._getOutVariable()) && this._getOutVariable().getType() !== pAnalyzedType) {
                this.addUsedComplexType(pAnalyzedType.getBaseType());
            }
        }
    }
}
if (!isNull(this._pUsedFunctionList)) {
    for(var j = 0; j < this._pUsedFunctionList.length; j++) {
        this.addUsedInfoFromFunction(this._pUsedFunctionList[j]);
    }
}
inline;
_getAttributeVariableMap();
IAFXVariableDeclMap;
 {
    return this._pAttributeVariableMap;
}
inline;
_getVaryingVariableMap();
IAFXVariableDeclMap;
 {
    return this._pVaryingVariableMap;
}
inline;
_getSharedVariableMap();
IAFXVariableDeclMap;
 {
    return this._pSharedVariableMap;
}
inline;
_getGlobalVariableMap();
IAFXVariableDeclMap;
 {
    return this._pGlobalVariableMap;
}
inline;
_getUniformVariableMap();
IAFXVariableDeclMap;
 {
    return this._pUniformVariableMap;
}
inline;
_getForeignVariableMap();
IAFXVariableDeclMap;
 {
    return this._pForeignVariableMap;
}
inline;
_getTextureVariableMap();
IAFXVariableDeclMap;
 {
    return this._pTextureVariableMap;
}
inline;
_getUsedComplexTypeMap();
IAFXTypeMap;
 {
    return this._pUsedComplexTypeMap;
}
_getAttributeVariableKeys();
number[];
 {
    if (isNull(this._pAttributeVariableKeys) && !isNull(this._pAttributeVariableMap)) {
        this._pAttributeVariableKeys = Object.keys(this._pAttributeVariableMap);
    }
    return this._pAttributeVariableKeys;
}
_getVaryingVariableKeys();
number[];
 {
    if (isNull(this._pVaryingVariableKeys) && !isNull(this._pVaryingVariableMap)) {
        this._pVaryingVariableKeys = Object.keys(this._pVaryingVariableMap);
    }
    return this._pVaryingVariableKeys;
}
_getSharedVariableKeys();
number[];
 {
    if (isNull(this._pSharedVariableKeys) && !isNull(this._pSharedVariableMap)) {
        this._pSharedVariableKeys = Object.keys(this._pSharedVariableMap);
    }
    return this._pSharedVariableKeys;
}
_getUniformVariableKeys();
number[];
 {
    if (isNull(this._pUniformVariableKeys) && !isNull(this._pUniformVariableMap)) {
        this._pUniformVariableKeys = Object.keys(this._pUniformVariableMap);
    }
    return this._pUniformVariableKeys;
}
_getForeignVariableKeys();
number[];
 {
    if (isNull(this._pForeignVariableKeys) && !isNull(this._pForeignVariableMap)) {
        this._pForeignVariableKeys = Object.keys(this._pForeignVariableMap);
    }
    return this._pForeignVariableKeys;
}
_getGlobalVariableKeys();
number[];
 {
    if (isNull(this._pGlobalVariableKeys) && !isNull(this._pGlobalVariableMap)) {
        this._pGlobalVariableKeys = Object.keys(this._pGlobalVariableMap);
    }
    return this._pGlobalVariableKeys;
}
_getTextureVariableKeys();
number[];
 {
    if (isNull(this._pTextureVariableKeys) && !isNull(this._pTextureVariableMap)) {
        this._pTextureVariableKeys = Object.keys(this._pTextureVariableMap);
    }
    return this._pTextureVariableKeys;
}
_getUsedComplexTypeKeys();
number[];
 {
    if (isNull(this._pUsedComplexTypeKeys)) {
        this._pUsedComplexTypeKeys = Object.keys(this._pUsedComplexTypeMap);
    }
    return this._pUsedComplexTypeKeys;
}
_getExtSystemFunctionList();
IAFXFunctionDeclInstruction[];
 {
    return this._pExtSystemFunctionList;
}
_getExtSystemMacrosList();
IAFXSimpleInstruction[];
 {
    return this._pExtSystemMacrosList;
}
_getExtSystemTypeList();
IAFXTypeDeclInstruction[];
 {
    return this._pExtSystemTypeList;
}
generatesVertexAttrubutes();
void {
    var: pShaderInputParamList,
    IAFXVariableDeclInstruction: [] = this._pFunctionDefenition.getParameListForShaderInput()
};
var isComplexInput = this._pFunctionDefenition.isComplexShaderInput();
this._pAttributeVariableMap = {};
if (isComplexInput) {
    var pContainerVariable = pShaderInputParamList[0];
    var pContainerType = pContainerVariable.getType();
    var pAttributeNames = pContainerType.getFieldNameList();
    for(var i = 0; i < pAttributeNames.length; i++) {
        var pAttr = pContainerType.getField(pAttributeNames[i]);
        if (!this.isVariableTypeUse(pAttr.getType())) {
            continue;
        }
        this._pAttributeVariableMap[pAttr._getInstructionID()] = pAttr;
        this.generateExtractBlockForAttribute(pAttr);
    }
} else {
    for(var i = 0; i < pShaderInputParamList.length; i++) {
        var pAttr = pShaderInputParamList[i];
        if (!this.isVariableTypeUse(pAttr.getType())) {
            continue;
        }
        this._pAttributeVariableMap[pAttr._getInstructionID()] = pAttr;
        this.generateExtractBlockForAttribute(pAttr);
    }
}
this._pAttributeVariableKeys = this._getAttributeVariableKeys();
generateVertexVaryings();
void {
    if: (isNull(this._getOutVariable()))
};
 {
    return;
}
this._pVaryingVariableMap = {};
var pContainerVariable = this._getOutVariable();
var pContainerType = pContainerVariable.getType();
var pVaryingNames = pContainerType.getFieldNameList();
for(var i = 0; i < pVaryingNames.length; i++) {
    var pVarying = pContainerType.getField(pVaryingNames[i]);
    if (!this.isVariableTypeUse(pVarying.getType())) {
        continue;
    }
    this._pVaryingVariableMap[pVarying._getInstructionID()] = pVarying;
}
this._pVaryingVariableKeys = this._getVaryingVariableKeys();
generatePixelVaryings();
void {
    var: pShaderInputParamList,
    IAFXVariableDeclInstruction: [] = this._pFunctionDefenition.getParameListForShaderInput()
};
var isComplexInput = this._pFunctionDefenition.isComplexShaderInput();
this._pVaryingVariableMap = {};
if (isComplexInput) {
    var pContainerVariable = pShaderInputParamList[0];
    var pContainerType = pContainerVariable.getType();
    var pVaryingNames = pContainerType.getFieldNameList();
    for(var i = 0; i < pVaryingNames.length; i++) {
        var pVarying = pContainerType.getField(pVaryingNames[i]);
        if (!this.isVariableTypeUse(pVarying.getType())) {
            continue;
        }
        this._pVaryingVariableMap[pVarying._getInstructionID()] = pVarying;
    }
} else {
    for(var i = 0; i < pShaderInputParamList.length; i++) {
        var pVarying = pShaderInputParamList[i];
        if (!this.isVariableTypeUse(pVarying.getType())) {
            continue;
        }
        this._pVaryingVariableMap[pVarying._getInstructionID()] = pVarying;
    }
}
this._pVaryingVariableKeys = this._getVaryingVariableKeys();
cloneVarTypeUsedMap(pMap, IAFXTypeUseInfoMap, pRelationMap, IAFXInstructionMap);
IAFXTypeUseInfoMap;
 {
    var pCloneMap = {};
    for(var j in pMap) {
        var pType = isDef(pRelationMap[j]) ? pRelationMap[j] : pMap[j].type;
        var id = pType._getInstructionID();
        pCloneMap[id] = {
            type: pType,
            isRead: pMap[j].isRead,
            isWrite: pMap[j].isWrite,
            numRead: pMap[j].numRead,
            numWrite: pMap[j].numWrite,
            numUsed: pMap[j].numUsed
        };
    }
    return pCloneMap;
}
cloneVarDeclMap(pMap, IAFXVariableDeclMap, pRelationMap, IAFXInstructionMap);
IAFXVariableDeclMap;
 {
    var pCloneMap = {};
    for(var i in pMap) {
        var pVar = isDef(pRelationMap[i]) ? pRelationMap[i] : pMap[i];
        if (!isNull(pVar)) {
            var id = pVar._getInstructionID();
            pCloneMap[id] = pVar;
        }
    }
    return pCloneMap;
}
cloneTypeMap(pMap, IAFXTypeMap, pRelationMap, IAFXInstructionMap);
IAFXTypeMap;
 {
    var pCloneMap = {};
    for(var i in pMap) {
        var pVar = (isDef(pRelationMap[i]) ? pRelationMap[i] : pMap[i]);
        var id = pVar._getInstructionID();
        pCloneMap[id] = pVar;
    }
    return pCloneMap;
}
addGlobalVariableType(pVariableType, IAFXVariableTypeInstruction, isWrite, bool, isRead, bool);
void {
    if: (!pVariableType.isFromVariableDecl())
};
 {
    return;
}
var pVariable = pVariableType._getParentVarDecl();
var pMainVariable = pVariableType._getMainVariable();
var iMainVar = pMainVariable._getInstructionID();
var iVar = pVariable._getInstructionID();
if (pMainVariable.getType().isShared()) {
    this._pSharedVariableMap[iMainVar] = pMainVariable;
} else if (pMainVariable.getType().isForeign()) {
    this._pForeignVariableMap[iMainVar] = pMainVariable;
} else if (isWrite) {
    this._pGlobalVariableMap[iMainVar] = pMainVariable;
    if (isDefAndNotNull(this._pUniformVariableMap[iMainVar])) {
        this._pUniformVariableMap[iMainVar] = null;
    }
} else {
    if (!isDef(this._pGlobalVariableMap[iMainVar])) {
        this._pUniformVariableMap[iMainVar] = pMainVariable;
    }
}
if (pVariable.isSampler() && pVariable.hasInitializer()) {
    var pInitExpr = pVariable.getInitializeExpr();
    var pTexture = null;
    var pSamplerStates = null;
    if (pVariableType.isArray()) {
        var pList = pInitExpr.getInstructions();
        for(var i = 0; i < pList.length; i++) {
            pSamplerStates = pList[i].getInstructions()[0];
            pTexture = pSamplerStates.getTexture();
            this._pTextureVariableMap[pTexture._getInstructionID()] = pTexture;
        }
    } else {
        pSamplerStates = pInitExpr.getInstructions()[0];
        pTexture = pSamplerStates.getTexture();
        this._pTextureVariableMap[pTexture._getInstructionID()] = pTexture;
    }
}
addUniformParameter(pType, IAFXVariableTypeInstruction);
void {
    var: pMainVariable,
    IAFXVariableDeclInstruction:  = pType._getMainVariable()
};
var iMainVar = pMainVariable._getInstructionID();
if (isDef(this._pGlobalVariableMap[iMainVar])) {
 {
        logger.setSourceLocation("fx/FunctionInstruction.ts", 839);
        logger.error("UNEXPECTED ERROR WITH UNIFORM_PARAMETER");
    }
    ;
}
this._pUniformVariableMap[iMainVar] = pMainVariable;
this.addUsedComplexType(pMainVariable.getType().getBaseType());
addUsedComplexType(pType, IAFXTypeInstruction);
void {
    if: (pType.isBase() || isDef(this._pUsedComplexTypeMap[pType._getInstructionID()]))
};
 {
    return;
}
this._pUsedComplexTypeMap[pType._getInstructionID()] = pType;
var pFieldNameList = pType.getFieldNameList();
for(var i = 0; i < pFieldNameList.length; i++) {
    this.addUsedComplexType(pType.getFieldType(pFieldNameList[i]).getBaseType());
}
addUsedInfoFromFunction(pFunction, IAFXFunctionDeclInstruction);
void {
    pFunction: ,
    _generateInfoAboutUsedData: 
};
var pSharedVarMap = pFunction._getSharedVariableMap();
var pGlobalVarMap = pFunction._getGlobalVariableMap();
var pUniformVarMap = pFunction._getUniformVariableMap();
var pForeignVarMap = pFunction._getForeignVariableMap();
var pTextureVarMap = pFunction._getTextureVariableMap();
var pUsedComplexTypeMap = pFunction._getUsedComplexTypeMap();
for(var j in pSharedVarMap) {
    this._pSharedVariableMap[pSharedVarMap[j]._getInstructionID()] = pSharedVarMap[j];
}
for(var j in pForeignVarMap) {
    this._pForeignVariableMap[pForeignVarMap[j]._getInstructionID()] = pForeignVarMap[j];
}
for(var j in pTextureVarMap) {
    this._pTextureVariableMap[pTextureVarMap[j]._getInstructionID()] = pTextureVarMap[j];
}
for(var j in pGlobalVarMap) {
    this._pGlobalVariableMap[pGlobalVarMap[j]._getInstructionID()] = pGlobalVarMap[j];
    if (isDefAndNotNull(this._pUniformVariableMap[pGlobalVarMap[j]._getInstructionID()])) {
        this._pUniformVariableMap[pGlobalVarMap[j]._getInstructionID()] = null;
    }
}
for(var j in pUniformVarMap) {
    if (!isDef(this._pGlobalVariableMap[pUniformVarMap[j]._getInstructionID()])) {
        this._pUniformVariableMap[pUniformVarMap[j]._getInstructionID()] = pUniformVarMap[j];
    }
}
for(var j in pUsedComplexTypeMap) {
    this._pUsedComplexTypeMap[pUsedComplexTypeMap[j]._getInstructionID()] = pUsedComplexTypeMap[j];
}
this.addExtSystemFunction(pFunction);
addExtSystemFunction(pFunction, IAFXFunctionDeclInstruction);
void {
    if: (isNull(this._pExtSystemFunctionList))
};
 {
    this._pExtSystemFunctionList = [];
    this._pExtSystemTypeList = [];
    this._pExtSystemMacrosList = [];
}
if (pFunction._getInstructionType() === EAFXInstructionTypes.k_SystemFunctionInstruction) {
    if (this._pExtSystemFunctionList.indexOf(pFunction) !== -1) {
        return;
    }
    this._pExtSystemFunctionList.push(pFunction);
}
var pTypes = pFunction._getExtSystemTypeList();
var pMacroses = pFunction._getExtSystemMacrosList();
var pFunctions = pFunction._getExtSystemFunctionList();
if (!isNull(pTypes)) {
    for(var j = 0; j < pTypes.length; j++) {
        if (this._pExtSystemTypeList.indexOf(pTypes[j]) === -1) {
            this._pExtSystemTypeList.push(pTypes[j]);
        }
    }
}
if (!isNull(pMacroses)) {
    for(var j = 0; j < pMacroses.length; j++) {
        if (this._pExtSystemMacrosList.indexOf(pMacroses[j]) === -1) {
            this._pExtSystemMacrosList.push(pMacroses[j]);
        }
    }
}
if (!isNull(pFunctions)) {
    for(var j = 0; j < pFunctions.length; j++) {
        if (this._pExtSystemFunctionList.indexOf(pFunctions[j]) === -1) {
            this._pExtSystemFunctionList.unshift(pFunctions[j]);
        }
    }
}
isVariableTypeUse(pVariableType, IAFXVariableTypeInstruction);
bool;
 {
    var id = pVariableType._getInstructionID();
    if (!isDef(this._pUsedVarTypeMap[id])) {
        return false;
    }
    if (this._pUsedVarTypeMap[id].numUsed === 0) {
        return false;
    }
    return true;
}
generateExtractBlockForAttribute(pAttr, IAFXVariableDeclInstruction);
IAFXInstruction;
 {
    if (!pAttr.getType().isPointer()) {
        return null;
    }
    var pExtractCollector = new InstructionCollector();
    var pMainPointer = pAttr.getType()._getMainPointer();
    pAttr._setAttrExtractionBlock(pExtractCollector);
    this.generateExtractStmtFromPointer(pMainPointer, null, 0, pExtractCollector);
    pAttr.getType().getSubVarDecls();
    return pExtractCollector;
}
generateExtractStmtFromPointer(pPointer, IAFXVariableDeclInstruction, pOffset, IAFXVariableDeclInstruction, iDepth, number, pCollector, IAFXInstruction);
void {
    var: pPointerType,
    IAFXVariableTypeInstruction:  = pPointer.getType()
};
var pWhatExtracted = pPointerType._getDownPointer();
var pWhatExtractedType = null;
while(!isNull(pWhatExtracted)) {
    pWhatExtractedType = pWhatExtracted.getType();
    if (!pWhatExtractedType.isPointIndex() && iDepth === 0) {
        pOffset = this.createOffsetForAttr(pWhatExtracted);
    }
    if (!pWhatExtractedType.isComplex()) {
        var pSingleExtract = new ExtractStmtInstruction();
        pSingleExtract.generateStmtForBaseType(pWhatExtracted, pWhatExtractedType.getPointer(), pWhatExtractedType.getVideoBuffer(), 0, pWhatExtractedType.isPointIndex() ? null : pOffset);
        this._addUsedFunction(pSingleExtract.getExtractFunction());
        pCollector.push(pSingleExtract, true);
    } else {
        iDepth++;
        this.generateExtractStmtForComplexVar(pWhatExtracted, iDepth <= 1 ? pOffset : null, iDepth, pCollector, pWhatExtractedType.getPointer(), pWhatExtractedType.getVideoBuffer(), 0);
    }
    pWhatExtracted = pWhatExtractedType._getDownPointer();
}
generateExtractStmtForComplexVar(pVarDecl, IAFXVariableDeclInstruction, pOffset, IAFXVariableDeclInstruction, iDepth, number, pCollector, IAFXInstruction, pPointer, IAFXVariableDeclInstruction, pBuffer, IAFXVariableDeclInstruction, iPadding, number);
void {
    var: pVarType,
    IAFXVariableTypeInstruction:  = pVarDecl.getType()
};
var pFieldNameList = pVarType.getFieldNameList();
var pField = null;
var pFieldType = null;
var pSingleExtract = null;
var isNeedPadding = false;
for(var i = 0; i < pFieldNameList.length; i++) {
    pField = pVarType.getField(pFieldNameList[i]);
    if (isNull(pField)) {
        continue;
    }
    pFieldType = pField.getType();
    if (iDepth <= 1) {
        pOffset = this.createOffsetForAttr(pField);
        isNeedPadding = false;
    } else {
        isNeedPadding = true;
    }
    if (pFieldType.isPointer()) {
        var pFieldPointer = pFieldType._getMainPointer();
        pSingleExtract = new ExtractStmtInstruction();
        pSingleExtract.generateStmtForBaseType(pFieldPointer, pPointer, pFieldType.getVideoBuffer(), isNeedPadding ? (iPadding + pFieldType.getPadding()) : 0, pOffset);
        this._addUsedFunction(pSingleExtract.getExtractFunction());
        pCollector.push(pSingleExtract, true);
        this.generateExtractStmtFromPointer(pFieldPointer, pOffset, iDepth, pCollector);
    } else if (pFieldType.isComplex()) {
        iDepth++;
        this.generateExtractStmtForComplexVar(pField, pOffset, iDepth, pCollector, pPointer, pBuffer, isNeedPadding ? (iPadding + pFieldType.getPadding()) : 0);
    } else {
        pSingleExtract = new ExtractStmtInstruction();
        pSingleExtract.generateStmtForBaseType(pField, pPointer, pBuffer, isNeedPadding ? (iPadding + pFieldType.getPadding()) : 0, pOffset);
        this._addUsedFunction(pSingleExtract.getExtractFunction());
        pCollector.push(pSingleExtract, true);
    }
}
createOffsetForAttr(pAttr, IAFXVariableDeclInstruction);
IAFXVariableDeclInstruction;
 {
    var pOffset = new VariableDeclInstruction();
    var pOffsetType = new VariableTypeInstruction();
    var pOffsetId = new IdInstruction();
    pOffsetType.pushType(Effect.getSystemType("float"));
    pOffsetType.addUsage("uniform");
    pOffsetId.setName("offset");
    pOffsetId.setRealName(pAttr.getRealName() + "_o");
    pOffset.push(pOffsetType, true);
    pOffset.push(pOffsetId, true);
    pOffset.setParent(pAttr);
    pOffset.setSemantic(pAttr.getSemantic());
    pAttr.getType()._addAttrOffset(pOffset);
    return pOffset;
}
var SystemFunctionInstruction = (function (_super) {
    __extends(SystemFunctionInstruction, _super);
    function SystemFunctionInstruction(sName, pReturnType, pExprTranslator, pArgumentTypes) {
        _super.call(this);
        this._pExprTranslator = null;
        this._pName = null;
        this._pReturnType = null;
        this._pArguments = null;
        this._sDefinition = "";
        this._sImplementation = "";
        this._pExtSystemTypeList = null;
        this._pExtSystemFunctionList = null;
        this._pExtSystemMacrosList = null;
        this.inline = getNumNeededArguments();
        this.number = {
            return: this._pArguments.length
        };
        this.inline = hasImplementation();
        this.bool = {
            return: true
        };
        this.inline = getType();
        this.IAFXVariableTypeInstruction = {
            return: this.getReturnType()
        };
        this.inline = getReturnType();
        this.IAFXVariableTypeInstruction = {
            return: this._pReturnType
        };
        this.inline = getFunctionType();
        this.EFunctionType = {
            return: EFunctionType.k_Function
        };
        this.inline = setFunctionType(eFunctionType, EFunctionType);
        this._eInstructionType = EAFXInstructionTypes.k_SystemFunctionInstruction;
        this._pName = new IdInstruction();
        this._pName.setName(sName);
        this._pName.setParent(this);
        this._pReturnType = new VariableTypeInstruction();
        this._pReturnType.pushType(pReturnType);
        this._pReturnType.setParent(this);
        this._pArguments = [];
        if (!isNull(pArgumentTypes)) {
            for(var i = 0; i < pArgumentTypes.length; i++) {
                var pArgument = new TypedInstruction();
                pArgument.setType(pArgumentTypes[i]);
                pArgument.setParent(this);
                this._pArguments.push(pArgument);
            }
        }
        this._pExprTranslator = pExprTranslator;
    }
    SystemFunctionInstruction.prototype.setDeclCode = function (sDefenition, sImplementation) {
        this._sDefinition = sDefenition;
        this._sImplementation = sImplementation;
    };
    SystemFunctionInstruction.prototype.toFinalCode = function () {
        return this._sDefinition + this._sImplementation;
    };
    SystemFunctionInstruction.prototype.toFinalDefCode = function () {
        return this._sDefinition;
    };
    SystemFunctionInstruction.prototype.setUsedSystemData = function (pTypeList, pFunctionList, pMacrosList) {
        this._pExtSystemTypeList = pTypeList;
        this._pExtSystemFunctionList = pFunctionList;
        this._pExtSystemMacrosList = pMacrosList;
    };
    SystemFunctionInstruction.prototype.closeSystemDataInfo = function () {
        for(var i = 0; i < this._pExtSystemFunctionList.length; i++) {
            var pFunction = this._pExtSystemFunctionList[i];
            var pTypes = pFunction._getExtSystemTypeList();
            var pMacroses = pFunction._getExtSystemMacrosList();
            var pFunctions = pFunction._getExtSystemFunctionList();
            for(var j = 0; j < pTypes.length; j++) {
                if (this._pExtSystemTypeList.indexOf(pTypes[j]) === -1) {
                    this._pExtSystemTypeList.push(pTypes[j]);
                }
            }
            for(var j = 0; j < pMacroses.length; j++) {
                if (this._pExtSystemMacrosList.indexOf(pMacroses[j]) === -1) {
                    this._pExtSystemMacrosList.push(pMacroses[j]);
                }
            }
            for(var j = 0; j < pFunctions.length; j++) {
                if (this._pExtSystemFunctionList.indexOf(pFunctions[j]) === -1) {
                    this._pExtSystemFunctionList.unshift(pFunctions[j]);
                }
            }
        }
    };
    SystemFunctionInstruction.prototype.setExprTranslator = function (pExprTranslator) {
        this._pExprTranslator = pExprTranslator;
    };
    SystemFunctionInstruction.prototype.getNameId = function () {
        return this._pName;
    };
    SystemFunctionInstruction.prototype.getArguments = function () {
        return this._pArguments;
    };
    return SystemFunctionInstruction;
})(DeclInstruction);
exports.SystemFunctionInstruction = SystemFunctionInstruction;
void {};
closeArguments(pArguments, IAFXInstruction[]);
IAFXInstruction[];
 {
    return this._pExprTranslator.toInstructionList(pArguments);
}
setFunctionDef(pFunctionDef, IAFXDeclInstruction);
void {};
setImplementation(pImplementation, IAFXStmtInstruction);
void {};
inline;
clone(pRelationMap ?  : IAFXInstructionMap);
SystemFunctionInstruction;
 {
    return this;
}
_addOutVariable(pVariable, IAFXVariableDeclInstruction);
bool;
 {
    return false;
}
_getOutVariable();
IAFXVariableDeclInstruction;
 {
    return null;
}
_getVertexShader();
IAFXFunctionDeclInstruction;
 {
    return null;
}
_getPixelShader();
IAFXFunctionDeclInstruction;
 {
    return null;
}
_markUsedAs(eUsedType, EFunctionType);
void {};
_isUsedAs(eUsedType, EFunctionType);
bool;
 {
    return true;
}
_isUsedAsFunction();
bool;
 {
    return true;
}
_isUsedAsVertex();
bool;
 {
    return true;
}
_isUsedAsPixel();
bool;
 {
    return true;
}
_markUsedInVertex();
void {};
_markUsedInPixel();
void {};
_isUsedInVertex();
bool;
 {
    return null;
}
_isUsedInPixel();
bool;
 {
    return null;
}
_isUsed();
bool;
 {
    return null;
}
_checkVertexUsage();
bool;
 {
    return this._isForVertex();
}
_checkPixelUsage();
bool;
 {
    return this._isForPixel();
}
_checkDefenitionForVertexUsage();
bool;
 {
    return false;
}
_checkDefenitionForPixelUsage();
bool;
 {
    return false;
}
_canUsedAsFunction();
bool;
 {
    return true;
}
_notCanUsedAsFunction();
void {};
_addUsedFunction(pFunction, IAFXFunctionDeclInstruction);
bool;
 {
    return false;
}
_addUsedVariable(pVariable, IAFXVariableDeclInstruction);
void {};
_getUsedFunctionList();
IAFXFunctionDeclInstruction[];
 {
    return null;
}
_isBlackListFunction();
bool;
 {
    return false;
}
_addToBlackList();
void {};
_getStringDef();
string;
 {
    return "system_func";
}
_convertToVertexShader();
IAFXFunctionDeclInstruction;
 {
    return null;
}
_convertToPixelShader();
IAFXFunctionDeclInstruction;
 {
    return null;
}
_prepareForVertex();
void {};
_prepareForPixel();
void {};
addUsedVariableType(pType, IAFXVariableTypeInstruction, eUsedMode, EVarUsedMode);
bool;
 {
    return false;
}
_generateInfoAboutUsedData();
void {};
inline;
_getAttributeVariableMap();
IAFXVariableDeclMap;
 {
    return null;
}
inline;
_getVaryingVariableMap();
IAFXVariableDeclMap;
 {
    return null;
}
inline;
_getSharedVariableMap();
IAFXVariableDeclMap;
 {
    return null;
}
inline;
_getGlobalVariableMap();
IAFXVariableDeclMap;
 {
    return null;
}
inline;
_getUniformVariableMap();
IAFXVariableDeclMap;
 {
    return null;
}
inline;
_getForeignVariableMap();
IAFXVariableDeclMap;
 {
    return null;
}
inline;
_getTextureVariableMap();
IAFXVariableDeclMap;
 {
    return null;
}
inline;
_getUsedComplexTypeMap();
IAFXTypeMap;
 {
    return null;
}
inline;
_getAttributeVariableKeys();
number[];
 {
    return null;
}
inline;
_getVaryingVariableKeys();
number[];
 {
    return null;
}
inline;
_getSharedVariableKeys();
number[];
 {
    return null;
}
inline;
_getUniformVariableKeys();
number[];
 {
    return null;
}
inline;
_getForeignVariableKeys();
number[];
 {
    return null;
}
inline;
_getGlobalVariableKeys();
number[];
 {
    return null;
}
inline;
_getTextureVariableKeys();
number[];
 {
    return null;
}
inline;
_getUsedComplexTypeKeys();
number[];
 {
    return null;
}
_getExtSystemFunctionList();
IAFXFunctionDeclInstruction[];
 {
    return this._pExtSystemFunctionList;
}
_getExtSystemMacrosList();
IAFXSimpleInstruction[];
 {
    return this._pExtSystemMacrosList;
}
_getExtSystemTypeList();
IAFXTypeDeclInstruction[];
 {
    return this._pExtSystemTypeList;
}
var FunctionDefInstruction = (function (_super) {
    __extends(FunctionDefInstruction, _super);
    function FunctionDefInstruction() {
        _super.call(this);
        this._pParameterList = null;
        this._pParamListForShaderCompile = null;
        this._pParamListForShaderInput = null;
        this._isComplexShaderInput = false;
        this._pReturnType = null;
        this._pFunctionName = null;
        this._nParamsNeeded = 0;
        this._sDefinition = "";
        this._isAnalyzedForVertexUsage = false;
        this._isAnalyzedForPixelUsage = false;
        this._bCanUsedAsFunction = true;
        this._bShaderDef = false;
        this.inline = setType(pType, IAFXTypeInstruction);
        this._pInstructionList = null;
        this._pParameterList = [];
        this._eInstructionType = EAFXInstructionTypes.k_FunctionDefInstruction;
    }
    FunctionDefInstruction.prototype.toFinalCode = function () {
        var sCode = "";
        if (!this.isShaderDef()) {
            sCode += this._pReturnType.toFinalCode();
            sCode += " " + this._pFunctionName.toFinalCode();
            sCode += "(";
            for(var i = 0; i < this._pParameterList.length; i++) {
                sCode += this._pParameterList[i].toFinalCode();
                if (i !== this._pParameterList.length - 1) {
                    sCode += ",";
                }
            }
            sCode += ")";
        } else {
            sCode = "void " + this._pFunctionName.toFinalCode() + "()";
        }
        return sCode;
    };
    return FunctionDefInstruction;
})(DeclInstruction);
exports.FunctionDefInstruction = FunctionDefInstruction;
void {
    this: ,
    setReturnType: (pType)
};
inline;
getType();
IAFXTypeInstruction;
 {
    return this.getReturnType();
}
inline;
setReturnType(pReturnType, IAFXVariableTypeInstruction);
bool;
 {
    this._pReturnType = pReturnType;
    pReturnType.setParent(this);
    return true;
}
inline;
getReturnType();
IAFXVariableTypeInstruction;
 {
    return this._pReturnType;
}
inline;
setFunctionName(pNameId, IAFXIdInstruction);
bool;
 {
    this._pFunctionName = pNameId;
    pNameId.setParent(this);
    return true;
}
inline;
getName();
string;
 {
    return this._pFunctionName.getName();
}
inline;
getRealName();
string;
 {
    return this._pFunctionName.getRealName();
}
inline;
getNameId();
IAFXIdInstruction;
 {
    return this._pFunctionName;
}
inline;
getArguments();
IAFXVariableDeclInstruction[];
 {
    return this._pParameterList;
}
inline;
getNumNeededArguments();
number;
 {
    return this._nParamsNeeded;
}
inline;
markAsShaderDef(isShaderDef, bool);
void {
    this: ,
    _bShaderDef:  = isShaderDef
};
inline;
isShaderDef();
bool;
 {
    return this._bShaderDef;
}
addParameter(pParameter, IAFXVariableDeclInstruction, isStrictModeOn ?  : bool);
bool;
 {
    if (this._pParameterList.length > this._nParamsNeeded && !pParameter.hasInitializer()) {
        this.setError(2245, {
            funcName: this._pFunctionName.getName(),
            varName: pParameter.getName()
        });
        return false;
    }
    var pParameterType = pParameter.getType();
    if (pParameterType.isPointer() || pParameterType._containPointer()) {
        if (pParameterType.hasUsage("uniform") || pParameterType.hasUsage("out") || pParameterType.hasUsage("inout")) {
            this.setError(2265, {
                funcName: this._pFunctionName.getName(),
                varName: pParameter.getName()
            });
            return false;
        }
        this._isAnalyzedForVertexUsage = false;
        this._isAnalyzedForPixelUsage = true;
        this._setForPixel(false);
        this._bCanUsedAsFunction = false;
        pParameterType._setVideoBufferInDepth();
    } else if (!isStrictModeOn) {
        if (pParameterType.isComplex() && !pParameterType.hasFieldWithoutSemantic() && pParameterType.hasAllUniqueSemantics()) {
            if (pParameter.getSemantic() === "" && pParameterType.hasAllUniqueSemantics() && !pParameterType.hasFieldWithoutSemantic()) {
                pParameterType._addPointIndexInDepth();
            } else {
                pParameterType.addPointIndex(false);
                pParameterType._setVideoBufferInDepth();
            }
        } else if (pParameter.getSemantic() !== "") {
            pParameterType.addPointIndex(false);
            pParameterType._setVideoBufferInDepth();
        }
    }
    this._pParameterList.push(pParameter);
    pParameter.setParent(this);
    if (!pParameter.hasInitializer()) {
        this._nParamsNeeded++;
    }
    return true;
}
inline;
getParameListForShaderInput();
IAFXVariableDeclInstruction[];
 {
    return this._pParamListForShaderInput;
}
inline;
isComplexShaderInput();
bool;
 {
    return this._isComplexShaderInput;
}
clone(pRelationMap, IAFXInstructionMap = {});
FunctionDefInstruction;
 {
    var pClone = _super.prototype.clone.call(this, pRelationMap);
    pClone.setFunctionName(this._pFunctionName.clone(pRelationMap));
    pClone.setReturnType(this.getReturnType().clone(pRelationMap));
    for(var i = 0; i < this._pParameterList.length; i++) {
        pClone.addParameter(this._pParameterList[i].clone(pRelationMap));
    }
    var pShaderParams = [];
    for(var i = 0; i < this._pParamListForShaderInput.length; i++) {
        pShaderParams.push(this._pParamListForShaderInput[i].clone(pRelationMap));
    }
    pClone._setShaderParams(pShaderParams, this._isComplexShaderInput);
    pClone._setAnalyzedInfo(this._isAnalyzedForVertexUsage, this._isAnalyzedForPixelUsage, this._bCanUsedAsFunction);
    return pClone;
}
_setShaderParams(pParamList, IAFXVariableDeclInstruction[], isComplexInput, bool);
void {
    this: ,
    _pParamListForShaderInput:  = pParamList
};
this._isComplexShaderInput = isComplexInput;
_setAnalyzedInfo(isAnalyzedForVertexUsage, bool, isAnalyzedForPixelUsage, bool, bCanUsedAsFunction, bool);
void {
    this: ,
    _isAnalyzedForVertexUsage:  = isAnalyzedForVertexUsage
};
this._isAnalyzedForPixelUsage = isAnalyzedForPixelUsage;
this._bCanUsedAsFunction = bCanUsedAsFunction;
_getStringDef();
string;
 {
    if (this._sDefinition === "") {
        this._sDefinition = this._pReturnType.getHash() + " " + this.getName() + "(";
        for(var i = 0; i < this._pParameterList.length; i++) {
            this._sDefinition += this._pParameterList[i].getType().getHash() + ",";
        }
        this._sDefinition += ")";
    }
    return this._sDefinition;
}
_canUsedAsFunction();
bool;
 {
    return this._bCanUsedAsFunction;
}
_checkForVertexUsage();
bool;
 {
    if (this._isAnalyzedForVertexUsage) {
        return this._isForVertex();
    }
    this._isAnalyzedForVertexUsage = true;
    var isGood = true;
    isGood = this.checkReturnTypeForVertexUsage();
    if (!isGood) {
        this._setForVertex(false);
        return false;
    }
    isGood = this.checkArgumentsForVertexUsage();
    if (!isGood) {
        this._setForVertex(false);
        return false;
    }
    this._setForVertex(true);
    return true;
}
_checkForPixelUsage();
bool;
 {
    if (this._isAnalyzedForPixelUsage) {
        return this._isForPixel();
    }
    this._isAnalyzedForPixelUsage = true;
    var isGood = true;
    isGood = this.checkReturnTypeForPixelUsage();
    if (!isGood) {
        this._setForPixel(false);
        return false;
    }
    isGood = this.checkArgumentsForPixelUsage();
    if (!isGood) {
        this._setForPixel(false);
        return false;
    }
    this._setForPixel(true);
    return true;
}
checkReturnTypeForVertexUsage();
bool;
 {
    var pReturnType = this._pReturnType;
    var isGood = true;
    if (pReturnType.isEqual(getEffectBaseType("void"))) {
        return true;
    }
    if (pReturnType.isComplex()) {
        isGood = !pReturnType.hasFieldWithoutSemantic();
        if (!isGood) {
            return false;
        }
        isGood = pReturnType.hasAllUniqueSemantics();
        if (!isGood) {
            return false;
        }
        isGood = !pReturnType._containSampler();
        if (!isGood) {
            return false;
        }
        isGood = !pReturnType._containPointer() && !pReturnType.isPointer();
        if (!isGood) {
            return false;
        }
        isGood = !pReturnType._containComplexType();
        if (!isGood) {
            return false;
        }
        return true;
    } else {
        isGood = pReturnType.isEqual(getEffectBaseType("float4"));
        if (!isGood) {
            return false;
        }
        isGood = (this.getSemantic() === "POSITION");
        if (!isGood) {
            return false;
        }
        return true;
    }
}
checkReturnTypeForPixelUsage();
bool;
 {
    var pReturnType = this._pReturnType;
    var isGood = true;
    if (pReturnType.isEqual(getEffectBaseType("void"))) {
        return true;
    }
    isGood = pReturnType.isBase();
    if (!isGood) {
        return false;
    }
    isGood = pReturnType.isEqual(getEffectBaseType("float4"));
    if (!isGood) {
        return false;
    }
    isGood = this.getSemantic() === "COLOR";
    if (!isGood) {
        return false;
    }
    return true;
}
checkArgumentsForVertexUsage();
bool;
 {
    var pArguments = this._pParameterList;
    var isAttributeByStruct = false;
    var isAttributeByParams = false;
    var isStartAnalyze = false;
    this._pParamListForShaderInput = [];
    this._pParamListForShaderCompile = [];
    for(var i = 0; i < pArguments.length; i++) {
        var pParam = pArguments[i];
        if (pParam.isUniform()) {
            this._pParamListForShaderCompile.push(pParam);
            continue;
        }
        if (!isStartAnalyze) {
            if (pParam.getSemantic() === "") {
                if (pParam.getType().isBase() || pParam.getType().hasFieldWithoutSemantic() || !pParam.getType().hasAllUniqueSemantics()) {
                    return false;
                }
                isAttributeByStruct = true;
            } else if (pParam.getSemantic() !== "") {
                if (pParam.getType().isComplex() && (pParam.getType().hasFieldWithoutSemantic() || !pParam.getType().hasAllUniqueSemantics())) {
                    return false;
                }
                isAttributeByParams = true;
            }
            isStartAnalyze = true;
        } else if (isAttributeByStruct) {
            return false;
        } else if (isAttributeByParams) {
            if (pParam.getSemantic() === "") {
                return false;
            }
            if (pParam.getType().isComplex() && (pParam.getType().hasFieldWithoutSemantic() || !pParam.getType().hasAllUniqueSemantics())) {
                return false;
            }
        }
        this._pParamListForShaderInput.push(pParam);
    }
    if (isAttributeByStruct) {
        this._isComplexShaderInput = true;
    }
    return true;
}
checkArgumentsForPixelUsage();
bool;
 {
    var pArguments = this._pParameterList;
    var isVaryingsByStruct = false;
    var isVaryingsByParams = false;
    var isStartAnalyze = false;
    this._pParamListForShaderInput = [];
    this._pParamListForShaderCompile = [];
    for(var i = 0; i < pArguments.length; i++) {
        var pParam = pArguments[i];
        if (pParam.isUniform()) {
            this._pParamListForShaderCompile.push(pParam);
            continue;
        }
        if (!isStartAnalyze) {
            if (pParam.getSemantic() === "") {
                if (pParam.getType().isBase() || pParam.getType().hasFieldWithoutSemantic() || !pParam.getType().hasAllUniqueSemantics() || pParam.getType()._containSampler() || pParam.getType()._containPointer() || pParam.getType().isPointer()) {
                    return false;
                }
                isVaryingsByStruct = true;
            } else if (pParam.getSemantic() !== "") {
                if (pParam.getType().isPointer() || pParam.getType()._containPointer() || pParam.getType()._containSampler() || isSamplerType(pParam.getType())) {
                    return false;
                }
                if (pParam.getType().isComplex() && (pParam.getType().hasFieldWithoutSemantic() || !pParam.getType().hasAllUniqueSemantics())) {
                    return false;
                }
                isVaryingsByParams = true;
            }
            isStartAnalyze = true;
        } else if (isVaryingsByStruct) {
            return false;
        } else if (isVaryingsByParams) {
            if (pParam.getSemantic() === "") {
                return false;
            }
            if (pParam.getType().isPointer() || pParam.getType()._containPointer() || pParam.getType()._containSampler() || isSamplerType(pParam.getType())) {
                return false;
            }
            if (pParam.getType().isComplex() && (pParam.getType().hasFieldWithoutSemantic() || !pParam.getType().hasAllUniqueSemantics())) {
                return false;
            }
        }
        this._pParamListForShaderInput.push(pParam);
    }
    if (isVaryingsByStruct) {
        this._isComplexShaderInput = true;
    }
    return true;
}
var akra;
(function (akra) {
    (function (fx) {
        var Effect = (function () {
            function Effect(pComposer) {
                this._pComposer = null;
                this._pParseTree = null;
                this._pAnalyzedNode = null;
                this._pEffectScope = null;
                this._pCurrentInstruction = null;
                this._pCurrentFunction = null;
                this._pStatistics = null;
                this._sAnalyzedFileName = "";
                this._pSystemMacros = null;
                this._pSystemTypes = null;
                this._pSystemFunctionsMap = null;
                this._pSystemFunctionHashMap = null;
                this._pSystemVariables = null;
                this._pPointerForExtractionList = null;
                this._pFunctionWithImplementationList = null;
                this._pTechniqueList = null;
                this._pTechniqueMap = null;
                this._isAnalyzeInPass = false;
                this._sProvideNameSpace = "";
                this._pGlobalComponentList = null;
                this._pGlobalComponetShiftList = null;
                this._pAddedTechniqueList = null;
                this.inline = getTechniqueList();
                this.IAFXTechniqueInstruction = [];
                this._pComposer = pComposer;
                this._pParseTree = null;
                this._pAnalyzedNode = null;
                this._pEffectScope = new ProgramScope();
                this._pCurrentInstruction = null;
                this._pStatistics = null;
                this._sAnalyzedFileName = "";
                this._pPointerForExtractionList = [];
                this._pFunctionWithImplementationList = [];
                this._pTechniqueList = [];
                this._pTechniqueMap = {};
                this.initSystemMacros();
                this.initSystemTypes();
                this.initSystemFunctions();
                this.initSystemVariables();
            }
            Effect.pSystemMacros = null;
            Effect.pSystemTypes = null;
            Effect.pSystemFunctions = null;
            Effect.pSystemVariables = null;
            Effect.pSystemVertexOut = null;
            Effect.prototype.analyze = function (pTree) {
                var pRootNode = pTree.root;
                var iParseTime = akra.now();
                this._pParseTree = pTree;
                this._pStatistics = {
                    time: 0
                };
                try  {
                    this.newScope();
                    this.analyzeGlobalUseDecls();
                    this.analyzeGlobalProvideDecls();
                    this.analyzeGlobalTypeDecls();
                    this.analyzeFunctionDefinitions();
                    this.analyzeGlobalImports();
                    this.analyzeTechniqueImports();
                    this.analyzeVariableDecls();
                    this.analyzeFunctionDecls();
                    this.analyzeTechniques();
                    this.endScope();
                } catch (e) {
                    throw e;
                }
                iParseTime = akra.now() - iParseTime;
                this._pStatistics.time = iParseTime;
                return true;
            };
            Effect.prototype.getStats = function () {
                return this._pStatistics;
            };
            Effect.prototype.setAnalyzedFileName = function (sFileName) {
                this._sAnalyzedFileName = sFileName;
            };
            Effect.prototype.clear = function () {
            };
            return Effect;
        })();
        fx.Effect = Effect;        
 {
            return this._pTechniqueList;
        }
        getBaseVertexOutType();
        ComplexTypeInstruction;
 {
            return Effect.pSystemVertexOut;
        }
        getSystemType(sTypeName, string);
        SystemTypeInstruction;
 {
            return isDef(Effect.pSystemTypes[sTypeName]) ? Effect.pSystemTypes[sTypeName] : null;
        }
        getSystemVariable(sName, string);
        IAFXVariableDeclInstruction;
 {
            return isDef(Effect.pSystemVariables[sName]) ? Effect.pSystemVariables[sName] : null;
        }
        getSystemMacros(sName, string);
        IAFXSimpleInstruction;
 {
            return isDef(Effect.pSystemMacros[sName]) ? Effect.pSystemMacros[sName] : null;
        }
        findSystemFunction(sFunctionName, string, pArguments, IAFXTypedInstruction[]);
        IAFXFunctionDeclInstruction;
 {
            var pSystemFunctions = Effect.pSystemFunctions[sFunctionName];
            if (!isDef(pSystemFunctions)) {
                return null;
            }
            if (isNull(pArguments)) {
                for(var i = 0; i < pSystemFunctions.length; i++) {
                    if (pSystemFunctions[i].getNumNeededArguments() === 0) {
                        return pSystemFunctions[i];
                    }
                }
            }
            for(var i = 0; i < pSystemFunctions.length; i++) {
                if (pArguments.length !== pSystemFunctions[i].getNumNeededArguments()) {
                    continue;
                }
                var pTestedArguments = pSystemFunctions[i].getArguments();
                var isOk = true;
                for(var j = 0; j < pArguments.length; j++) {
                    isOk = false;
                    if (!pArguments[j].getType().isEqual(pTestedArguments[j].getType())) {
                        break;
                    }
                    isOk = true;
                }
                if (isOk) {
                    return pSystemFunctions[i];
                }
            }
        }
        createVideoBufferVariable();
        IAFXVariableDeclInstruction;
 {
            var pBuffer = new VariableDeclInstruction();
            var pBufferType = new VariableTypeInstruction();
            var pBufferName = new IdInstruction();
            pBufferType.pushType(Effect.getSystemType("video_buffer"));
            pBuffer.push(pBufferType, true);
            pBuffer.push(pBufferName, true);
            return pBuffer;
        }
        generateSuffixLiterals(pLiterals, string[], pOutput, BoolMap, iDepth ?  : number = 0);
        void {
            if: (iDepth >= pLiterals.length)
        };
 {
            return;
        }
        if (iDepth === 0) {
            for(var i = 0; i < pLiterals.length; i++) {
                pOutput[pLiterals[i]] = true;
            }
            iDepth = 1;
        }
        var pOutputKeys = Object.keys(pOutput);
        for(var i = 0; i < pLiterals.length; i++) {
            for(var j = 0; j < pOutputKeys.length; j++) {
                if (pOutputKeys[j].indexOf(pLiterals[i]) !== -1) {
                    pOutput[pOutputKeys[j] + pLiterals[i]] = false;
                } else {
                    pOutput[pOutputKeys[j] + pLiterals[i]] = (pOutput[pOutputKeys[j]] === false) ? false : true;
                }
            }
        }
        iDepth++;
        this.generateSuffixLiterals(pLiterals, pOutput, iDepth);
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
initSystemMacros();
void {
    if: (isNull(Effect.pSystemMacros))
};
 {
    this._pSystemMacros = Effect.pSystemMacros = {};
    this.addSystemMacros();
}
this._pSystemMacros = Effect.pSystemMacros;
initSystemTypes();
void {
    if: (isNull(Effect.pSystemTypes))
};
 {
    this._pSystemTypes = Effect.pSystemTypes = {};
    this.addSystemTypeScalar();
    this.addSystemTypeVector();
    this.addSystemTypeMatrix();
    this.generateBaseVertexOutput();
}
this._pSystemTypes = Effect.pSystemTypes;
initSystemFunctions();
void {
    if: (isNull(Effect.pSystemFunctions))
};
 {
    this._pSystemFunctionsMap = Effect.pSystemFunctions = {};
    this.addSystemFunctions();
}
this._pSystemFunctionsMap = Effect.pSystemFunctions;
initSystemVariables();
void {
    if: (isNull(Effect.pSystemVariables))
};
 {
    this._pSystemVariables = Effect.pSystemVariables = {};
    this.addSystemVariables();
}
this._pSystemVariables = Effect.pSystemVariables;
addSystemMacros();
void {
    this: ,
    generateSystemMacros: ("ExtractMacros", 
"\n#ifdef AKRA_FRAGMENT\n" + "//#define texture2D(sampler, ) texture2D\n" + "#else\n" + "#define texture2D(A, B) texture2DLod(A, B, 0.)\n" + "#endif\n" + "#ifndef A_VB_COMPONENT3\n" + "#define A_VB_COMPONENT4\n" + "#endif\n" + "#ifdef A_VB_COMPONENT4\n" + "#define A_VB_ELEMENT_SIZE 4.\n" + "#endif\n" + "#ifdef A_VB_COMPONENT3\n" + "#define A_VB_ELEMENT_SIZE 3.\n" + "#endif\n" + "#define A_tex2D(S, H, X, Y) texture2D(S, vec2(H.stepX * X , H.stepY * Y))\n" + "#define A_tex2Dv(S, H, V) texture2D(S, V)\n")
};
addSystemVariables();
void {
    this: ,
    generateSystemVariable: ("fragCoord", 
"gl_FragCoord", 
"float4", 
false, 
true, 
true)
};
this.generateSystemVariable("frontFacing", "gl_FrontFacing", "bool", false, true, true);
this.generateSystemVariable("pointCoord", "gl_PointCoord", "float2", false, true, true);
this.generatePassEngineVariable();
generateSystemVariable(sName, string, sRealName, string, sTypeName, string, isForVertex, bool, isForPixel, bool, isOnlyRead, bool);
void {
    if: (isDef(this._pSystemVariables[sName]))
};
 {
    return;
}
var pVariableDecl = new VariableDeclInstruction();
var pName = new IdInstruction();
var pType = new VariableTypeInstruction();
pName.setName(sName);
pName.setRealName(sRealName);
pType.pushType(Effect.getSystemType(sTypeName));
if (isOnlyRead) {
    pType._canWrite(false);
}
pVariableDecl._setForVertex(isForVertex);
pVariableDecl._setForPixel(isForPixel);
pVariableDecl.push(pType, true);
pVariableDecl.push(pName, true);
this._pSystemVariables[sName] = pVariableDecl;
pVariableDecl.setBuiltIn(true);
generatePassEngineVariable();
void {
    var: pVariableDecl,
    IAFXVariableDeclInstruction:  = new VariableDeclInstruction()
};
var pName = new IdInstruction();
var pType = new VariableTypeInstruction();
pType._canWrite(false);
pType._markAsUnverifiable(true);
pName.setName("engine");
pName.setRealName("engine");
pVariableDecl.push(pType, true);
pVariableDecl.push(pName, true);
this._pSystemVariables["engine"] = pVariableDecl;
generateBaseVertexOutput();
void {
    var: pOutBasetype,
    ComplexTypeInstruction:  = new ComplexTypeInstruction()
};
var pPosition = new VariableDeclInstruction();
var pPointSize = new VariableDeclInstruction();
var pPositionType = new VariableTypeInstruction();
var pPointSizeType = new VariableTypeInstruction();
var pPositionId = new IdInstruction();
var pPointSizeId = new IdInstruction();
pPositionType.pushType(Effect.getSystemType("float4"));
pPointSizeType.pushType(Effect.getSystemType("float"));
pPositionId.setName("pos");
pPositionId.setRealName("POSITION");
pPointSizeId.setName("psize");
pPointSizeId.setRealName("PSIZE");
pPosition.push(pPositionType, true);
pPosition.push(pPositionId, true);
pPointSize.push(pPointSizeType, true);
pPointSize.push(pPointSizeId, true);
pPosition.setSemantic("POSITION");
pPointSize.setSemantic("PSIZE");
var pFieldCollector = new InstructionCollector();
pFieldCollector.push(pPosition, false);
pFieldCollector.push(pPointSize, false);
pOutBasetype.addFields(pFieldCollector, true);
pOutBasetype.setName("VS_OUT");
pOutBasetype.setRealName("VS_OUT_S");
Effect.pSystemVertexOut = pOutBasetype;
addSystemFunctions();
void {
    this: ,
    _pSystemFunctionHashMap:  = {}
};
this.generateSystemFunction("dot", "dot($1,$2)", "float", [
    "template", 
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("mul", "$1*$2", "template", [
    "template", 
    "template"
], [
    "float", 
    "int", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("mod", "mod($1,$2)", "float", [
    "float", 
    "float"
], null);
this.generateSystemFunction("floor", "floor($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("ceil", "ceil($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("fract", "fract($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("abs", "abs($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("normalize", "normalize($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("length", "length($1)", "float", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("cross", "cross($1, $2)", "float3", [
    "float3", 
    "float3"
], null);
this.generateSystemFunction("reflect", "reflect($1,$2)", "template", [
    "template", 
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("max", "max($1,$2)", "template", [
    "template", 
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("max", "max($1,$2)", "template", [
    "template", 
    "float"
], [
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("min", "min($1,$2)", "template", [
    "template", 
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("min", "min($1,$2)", "template", [
    "template", 
    "float"
], [
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("clamp", "clamp($1,$2,$3)", "template", [
    "template", 
    "template", 
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("clamp", "clamp($1,$2,$3)", "template", [
    "template", 
    "float", 
    "float"
], [
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("pow", "pow($1,$2)", "template", [
    "template", 
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("mod", "mod($1,$2)", "template", [
    "template", 
    "template"
], [
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("mod", "mod($1,$2)", "template", [
    "template", 
    "float"
], [
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("exp", "exp($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("exp2", "exp2($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("log", "log($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("log2", "log2($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("inversesqrt", "inversesqrt($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("sqrt", "sqrt($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("all", "all($1)", "bool", [
    "template"
], [
    "bool2", 
    "bool3", 
    "bool4"
]);
this.generateSystemFunction("any", "any($1)", "bool", [
    "template"
], [
    "bool2", 
    "bool3", 
    "bool4"
]);
this.generateSystemFunction("not", "not($1)", "template", [
    "template"
], [
    "bool2", 
    "bool3", 
    "bool4"
]);
this.generateSystemFunction("lessThan", "lessThan($1,$2)", "bool2", [
    "template", 
    "template"
], [
    "float2", 
    "int2"
]);
this.generateSystemFunction("lessThan", "lessThan($1,$2)", "bool3", [
    "template", 
    "template"
], [
    "float3", 
    "int3"
]);
this.generateSystemFunction("lessThan", "lessThan($1,$2)", "bool4", [
    "template", 
    "template"
], [
    "float4", 
    "int4"
]);
this.generateSystemFunction("lessThanEqual", "lessThanEqual($1,$2)", "bool2", [
    "template", 
    "template"
], [
    "float2", 
    "int2"
]);
this.generateSystemFunction("lessThanEqual", "lessThanEqual($1,$2)", "bool3", [
    "template", 
    "template"
], [
    "float3", 
    "int3"
]);
this.generateSystemFunction("lessThanEqual", "lessThanEqual($1,$2)", "bool4", [
    "template", 
    "template"
], [
    "float4", 
    "int4"
]);
this.generateSystemFunction("equal", "equal($1,$2)", "bool2", [
    "template", 
    "template"
], [
    "float2", 
    "int2"
]);
this.generateSystemFunction("equal", "equal($1,$2)", "bool3", [
    "template", 
    "template"
], [
    "float3", 
    "int3"
]);
this.generateSystemFunction("equal", "equal($1,$2)", "bool4", [
    "template", 
    "template"
], [
    "float4", 
    "int4"
]);
this.generateSystemFunction("equal", "equal($1,$2)", "template", [
    "template", 
    "template"
], [
    "bool2", 
    "bool3", 
    "bool4"
]);
this.generateSystemFunction("notEqual", "notEqual($1,$2)", "bool2", [
    "template", 
    "template"
], [
    "float2", 
    "int2"
]);
this.generateSystemFunction("notEqual", "notEqual($1,$2)", "bool3", [
    "template", 
    "template"
], [
    "float3", 
    "int3"
]);
this.generateSystemFunction("notEqual", "notEqual($1,$2)", "bool4", [
    "template", 
    "template"
], [
    "float4", 
    "int4"
]);
this.generateSystemFunction("notEqual", "notEqual($1,$2)", "template", [
    "template", 
    "template"
], [
    "bool2", 
    "bool3", 
    "bool4"
]);
this.generateSystemFunction("greaterThan", "greaterThan($1,$2)", "bool2", [
    "template", 
    "template"
], [
    "float2", 
    "int2"
]);
this.generateSystemFunction("greaterThan", "greaterThan($1,$2)", "bool3", [
    "template", 
    "template"
], [
    "float3", 
    "int3"
]);
this.generateSystemFunction("greaterThan", "greaterThan($1,$2)", "bool4", [
    "template", 
    "template"
], [
    "float4", 
    "int4"
]);
this.generateSystemFunction("greaterThanEqual", "greaterThanEqual($1,$2)", "bool2", [
    "template", 
    "template"
], [
    "float2", 
    "int2"
]);
this.generateSystemFunction("greaterThanEqual", "greaterThanEqual($1,$2)", "bool3", [
    "template", 
    "template"
], [
    "float3", 
    "int3"
]);
this.generateSystemFunction("greaterThanEqual", "greaterThanEqual($1,$2)", "bool4", [
    "template", 
    "template"
], [
    "float4", 
    "int4"
]);
this.generateSystemFunction("radians", "radians($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("degrees", "degrees($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("sin", "sin($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("cos", "cos($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("tan", "tan($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("asin", "asin($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("acos", "acos($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("atan", "atan($1)", "template", [
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("atan", "atan($1, $2)", "template", [
    "template", 
    "template"
], [
    "float", 
    "float2", 
    "float3", 
    "float4"
]);
this.generateSystemFunction("tex2D", "texture2D($1,$2)", "float4", [
    "sampler", 
    "float2"
], null);
this.generateSystemFunction("tex2D", "texture2D($1,$2)", "float4", [
    "sampler2D", 
    "float2"
], null);
this.generateSystemFunction("tex2DProj", "texture2DProj($1,$2)", "float4", [
    "sampler", 
    "float3"
], null);
this.generateSystemFunction("tex2DProj", "texture2DProj($1,$2)", "float4", [
    "sampler2D", 
    "float3"
], null);
this.generateSystemFunction("tex2DProj", "texture2DProj($1,$2)", "float4", [
    "sampler", 
    "float4"
], null);
this.generateSystemFunction("tex2DProj", "texture2DProj($1,$2)", "float4", [
    "sampler2D", 
    "float4"
], null);
this.generateSystemFunction("texCUBE", "textureCube($1,$2)", "float4", [
    "sampler", 
    "float3"
], null);
this.generateSystemFunction("texCUBE", "textureCube($1,$2)", "float4", [
    "samplerCUBE", 
    "float3"
], null);
this.generateSystemFunction("tex2D", "texture2D($1,$2,$3)", "float4", [
    "sampler", 
    "float2", 
    "float"
], null, false, true);
this.generateSystemFunction("tex2D", "texture2D($1,$2,$3)", "float4", [
    "sampler2D", 
    "float2", 
    "float"
], null, false, true);
this.generateSystemFunction("tex2DProj", "texture2DProj($1,$2,$3)", "float4", [
    "sampler", 
    "float3", 
    "float"
], null, false, true);
this.generateSystemFunction("tex2DProj", "texture2DProj($1,$2,$3)", "float4", [
    "sampler2D", 
    "float3", 
    "float"
], null, false, true);
this.generateSystemFunction("tex2DProj", "texture2DProj($1,$2,$3)", "float4", [
    "sampler", 
    "float4", 
    "float"
], null, false, true);
this.generateSystemFunction("tex2DProj", "texture2DProj($1,$2,$3)", "float4", [
    "sampler2D", 
    "float4", 
    "float"
], null, false, true);
this.generateSystemFunction("texCUBE", "textureCube($1,$2,$3)", "float4", [
    "sampler", 
    "float3", 
    "float"
], null, false, true);
this.generateSystemFunction("texCUBE", "textureCube($1,$2,$3)", "float4", [
    "samplerCUBE", 
    "float3", 
    "float"
], null, false, true);
this.generateSystemFunction("tex2DLod", "texture2DLod($1,$2,$3)", "float4", [
    "sampler", 
    "float2", 
    "float"
], null, true, false);
this.generateSystemFunction("tex2DLod", "texture2DLod($1,$2,$3)", "float4", [
    "sampler2D", 
    "float2", 
    "float"
], null, true, false);
this.generateSystemFunction("tex2DProjLod", "texture2DProjLod($1,$2,$3)", "float4", [
    "sampler", 
    "float3", 
    "float"
], null, true, false);
this.generateSystemFunction("tex2DProjLod", "texture2DProjLod($1,$2,$3)", "float4", [
    "sampler2D", 
    "float3", 
    "float"
], null, true, false);
this.generateSystemFunction("tex2DProjLod", "texture2DProjLod($1,$2,$3)", "float4", [
    "sampler", 
    "float4", 
    "float"
], null, true, false);
this.generateSystemFunction("tex2DProjLod", "texture2DProjLod($1,$2,$3)", "float4", [
    "sampler2D", 
    "float4", 
    "float"
], null, true, false);
this.generateSystemFunction("texCUBELod", "textureCubeLod($1,$2,$3)", "float4", [
    "sampler", 
    "float3", 
    "float"
], null, true, false);
this.generateSystemFunction("texCUBELod", "textureCubeLod($1,$2,$3)", "float4", [
    "samplerCUBE", 
    "float3", 
    "float"
], null, true, false);
this.generateNotBuiltInSystemFuction("extractHeader", "void A_extractTextureHeader(const sampler2D src, out A_TextureHeader texture)", "{vec4 v = texture2D(src, vec2(0.00001)); " + "texture = A_TextureHeader(v.r, v.g, v.b, v.a);}", "void", [
    "video_buffer_header"
], null, [
    "ExtractMacros"
]);
this.generateNotBuiltInSystemFuction("extractFloat", "float A_extractFloat(const sampler2D sampler, const A_TextureHeader header, const float offset)", "{float pixelNumber = floor(offset / A_VB_ELEMENT_SIZE); " + "float y = floor(pixelNumber / header.width) + .5; " + "float x = mod(pixelNumber, header.width) + .5; " + "int shift = int(mod(offset, A_VB_ELEMENT_SIZE)); " + "\n#ifdef A_VB_COMPONENT4\n" + "if(shift == 0) return A_tex2D(sampler, header, x, y).r; " + "else if(shift == 1) return A_tex2D(sampler, header, x, y).g; " + "else if(shift == 2) return A_tex2D(sampler, header, x, y).b; " + "else if(shift == 3) return A_tex2D(sampler, header, x, y).a; " + "\n#endif\n" + "return 0.;}", "float", [
    "video_buffer_header"
], [
    "extractHeader"
], [
    "ExtractMacros"
]);
this.generateNotBuiltInSystemFuction("extractFloat2", "vec2 A_extractVec2(const sampler2D sampler, const A_TextureHeader header, const float offset)", "{float pixelNumber = floor(offset / A_VB_ELEMENT_SIZE); " + "float y = floor(pixelNumber / header.width) + .5; " + "float x = mod(pixelNumber, header.width) + .5; " + "int shift = int(mod(offset, A_VB_ELEMENT_SIZE)); " + "\n#ifdef A_VB_COMPONENT4\n" + "if(shift == 0) return A_tex2D(sampler, header, x, y).rg; " + "else if(shift == 1) return A_tex2D(sampler, header, x, y).gb; " + "else if(shift == 2) return A_tex2D(sampler, header, x, y).ba; " + "else if(shift == 3) { " + "if(int(x) == int(header.width - 1.)) " + "return vec2(A_tex2D(sampler, header, x, y).a, A_tex2D(sampler, header, 0., (y + 1.)).r); " + "else " + "return vec2(A_tex2D(sampler, header, x, y).a, A_tex2D(sampler, header, (x + 1.), y).r); " + "} " + "\n#endif\n" + "return vec2(0.);}", "float2", [
    "video_buffer_header"
], [
    "extractHeader"
], [
    "ExtractMacros"
]);
this.generateNotBuiltInSystemFuction("extractFloat3", "vec3 A_extractVec3(const sampler2D sampler, const A_TextureHeader header, const float offset)", "{float pixelNumber = floor(offset / A_VB_ELEMENT_SIZE); " + "float y = floor(pixelNumber / header.width) + .5; " + "float x = mod(pixelNumber, header.width) + .5; " + "int shift = int(mod(offset, A_VB_ELEMENT_SIZE)); " + "\n#ifdef A_VB_COMPONENT4\n" + "if(shift == 0) return A_tex2D(sampler, header, x, y).rgb; " + "else if(shift == 1) return A_tex2D(sampler, header, x, y).gba; " + "else if(shift == 2){ " + "if(int(x) == int(header.width - 1.))  return vec3(A_tex2D(sampler, header, x, y).ba, A_tex2D(sampler, header, 0., (y + 1.)).r); " + "else return vec3(A_tex2D(sampler, header, x, y).ba, A_tex2D(sampler, header, (x + 1.), y).r);} " + "else if(shift == 3){ " + "if(int(x) == int(header.width - 1.))  return vec3(A_tex2D(sampler, header, x, y).a, A_tex2D(sampler, header, 0., (y + 1.)).rg); " + "else return vec3(A_tex2D(sampler, header, x, y).a, A_tex2D(sampler, header, (x + 1.), y).rg);} " + "\n#endif\n" + "\n#ifdef A_VB_COMPONENT3\n" + "if(shift == 0) return A_tex2D(sampler, header,vec2(x,header.stepY*y)).rgb; " + "else if(shift == 1){ " + "if(x == header.width - 1.) return vec3(A_tex2D(sampler, header, x, y).gb, A_tex2D(sampler, header, 0., (y + 1.)).r); " + "else return vec3(A_tex2D(sampler, header, x, y).gb, A_tex2D(sampler, header, (x + 1.), y).r);} " + "else if(shift == 3){ " + "if(x == header.width - 1.) return vec3(A_tex2D(sampler, header, x, y).b, A_tex2D(sampler, header, 0., (y + 1.)).rg); " + "else return vec3(A_tex2D(sampler, header, x, y).b, A_tex2D(sampler, header, (x + 1)., y).rg);} " + "\n#endif\n" + "return vec3(0);}", "float3", [
    "video_buffer_header"
], [
    "extractHeader"
], [
    "ExtractMacros"
]);
this.generateNotBuiltInSystemFuction("extractFloat4", "vec4 A_extractVec4(const sampler2D sampler, const A_TextureHeader header, const float offset)", "{float pixelNumber = floor(offset / A_VB_ELEMENT_SIZE); " + "float y = floor(pixelNumber / header.width) + .5; " + "float x = mod(pixelNumber, header.width) + .5; " + "int shift = int(mod(offset, A_VB_ELEMENT_SIZE)); " + "\n#ifdef A_VB_COMPONENT4\n" + "if(shift == 0) return A_tex2D(sampler, header, x, y); " + "else if(shift == 1){ " + "if(int(x) == int(header.width - 1.)) " + "return vec4(A_tex2D(sampler, header, x, y).gba, A_tex2D(sampler, header, 0., (y + 1.)).r); " + "else " + "return vec4(A_tex2D(sampler, header, x, y).gba, A_tex2D(sampler, header, (x + 1.), y).r);} " + "else if(shift == 2){ " + "if(int(x) == int(header.width - 1.)) " + "return vec4(A_tex2D(sampler, header, x, y).ba, A_tex2D(sampler, header, 0., (y + 1.)).rg); " + "else " + "return vec4(A_tex2D(sampler, header, x, y).ba, A_tex2D(sampler, header, (x + 1.), y).rg);} " + "else if(shift == 3){ " + "if(int(x) == int(header.width - 1.)) " + "return vec4(A_tex2D(sampler, header, x, y).a, A_tex2D(sampler, header, 0., (y + 1.)).rgb); " + "else return vec4(A_tex2D(sampler, header, x, y).a, A_tex2D(sampler, header, (x + 1.), y).rgb);} " + "\n#endif\n" + "\n#ifdef A_VB_COMPONENT3\n" + "\n#endif\n" + "return vec4(0);}", "float4", [
    "video_buffer_header"
], [
    "extractHeader"
], [
    "ExtractMacros"
]);
this.generateNotBuiltInSystemFuction("findPixel", "vec2 A_findPixel(const A_TextureHeader header, const float offset)", "{float pixelNumber = floor(offset / A_VB_ELEMENT_SIZE); " + "return vec2(header.stepX * (mod(pixelNumber, header.width) + .5), header.stepY * (floor(pixelNumber / header.width) + .5));}", "float2", [
    "video_buffer_header"
], [
    "extractHeader"
], [
    "ExtractMacros"
]);
this.generateNotBuiltInSystemFuction("extractFloat4x4", "mat4 A_extractMat4(const sampler2D sampler, const A_TextureHeader header, const float offset)", "{return mat4(A_tex2Dv(sampler, header, A_findPixel(header, offset))," + "A_tex2Dv(sampler, header, A_findPixel(header, offset + 4.))," + "A_tex2Dv(sampler, header, A_findPixel(header, offset + 8.))," + "A_tex2Dv(sampler, header, A_findPixel(header, offset + 12.)));}", "float4x4", [
    "video_buffer_header"
], [
    "findPixel"
], [
    "ExtractMacros"
]);
generateSystemFunction(sName, string, sTranslationExpr, string, sReturnTypeName, string, pArgumentsTypes, string[], pTemplateTypes, string[], isForVertex ?  : bool = true, isForPixel ?  : bool = true);
void {
    var: pExprTranslator,
    ExprTemplateTranslator:  = new ExprTemplateTranslator(sTranslationExpr)
};
var pSystemFunctions = this._pSystemFunctionsMap;
var pTypes = null;
var sFunctionHash = "";
var pReturnType = null;
var pFunction = null;
if (!isNull(pTemplateTypes)) {
    for(var i = 0; i < pTemplateTypes.length; i++) {
        pTypes = [];
        sFunctionHash = sName + "(";
        pReturnType = (sReturnTypeName === "template") ? Effect.getSystemType(pTemplateTypes[i]) : Effect.getSystemType(sReturnTypeName);
        for(var j = 0; j < pArgumentsTypes.length; j++) {
            if (pArgumentsTypes[j] === "template") {
                pTypes.push(Effect.getSystemType(pTemplateTypes[i]));
                sFunctionHash += pTemplateTypes[i] + ",";
            } else {
                pTypes.push(Effect.getSystemType(pArgumentsTypes[j]));
                sFunctionHash += pArgumentsTypes[j] + ",";
            }
        }
        sFunctionHash += ")";
        if (this._pSystemFunctionHashMap[sFunctionHash]) {
            this._error(2248, {
                funcName: sFunctionHash
            });
        }
        pFunction = new SystemFunctionInstruction(sName, pReturnType, pExprTranslator, pTypes);
        if (!isDef(pSystemFunctions[sName])) {
            pSystemFunctions[sName] = [];
        }
        pFunction._setForVertex(isForVertex);
        pFunction._setForPixel(isForPixel);
        pSystemFunctions[sName].push(pFunction);
        pFunction.setBuiltIn(true);
    }
} else {
    if (sReturnTypeName === "template") {
        akra.logger.criticalError("Bad return type(TEMPLATE_TYPE) for system function '" + sName + "'.");
    }
    pReturnType = Effect.getSystemType(sReturnTypeName);
    pTypes = [];
    sFunctionHash = sName + "(";
    for(var i = 0; i < pArgumentsTypes.length; i++) {
        if (pArgumentsTypes[i] === "template") {
            akra.logger.criticalError("Bad argument type(TEMPLATE_TYPE) for system function '" + sName + "'.");
        } else {
            pTypes.push(Effect.getSystemType(pArgumentsTypes[i]));
            sFunctionHash += pArgumentsTypes[i] + ",";
        }
    }
    sFunctionHash += ")";
    if (this._pSystemFunctionHashMap[sFunctionHash]) {
        this._error(2248, {
            funcName: sFunctionHash
        });
    }
    pFunction = new SystemFunctionInstruction(sName, pReturnType, pExprTranslator, pTypes);
    pFunction._setForVertex(isForVertex);
    pFunction._setForPixel(isForPixel);
    if (!isDef(pSystemFunctions[sName])) {
        pSystemFunctions[sName] = [];
    }
    pSystemFunctions[sName].push(pFunction);
    pFunction.setBuiltIn(true);
}
generateSystemMacros(sMacrosName, string, sMacrosCode, string);
void {
    if: (isDef(this._pSystemMacros[sMacrosName]))
};
 {
    return;
}
var pMacros = new SimpleInstruction(sMacrosCode);
this._pSystemMacros[sMacrosName] = pMacros;
generateNotBuiltInSystemFuction(sName, string, sDefenition, string, sImplementation, string, sReturnType, string, pUsedTypes, string[], pUsedFunctions, string[], pUsedMacros, string[]);
void {
    if: (isDef(this._pSystemFunctionsMap[sName]))
};
 {
    return;
}
var pReturnType = Effect.getSystemType(sReturnType);
var pFunction = new SystemFunctionInstruction(sName, pReturnType, null, null);
pFunction.setDeclCode(sDefenition, sImplementation);
var pUsedExtSystemTypes = [];
var pUsedExtSystemFunctions = [];
var pUsedExtSystemMacros = [];
if (!isNull(pUsedTypes)) {
    for(var i = 0; i < pUsedTypes.length; i++) {
        var pTypeDecl = Effect.getSystemType(pUsedTypes[i]).getParent();
        if (!isNull(pTypeDecl)) {
            pUsedExtSystemTypes.push(pTypeDecl);
        }
    }
}
if (!isNull(pUsedMacros)) {
    for(var i = 0; i < pUsedMacros.length; i++) {
        pUsedExtSystemMacros.push(Effect.getSystemMacros(pUsedMacros[i]));
    }
}
if (!isNull(pUsedFunctions)) {
    for(var i = 0; i < pUsedFunctions.length; i++) {
        var pFindFunction = Effect.findSystemFunction(pUsedFunctions[i], null);
        pUsedExtSystemFunctions.push(pFindFunction);
    }
}
pFunction.setUsedSystemData(pUsedExtSystemTypes, pUsedExtSystemFunctions, pUsedExtSystemMacros);
pFunction.closeSystemDataInfo();
pFunction.setBuiltIn(false);
this._pSystemFunctionsMap[sName] = [
    pFunction
];
generateSystemType(sName, string, sRealName, string, iSize, number = 1, isArray, bool = false, pElementType, IAFXTypeInstruction = null, iLength, number = 1);
IAFXTypeInstruction;
 {
    if (isDef(this._pSystemTypes[sName])) {
        return null;
    }
    var pSystemType = new SystemTypeInstruction();
    pSystemType.setName(sName);
    pSystemType.setRealName(sRealName);
    pSystemType.setSize(iSize);
    if (isArray) {
        pSystemType.addIndex(pElementType, iLength);
    }
    this._pSystemTypes[sName] = pSystemType;
    pSystemType.setBuiltIn(true);
    return pSystemType;
}
generateNotBuildtInSystemType(sName, string, sRealName, string, sDeclString, string, iSize, number = 1, isArray, bool = false, pElementType, IAFXTypeInstruction = null, iLength, number = 1);
IAFXTypeInstruction;
 {
    if (isDef(this._pSystemTypes[sName])) {
        return null;
    }
    var pSystemType = new SystemTypeInstruction();
    pSystemType.setName(sName);
    pSystemType.setRealName(sRealName);
    pSystemType.setSize(iSize);
    pSystemType.setDeclString(sDeclString);
    if (isArray) {
        pSystemType.addIndex(pElementType, iLength);
    }
    this._pSystemTypes[sName] = pSystemType;
    pSystemType.setBuiltIn(false);
    var pSystemTypeDecl = new TypeDeclInstruction();
    pSystemTypeDecl.push(pSystemType, true);
    pSystemTypeDecl.setBuiltIn(false);
    return pSystemType;
}
addSystemTypeScalar();
void {
    this: ,
    generateSystemType: ("void", 
"void", 
0)
};
this.generateSystemType("int", "int", 1);
this.generateSystemType("bool", "bool", 1);
this.generateSystemType("float", "float", 1);
this.generateSystemType("ptr", "float", 1);
this.generateSystemType("string", "", 0);
this.generateSystemType("texture", "", 0);
this.generateSystemType("sampler", "sampler2D", 1);
this.generateSystemType("sampler2D", "sampler2D", 1);
this.generateSystemType("samplerCUBE", "samplerCube", 1);
this.generateSystemType("video_buffer", "sampler2D", 1);
this.generateNotBuildtInSystemType("video_buffer_header", "A_TextureHeader", "struct A_TextureHeader { float width; float height; float stepX; float stepY; }");
addSystemTypeVector();
void {
    var: pXYSuffix,
    BoolMap:  = {}
};
var pXYZSuffix = {};
var pXYZWSuffix = {};
var pRGSuffix = {};
var pRGBSuffix = {};
var pRGBASuffix = {};
var pSTSuffix = {};
var pSTPSuffix = {};
var pSTPQSuffix = {};
this.generateSuffixLiterals([
    "x", 
    "y"
], pXYSuffix);
this.generateSuffixLiterals([
    "x", 
    "y", 
    "z"
], pXYZSuffix);
this.generateSuffixLiterals([
    "x", 
    "y", 
    "z", 
    "w"
], pXYZWSuffix);
this.generateSuffixLiterals([
    "r", 
    "g"
], pRGSuffix);
this.generateSuffixLiterals([
    "r", 
    "g", 
    "b"
], pRGBSuffix);
this.generateSuffixLiterals([
    "r", 
    "g", 
    "b", 
    "a"
], pRGBASuffix);
this.generateSuffixLiterals([
    "s", 
    "t"
], pSTSuffix);
this.generateSuffixLiterals([
    "s", 
    "t", 
    "p"
], pSTPSuffix);
this.generateSuffixLiterals([
    "s", 
    "t", 
    "p", 
    "q"
], pSTPQSuffix);
var pFloat = Effect.getSystemType("float");
var pInt = Effect.getSystemType("int");
var pBool = Effect.getSystemType("bool");
var pFloat2 = this.generateSystemType("float2", "vec2", 0, true, pFloat, 2);
var pFloat3 = this.generateSystemType("float3", "vec3", 0, true, pFloat, 3);
var pFloat4 = this.generateSystemType("float4", "vec4", 0, true, pFloat, 4);
var pInt2 = this.generateSystemType("int2", "ivec2", 0, true, pInt, 2);
var pInt3 = this.generateSystemType("int3", "ivec3", 0, true, pInt, 3);
var pInt4 = this.generateSystemType("int4", "ivec4", 0, true, pInt, 4);
var pBool2 = this.generateSystemType("bool2", "bvec2", 0, true, pBool, 2);
var pBool3 = this.generateSystemType("bool3", "bvec3", 0, true, pBool, 3);
var pBool4 = this.generateSystemType("bool4", "bvec4", 0, true, pBool, 4);
this.addFieldsToVectorFromSuffixObject(pXYSuffix, pFloat2, "float");
this.addFieldsToVectorFromSuffixObject(pRGSuffix, pFloat2, "float");
this.addFieldsToVectorFromSuffixObject(pSTSuffix, pFloat2, "float");
this.addFieldsToVectorFromSuffixObject(pXYZSuffix, pFloat3, "float");
this.addFieldsToVectorFromSuffixObject(pRGBSuffix, pFloat3, "float");
this.addFieldsToVectorFromSuffixObject(pSTPSuffix, pFloat3, "float");
this.addFieldsToVectorFromSuffixObject(pXYZWSuffix, pFloat4, "float");
this.addFieldsToVectorFromSuffixObject(pRGBASuffix, pFloat4, "float");
this.addFieldsToVectorFromSuffixObject(pSTPQSuffix, pFloat4, "float");
this.addFieldsToVectorFromSuffixObject(pXYSuffix, pInt2, "int");
this.addFieldsToVectorFromSuffixObject(pRGSuffix, pInt2, "int");
this.addFieldsToVectorFromSuffixObject(pSTSuffix, pInt2, "int");
this.addFieldsToVectorFromSuffixObject(pXYZSuffix, pInt3, "int");
this.addFieldsToVectorFromSuffixObject(pRGBSuffix, pInt3, "int");
this.addFieldsToVectorFromSuffixObject(pSTPSuffix, pInt3, "int");
this.addFieldsToVectorFromSuffixObject(pXYZWSuffix, pInt4, "int");
this.addFieldsToVectorFromSuffixObject(pRGBASuffix, pInt4, "int");
this.addFieldsToVectorFromSuffixObject(pSTPQSuffix, pInt4, "int");
this.addFieldsToVectorFromSuffixObject(pXYSuffix, pBool2, "bool");
this.addFieldsToVectorFromSuffixObject(pRGSuffix, pBool2, "bool");
this.addFieldsToVectorFromSuffixObject(pSTSuffix, pBool2, "bool");
this.addFieldsToVectorFromSuffixObject(pXYZSuffix, pBool3, "bool");
this.addFieldsToVectorFromSuffixObject(pRGBSuffix, pBool3, "bool");
this.addFieldsToVectorFromSuffixObject(pSTPSuffix, pBool3, "bool");
this.addFieldsToVectorFromSuffixObject(pXYZWSuffix, pBool4, "bool");
this.addFieldsToVectorFromSuffixObject(pRGBASuffix, pBool4, "bool");
this.addFieldsToVectorFromSuffixObject(pSTPQSuffix, pBool4, "bool");
addSystemTypeMatrix();
void {
    var: pFloat2,
    IAFXTypeInstruction:  = Effect.getSystemType("float2")
};
var pFloat3 = Effect.getSystemType("float3");
var pFloat4 = Effect.getSystemType("float4");
var pInt2 = Effect.getSystemType("int2");
var pInt3 = Effect.getSystemType("int3");
var pInt4 = Effect.getSystemType("int4");
var pBool2 = Effect.getSystemType("bool2");
var pBool3 = Effect.getSystemType("bool3");
var pBool4 = Effect.getSystemType("bool4");
this.generateSystemType("float2x2", "mat2", 0, true, pFloat2, 2);
this.generateSystemType("float2x3", "mat2x3", 0, true, pFloat2, 3);
this.generateSystemType("float2x4", "mat2x4", 0, true, pFloat2, 4);
this.generateSystemType("float3x2", "mat3x2", 0, true, pFloat3, 2);
this.generateSystemType("float3x3", "mat3", 0, true, pFloat3, 3);
this.generateSystemType("float3x4", "mat3x4", 0, true, pFloat3, 4);
this.generateSystemType("float4x2", "mat4x2", 0, true, pFloat4, 2);
this.generateSystemType("float4x3", "mat4x3", 0, true, pFloat4, 3);
this.generateSystemType("float4x4", "mat4", 0, true, pFloat4, 4);
this.generateSystemType("int2x2", "imat2", 0, true, pInt2, 2);
this.generateSystemType("int2x3", "imat2x3", 0, true, pInt2, 3);
this.generateSystemType("int2x4", "imat2x4", 0, true, pInt2, 4);
this.generateSystemType("int3x2", "imat3x2", 0, true, pInt3, 2);
this.generateSystemType("int3x3", "imat3", 0, true, pInt3, 3);
this.generateSystemType("int3x4", "imat3x4", 0, true, pInt3, 4);
this.generateSystemType("int4x2", "imat4x2", 0, true, pInt4, 2);
this.generateSystemType("int4x3", "imat4x3", 0, true, pInt4, 3);
this.generateSystemType("int4x4", "imat4", 0, true, pInt4, 4);
this.generateSystemType("bool2x2", "bmat2", 0, true, pBool2, 2);
this.generateSystemType("bool2x3", "bmat2x3", 0, true, pBool2, 3);
this.generateSystemType("bool2x4", "bmat2x4", 0, true, pBool2, 4);
this.generateSystemType("bool3x2", "bmat3x2", 0, true, pBool3, 2);
this.generateSystemType("bool3x3", "bmat3", 0, true, pBool3, 3);
this.generateSystemType("bool3x4", "bmat3x4", 0, true, pBool3, 4);
this.generateSystemType("bool4x2", "bmat4x2", 0, true, pBool4, 2);
this.generateSystemType("bool4x3", "bmat4x3", 0, true, pBool4, 3);
this.generateSystemType("bool4x4", "bmat4", 0, true, pBool4, 4);
addFieldsToVectorFromSuffixObject(pSuffixMap, BoolMap, pType, IAFXTypeInstruction, sBaseType, string);
 {
    var sSuffix = null;
    for(sSuffix in pSuffixMap) {
        var sFieldTypeName = sBaseType + ((sSuffix.length > 1) ? sSuffix.length.toString() : "");
        var pFieldType = Effect.getSystemType(sFieldTypeName);
        (pType).addField(sSuffix, pFieldType, pSuffixMap[sSuffix]);
    }
}
inline;
getVariable(sName, string);
IAFXVariableDeclInstruction;
 {
    return Effect.getSystemVariable(sName) || this._pEffectScope.getVariable(sName);
}
inline;
hasVariable(sName, string);
bool;
 {
    return this._pEffectScope.hasVariable(sName);
}
getType(sTypeName, string);
IAFXTypeInstruction;
 {
    return Effect.getSystemType(sTypeName) || this._pEffectScope.getType(sTypeName);
}
isSystemFunction(pFunction, IAFXFunctionDeclInstruction);
bool;
 {
    return false;
}
isSystemVariable(pVariable, IAFXVariableDeclInstruction);
bool;
 {
    return false;
}
isSystemType(pType, IAFXTypeDeclInstruction);
bool;
 {
    return false;
}
inline;
_errorFromInstruction(pError, IAFXInstructionError);
void {
    this: ,
    _error: (pError.code, 
isNull(pError.info) ? {} : pError.info)
};
_error(eCode, number, pInfo, IEffectErrorInfo = {});
void {
    var: sFileName,
    string:  = this._sAnalyzedFileName
};
var pLocation = {
    file: this._sAnalyzedFileName,
    line: 0
};
var pLineColumn = this.getNodeSourceLocation(this.getAnalyzedNode());
switch(eCode) {
    default:
        pInfo.line = pLineColumn.line + 1;
        pInfo.column = pLineColumn.column + 1;
        pLocation.line = pLineColumn.line + 1;
        break;
}
var pLogEntity = {
    code: eCode,
    info: pInfo,
    location: pLocation
};
akra.logger["error"](pLogEntity);
throw new Error(eCode.toString());
inline;
setAnalyzedNode(pNode, IParseNode);
void {
    this: ,
    _pAnalyzedNode:  = pNode
};
inline;
getAnalyzedNode();
IParseNode;
 {
    return this._pAnalyzedNode;
}
inline;
isStrictMode();
bool;
 {
    return this._pEffectScope.isStrictMode();
}
inline;
setStrictModeOn();
void {
    return: this._pEffectScope.setStrictModeOn()
};
inline;
newScope(eScopeType ?  : EScopeType = EScopeType.k_Default);
void {
    this: ,
    _pEffectScope: ,
    newScope: (eScopeType)
};
inline;
resumeScope();
void {
    this: ,
    _pEffectScope: ,
    resumeScope: 
};
inline;
getScope();
number;
 {
    return this._pEffectScope.getScope();
}
inline;
setScope(iScope, number);
void {
    this: ,
    _pEffectScope: ,
    setScope: (iScope)
};
inline;
endScope();
void {
    this: ,
    _pEffectScope: ,
    endScope: 
};
inline;
getScopeType();
EScopeType;
 {
    return this._pEffectScope.getScopeType();
}
inline;
setCurrentAnalyzedFunction(pFunction, IAFXFunctionDeclInstruction);
void {
    this: ,
    _pCurrentFunction:  = pFunction
};
inline;
getCurrentAnalyzedFunction();
IAFXFunctionDeclInstruction;
 {
    return this._pCurrentFunction;
}
inline;
isAnalzeInPass();
bool;
 {
    return this._isAnalyzeInPass;
}
inline;
setAnalyzeInPass(isInPass, bool);
void {
    this: ,
    _isAnalyzeInPass:  = isInPass
};
inline;
setOperator(sOperator, string);
void {
    if: (!isNull(this._pCurrentInstruction))
};
 {
    this._pCurrentInstruction.setOperator(sOperator);
}
inline;
clearPointersForExtract();
void {
    this: ,
    _pPointerForExtractionList: ,
    length:  = 0
};
inline;
addPointerForExtract(pPointer, IAFXVariableDeclInstruction);
void {
    this: ,
    _pPointerForExtractionList: ,
    push: (pPointer)
};
inline;
getPointerForExtractList();
IAFXVariableDeclInstruction[];
 {
    return this._pPointerForExtractionList;
}
findFunction(sFunctionName, string, pArguments, IAFXExprInstruction[]);
IAFXFunctionDeclInstruction;
findFunction(sFunctionName, string, pArguments, IAFXVariableDeclInstruction[]);
IAFXFunctionDeclInstruction;
findFunction(sFunctionName, string, pArguments, IAFXTypedInstruction[]);
IAFXFunctionDeclInstruction;
 {
    return Effect.findSystemFunction(sFunctionName, pArguments) || this._pEffectScope.getFunction(sFunctionName, pArguments);
}
findConstructor(pType, IAFXTypeInstruction, pArguments, IAFXExprInstruction[]);
IAFXVariableTypeInstruction;
 {
    var pVariableType = new VariableTypeInstruction();
    pVariableType.pushType(pType);
    return pVariableType;
}
findShaderFunction(sFunctionName, string, pArguments, IAFXExprInstruction[]);
IAFXFunctionDeclInstruction;
 {
    return this._pEffectScope.getShaderFunction(sFunctionName, pArguments);
}
findFunctionByDef(pDef, FunctionDefInstruction);
IAFXFunctionDeclInstruction;
 {
    return this.findFunction(pDef.getName(), pDef.getArguments());
}
addVariableDecl(pVariable, IAFXVariableDeclInstruction);
void {
    if: (this.isSystemVariable(pVariable))
};
 {
    this._error(2235, {
        varName: pVariable.getName()
    });
}
var isVarAdded = this._pEffectScope.addVariable(pVariable);
if (!isVarAdded) {
    var eScopeType = this.getScopeType();
    switch(eScopeType) {
        case EScopeType.k_Default:
            this._error(2234, {
                varName: pVariable.getName()
            });
            break;
        case EScopeType.k_Struct:
            this._error(2242, {
                fieldName: pVariable.getName()
            });
            break;
        case EScopeType.k_Annotation:
            this._error(2244, {
                varName: pVariable.getName()
            });
            break;
    }
}
if (pVariable.getName() === "Out" && !isNull(this.getCurrentAnalyzedFunction())) {
    var isOk = this.getCurrentAnalyzedFunction()._addOutVariable(pVariable);
    if (!isOk) {
        this._error(2266);
    }
}
addTypeDecl(pType, IAFXTypeDeclInstruction);
void {
    if: (this.isSystemType(pType))
};
 {
    this._error(2201, {
        typeName: pType.getName()
    });
}
var isTypeAdded = this._pEffectScope.addType(pType);
if (!isTypeAdded) {
    this._error(2202, {
        typeName: pType.getName()
    });
}
addFunctionDecl(pFunction, IAFXFunctionDeclInstruction);
void {
    if: (this.isSystemFunction(pFunction))
};
 {
    this._error(2237, {
        funcName: pFunction.getName()
    });
}
var isFunctionAdded = this._pEffectScope.addFunction(pFunction);
if (!isFunctionAdded) {
    this._error(2236, {
        funcName: pFunction.getName()
    });
}
addTechnique(pTechnique, IAFXTechniqueInstruction);
void {
    var: sName,
    string:  = pTechnique.getName()
};
if (isDef(this._pTechniqueMap[sName])) {
    this._error(2252, {
        techName: sName
    });
    return;
}
this._pTechniqueMap[sName] = pTechnique;
this._pTechniqueList.push(pTechnique);
addExternalSharedVariable(pVariable, IAFXVariableDeclInstruction, eShaderType, EFunctionType);
void {
    var: isVarAdded,
    bool:  = this._pEffectScope.addVariable(pVariable)
};
if (!isVarAdded) {
    this._error(2278, {
        varName: pVariable.getName()
    });
    return;
}
analyzeGlobalUseDecls();
void {
    var: pChildren,
    IParseNode: [] = this._pParseTree.root.children
};
var i = 0;
for(i = pChildren.length - 1; i >= 0; i--) {
    if (pChildren[i].name === "UseDecl") {
        this.analyzeUseDecl(pChildren[i]);
    }
}
analyzeGlobalProvideDecls();
void {
    var: pChildren,
    IParseNode: [] = this._pParseTree.root.children
};
var i = 0;
for(i = pChildren.length - 1; i >= 0; i--) {
    if (pChildren[i].name === "ProvideDecl") {
        this.analyzeProvideDecl(pChildren[i]);
    }
}
analyzeGlobalTypeDecls();
void {
    var: pChildren,
    IParseNode: [] = this._pParseTree.root.children
};
var i = 0;
for(i = pChildren.length - 1; i >= 0; i--) {
    if (pChildren[i].name === "TypeDecl") {
        this.analyzeTypeDecl(pChildren[i]);
    }
}
analyzeFunctionDefinitions();
void {
    var: pChildren,
    IParseNode: [] = this._pParseTree.root.children
};
var i = 0;
for(i = pChildren.length - 1; i >= 0; i--) {
    if (pChildren[i].name === "FunctionDecl") {
        this.analyzeFunctionDeclOnlyDefinition(pChildren[i]);
    }
}
analyzeGlobalImports();
void {
    var: pChildren,
    IParseNode: [] = this._pParseTree.root.children
};
var i = 0;
for(i = pChildren.length - 1; i >= 0; i--) {
    if (pChildren[i].name === "ImportDecl") {
        this.analyzeImportDecl(pChildren[i], null);
    }
}
analyzeTechniqueImports();
void {
    var: pChildren,
    IParseNode: [] = this._pParseTree.root.children
};
var i = 0;
for(i = pChildren.length - 1; i >= 0; i--) {
    if (pChildren[i].name === "TechniqueDecl") {
        this.analyzeTechniqueForImport(pChildren[i]);
    }
}
analyzeVariableDecls();
void {
    var: pChildren,
    IParseNode: [] = this._pParseTree.root.children
};
var i = 0;
for(i = pChildren.length - 1; i >= 0; i--) {
    if (pChildren[i].name === "VariableDecl") {
        this.analyzeVariableDecl(pChildren[i]);
    } else if (pChildren[i].name === "VarStructDecl") {
        this.analyzeVarStructDecl(pChildren[i]);
    }
}
analyzeFunctionDecls();
void {
    for: 
};
var i = 0;
i < this._pFunctionWithImplementationList.length;
i++;
 {
    this.resumeFunctionAnalysis(this._pFunctionWithImplementationList[i]);
}
this.checkFunctionsForRecursion();
this.checkFunctionForCorrectUsage();
this.generateInfoAboutUsedData();
this.generateShadersFromFunctions();
analyzeTechniques();
void {
    for: 
};
var i = 0;
i < this._pTechniqueList.length;
i++;
 {
    this.resumeTechniqueAnalysis(this._pTechniqueList[i]);
}
checkFunctionsForRecursion();
void {
    var: pFunctionList,
    IAFXFunctionDeclInstruction: [] = this._pFunctionWithImplementationList
};
var isNewAdd = true;
var isNewDelete = true;
while(isNewAdd || isNewDelete) {
    isNewAdd = false;
    isNewDelete = false;
    mainFor:
for(var i = 0; i < pFunctionList.length; i++) {
        var pTestedFunction = pFunctionList[i];
        var pUsedFunctionList = pTestedFunction._getUsedFunctionList();
        if (!pTestedFunction._isUsed()) {
            continue mainFor;
        }
        if (pTestedFunction._isBlackListFunction()) {
            continue mainFor;
        }
        if (isNull(pUsedFunctionList)) {
            continue mainFor;
        }
        for(var j = 0; j < pUsedFunctionList.length; j++) {
            var pAddedUsedFunctionList = pUsedFunctionList[j]._getUsedFunctionList();
            if (isNull(pAddedUsedFunctionList)) {
                continue;
            }
            for(var k = 0; k < pAddedUsedFunctionList.length; k++) {
                var pAddedFunction = pAddedUsedFunctionList[k];
                if (pTestedFunction === pAddedFunction) {
                    pTestedFunction._addToBlackList();
                    isNewDelete = true;
                    this._error(2255, {
                        funcDef: pTestedFunction._getStringDef()
                    });
                    continue mainFor;
                }
                if (pAddedFunction._isBlackListFunction() || !pAddedFunction._canUsedAsFunction()) {
                    pTestedFunction._addToBlackList();
                    this._error(2256, {
                        funcDef: pTestedFunction._getStringDef()
                    });
                    isNewDelete = true;
                    continue mainFor;
                }
                if (pTestedFunction._addUsedFunction(pAddedFunction)) {
                    isNewAdd = true;
                }
            }
        }
    }
}
checkFunctionForCorrectUsage();
void {
    var: pFunctionList,
    IAFXFunctionDeclInstruction: [] = this._pFunctionWithImplementationList
};
var isNewUsageSet = true;
var isNewDelete = true;
while(isNewUsageSet || isNewDelete) {
    isNewUsageSet = false;
    isNewDelete = false;
    mainFor:
for(var i = 0; i < pFunctionList.length; i++) {
        var pTestedFunction = pFunctionList[i];
        var pUsedFunctionList = pTestedFunction._getUsedFunctionList();
        if (!pTestedFunction._isUsed()) {
            continue mainFor;
        }
        if (pTestedFunction._isBlackListFunction()) {
            continue mainFor;
        }
        if (!pTestedFunction._checkVertexUsage()) {
            this._error(2257, {
                funcDef: pTestedFunction._getStringDef()
            });
            pTestedFunction._addToBlackList();
            isNewDelete = true;
            continue mainFor;
        }
        if (!pTestedFunction._checkPixelUsage()) {
            this._error(2258, {
                funcDef: pTestedFunction._getStringDef()
            });
            pTestedFunction._addToBlackList();
            isNewDelete = true;
            continue mainFor;
        }
        if (isNull(pUsedFunctionList)) {
            continue mainFor;
        }
        for(var j = 0; j < pUsedFunctionList.length; j++) {
            var pUsedFunction = pUsedFunctionList[j];
            if (pTestedFunction._isUsedInVertex()) {
                if (!pUsedFunction._isForVertex()) {
                    this._error(2257, {
                        funcDef: pTestedFunction._getStringDef()
                    });
                    pTestedFunction._addToBlackList();
                    isNewDelete = true;
                    continue mainFor;
                }
                if (!pUsedFunction._isUsedInVertex()) {
                    pUsedFunction._markUsedInVertex();
                    isNewUsageSet = true;
                }
            }
            if (pTestedFunction._isUsedInPixel()) {
                if (!pUsedFunction._isForPixel()) {
                    this._error(2258, {
                        funcDef: pTestedFunction._getStringDef()
                    });
                    pTestedFunction._addToBlackList();
                    isNewDelete = true;
                    continue mainFor;
                }
                if (!pUsedFunction._isUsedInPixel()) {
                    pUsedFunction._markUsedInPixel();
                    isNewUsageSet = true;
                }
            }
        }
    }
}
return;
generateInfoAboutUsedData();
void {
    var: pFunctionList,
    IAFXFunctionDeclInstruction: [] = this._pFunctionWithImplementationList
};
for(var i = 0; i < pFunctionList.length; i++) {
    pFunctionList[i]._generateInfoAboutUsedData();
}
generateShadersFromFunctions();
void {
    var: pFunctionList,
    IAFXFunctionDeclInstruction: [] = this._pFunctionWithImplementationList
};
for(var i = 0; i < pFunctionList.length; i++) {
    var pShader = null;
    if (pFunctionList[i]._isUsedAsVertex()) {
        pShader = pFunctionList[i]._convertToVertexShader();
    }
    if (pFunctionList[i]._isUsedAsPixel()) {
        pShader = pFunctionList[i]._convertToPixelShader();
    }
}
analyzeVariableDecl(pNode, IParseNode, pInstruction ?  : IAFXInstruction = null);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var pGeneralType = null;
var pVariable = null;
var i = 0;
pGeneralType = this.analyzeUsageType(pChildren[pChildren.length - 1]);
for(i = pChildren.length - 2; i >= 1; i--) {
    if (pChildren[i].name === "Variable") {
        pVariable = this.analyzeVariable(pChildren[i], pGeneralType);
        if (!isNull(pInstruction)) {
            pInstruction.push(pVariable, true);
            if (pInstruction._getInstructionType() === EAFXInstructionTypes.k_DeclStmtInstruction) {
                var pVariableSubDecls = pVariable.getSubVarDecls();
                if (!isNull(pVariableSubDecls)) {
                    for(var j = 0; j < pVariableSubDecls.length; j++) {
                        pInstruction.push(pVariableSubDecls[j], false);
                    }
                }
            }
        }
    }
}
analyzeUsageType(pNode, IParseNode);
IAFXVariableTypeInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var i = 0;
    var pType = new VariableTypeInstruction();
    for(i = pChildren.length - 1; i >= 0; i--) {
        if (pChildren[i].name === "Type") {
            var pMainType = this.analyzeType(pChildren[i]);
            pType.pushType(pMainType);
        } else if (pChildren[i].name === "Usage") {
            var sUsage = this.analyzeUsage(pChildren[i]);
            pType.addUsage(sUsage);
        }
    }
    if (!pType.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pType.getLastError());
    }
    ;
    return pType;
}
analyzeType(pNode, IParseNode);
IAFXTypeInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pType = null;
    switch(pNode.name) {
        case "T_TYPE_ID":
            pType = this.getType(pNode.value);
            if (isNull(pType)) {
                this._error(2250, {
                    typeName: pNode.value
                });
            }
            break;
        case "Struct":
            pType = this.analyzeStruct(pNode);
            break;
        case "T_KW_VOID":
            pType = Effect.getSystemType("void");
            break;
        case "ScalarType":
        case "ObjectType":
            pType = this.getType(pChildren[pChildren.length - 1].value);
            if (isNull(pType)) {
                this._error(2250, {
                    typeName: pChildren[pChildren.length - 1].value
                });
            }
            break;
        case "VectorType":
        case "MatrixType":
            this._error(2251);
            break;
        case "BaseType":
        case "Type":
            return this.analyzeType(pChildren[0]);
    }
    return pType;
}
analyzeUsage(pNode, IParseNode);
string;
 {
    this.setAnalyzedNode(pNode);
    pNode = pNode.children[0];
    return pNode.value;
}
analyzeVariable(pNode, IParseNode, pGeneralType, IAFXVariableTypeInstruction);
IAFXVariableDeclInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pVarDecl = new VariableDeclInstruction();
    var pVariableType = new VariableTypeInstruction();
    var pAnnotation = null;
    var sSemantic = "";
    var pInitExpr = null;
    pVarDecl.push(pVariableType, true);
    pVariableType.pushType(pGeneralType);
    this.analyzeVariableDim(pChildren[pChildren.length - 1], pVarDecl);
    var i = 0;
    for(i = pChildren.length - 2; i >= 0; i--) {
        if (pChildren[i].name === "Annotation") {
            pAnnotation = this.analyzeAnnotation(pChildren[i]);
            pVarDecl.setAnnotation(pAnnotation);
        } else if (pChildren[i].name === "Semantic") {
            sSemantic = this.analyzeSemantic(pChildren[i]);
            pVarDecl.setSemantic(sSemantic);
            pVarDecl.getNameId().setRealName(sSemantic);
        } else if (pChildren[i].name === "Initializer") {
            pInitExpr = this.analyzeInitializer(pChildren[i]);
            if (!pInitExpr.optimizeForVariableType(pVariableType)) {
                this._error(2269, {
                    varName: pVarDecl.getName()
                });
                return null;
            }
            pVarDecl.push(pInitExpr, true);
        }
    }
    if (!pVarDecl.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pVarDecl.getLastError());
    }
    ;
    this.addVariableDecl(pVarDecl);
    return pVarDecl;
}
analyzeVariableDim(pNode, IParseNode, pVariableDecl, IAFXVariableDeclInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var pVariableType = pVariableDecl.getType();
if (pChildren.length === 1) {
    var pName = new IdInstruction();
    pName.setName(pChildren[0].value);
    pVariableDecl.push(pName, true);
    return;
}
this.analyzeVariableDim(pChildren[pChildren.length - 1], pVariableDecl);
if (pChildren.length === 3) {
    pVariableType.addPointIndex(true);
} else if (pChildren.length === 4 && pChildren[0].name === "FromExpr") {
    var pBuffer = this.analyzeFromExpr(pChildren[0]);
    pVariableType.addPointIndex(true);
    pVariableType.setVideoBuffer(pBuffer);
} else {
    if (pVariableType.isPointer()) {
        this._error(2300);
    }
    var pIndexExpr = this.analyzeExpr(pChildren[pChildren.length - 3]);
    pVariableType.addArrayIndex(pIndexExpr);
}
analyzeAnnotation(pNode, IParseNode);
IAFXAnnotationInstruction;
 {
    this.setAnalyzedNode(pNode);
    return null;
}
analyzeSemantic(pNode, IParseNode);
string;
 {
    this.setAnalyzedNode(pNode);
    var sSemantic = pNode.children[0].value;
    return sSemantic;
}
analyzeInitializer(pNode, IParseNode);
IAFXInitExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pInitExpr = new InitExprInstruction();
    if (pChildren.length === 2) {
        pInitExpr.push(this.analyzeExpr(pChildren[0]), true);
    } else {
        for(var i = pChildren.length - 3; i >= 1; i--) {
            if (pChildren[i].name === "InitExpr") {
                pInitExpr.push(this.analyzeInitExpr(pChildren[i]), true);
            }
        }
    }
    return pInitExpr;
}
analyzeFromExpr(pNode, IParseNode);
IAFXVariableDeclInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pBuffer = null;
    if (pChildren[1].name === "T_NON_TYPE_ID") {
        pBuffer = this.getVariable(pChildren[1].value);
    } else {
        pBuffer = (this.analyzeMemExpr(pChildren[1])).getBuffer();
    }
    return pBuffer;
}
analyzeInitExpr(pNode, IParseNode);
IAFXInitExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pInitExpr = new InitExprInstruction();
    if (pChildren.length === 1) {
        pInitExpr.push(this.analyzeExpr(pChildren[0]), true);
    } else {
        for(var i = 0; i < pChildren.length; i++) {
            if (pChildren[i].name === "InitExpr") {
                pInitExpr.push(this.analyzeInitExpr(pChildren[i]), true);
            }
        }
    }
    return pInitExpr;
}
analyzeExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var sName = pNode.name;
    switch(sName) {
        case "ObjectExpr":
            return this.analyzeObjectExpr(pNode);
        case "ComplexExpr":
            return this.analyzeComplexExpr(pNode);
        case "PrimaryExpr":
            return this.analyzePrimaryExpr(pNode);
        case "PostfixExpr":
            return this.analyzePostfixExpr(pNode);
        case "UnaryExpr":
            return this.analyzeUnaryExpr(pNode);
        case "CastExpr":
            return this.analyzeCastExpr(pNode);
        case "ConditionalExpr":
            return this.analyzeConditionalExpr(pNode);
        case "MulExpr":
        case "AddExpr":
            return this.analyzeArithmeticExpr(pNode);
        case "RelationalExpr":
        case "EqualityExpr":
            return this.analyzeRelationExpr(pNode);
        case "AndExpr":
        case "OrExpr":
            return this.analyzeLogicalExpr(pNode);
        case "AssignmentExpr":
            return this.analyzeAssignmentExpr(pNode);
        case "T_NON_TYPE_ID":
            return this.analyzeIdExpr(pNode);
        case "T_STRING":
        case "T_UINT":
        case "T_FLOAT":
        case "T_KW_TRUE":
        case "T_KW_FALSE":
            return this.analyzeSimpleExpr(pNode);
        case "MemExpr":
            return this.analyzeMemExpr(pNode);
        default:
            this._error(2204, {
                exprName: sName
            });
            break;
    }
    return null;
}
analyzeObjectExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var sName = pNode.children[pNode.children.length - 1].name;
    switch(sName) {
        case "T_KW_COMPILE":
            return this.analyzeCompileExpr(pNode);
        case "T_KW_SAMPLER_STATE":
            return this.analyzeSamplerStateBlock(pNode);
    }
}
analyzeCompileExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExpr = new CompileExprInstruction();
    var pExprType;
    var pArguments = null;
    var sShaderFuncName = pChildren[pChildren.length - 2].value;
    var pShaderFunc = null;
    var i = 0;
    pArguments = [];
    if (pChildren.length > 4) {
        var pArgumentExpr;
        for(i = pChildren.length - 3; i > 0; i--) {
            if (pChildren[i].value !== ",") {
                pArgumentExpr = this.analyzeExpr(pChildren[i]);
                pArguments.push(pArgumentExpr);
            }
        }
    }
    pShaderFunc = this.findShaderFunction(sShaderFuncName, pArguments);
    if (isNull(pShaderFunc)) {
        this._error(2226, {
            funcName: sShaderFuncName
        });
        return null;
    }
    pExprType = (pShaderFunc.getType()).wrap();
    pExpr.setType(pExprType);
    pExpr.setOperator("complile");
    pExpr.push(pShaderFunc.getNameId(), false);
    if (!isNull(pArguments)) {
        for(i = 0; i < pArguments.length; i++) {
            pExpr.push(pArguments[i], true);
        }
    }
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeSamplerStateBlock(pNode, IParseNode);
IAFXExprInstruction;
 {
    pNode = pNode.children[0];
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExpr = new SamplerStateBlockInstruction();
    var i = 0;
    pExpr.setOperator("sample_state");
    for(i = pChildren.length - 2; i >= 1; i--) {
        this.analyzeSamplerState(pChildren[i], pExpr);
    }
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeSamplerState(pNode, IParseNode, pSamplerStates, SamplerStateBlockInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
if (pChildren[pChildren.length - 2].name === "StateIndex") {
    this._error(2270);
    return;
}
var pStateExprNode = pChildren[pChildren.length - 3];
var pSubStateExprNode = pStateExprNode.children[pStateExprNode.children.length - 1];
var sStateType = pChildren[pChildren.length - 1].value.toUpperCase();
var sStateValue = "";
var isTexture = false;
if (isNull(pSubStateExprNode.value)) {
    this._error(2271);
    return;
}
var pTexture = null;
switch(sStateType) {
    case "TEXTURE":
        var pTexture = null;
        if (pStateExprNode.children.length !== 3 || pSubStateExprNode.value === "{") {
            this._error(2271);
            return;
        }
        var sTextureName = pStateExprNode.children[1].value;
        if (isNull(sTextureName) || !this.hasVariable(sTextureName)) {
            this._error(2271);
            return;
        }
        pTexture = this.getVariable(sTextureName);
        sStateValue = sTextureName;
        break;
    case "ADDRESSU":
    case "ADDRESSV":
        sStateValue = pSubStateExprNode.value.toUpperCase();
        switch(sStateValue) {
            case "WRAP":
            case "CLAMP":
            case "MIRROR":
                break;
            default:
 {
                    logger.setSourceLocation("fx/Effect.ts", 1954);
                    logger.warning("Webgl don`t support this wrapmode: " + sStateValue);
                }
                ;
                return;
        }
        break;
    case "MAGFILTER":
    case "MINFILTER":
        sStateValue = pSubStateExprNode.value.toUpperCase();
        switch(sStateValue) {
            case "NEAREST":
            case "LINEAR":
            case "NEAREST_MIPMAP_NEAREST":
            case "LINEAR_MIPMAP_NEAREST":
            case "NEAREST_MIPMAP_LINEAR":
            case "LINEAR_MIPMAP_LINEAR":
                break;
            default:
 {
                    logger.setSourceLocation("fx/Effect.ts", 1971);
                    logger.warning("Webgl don`t support this texture filter: " + sStateValue);
                }
                ;
                return;
        }
        break;
    default:
 {
            logger.setSourceLocation("fx/Effect.ts", 1977);
            logger.warning("Don`t support this texture param: " + sStateType);
        }
        ;
        return;
}
if (sStateType !== "TEXTURE") {
    pSamplerStates.addState(sStateType, sStateValue);
} else {
    pSamplerStates.setTexture(pTexture);
}
analyzeComplexExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sFirstNodeName = pChildren[pChildren.length - 1].name;
    switch(sFirstNodeName) {
        case "T_NON_TYPE_ID":
            return this.analyzeFunctionCallExpr(pNode);
        case "BaseType":
        case "T_TYPE_ID":
            return this.analyzeConstructorCallExpr(pNode);
        default:
            return this.analyzeSimpleComplexExpr(pNode);
    }
}
analyzeFunctionCallExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExpr = null;
    var pExprType = null;
    var pArguments = null;
    var sFuncName = pChildren[pChildren.length - 1].value;
    var pFunction = null;
    var pFunctionId = null;
    var i = 0;
    var pCurrentAnalyzedFunction = this.getCurrentAnalyzedFunction();
    if (pChildren.length > 3) {
        var pArgumentExpr;
        pArguments = [];
        for(i = pChildren.length - 3; i > 0; i--) {
            if (pChildren[i].value !== ",") {
                pArgumentExpr = this.analyzeExpr(pChildren[i]);
                pArguments.push(pArgumentExpr);
            }
        }
    }
    pFunction = this.findFunction(sFuncName, pArguments);
    if (isNull(pFunction)) {
        this._error(2223, {
            funcName: sFuncName
        });
        return null;
    }
    if (!isDef(pFunction)) {
        this._error(2246, {
            funcName: sFuncName
        });
        return null;
    }
    if (!isNull(pCurrentAnalyzedFunction)) {
        if (!pFunction._isForPixel()) {
            pCurrentAnalyzedFunction._setForPixel(false);
        }
        if (!pFunction._isForVertex()) {
            pCurrentAnalyzedFunction._setForVertex(false);
        }
    }
    if (pFunction._getInstructionType() === EAFXInstructionTypes.k_FunctionDeclInstruction) {
        var pFunctionCallExpr = new FunctionCallInstruction();
        pFunctionId = new IdExprInstruction();
        pFunctionId.push(pFunction.getNameId(), false);
        pExprType = (pFunction.getType()).wrap();
        pFunctionCallExpr.setType(pExprType);
        pFunctionCallExpr.push(pFunctionId, true);
        if (!isNull(pArguments)) {
            for(i = 0; i < pArguments.length; i++) {
                pFunctionCallExpr.push(pArguments[i], true);
            }
            var pFunctionArguments = (pFunction).getArguments();
            for(i = 0; i < pArguments.length; i++) {
                if (pFunctionArguments[i].getType().hasUsage("out")) {
                    if (!pArguments[i].getType().isWritable()) {
                        this._error(2267);
                        return null;
                    }
                    if (pArguments[i].getType().isStrongEqual(Effect.getSystemType("ptr"))) {
                        this.addPointerForExtract(pArguments[i].getType()._getParentVarDecl());
                    }
                } else if (pFunctionArguments[i].getType().hasUsage("inout")) {
                    if (!pArguments[i].getType().isWritable()) {
                        this._error(2267);
                        return null;
                    }
                    if (!pArguments[i].getType().isReadable()) {
                        this._error(2268);
                        return null;
                    }
                    if (pArguments[i].getType().isStrongEqual(Effect.getSystemType("ptr"))) {
                        this.addPointerForExtract(pArguments[i].getType()._getParentVarDecl());
                    }
                } else {
                    if (!pArguments[i].getType().isReadable()) {
                        this._error(2268);
                        return null;
                    }
                }
            }
            for(i = pArguments.length; i < pFunctionArguments.length; i++) {
                pFunctionCallExpr.push(pFunctionArguments[i].getInitializeExpr(), false);
            }
        }
        if (!isNull(pCurrentAnalyzedFunction)) {
            pCurrentAnalyzedFunction._addUsedFunction(pFunction);
        }
        pFunction._markUsedAs(EFunctionType.k_Function);
        pExpr = pFunctionCallExpr;
    } else {
        var pSystemCallExpr = new SystemCallInstruction();
        pSystemCallExpr.setSystemCallFunction(pFunction);
        pSystemCallExpr.fillByArguments(pArguments);
        if (!isNull(pCurrentAnalyzedFunction)) {
            for(i = 0; i < pArguments.length; i++) {
                if (!pArguments[i].getType().isReadable()) {
                    this._error(2268);
                    return null;
                }
            }
        }
        pExpr = pSystemCallExpr;
        if (!pFunction.isBuiltIn() && !isNull(pCurrentAnalyzedFunction)) {
            pCurrentAnalyzedFunction._addUsedFunction(pFunction);
        }
    }
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeConstructorCallExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExpr = new ConstructorCallInstruction();
    var pExprType = null;
    var pArguments = null;
    var pConstructorType = null;
    var i = 0;
    pConstructorType = this.analyzeType(pChildren[pChildren.length - 1]);
    if (isNull(pConstructorType)) {
        this._error(2224);
        return null;
    }
    if (pChildren.length > 3) {
        var pArgumentExpr = null;
        pArguments = [];
        for(i = pChildren.length - 3; i > 0; i--) {
            if (pChildren[i].value !== ",") {
                pArgumentExpr = this.analyzeExpr(pChildren[i]);
                pArguments.push(pArgumentExpr);
            }
        }
    }
    pExprType = this.findConstructor(pConstructorType, pArguments);
    if (isNull(pExprType)) {
        this._error(2225, {
            typeName: pConstructorType.toString()
        });
        return null;
    }
    pExpr.setType(pExprType);
    pExpr.push(pConstructorType, false);
    if (!isNull(pArguments)) {
        for(i = 0; i < pArguments.length; i++) {
            if (!pArguments[i].getType().isReadable()) {
                this._error(2268);
                return null;
            }
            pExpr.push(pArguments[i], true);
        }
    }
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeSimpleComplexExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExpr = new ComplexExprInstruction();
    var pComplexExpr;
    var pExprType;
    pComplexExpr = this.analyzeExpr(pChildren[1]);
    pExprType = pComplexExpr.getType();
    pExpr.setType(pExprType);
    pExpr.push(pComplexExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzePrimaryExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExpr = new PrimaryExprInstruction();
    var pPrimaryExpr;
    var pPointer = null;
    var pPrimaryExprType;
    pPrimaryExpr = this.analyzeExpr(pChildren[0]);
    pPrimaryExprType = pPrimaryExpr.getType();
    pPointer = pPrimaryExprType.getPointer();
    if (isNull(pPointer)) {
        this._error(2222, {
            typeName: pPrimaryExprType.getHash()
        });
        return null;
    }
    var pPointerVarType = pPrimaryExprType.getParent();
    if (!pPrimaryExprType.isStrictPointer()) {
        this.getCurrentAnalyzedFunction()._setForPixel(false);
        this.getCurrentAnalyzedFunction()._notCanUsedAsFunction();
        pPrimaryExprType._setPointerToStrict();
    }
    pExpr.setType(pPointer.getType());
    pExpr.setOperator("@");
    pExpr.push(pPointer.getNameId(), false);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzePostfixExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sSymbol = pChildren[pChildren.length - 2].value;
    switch(sSymbol) {
        case "[":
            return this.analyzePostfixIndex(pNode);
        case ".":
            return this.analyzePostfixPoint(pNode);
        case "++":
        case "--":
            return this.analyzePostfixArithmetic(pNode);
    }
}
analyzePostfixIndex(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExpr = new PostfixIndexInstruction();
    var pPostfixExpr = null;
    var pIndexExpr = null;
    var pExprType = null;
    var pPostfixExprType = null;
    var pIndexExprType = null;
    var pIntType = null;
    pPostfixExpr = this.analyzeExpr(pChildren[pChildren.length - 1]);
    pPostfixExprType = pPostfixExpr.getType();
    if (!pPostfixExprType.isArray()) {
        this._error(2217, {
            typeName: pPostfixExprType.toString()
        });
        return null;
    }
    pIndexExpr = this.analyzeExpr(pChildren[pChildren.length - 3]);
    pIndexExprType = pIndexExpr.getType();
    pIntType = Effect.getSystemType("int");
    if (!pIndexExprType.isEqual(pIntType)) {
        this._error(2218, {
            typeName: pIndexExprType.toString()
        });
        return null;
    }
    pExprType = (pPostfixExprType.getArrayElementType());
    pExpr.setType(pExprType);
    pExpr.push(pPostfixExpr, true);
    pExpr.push(pIndexExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzePostfixPoint(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExpr = new PostfixPointInstruction();
    var pPostfixExpr = null;
    var sFieldName = "";
    var pFieldNameExpr = null;
    var pExprType = null;
    var pPostfixExprType = null;
    pPostfixExpr = this.analyzeExpr(pChildren[pChildren.length - 1]);
    pPostfixExprType = pPostfixExpr.getType();
    sFieldName = pChildren[pChildren.length - 3].value;
    pFieldNameExpr = pPostfixExprType.getFieldExpr(sFieldName);
    if (isNull(pFieldNameExpr)) {
        this._error(2219, {
            typeName: pPostfixExprType.toString(),
            fieldName: sFieldName
        });
        return null;
    }
    pExprType = pFieldNameExpr.getType();
    if (pChildren.length === 4) {
        if (!pExprType.isPointer()) {
            this._error(2220, {
                typeName: pExprType.toString()
            });
            return null;
        }
        var pBuffer = this.analyzeFromExpr(pChildren[0]);
        pExprType.setVideoBuffer(pBuffer);
    }
    pExpr.setType(pExprType);
    pExpr.push(pPostfixExpr, true);
    pExpr.push(pFieldNameExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzePostfixArithmetic(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sOperator = pChildren[0].value;
    var pExpr = new PostfixArithmeticInstruction();
    var pPostfixExpr;
    var pExprType;
    var pPostfixExprType;
    pPostfixExpr = this.analyzeExpr(pChildren[1]);
    pPostfixExprType = pPostfixExpr.getType();
    pExprType = this.checkOneOperandExprType(sOperator, pPostfixExprType);
    if (isNull(pExprType)) {
        this._error(2221, {
            operator: sOperator,
            typeName: pPostfixExprType.toString()
        });
        return null;
    }
    pExpr.setType(pExprType);
    pExpr.setOperator(sOperator);
    pExpr.push(pPostfixExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeUnaryExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sOperator = pChildren[1].value;
    var pExpr = new UnaryExprInstruction();
    var pUnaryExpr;
    var pExprType;
    var pUnaryExprType;
    pUnaryExpr = this.analyzeExpr(pChildren[0]);
    pUnaryExprType = pUnaryExpr.getType();
    pExprType = this.checkOneOperandExprType(sOperator, pUnaryExprType);
    if (isNull(pExprType)) {
        this._error(2216, {
            operator: sOperator,
            tyepName: pUnaryExprType.toString()
        });
        return null;
    }
    pExpr.setOperator(sOperator);
    pExpr.setType(pExprType);
    pExpr.push(pUnaryExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeCastExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExpr = new CastExprInstruction();
    var pExprType;
    var pCastedExpr;
    pExprType = this.analyzeConstTypeDim(pChildren[2]);
    pCastedExpr = this.analyzeExpr(pChildren[0]);
    if (!(pCastedExpr.getType()).isReadable()) {
        this._error(2268);
        return null;
    }
    pExpr.setType(pExprType);
    pExpr.push(pExprType, true);
    pExpr.push(pCastedExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeConditionalExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExpr = new ConditionalExprInstruction();
    var pConditionExpr;
    var pTrueExpr;
    var pFalseExpr;
    var pConditionType;
    var pTrueExprType;
    var pFalseExprType;
    var pExprType;
    var pBoolType;
    pConditionExpr = this.analyzeExpr(pChildren[pChildren.length - 1]);
    pTrueExpr = this.analyzeExpr(pChildren[pChildren.length - 3]);
    pFalseExpr = this.analyzeExpr(pChildren[0]);
    pConditionType = pConditionExpr.getType();
    pTrueExprType = pTrueExpr.getType();
    pFalseExprType = pFalseExpr.getType();
    pBoolType = Effect.getSystemType("bool");
    if (!pConditionType.isEqual(pBoolType)) {
        this._error(2211, {
            typeName: pConditionType.toString()
        });
        return null;
    }
    if (!pTrueExprType.isEqual(pFalseExprType)) {
        this._error(2212, {
            leftTypeName: pTrueExprType.toString(),
            rightTypeName: pFalseExprType.toString()
        });
        return null;
    }
    if (!pConditionType.isReadable()) {
        this._error(2268);
        return null;
    }
    if (!pTrueExprType.isReadable()) {
        this._error(2268);
        return null;
    }
    if (!pFalseExprType.isReadable()) {
        this._error(2268);
        return null;
    }
    pExpr.setType(pTrueExprType);
    pExpr.push(pConditionExpr, true);
    pExpr.push(pTrueExpr, true);
    pExpr.push(pFalseExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeArithmeticExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sOperator = pNode.children[1].value;
    var pExpr = new ArithmeticExprInstruction();
    var pLeftExpr = null;
    var pRightExpr = null;
    var pLeftType = null;
    var pRightType = null;
    var pExprType = null;
    pLeftExpr = this.analyzeExpr(pChildren[pChildren.length - 1]);
    pRightExpr = this.analyzeExpr(pChildren[0]);
    pLeftType = pLeftExpr.getType();
    pRightType = pRightExpr.getType();
    pExprType = this.checkTwoOperandExprTypes(sOperator, pLeftType, pRightType);
    if (isNull(pExprType)) {
        this._error(2206, {
            operator: sOperator,
            leftTypeName: pLeftType.toString(),
            rightTypeName: pRightType.toString()
        });
        return null;
    }
    pExpr.setOperator(sOperator);
    pExpr.setType(pExprType);
    pExpr.push(pLeftExpr, true);
    pExpr.push(pRightExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeRelationExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sOperator = pNode.children[1].value;
    var pExpr = new RelationalExprInstruction();
    var pLeftExpr;
    var pRightExpr;
    var pLeftType;
    var pRightType;
    var pExprType;
    pLeftExpr = this.analyzeExpr(pChildren[pChildren.length - 1]);
    pRightExpr = this.analyzeExpr(pChildren[0]);
    pLeftType = pLeftExpr.getType();
    pRightType = pRightExpr.getType();
    pExprType = this.checkTwoOperandExprTypes(sOperator, pLeftType, pRightType);
    if (isNull(pExprType)) {
        this._error(2209, {
            operator: sOperator,
            leftTypeName: pLeftType.getHash(),
            rightTypeName: pRightType.getHash()
        });
        return null;
    }
    pExpr.setOperator(sOperator);
    pExpr.setType(pExprType);
    pExpr.push(pLeftExpr, true);
    pExpr.push(pRightExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeLogicalExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sOperator = pNode.children[1].value;
    var pExpr = new LogicalExprInstruction();
    var pLeftExpr;
    var pRightExpr;
    var pLeftType;
    var pRightType;
    var pBoolType;
    pLeftExpr = this.analyzeExpr(pChildren[pChildren.length - 1]);
    pRightExpr = this.analyzeExpr(pChildren[0]);
    pLeftType = pLeftExpr.getType();
    pRightType = pRightExpr.getType();
    pBoolType = Effect.getSystemType("bool");
    if (!pLeftType.isEqual(pBoolType)) {
        this._error(2210, {
            operator: sOperator,
            typeName: pLeftType.toString()
        });
        return null;
    }
    if (!pRightType.isEqual(pBoolType)) {
        this._error(2210, {
            operator: sOperator,
            typeName: pRightType.toString()
        });
        return null;
    }
    if (!pLeftType.isReadable()) {
        this._error(2268);
        return null;
    }
    if (!pRightType.isReadable()) {
        this._error(2268);
        return null;
    }
    pExpr.setOperator(sOperator);
    pExpr.setType(pBoolType);
    pExpr.push(pLeftExpr, true);
    pExpr.push(pRightExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeAssignmentExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sOperator = pChildren[1].value;
    var pExpr = new AssignmentExprInstruction();
    var pLeftExpr;
    var pRightExpr;
    var pLeftType;
    var pRightType;
    var pExprType;
    pLeftExpr = this.analyzeExpr(pChildren[pChildren.length - 1]);
    pRightExpr = this.analyzeExpr(pChildren[0]);
    pLeftType = pLeftExpr.getType();
    pRightType = pRightExpr.getType();
    if (sOperator !== "=") {
        pExprType = this.checkTwoOperandExprTypes(sOperator, pLeftType, pRightType);
        if (isNull(pExprType)) {
            this._error(2207, {
                operator: sOperator,
                leftTypeName: pLeftType.getHash(),
                rightTypeName: pRightType.getHash()
            });
        }
    } else {
        pExprType = pRightType;
    }
    pExprType = this.checkTwoOperandExprTypes("=", pLeftType, pExprType);
    if (isNull(pExprType)) {
        this._error(2208, {
            leftTypeName: pLeftType.getHash(),
            rightTypeName: pRightType.getHash()
        });
    }
    pExpr.setOperator(sOperator);
    pExpr.setType(pExprType);
    pExpr.push(pLeftExpr, true);
    pExpr.push(pRightExpr, true);
    if (!pExpr.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExpr.getLastError());
    }
    ;
    return pExpr;
}
analyzeIdExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var sName = pNode.value;
    var pVariable = this.getVariable(sName);
    if (isNull(pVariable)) {
        this._error(2205, {
            varName: sName
        });
        return null;
    }
    if (pVariable.getType()._isUnverifiable() && !this.isAnalzeInPass()) {
        this._error(2276);
        return null;
    }
    if (!isNull(this.getCurrentAnalyzedFunction())) {
        if (!pVariable._isForPixel()) {
            this.getCurrentAnalyzedFunction()._setForPixel(false);
        }
        if (!pVariable._isForVertex()) {
            this.getCurrentAnalyzedFunction()._setForVertex(false);
        }
    }
    var pVarId = new IdExprInstruction();
    pVarId.push(pVariable.getNameId(), false);
    if (!pVarId.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pVarId.getLastError());
    }
    ;
    return pVarId;
}
analyzeSimpleExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pInstruction = null;
    var sName = pNode.name;
    var sValue = pNode.value;
    switch(sName) {
        case "T_UINT":
            pInstruction = new IntInstruction();
            pInstruction.setValue((sValue) * 1);
            break;
        case "T_FLOAT":
            pInstruction = new FloatInstruction();
            pInstruction.setValue((sValue) * 1.0);
            break;
        case "T_STRING":
            pInstruction = new StringInstruction();
            pInstruction.setValue(sValue);
            break;
        case "T_KW_TRUE":
            pInstruction = new BoolInstruction();
            pInstruction.setValue(true);
            break;
        case "T_KW_FALSE":
            pInstruction = new BoolInstruction();
            pInstruction.setValue(false);
            break;
    }
    return pInstruction;
}
analyzeMemExpr(pNode, IParseNode);
IAFXExprInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pMemExpr = new MemExprInstruction();
    var pPostfixExpr = this.analyzeExpr(pChildren[0]);
    var pPostfixExprType = pPostfixExpr.getType();
    if (!pPostfixExprType.isFromVariableDecl()) {
        this._error(2253);
        return null;
    }
    var pBuffer = pPostfixExprType.getVideoBuffer();
    if (isNull(pBuffer)) {
        this._error(2254);
    }
    if (!pPostfixExprType.isStrictPointer() && !isNull(this.getCurrentAnalyzedFunction())) {
        this.getCurrentAnalyzedFunction()._setForPixel(false);
        this.getCurrentAnalyzedFunction()._notCanUsedAsFunction();
        pPostfixExprType._setPointerToStrict();
    }
    pMemExpr.setBuffer(pBuffer);
    return pMemExpr;
}
analyzeConstTypeDim(pNode, IParseNode);
IAFXVariableTypeInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    if (pChildren.length > 1) {
        this._error(2213);
        return null;
    }
    var pType;
    pType = (this.analyzeType(pChildren[0]));
    if (!pType.isBase()) {
        this._error(2214, {
            typeName: pType.toString()
        });
    }
    if (!pType.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pType.getLastError());
    }
    ;
    return pType;
}
analyzeVarStructDecl(pNode, IParseNode, pInstruction ?  : IAFXInstruction = null);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var pUsageType = null;
var pVariable = null;
var i = 0;
pUsageType = this.analyzeUsageStructDecl(pChildren[pChildren.length - 1]);
for(i = pChildren.length - 2; i >= 1; i--) {
    if (pChildren[i].name === "Variable") {
        pVariable = this.analyzeVariable(pChildren[i], pUsageType);
        if (!isNull(pInstruction)) {
            pInstruction.push(pVariable, true);
        }
    }
}
analyzeUsageStructDecl(pNode, IParseNode);
IAFXVariableTypeInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var i = 0;
    var pType = new VariableTypeInstruction();
    for(i = pChildren.length - 1; i >= 0; i--) {
        if (pChildren[i].name === "StructDecl") {
            var pMainType = this.analyzeStructDecl(pChildren[i]);
            pType.pushType(pMainType);
            var pTypeDecl = new TypeDeclInstruction();
            pTypeDecl.push(pMainType, true);
            this.addTypeDecl(pTypeDecl);
        } else if (pChildren[i].name === "Usage") {
            var sUsage = this.analyzeUsage(pChildren[i]);
            pType.addUsage(sUsage);
        }
    }
    if (!pType.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pType.getLastError());
    }
    ;
    return pType;
}
analyzeTypeDecl(pNode, IParseNode, pParentInstruction, IAFXInstruction = null);
IAFXTypeDeclInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pTypeDeclInstruction = new TypeDeclInstruction();
    if (pChildren.length === 2) {
        var pStructInstruction = this.analyzeStructDecl(pChildren[1]);
        pTypeDeclInstruction.push(pStructInstruction, true);
    } else {
        this._error(2203);
    }
    if (!pTypeDeclInstruction.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pTypeDeclInstruction.getLastError());
    }
    ;
    this.addTypeDecl(pTypeDeclInstruction);
    pNode.isAnalyzed = true;
    if (!isNull(pParentInstruction)) {
        pParentInstruction.push(pTypeDeclInstruction, true);
    }
    return pTypeDeclInstruction;
}
analyzeStructDecl(pNode, IParseNode);
IAFXTypeInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pStruct = new ComplexTypeInstruction();
    var pFieldCollector = new InstructionCollector();
    var sName = pChildren[pChildren.length - 2].value;
    pStruct.setName(sName);
    this.newScope(EScopeType.k_Struct);
    var i = 0;
    for(i = pChildren.length - 4; i >= 1; i--) {
        if (pChildren[i].name === "VariableDecl") {
            this.analyzeVariableDecl(pChildren[i], pFieldCollector);
        }
    }
    this.endScope();
    pStruct.addFields(pFieldCollector, true);
    if (!pStruct.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pStruct.getLastError());
    }
    ;
    return pStruct;
}
analyzeStruct(pNode, IParseNode);
IAFXTypeInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pStruct = new ComplexTypeInstruction();
    var pFieldCollector = new InstructionCollector();
    this.newScope(EScopeType.k_Struct);
    var i = 0;
    for(i = pChildren.length - 4; i >= 1; i--) {
        if (pChildren[i].name === "VariableDecl") {
            this.analyzeVariableDecl(pChildren[i], pFieldCollector);
        }
    }
    this.endScope();
    pStruct.addFields(pFieldCollector, true);
    if (!pStruct.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pStruct.getLastError());
    }
    ;
    return pStruct;
}
analyzeFunctionDeclOnlyDefinition(pNode, IParseNode);
IAFXFunctionDeclInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pFunction = null;
    var pFunctionDef = null;
    var pStmtBlock = null;
    var pAnnotation = null;
    var sLastNodeValue = pChildren[0].value;
    var bNeedAddFunction = false;
    pFunctionDef = this.analyzeFunctionDef(pChildren[pChildren.length - 1]);
    pFunction = this.findFunctionByDef(pFunctionDef);
    if (!isDef(pFunction)) {
        this._error(2246, {
            funcName: pFunction.getNameId().toString()
        });
        return null;
    }
    if (!isNull(pFunction) && pFunction.hasImplementation()) {
        this._error(2227, {
            funcName: pFunction.getNameId().toString()
        });
        return null;
    }
    if (isNull(pFunction)) {
        pFunction = new FunctionDeclInstruction();
        bNeedAddFunction = true;
    } else {
        if (!pFunction.getReturnType().isEqual(pFunctionDef.getReturnType())) {
            this._error(2247, {
                funcName: pFunction.getNameId().toString()
            });
            return null;
        }
        bNeedAddFunction = false;
    }
    pFunction.setFunctionDef(pFunctionDef);
    this.resumeScope();
    if (pChildren.length === 3) {
        pAnnotation = this.analyzeAnnotation(pChildren[1]);
        pFunction.setAnnotation(pAnnotation);
    }
    if (sLastNodeValue !== ";") {
        pFunction._setParseNode(pNode);
        pFunction._setImplementationScope(this.getScope());
        this._pFunctionWithImplementationList.push(pFunction);
    }
    this.endScope();
    if (bNeedAddFunction) {
        this.addFunctionDecl(pFunction);
    }
}
resumeFunctionAnalysis(pAnalzedFunction, IAFXFunctionDeclInstruction);
void {
    var: pFunction,
    FunctionDeclInstruction:  = pAnalzedFunction
};
var pNode = pFunction._getParseNode();
this.setAnalyzedNode(pNode);
this.setScope(pFunction._getImplementationScope());
var pChildren = pNode.children;
var pStmtBlock = null;
this.setCurrentAnalyzedFunction(pFunction);
pStmtBlock = this.analyzeStmtBlock(pChildren[0]);
pFunction.setImplementation(pStmtBlock);
this.setCurrentAnalyzedFunction(null);
this.endScope();
if (!pFunction.check(ECheckStage.CODE_TARGET_SUPPORT)) {
    this._errorFromInstruction(pFunction.getLastError());
}
;
analyzeFunctionDef(pNode, IParseNode);
FunctionDefInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pFunctionDef = new FunctionDefInstruction();
    var pReturnType = null;
    var pFuncName = null;
    var pArguments = null;
    var sFuncName = pChildren[pChildren.length - 2].value;
    pReturnType = this.analyzeUsageType(pChildren[pChildren.length - 1]);
    if (pReturnType.isPointer() || pReturnType._containSampler() || pReturnType._containPointer()) {
        this._error(2264, {
            funcName: sFuncName
        });
        return null;
    }
    pFuncName = new IdInstruction();
    pFuncName.setName(sFuncName);
    pFunctionDef.setReturnType(pReturnType);
    pFunctionDef.setFunctionName(pFuncName);
    if (pChildren.length === 4) {
        var sSemantic = this.analyzeSemantic(pChildren[0]);
        pFunctionDef.setSemantic(sSemantic);
    }
    this.newScope();
    this.analyzeParamList(pChildren[pChildren.length - 3], pFunctionDef);
    this.endScope();
    if (!pFunctionDef.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pFunctionDef.getLastError());
    }
    ;
    return pFunctionDef;
}
analyzeParamList(pNode, IParseNode, pFunctionDef, FunctionDefInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var pParameter;
var i = 0;
for(i = pChildren.length - 2; i >= 1; i--) {
    if (pChildren[i].name === "ParameterDecl") {
        pParameter = this.analyzeParameterDecl(pChildren[i]);
        pParameter._setScope(this.getScope());
        pFunctionDef.addParameter(pParameter, this.isStrictMode());
    }
}
analyzeParameterDecl(pNode, IParseNode);
IAFXVariableDeclInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pType = null;
    var pParameter = null;
    pType = this.analyzeParamUsageType(pChildren[1]);
    pParameter = this.analyzeVariable(pChildren[0], pType);
    return pParameter;
}
analyzeParamUsageType(pNode, IParseNode);
IAFXVariableTypeInstruction;
 {
    var pChildren = pNode.children;
    var i = 0;
    var pType = new VariableTypeInstruction();
    for(i = pChildren.length - 1; i >= 0; i--) {
        if (pChildren[i].name === "Type") {
            var pMainType = this.analyzeType(pChildren[i]);
            pType.pushType(pMainType);
        } else if (pChildren[i].name === "ParamUsage") {
            var sUsage = this.analyzeUsage(pChildren[i]);
            pType.addUsage(sUsage);
        }
    }
    if (!pType.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pType.getLastError());
    }
    ;
    return pType;
}
analyzeStmtBlock(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pStmtBlock = new StmtBlockInstruction();
    var pStmt;
    var i = 0;
    pStmtBlock._setScope(this.getScope());
    this.newScope();
    for(i = pChildren.length - 2; i > 0; i--) {
        pStmt = this.analyzeStmt(pChildren[i]);
        if (!isNull(pStmt)) {
            pStmtBlock.push(pStmt);
        }
        this.addExtactionStmts(pStmtBlock);
    }
    this.endScope();
    if (!pStmtBlock.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pStmtBlock.getLastError());
    }
    ;
    return pStmtBlock;
}
analyzeStmt(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sFirstNodeName = pChildren[pChildren.length - 1].name;
    switch(sFirstNodeName) {
        case "SimpleStmt":
            return this.analyzeSimpleStmt(pChildren[0]);
        case "UseDecl":
            this.analyzeUseDecl(pChildren[0]);
            return null;
        case "T_KW_WHILE":
            return this.analyzeWhileStmt(pNode);
        case "T_KW_FOR":
            return this.analyzeForStmt(pNode);
        case "T_KW_IF":
            return this.analyzeIfStmt(pNode);
    }
}
analyzeSimpleStmt(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sFirstNodeName = pChildren[pChildren.length - 1].name;
    switch(sFirstNodeName) {
        case "T_KW_RETURN":
            return this.analyzeReturnStmt(pNode);
        case "T_KW_DO":
            return this.analyzeWhileStmt(pNode);
        case "StmtBlock":
            return this.analyzeStmtBlock(pChildren[0]);
        case "T_KW_DISCARD":
        case "T_KW_BREAK":
        case "T_KW_CONTINUE":
            return this.analyzeBreakStmt(pNode);
        case "TypeDecl":
        case "VariableDecl":
        case "VarStructDecl":
            return this.analyzeDeclStmt(pChildren[0]);
        default:
            if (pChildren.length === 2) {
                return this.analyzeExprStmt(pNode);
            } else {
                return (new SemicolonStmtInstruction());
            }
    }
}
analyzeReturnStmt(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pReturnStmtInstruction = new ReturnStmtInstruction();
    var pFunctionReturnType = this.getCurrentAnalyzedFunction().getReturnType();
    if (pFunctionReturnType.isEqual(Effect.getSystemType("void")) && pChildren.length === 3) {
        this._error(2261);
        return null;
    } else if (!pFunctionReturnType.isEqual(Effect.getSystemType("void")) && pChildren.length === 2) {
        this._error(2262);
        return null;
    }
    if (pChildren.length === 3) {
        var pExprInstruction = this.analyzeExpr(pChildren[1]);
        var pOutVar = this.getCurrentAnalyzedFunction()._getOutVariable();
        if (!isNull(pOutVar) && pOutVar.getType() !== pExprInstruction.getType()) {
            this._error(2263);
            return null;
        }
        if (!pFunctionReturnType.isEqual(pExprInstruction.getType())) {
            this._error(2263);
            return null;
        }
        pReturnStmtInstruction.push(pExprInstruction, true);
    }
    if (!pReturnStmtInstruction.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pReturnStmtInstruction.getLastError());
    }
    ;
    return pReturnStmtInstruction;
}
analyzeBreakStmt(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pBreakStmtInstruction = new BreakStmtInstruction();
    var sOperatorName = pChildren[1].value;
    pBreakStmtInstruction.setOperator(sOperatorName);
    if (sOperatorName === "discard" && !isNull(this.getCurrentAnalyzedFunction())) {
        this.getCurrentAnalyzedFunction()._setForVertex(false);
    }
    if (!pBreakStmtInstruction.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pBreakStmtInstruction.getLastError());
    }
    ;
    return pBreakStmtInstruction;
}
analyzeDeclStmt(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sNodeName = pNode.name;
    var pDeclStmtInstruction = new DeclStmtInstruction();
    switch(sNodeName) {
        case "TypeDecl":
            this.analyzeTypeDecl(pNode, pDeclStmtInstruction);
            break;
        case "VariableDecl":
            this.analyzeVariableDecl(pNode, pDeclStmtInstruction);
            break;
        case "VarStructDecl":
            this.analyzeVarStructDecl(pNode, pDeclStmtInstruction);
            break;
    }
    if (!pDeclStmtInstruction.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pDeclStmtInstruction.getLastError());
    }
    ;
    return pDeclStmtInstruction;
}
analyzeExprStmt(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var pExprStmtInstruction = new ExprStmtInstruction();
    var pExprInstruction = this.analyzeExpr(pChildren[1]);
    pExprStmtInstruction.push(pExprInstruction, true);
    if (!pExprStmtInstruction.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pExprStmtInstruction.getLastError());
    }
    ;
    return pExprStmtInstruction;
}
analyzeWhileStmt(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var isDoWhile = (pChildren[pChildren.length - 1].value === "do");
    var isNonIfStmt = (pNode.name === "NonIfStmt") ? true : false;
    var pWhileStmt = new WhileStmtInstruction();
    var pCondition = null;
    var pConditionType = null;
    var pBoolType = Effect.getSystemType("bool");
    var pStmt = null;
    if (isDoWhile) {
        pWhileStmt.setOperator("do_while");
        pCondition = this.analyzeExpr(pChildren[2]);
        pConditionType = pCondition.getType();
        if (!pConditionType.isEqual(pBoolType)) {
            this._error(2229, {
                typeName: pConditionType.toString()
            });
            return null;
        }
        pStmt = this.analyzeStmt(pChildren[0]);
    } else {
        pWhileStmt.setOperator("while");
        pCondition = this.analyzeExpr(pChildren[2]);
        pConditionType = pCondition.getType();
        if (!pConditionType.isEqual(pBoolType)) {
            this._error(2228, {
                typeName: pConditionType.toString()
            });
            return null;
        }
        if (isNonIfStmt) {
            pStmt = this.analyzeNonIfStmt(pChildren[0]);
        } else {
            pStmt = this.analyzeStmt(pChildren[0]);
        }
        pWhileStmt.push(pCondition, true);
        pWhileStmt.push(pStmt, true);
    }
    if (!pWhileStmt.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pWhileStmt.getLastError());
    }
    ;
    return pWhileStmt;
}
analyzeIfStmt(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var isIfElse = (pChildren.length === 7);
    var pIfStmtInstruction = new IfStmtInstruction();
    var pCondition = this.analyzeExpr(pChildren[pChildren.length - 3]);
    var pConditionType = pCondition.getType();
    var pBoolType = Effect.getSystemType("bool");
    var pIfStmt = null;
    var pElseStmt = null;
    if (!pConditionType.isEqual(pBoolType)) {
        this._error(2230, {
            typeName: pConditionType.toString()
        });
        return null;
    }
    pIfStmtInstruction.push(pCondition, true);
    if (isIfElse) {
        pIfStmtInstruction.setOperator("if_else");
        pIfStmt = this.analyzeNonIfStmt(pChildren[2]);
        pElseStmt = this.analyzeStmt(pChildren[0]);
        pIfStmtInstruction.push(pIfStmt, true);
        pIfStmtInstruction.push(pElseStmt, true);
    } else {
        pIfStmtInstruction.setOperator("if");
        pIfStmt = this.analyzeNonIfStmt(pChildren[0]);
        pIfStmtInstruction.push(pIfStmt, true);
    }
    if (!pIfStmtInstruction.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pIfStmtInstruction.getLastError());
    }
    ;
    return pIfStmtInstruction;
}
analyzeNonIfStmt(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sFirstNodeName = pChildren[pChildren.length - 1].name;
    switch(sFirstNodeName) {
        case "SimpleStmt":
            return this.analyzeSimpleStmt(pChildren[0]);
        case "T_KW_WHILE":
            return this.analyzeWhileStmt(pNode);
        case "T_KW_FOR":
            return this.analyzeForStmt(pNode);
    }
}
analyzeForStmt(pNode, IParseNode);
IAFXStmtInstruction;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var isNonIfStmt = (pNode.name === "NonIfStmt");
    var pForStmtInstruction = new ForStmtInstruction();
    var pStmt = null;
    this.newScope();
    this.analyzeForInit(pChildren[pChildren.length - 3], pForStmtInstruction);
    this.analyzeForCond(pChildren[pChildren.length - 4], pForStmtInstruction);
    if (pChildren.length === 7) {
        this.analyzeForStep(pChildren[2], pForStmtInstruction);
    } else {
        pForStmtInstruction.push(null);
    }
    if (isNonIfStmt) {
        pStmt = this.analyzeNonIfStmt(pChildren[0]);
    } else {
        pStmt = this.analyzeStmt(pChildren[0]);
    }
    pForStmtInstruction.push(pStmt, true);
    this.endScope();
    if (!pForStmtInstruction.check(ECheckStage.CODE_TARGET_SUPPORT)) {
        this._errorFromInstruction(pForStmtInstruction.getLastError());
    }
    ;
    return pForStmtInstruction;
}
analyzeForInit(pNode, IParseNode, pForStmtInstruction, ForStmtInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var sFirstNodeName = pChildren[pChildren.length - 1].name;
switch(sFirstNodeName) {
    case "VariableDecl":
        this.analyzeVariableDecl(pChildren[0], pForStmtInstruction);
        break;
    case "Expr":
        var pExpr = this.analyzeExpr(pChildren[0]);
        pForStmtInstruction.push(pExpr, true);
        break;
    default:
        pForStmtInstruction.push(null);
        break;
}
return;
analyzeForCond(pNode, IParseNode, pForStmtInstruction, ForStmtInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
if (pChildren.length === 1) {
    pForStmtInstruction.push(null);
    return;
}
var pConditionExpr = this.analyzeExpr(pChildren[1]);
pForStmtInstruction.push(pConditionExpr, true);
return;
analyzeForStep(pNode, IParseNode, pForStmtInstruction, ForStmtInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var pStepExpr = this.analyzeExpr(pChildren[0]);
pForStmtInstruction.push(pStepExpr, true);
return;
analyzeUseDecl(pNode, IParseNode);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
this.setStrictModeOn();
analyzeTechniqueForImport(pNode, IParseNode);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var pTechnique = new TechniqueInstruction();
var sTechniqueName = this.analyzeComplexName(pChildren[pChildren.length - 2]);
var isComplexName = pChildren[pChildren.length - 2].children.length !== 1;
pTechnique.setName(sTechniqueName, isComplexName);
for(var i = pChildren.length - 3; i >= 0; i--) {
    if (pChildren[i].name === "Annotation") {
        var pAnnotation = this.analyzeAnnotation(pChildren[i]);
        pTechnique.setAnnotation(pAnnotation);
    } else if (pChildren[i].name === "Semantic") {
        var sSemantic = this.analyzeSemantic(pChildren[i]);
        pTechnique.setSemantic(sSemantic);
    } else {
        this.analyzeTechniqueBodyForImports(pChildren[i], pTechnique);
    }
}
this.addTechnique(pTechnique);
analyzeComplexName(pNode, IParseNode);
string;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var sName = "";
    for(var i = pChildren.length - 1; i >= 0; i--) {
        sName += pChildren[i].value;
    }
    return sName;
}
analyzeTechniqueBodyForImports(pNode, IParseNode, pTechnique, IAFXTechniqueInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
for(var i = pChildren.length - 2; i >= 1; i--) {
    this.analyzePassDeclForImports(pChildren[i], pTechnique);
}
analyzePassDeclForImports(pNode, IParseNode, pTechnique, IAFXTechniqueInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
if (pChildren[0].name === "ImportDecl") {
    this.analyzeImportDecl(pChildren[0], pTechnique);
} else if (pChildren.length > 1) {
    var pPass = new PassInstruction();
    this.analyzePassStateBlockForShaders(pChildren[0], pPass);
    pPass._setParseNode(pNode);
    pTechnique.addPass(pPass);
}
analyzePassStateBlockForShaders(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
for(var i = pChildren.length - 2; i >= 1; i--) {
    this.analyzePassStateForShader(pChildren[i], pPass);
}
analyzePassStateForShader(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
if (pChildren.length === 1) {
    pPass._markAsComplex(true);
    if (pChildren[0].name === "StateIf") {
        this.analyzePassStateIfForShader(pChildren[0], pPass);
    } else if (pChildren[0].name === "StateSwitch") {
        this.analyzePassStateSwitchForShader(pChildren[0], pPass);
    }
    return;
}
var sType = pChildren[pChildren.length - 1].value.toUpperCase();
var eShaderType = EFunctionType.k_Vertex;
if (sType === "VERTEXSHADER") {
    eShaderType = EFunctionType.k_Vertex;
} else if (sType === "PIXELSHADER") {
    eShaderType = EFunctionType.k_Pixel;
} else {
    return;
}
pNode.isAnalyzed = true;
var pStateExprNode = pChildren[pChildren.length - 3];
var pExprNode = pStateExprNode.children[pStateExprNode.children.length - 1];
var pCompileExpr = this.analyzeExpr(pExprNode);
var pShaderFunc = pCompileExpr.getFunction();
if (eShaderType === EFunctionType.k_Vertex) {
    if (!pShaderFunc._checkDefenitionForVertexUsage()) {
        this._error(2259, {
            funcDef: pShaderFunc._getStringDef()
        });
    }
} else {
    if (!pShaderFunc._checkDefenitionForPixelUsage()) {
        this._error(2260, {
            funcDef: pShaderFunc._getStringDef()
        });
    }
}
pShaderFunc._markUsedAs(eShaderType);
pPass._addFoundFunction(pNode, pShaderFunc, eShaderType);
analyzePassStateIfForShader(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
if (pChildren.length === 5) {
    this.analyzePassStateBlockForShaders(pChildren[0], pPass);
} else if (pChildren.length === 7 && pChildren[0].name === "PassStateBlock") {
    this.analyzePassStateBlockForShaders(pChildren[2], pPass);
    this.analyzePassStateBlockForShaders(pChildren[0], pPass);
} else {
    this.analyzePassStateBlockForShaders(pChildren[2], pPass);
    this.analyzePassStateIfForShader(pChildren[0], pPass);
}
analyzePassStateSwitchForShader(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
this.analyzePassCaseBlockForShader(pChildren[0], pPass);
analyzePassCaseBlockForShader(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
for(var i = pChildren.length - 2; i >= 1; i--) {
    if (pChildren[i].name === "CaseState") {
        this.analyzePassCaseStateForShader(pChildren[i], pPass);
    } else if (pChildren[i].name === "DefaultState") {
        this.analyzePassDefaultStateForShader(pChildren[i], pPass);
    }
}
analyzePassCaseStateForShader(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
for(var i = pChildren.length - 4; i >= 0; i--) {
    if (pChildren[i].name === "PassState") {
        this.analyzePassStateForShader(pChildren[i], pPass);
    }
}
analyzePassDefaultStateForShader(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
for(var i = pChildren.length - 3; i >= 0; i--) {
    if (pChildren[i].name === "PassState") {
        this.analyzePassStateForShader(pChildren[i], pPass);
    }
}
resumeTechniqueAnalysis(pTechnique, IAFXTechniqueInstruction);
void {
    var: pPassList,
    IAFXPassInstruction: [] = pTechnique.getPassList()
};
for(var i = 0; i < pPassList.length; i++) {
    this.resumePassAnalysis(pPassList[i]);
}
if (!pTechnique.checkForCorrectImports()) {
    this._error(2275, {
        techniqueName: pTechnique.getName()
    });
    return;
}
pTechnique.finalizeTechnique(this._sProvideNameSpace, this._pGlobalComponentList, this._pGlobalComponetShiftList);
resumePassAnalysis(pPass, IAFXPassInstruction);
void {
    var: pNode,
    IParseNode:  = pPass._getParseNode()
};
this.setAnalyzedNode(pNode);
var pChildren = pNode.children;
this.setAnalyzeInPass(true);
this.analyzePassStateBlock(pChildren[0], pPass);
this.setAnalyzeInPass(false);
pPass.finalizePass();
analyzePassStateBlock(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
pPass._addCodeFragment("{");
for(var i = pChildren.length - 2; i >= 1; i--) {
    this.analyzePassState(pChildren[i], pPass);
}
pPass._addCodeFragment("}");
analyzePassState(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
if (pChildren.length === 1) {
    if (pChildren[0].name === "StateIf") {
        this.analyzePassStateIf(pChildren[0], pPass);
    } else if (pChildren[0].name === "StateSwitch") {
        this.analyzePassStateSwitch(pChildren[0], pPass);
    }
    return;
}
if (pNode.isAnalyzed) {
    var pFunc = pPass._getFoundedFunction(pNode);
    var eShaderType = pPass._getFoundedFunctionType(pNode);
    var pShader = null;
    if (eShaderType === EFunctionType.k_Vertex) {
        pShader = pFunc._getVertexShader();
    } else {
        pShader = pFunc._getPixelShader();
    }
    pPass.addShader(pShader);
} else {
    var sType = pChildren[pChildren.length - 1].value.toUpperCase();
    var pStateExprNode = pChildren[pChildren.length - 3];
    var pExprNode = pStateExprNode.children[pStateExprNode.children.length - 1];
    switch(sType) {
        case "ZENABLE":
        case "ZWRITEENABLE":
        case "SRCBLEND":
        case "DESTBLEND":
        case "CULLMODE":
        case "ZFUNC":
        case "DITHERENABLE":
        case "ALPHABLENDENABLE":
        case "ALPHATESTENABLE":
            break;
        default:
 {
                logger.setSourceLocation("fx/Effect.ts", 3775);
                logger.warning("Unsupported render state type used: " + sType + ". WebGl...");
            }
            ;
            return;
    }
    if (pExprNode.value === "{" || pExprNode.value === "<" || isNull(pExprNode.value)) {
 {
            logger.setSourceLocation("fx/Effect.ts", 3781);
            logger.warning("So pass state are incorrect");
        }
        ;
        return;
    }
    var sValue = pExprNode.value.toUpperCase();
    switch(sType) {
        case "ALPHABLENDENABLE":
        case "ALPHATESTENABLE":
 {
                logger.setSourceLocation("fx/Effect.ts", 3789);
                logger.warning("ALPHABLENDENABLE/ALPHATESTENABLE not supported in WebGL.");
            }
            ;
            return;
        case "DITHERENABLE":
        case "ZENABLE":
        case "ZWRITEENABLE":
            switch(sValue) {
                case "TRUE":
                case "FALSE":
                    break;
                default:
 {
                        logger.setSourceLocation("fx/Effect.ts", 3802);
                        logger.warning("Unsupported render state ALPHABLENDENABLE/ZENABLE/ZWRITEENABLE/DITHERENABLE value used: " + sValue + ".");
                    }
                    ;
                    return;
            }
            break;
        case "SRCBLEND":
        case "DESTBLEND":
            switch(sValue) {
                case "ZERO":
                case "ONE":
                case "SRCCOLOR":
                case "INVSRCCOLOR":
                case "SRCALPHA":
                case "INVSRCALPHA":
                case "DESTALPHA":
                case "INVDESTALPHA":
                case "DESTCOLOR":
                case "INVDESTCOLOR":
                case "SRCALPHASAT":
                    break;
                default:
 {
                        logger.setSourceLocation("fx/Effect.ts", 3824);
                        logger.warning("Unsupported render state SRCBLEND/DESTBLEND value used: " + sValue + ".");
                    }
                    ;
                    return;
            }
            break;
        case "CULLMODE":
            switch(sValue) {
                case "NONE":
                case "CW":
                case "CCW":
                case "FRONT_AND_BACK":
                    break;
                default:
 {
                        logger.setSourceLocation("fx/Effect.ts", 3837);
                        logger.warning("Unsupported render state SRCBLEND/DESTBLEND value used: " + sValue + ".");
                    }
                    ;
                    return;
            }
            break;
        case "ZFUNC":
            switch(sValue) {
                case "NEVER":
                case "LESS":
                case "EQUAL":
                case "LESSEQUAL":
                case "GREATER":
                case "NOTEQUAL":
                case "GREATEREQUAL":
                case "ALWAYS":
                    break;
                default:
 {
                        logger.setSourceLocation("fx/Effect.ts", 3855);
                        logger.warning("Unsupported render state ZFUNC value used: " + sValue + ".");
                    }
                    ;
                    return;
            }
            break;
    }
    pPass.setState(sType, sValue);
}
analyzePassStateIf(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var pIfExpr = this.analyzeExpr(pChildren[pChildren.length - 3]);
pIfExpr.prepareFor(EFunctionType.k_PassFunction);
pPass._addCodeFragment("if(" + pIfExpr.toFinalCode() + ")");
this.analyzePassStateBlock(pChildren[pChildren.length - 5], pPass);
if (pChildren.length > 5) {
    pPass._addCodeFragment("else");
    if (pChildren[0].name === "PassStateBlock") {
        this.analyzePassStateBlock(pChildren[0], pPass);
    } else {
        pPass._addCodeFragment(" ");
        this.analyzePassStateIf(pChildren[0], pPass);
    }
}
analyzePassStateSwitch(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var sCodeFragment = "switch";
var pSwitchExpr = this.analyzeExpr(pChildren[pChildren.length - 3]);
pSwitchExpr.prepareFor(EFunctionType.k_PassFunction);
pPass._addCodeFragment("(" + pSwitchExpr.toFinalCode() + ")");
this.analyzePassCaseBlock(pChildren[0], pPass);
analyzePassCaseBlock(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
pPass._addCodeFragment("{");
for(var i = pChildren.length - 2; i >= 1; i--) {
    if (pChildren[i].name === "CaseState") {
        this.analyzePassCaseState(pChildren[i], pPass);
    } else if (pChildren[i].name === "DefaultState") {
        this.analyzePassDefault(pChildren[i], pPass);
    }
}
pPass._addCodeFragment("}");
analyzePassCaseState(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var pCaseStateExpr = this.analyzeExpr(pChildren[pChildren.length - 2]);
pCaseStateExpr.prepareFor(EFunctionType.k_PassFunction);
pPass._addCodeFragment("case " + pCaseStateExpr.toFinalCode() + ": ");
for(var i = pChildren.length - 4; i >= 0; i--) {
    if (pChildren[i].name === "PassState") {
        this.analyzePassStateForShader(pChildren[i], pPass);
    } else {
        pPass._addCodeFragment(pChildren[i].value);
    }
}
analyzePassDefault(pNode, IParseNode, pPass, IAFXPassInstruction);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
pPass._addCodeFragment("default: ");
for(var i = pChildren.length - 3; i >= 0; i--) {
    if (pChildren[i].name === "PassState") {
        this.analyzePassStateForShader(pChildren[i], pPass);
    } else {
        pPass._addCodeFragment(pChildren[i].value);
    }
}
analyzeImportDecl(pNode, IParseNode, pTechnique ?  : IAFXTechniqueInstruction = null);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
var sComponentName = this.analyzeComplexName(pChildren[pChildren.length - 2]);
var iShift = 0;
if (pChildren[0].name === "ExtOpt") {
 {
        logger.setSourceLocation("fx/Effect.ts", 3969);
        logger.warning("We don`t suppor ext-commands for import");
    }
    ;
}
if (pChildren.length !== 2) {
    iShift = this.analyzeShiftOpt(pChildren[0]);
}
var pComponent = this._pComposer.getComponentByName(sComponentName);
if (!pComponent) {
    this._error(2277, {
        componentName: sComponentName
    });
    return;
}
this.addComponent(pComponent, iShift, pTechnique);
analyzeProvideDecl(pNode, IParseNode);
void {
    this: ,
    setAnalyzedNode: (pNode)
};
var pChildren = pNode.children;
if (pChildren.length === 2) {
    this._sProvideNameSpace = this.analyzeComplexName(pChildren[0]);
} else {
    this._error(2303);
    return;
}
analyzeShiftOpt(pNode, IParseNode);
number;
 {
    this.setAnalyzedNode(pNode);
    var pChildren = pNode.children;
    var iShift = (pChildren[0].value);
    if (pChildren.length === 2) {
        iShift *= 1;
    } else {
        iShift *= -1;
    }
    return iShift;
}
addComponent(pComponent, IAFXComponent, iShift, number, pTechnique, IAFXTechniqueInstruction);
void {
    if: (!isNull(pTechnique))
};
 {
    pTechnique.addComponent(pComponent, iShift);
}
 {
    if (isNull(this._pGlobalComponentList)) {
        this._pGlobalComponentList = [];
        this._pGlobalComponetShiftList = [];
    }
    this._pGlobalComponentList.push(pComponent);
    this._pGlobalComponetShiftList.push(iShift);
}
var pComponentTechnique = pComponent.getTechnique();
if (this.isAddedTechnique(pComponentTechnique)) {
    return;
}
var pSharedListV = pComponentTechnique.getSharedVariablesForVertex();
var pSharedListP = pComponentTechnique.getSharedVariablesForPixel();
for(var i = 0; i < pSharedListV.length; i++) {
    this.addExternalSharedVariable(pSharedListV[i], EFunctionType.k_Vertex);
}
for(var i = 0; i < pSharedListP.length; i++) {
    this.addExternalSharedVariable(pSharedListP[i], EFunctionType.k_Pixel);
}
if (isNull(this._pAddedTechniqueList)) {
    this._pAddedTechniqueList = [];
}
this._pAddedTechniqueList.push(pTechnique);
isAddedTechnique(pTechnique, IAFXTechniqueInstruction);
bool;
 {
    if (isNull(this._pAddedTechniqueList)) {
        return false;
    }
    for(var i = 0; i < this._pAddedTechniqueList.length; i++) {
        if (this._pAddedTechniqueList[i] === pTechnique) {
            return true;
        }
    }
    return false;
}
checkTwoOperandExprTypes(sOperator, string, pLeftType, IAFXVariableTypeInstruction, pRightType, IAFXVariableTypeInstruction);
IAFXVariableTypeInstruction;
 {
    if (pLeftType._isUnverifiable()) {
        return pLeftType;
    }
    if (pRightType._isUnverifiable()) {
        return pRightType;
    }
    var isComplex = pLeftType.isComplex() || pRightType.isComplex();
    var isArray = pLeftType.isNotBaseArray() || pRightType.isNotBaseArray();
    var isSampler = this.isSamplerType(pLeftType) || this.isSamplerType(pRightType);
    var pBoolType = Effect.getSystemType("bool").getVariableType();
    if (isArray || isSampler) {
        return null;
    }
    if (sOperator === "%" || sOperator === "%=") {
        return null;
    }
    if (this.isAssignmentOperator(sOperator)) {
        if (!pLeftType.isWritable()) {
            this._error(2267);
            return null;
        }
        if (pLeftType.isStrongEqual(Effect.getSystemType("ptr"))) {
            this.addPointerForExtract(pLeftType._getParentVarDecl());
        }
        if (!pRightType.isReadable()) {
            this._error(2268);
            return null;
        }
        if (sOperator !== "=" && !pLeftType.isReadable()) {
            this._error(2268);
        }
    } else {
        if (!pLeftType.isReadable()) {
            this._error(2268);
            return null;
        }
        if (!pRightType.isReadable()) {
            this._error(2268);
            return null;
        }
    }
    if (isComplex) {
        if (sOperator === "=" && pLeftType.isEqual(pRightType)) {
            return pLeftType;
        } else if (this.isEqualOperator(sOperator) && !pLeftType._containArray() && !pLeftType._containSampler()) {
            return pBoolType;
        } else {
            return null;
        }
    }
    var pReturnType = null;
    var pLeftBaseType = (pLeftType.getBaseType()).getVariableType();
    var pRightBaseType = (pRightType.getBaseType()).getVariableType();
    if (pLeftType.isConst() && this.isAssignmentOperator(sOperator)) {
        return null;
    }
    if (pLeftType.isEqual(pRightType)) {
        if (this.isArithmeticalOperator(sOperator)) {
            if (!this.isMatrixType(pLeftType) || (sOperator !== "/" && sOperator !== "/=")) {
                return pLeftBaseType;
            } else {
                return null;
            }
        } else if (this.isRelationalOperator(sOperator)) {
            if (this.isScalarType(pLeftType)) {
                return pBoolType;
            } else {
                return null;
            }
        } else if (this.isEqualOperator(sOperator)) {
            return pBoolType;
        } else if (sOperator === "=") {
            return pLeftBaseType;
        } else {
            return null;
        }
    }
    if (this.isArithmeticalOperator(sOperator)) {
        if (this.isBoolBasedType(pLeftType) || this.isBoolBasedType(pRightType) || this.isFloatBasedType(pLeftType) !== this.isFloatBasedType(pRightType) || this.isIntBasedType(pLeftType) !== this.isIntBasedType(pRightType)) {
            return null;
        }
        if (this.isScalarType(pLeftType)) {
            return pRightBaseType;
        }
        if (this.isScalarType(pRightType)) {
            return pLeftBaseType;
        }
        if (sOperator === "*" || sOperator === "*=") {
            if (this.isMatrixType(pLeftType) && this.isVectorType(pRightType) && pLeftType.getLength() === pRightType.getLength()) {
                return pRightBaseType;
            } else if (this.isMatrixType(pRightType) && this.isVectorType(pLeftType) && pLeftType.getLength() === pRightType.getLength()) {
                return pLeftBaseType;
            } else {
                return null;
            }
        }
    }
    return null;
}
checkOneOperandExprType(sOperator, string, pType, IAFXVariableTypeInstruction);
IAFXVariableTypeInstruction;
 {
    if (pType._isUnverifiable()) {
        return pType;
    }
    var isComplex = pType.isComplex();
    var isArray = pType.isNotBaseArray();
    var isSampler = this.isSamplerType(pType);
    if (isComplex || isArray || isSampler) {
        return null;
    }
    if (!pType.isReadable()) {
        this._error(2268);
        return null;
    }
    if (sOperator === "++" || sOperator === "--") {
        if (!pType.isWritable()) {
            this._error(2267);
            return null;
        }
        if (pType.isStrongEqual(Effect.getSystemType("ptr"))) {
            this.addPointerForExtract(pType._getParentVarDecl());
        }
        return pType;
    }
    if (sOperator === "!") {
        var pBoolType = Effect.getSystemType("bool").getVariableType();
        if (pType.isEqual(pBoolType)) {
            return pBoolType;
        } else {
            return null;
        }
    } else {
        if (this.isBoolBasedType(pType)) {
            return null;
        } else {
            return (pType.getBaseType()).getVariableType();
        }
    }
}
isAssignmentOperator(sOperator, string);
bool;
 {
    return sOperator === "+=" || sOperator === "-=" || sOperator === "*=" || sOperator === "/=" || sOperator === "%=" || sOperator === "=";
}
isArithmeticalOperator(sOperator, string);
bool;
 {
    return sOperator === "+" || sOperator === "+=" || sOperator === "-" || sOperator === "-=" || sOperator === "*" || sOperator === "*=" || sOperator === "/" || sOperator === "/=";
}
isRelationalOperator(sOperator, string);
bool;
 {
    return sOperator === ">" || sOperator === ">=" || sOperator === "<" || sOperator === "<=";
}
isEqualOperator(sOperator, string);
bool;
 {
    return sOperator === "==" || sOperator === "!=";
}
isMatrixType(pType, IAFXTypeInstruction);
bool;
 {
    return pType.isEqual(Effect.getSystemType("float2x2")) || pType.isEqual(Effect.getSystemType("float3x3")) || pType.isEqual(Effect.getSystemType("float4x4")) || pType.isEqual(Effect.getSystemType("int2x2")) || pType.isEqual(Effect.getSystemType("int3x3")) || pType.isEqual(Effect.getSystemType("int4x4")) || pType.isEqual(Effect.getSystemType("bool2x2")) || pType.isEqual(Effect.getSystemType("bool3x3")) || pType.isEqual(Effect.getSystemType("bool4x4"));
}
isVectorType(pType, IAFXTypeInstruction);
bool;
 {
    return pType.isEqual(Effect.getSystemType("float2")) || pType.isEqual(Effect.getSystemType("float3")) || pType.isEqual(Effect.getSystemType("float4")) || pType.isEqual(Effect.getSystemType("bool2")) || pType.isEqual(Effect.getSystemType("bool3")) || pType.isEqual(Effect.getSystemType("bool4")) || pType.isEqual(Effect.getSystemType("int2")) || pType.isEqual(Effect.getSystemType("int3")) || pType.isEqual(Effect.getSystemType("int4"));
}
isScalarType(pType, IAFXTypeInstruction);
bool;
 {
    return pType.isEqual(Effect.getSystemType("bool")) || pType.isEqual(Effect.getSystemType("int")) || pType.isEqual(Effect.getSystemType("ptr")) || pType.isEqual(Effect.getSystemType("float"));
}
isFloatBasedType(pType, IAFXTypeInstruction);
bool;
 {
    return pType.isEqual(Effect.getSystemType("float")) || pType.isEqual(Effect.getSystemType("float2")) || pType.isEqual(Effect.getSystemType("float3")) || pType.isEqual(Effect.getSystemType("float4")) || pType.isEqual(Effect.getSystemType("float2x2")) || pType.isEqual(Effect.getSystemType("float3x3")) || pType.isEqual(Effect.getSystemType("float4x4")) || pType.isEqual(Effect.getSystemType("ptr"));
}
isIntBasedType(pType, IAFXTypeInstruction);
bool;
 {
    return pType.isEqual(Effect.getSystemType("int")) || pType.isEqual(Effect.getSystemType("int2")) || pType.isEqual(Effect.getSystemType("int3")) || pType.isEqual(Effect.getSystemType("int4")) || pType.isEqual(Effect.getSystemType("int2x2")) || pType.isEqual(Effect.getSystemType("int3x3")) || pType.isEqual(Effect.getSystemType("int4x4"));
}
isBoolBasedType(pType, IAFXTypeInstruction);
bool;
 {
    return pType.isEqual(Effect.getSystemType("bool")) || pType.isEqual(Effect.getSystemType("bool2")) || pType.isEqual(Effect.getSystemType("bool3")) || pType.isEqual(Effect.getSystemType("bool4")) || pType.isEqual(Effect.getSystemType("bool2x2")) || pType.isEqual(Effect.getSystemType("bool3x3")) || pType.isEqual(Effect.getSystemType("bool4x4"));
}
isSamplerType(pType, IAFXTypeInstruction);
bool;
 {
    return pType.isEqual(Effect.getSystemType("sampler")) || pType.isEqual(Effect.getSystemType("sampler2D")) || pType.isEqual(Effect.getSystemType("samplerCUBE")) || pType.isEqual(Effect.getSystemType("video_buffer"));
}
addExtactionStmts(pStmt, IAFXStmtInstruction);
void {
    var: pPointerList,
    IAFXVariableDeclInstruction: [] = this.getPointerForExtractList()
};
for(var i = 0; i < pPointerList.length; i++) {
    this.generateExtractStmtFromPointer(pPointerList[i], pStmt);
}
this.clearPointersForExtract();
generateExtractStmtFromPointer(pPointer, IAFXVariableDeclInstruction, pParentStmt, IAFXStmtInstruction);
IAFXStmtInstruction;
 {
    var pPointerType = pPointer.getType();
    var pWhatExtracted = pPointerType._getDownPointer();
    var pWhatExtractedType = null;
    var pFunction = this.getCurrentAnalyzedFunction();
    while(!isNull(pWhatExtracted)) {
        pWhatExtractedType = pWhatExtracted.getType();
        if (!pWhatExtractedType.isComplex()) {
            var pSingleExtract = new ExtractStmtInstruction();
            pSingleExtract.generateStmtForBaseType(pWhatExtracted, pWhatExtractedType.getPointer(), pWhatExtractedType.getVideoBuffer(), 0, null);
            if (!pSingleExtract.check(ECheckStage.CODE_TARGET_SUPPORT)) {
                this._errorFromInstruction(pSingleExtract.getLastError());
            }
            ;
            pParentStmt.push(pSingleExtract, true);
            if (!isNull(pFunction)) {
                pFunction._addUsedFunction(pSingleExtract.getExtractFunction());
            }
        } else {
            this.generateExtractStmtForComplexVar(pWhatExtracted, pParentStmt, pWhatExtractedType.getPointer(), pWhatExtractedType.getVideoBuffer(), 0);
        }
        pWhatExtracted = pWhatExtractedType._getDownPointer();
    }
    return pParentStmt;
}
generateExtractStmtForComplexVar(pVarDecl, IAFXVariableDeclInstruction, pParentStmt, IAFXStmtInstruction, pPointer, IAFXVariableDeclInstruction, pBuffer, IAFXVariableDeclInstruction, iPadding, number);
void {
    var: pVarType,
    IAFXVariableTypeInstruction:  = pVarDecl.getType()
};
var pFieldNameList = pVarType.getFieldNameList();
var pField = null;
var pFieldType = null;
var pSingleExtract = null;
var pFunction = this.getCurrentAnalyzedFunction();
for(var i = 0; i < pFieldNameList.length; i++) {
    pField = pVarType.getField(pFieldNameList[i]);
    if (isNull(pField)) {
        continue;
    }
    pFieldType = pField.getType();
    if (pFieldType.isPointer()) {
        var pFieldPointer = pFieldType._getMainPointer();
        pSingleExtract = new ExtractStmtInstruction();
        pSingleExtract.generateStmtForBaseType(pFieldPointer, pPointer, pFieldType.getVideoBuffer(), iPadding + pFieldType.getPadding(), null);
        if (!pSingleExtract.check(ECheckStage.CODE_TARGET_SUPPORT)) {
            this._errorFromInstruction(pSingleExtract.getLastError());
        }
        ;
        pParentStmt.push(pSingleExtract, true);
        this.generateExtractStmtFromPointer(pFieldPointer, pParentStmt);
        if (!isNull(pFunction)) {
            pFunction._addUsedFunction(pSingleExtract.getExtractFunction());
        }
    } else if (pFieldType.isComplex()) {
        this.generateExtractStmtForComplexVar(pField, pParentStmt, pPointer, pBuffer, iPadding + pFieldType.getPadding());
    } else {
        pSingleExtract = new ExtractStmtInstruction();
        pSingleExtract.generateStmtForBaseType(pField, pPointer, pBuffer, iPadding + pFieldType.getPadding(), null);
        if (!pSingleExtract.check(ECheckStage.CODE_TARGET_SUPPORT)) {
            this._errorFromInstruction(pSingleExtract.getLastError());
        }
        ;
        pParentStmt.push(pSingleExtract, true);
        if (!isNull(pFunction)) {
            pFunction._addUsedFunction(pSingleExtract.getExtractFunction());
        }
    }
}
getNodeSourceLocation(pNode, IParseNode);
 {
    line:
number
    column:
number
}
 {
    if (isDef(pNode.line)) {
        return {
            line: pNode.line,
            column: pNode.start
        };
    } else {
        return this.getNodeSourceLocation(pNode.children[pNode.children.length - 1]);
    }
}
var akra;
(function (akra) {
    (function (fx) {
        var TexcoordSwapper = (function () {
            function TexcoordSwapper() {
                this._pTmpToTex = null;
                this._pTexToTmp = null;
                this._pTexcoords = null;
                this._sTmpToTexCode = "";
                this._sTexToTmpCode = "";
                this._iMaxTexcoords = 0;
                this.inline = getTmpDeclCode();
                this.string = {
                    return: this._sTexToTmpCode
                };
                this.inline = getTecoordSwapCode();
                this.string = {
                    return: this._sTmpToTexCode
                };
                this._iMaxTexcoords = core.pool.resources.SurfaceMaterial.MAX_TEXTURES_PER_SURFACE;
                this._pTmpToTex = new Array(this._iMaxTexcoords);
                this._pTexToTmp = new Array(this._iMaxTexcoords);
                this._pTexcoords = new Array(this._iMaxTexcoords);
            }
            TexcoordSwapper.prototype.clear = function () {
                for(var i = 0; i < this._iMaxTexcoords; i++) {
                    this._pTmpToTex[i] = "";
                    this._pTexToTmp[i] = "";
                    this._pTexcoords[i] = 0;
                }
                this._sTmpToTexCode = "";
                this._sTexToTmpCode = "";
            };
            TexcoordSwapper.prototype.generateSwapCode = function (pMaterial, pAttrConatiner) {
                this.clear();
                if (isNull(pMaterial)) {
                    return;
                }
                var pTexcoords = this._pTexcoords;
                for(var i = 0; i < this._iMaxTexcoords; i++) {
                    var iTexcoord = pMaterial.texcoord(i);
                    if (iTexcoord !== i && pAttrConatiner.hasTexcoord(i)) {
                        var pAttr = pAttrConatiner.getTexcoordVar(i);
                        this._pTexToTmp[i] = pAttr.getType().getBaseType().getRealName() + " " + "T" + i.toString() + "=" + pAttr.getRealName() + ";";
                        this._sTexToTmpCode += this._pTexToTmp[i] + "\n";
                    }
                    if (!pAttrConatiner.hasTexcoord(iTexcoord)) {
                        pTexcoords[iTexcoord] = 0;
                    } else {
                        pTexcoords[iTexcoord] = iTexcoord;
                    }
                }
                for(var i = 0; i < this._iMaxTexcoords; i++) {
                    if (pTexcoords[i] !== i && pAttrConatiner.hasTexcoord(i)) {
                        var pAttr = pAttrConatiner.getTexcoordVar(i);
                        if (this._pTexToTmp[pTexcoords[i]] !== "") {
                            this._pTmpToTex[i] = pAttr.getRealName() + "=" + this._pTexToTmp[pTexcoords[i]] + ";";
                        } else {
                            this._pTmpToTex[i] = pAttr.getRealName() + "=" + pAttrConatiner.getTexcoordVar(pTexcoords[i]).getRealName() + ";";
                        }
                        this._sTmpToTexCode += this._pTmpToTex[i] + "\n";
                    }
                }
            };
            return TexcoordSwapper;
        })();
        fx.TexcoordSwapper = TexcoordSwapper;        
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (fx) {
        inline;
        function createSamplerState() {
            return {
                textureName: "",
                texture: null,
                wrap_s: ETextureWrapModes.CLAMP_TO_EDGE,
                wrap_t: ETextureWrapModes.CLAMP_TO_EDGE,
                mag_filter: ETextureFilters.LINEAR,
                min_filter: ETextureFilters.LINEAR
            };
        }
        var PassInputBlend = (function () {
            function PassInputBlend(pCreator) {
                this._isFirstInit = true;
                this._pCreator = null;
                this._pUniformTypeMap = null;
                this._isUniformArrayMap = null;
                this._pForeignTypeMap = null;
                this._pTextureTypeMap = null;
                this._bNeedToCalcBlend = true;
                this._bNeedToCalcShader = true;
                this._iLastPassBlendId = 0;
                this._iLastShaderId = 0;
                this._pMaterialContainer = {
                    "DIFFUSE": null,
                    "AMBIENT": null,
                    "SPECULAR": null,
                    "EMISSIVE": null,
                    "SHININESS": 1.
                };
                this.samplers = null;
                this.samplerArrays = null;
                this.samplerArrayLength = null;
                this.uniforms = null;
                this.foreigns = null;
                this.textures = null;
                this.samplerKeys = null;
                this.samplerArrayKeys = null;
                this.uniformKeys = null;
                this.foreignKeys = null;
                this.textureKeys = null;
                this.inline = setSampler(sName, string, pValue, IAFXSamplerState);
                this._pCreator = pCreator;
                this.init();
            }
            PassInputBlend.prototype.hasTexture = function (sName) {
                if (!this._pTextureTypeMap[sName]) {
                    this._pTextureTypeMap[sName] = EAFXShaderVariableType.k_NotVar;
                    return false;
                }
                return true;
            };
            PassInputBlend.prototype.hasUniform = function (sName) {
                if (!this._pUniformTypeMap[sName]) {
                    this._pUniformTypeMap[sName] = EAFXShaderVariableType.k_NotVar;
                    return false;
                }
                return true;
            };
            PassInputBlend.prototype.setUniform = function (sName, pValue) {
                var eType = this._pUniformTypeMap[sName];
                if (!eType) {
                    this._pUniformTypeMap[sName] = EAFXShaderVariableType.k_NotVar;
                    return;
                }
                if (eType === EAFXShaderVariableType.k_Sampler2D || eType === EAFXShaderVariableType.k_SamplerCUBE) {
                    var isArray = this._isUniformArrayMap[sName];
                    if (isArray) {
                        this.setSamplerArray(sName, pValue);
                    } else {
                        this.setSampler(sName, pValue);
                    }
                    return;
                }
                this.uniforms[sName] = pValue;
            };
            PassInputBlend.prototype.setForeign = function (sName, pValue) {
                if (!this._pForeignTypeMap[sName]) {
                    this._pForeignTypeMap[sName] = EAFXShaderVariableType.k_NotVar;
                    return;
                }
                var pOldValue = this.foreigns[sName];
                if (pOldValue !== pValue) {
                    this._bNeedToCalcBlend = true;
                    this._bNeedToCalcShader = true;
                }
                this.foreigns[sName] = pValue;
            };
            return PassInputBlend;
        })();
        fx.PassInputBlend = PassInputBlend;        
        void {
            PassInputBlend: ,
            copySamplerState: (pValue, 
this.samplers[sName])
        };
        setSamplerTexture(sName, string, sTexture, string);
        void ;
        setSamplerTexture(sName, string, pTexture, ITexture);
        void ;
        setSamplerTexture(sName, string, pTexture, any);
        void {
            if: (this.hasUniform(sName))
        };
 {
            if (isString(pTexture)) {
                this.samplers[sName].textureName = pTexture;
            } else {
                this.samplers[sName].texture = pTexture;
            }
        }
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
setSamplerArray(sName, string, pValue, IAFXSamplerState[]);
void {
    for: 
};
var i = 0;
i < pValue.length;
i++;
 {
    PassInputBlend.copySamplerState(pValue[i], this.samplerArrays[sName][i]);
}
this.samplerArrayLength[sName] = pValue.length;
inline;
setStruct(sName, string, pValue, any);
void {
    this: ,
    setUniform: (sName, 
pValue)
};
copySamplerState(pFrom, IAFXSamplerState, pTo, IAFXSamplerState);
void {
    pTo: ,
    textureName:  = pFrom.textureName,
    pTo: ,
    texture:  = pFrom.texture,
    pTo: ,
    wrap_s:  = pFrom.wrap_s,
    pTo: ,
    wrap_t:  = pFrom.wrap_t,
    pTo: ,
    mag_filter:  = pFrom.mag_filter,
    pTo: ,
    min_filter:  = pFrom.min_filter
};
setTexture(sName, string, pValue, any);
void {
    if: (!this._pTextureTypeMap[sName])
};
 {
    this._pTextureTypeMap[sName] = EAFXShaderVariableType.k_NotVar;
    return;
}
this.textures[sName] = pValue;
setSurfaceMaterial(pSurfaceMaterial, ISurfaceMaterial);
void {
    if: (isNull(pSurfaceMaterial))
};
 {
    return;
}
for(var i = 0; i < pSurfaceMaterial.totalTextures; i++) {
    var pTexture = pSurfaceMaterial.texture(i);
    this.setTexture("TEXTURE" + i, pTexture);
}
var pMaterial = pSurfaceMaterial.material;
var pMatContainer = this._pMaterialContainer;
pMatContainer.DIFFUSE = util.colorToVec4(pMaterial.diffuse);
pMatContainer.AMBIENT = util.colorToVec4(pMaterial.ambient);
pMatContainer.SPECULAR = util.colorToVec4(pMaterial.specular);
pMatContainer.EMISSIVE = util.colorToVec4(pMaterial.emissive);
pMatContainer.SHININESS = pMaterial.shininess;
this.setStruct("MATERIAL", pMatContainer);
this.setSamplerTexture("S_DIFFUSE", pSurfaceMaterial.texture(ESurfaceMaterialTextures.DIFFUSE) || null);
this.setSamplerTexture("S_AMBIENT", pSurfaceMaterial.texture(ESurfaceMaterialTextures.AMBIENT) || null);
this.setSamplerTexture("S_SPECULAR", pSurfaceMaterial.texture(ESurfaceMaterialTextures.SPECULAR) || null);
this.setSamplerTexture("S_EMISSIVE", pSurfaceMaterial.texture(ESurfaceMaterialTextures.EMISSIVE) || null);
this.setSamplerTexture("S_NORMAL", pSurfaceMaterial.texture(ESurfaceMaterialTextures.NORMAL) || null);
inline;
_getUnifromLength(sName, string);
number;
 {
    return this._pCreator.uniformByRealName[sName].getType().getLength();
}
inline;
_getUniformType(sName, string);
EAFXShaderVariableType;
 {
    return this._pUniformTypeMap[sName];
}
inline;
_getSamplerState(sName, string);
IAFXSamplerState;
 {
    return this.samplers[sName];
}
inline;
_getSamplerTexture(sName, string);
ITexture;
 {
    return this._getTextureForSamplerState(this._getSamplerState(sName));
}
_getTextureForSamplerState(pSamplerState, IAFXSamplerState);
ITexture;
 {
    var pTexture = null;
    if (!isNull(pSamplerState.texture)) {
        pTexture = pSamplerState.texture;
    } else if (pSamplerState.textureName !== "") {
        if (this.hasTexture(pSamplerState.textureName)) {
            pTexture = this.textures[pSamplerState.textureName];
        }
    }
    return pTexture;
}
_release();
void {
    for: 
};
var i = 0;
i < this.uniformKeys.length;
i++;
 {
    this.uniforms[this.uniformKeys[i]] = null;
}
for(var i = 0; i < this.foreignKeys.length; i++) {
    this.foreigns[this.foreignKeys[i]] = null;
}
for(var i = 0; i < this.textureKeys.length; i++) {
    this.textures[this.textureKeys[i]] = null;
}
for(var i = 0; i < this.samplerKeys.length; i++) {
    this.clearSamplerState(this.samplers[this.samplerKeys[i]]);
}
for(var i = 0; i < this.samplerArrayKeys.length; i++) {
    var pStateList = this.samplerArrays[this.samplerArrayKeys[i]];
    for(var j = 0; j < pStateList.length; j++) {
        this.clearSamplerState(pStateList[j]);
    }
    this.samplerArrayLength[this.samplerArrayKeys[i]] = 0;
}
this._pCreator.releasePassInput(this);
this._bNeedToCalcShader = true;
this._bNeedToCalcBlend = true;
inline;
_isNeedToCalcBlend();
bool;
 {
    return this._bNeedToCalcBlend;
}
inline;
_isNeedToCalcShader();
bool;
 {
    return this._bNeedToCalcBlend || this._bNeedToCalcShader;
}
inline;
_getLastPassBlendId();
number;
 {
    return this._iLastPassBlendId;
}
inline;
_getLastShaderId();
number;
 {
    return this._iLastShaderId;
}
inline;
_setPassBlendId(id, number);
void {
    this: ,
    _iLastPassBlendId:  = id
};
inline;
_setShaderId(id, number);
void {
    this: ,
    _iLastShaderId:  = id
};
inline;
_getAFXUniformVar(sName, string);
IAFXVariableDeclInstruction;
 {
    return this._pCreator.uniformByRealName[sName];
}
init();
void {
    this: ,
    _pUniformTypeMap:  = {}
};
this._isUniformArrayMap = {};
this._pForeignTypeMap = {};
this._pTextureTypeMap = {};
this.samplers = {};
this.samplerArrays = {};
this.samplerArrayLength = {};
this.uniforms = {};
this.foreigns = {};
this.textures = {};
var pUniformKeys = this._pCreator.uniformRealNameList;
var pForeignKeys = this._pCreator.foreignNameList;
var pTextureKeys = this._pCreator.textureRealNameList;
var pUniformMap = this._pCreator.uniformByRealName;
var pForeignMap = this._pCreator.foreignByName;
var pTextureMap = this._pCreator.textureByRealName;
var eType = 0;
var sName = "";
var isArray = false;
for(var i = 0; i < pUniformKeys.length; i++) {
    sName = pUniformKeys[i];
    eType = PassInputBlend.getVariableType(pUniformMap[sName]);
    isArray = this.isVarArray(pUniformMap[sName]);
    this._pUniformTypeMap[sName] = eType;
    this._isUniformArrayMap[sName] = isArray;
    if (eType === EAFXShaderVariableType.k_Sampler2D || eType === EAFXShaderVariableType.k_SamplerCUBE) {
        if (isArray) {
            this.samplerArrays[sName] = new Array(16);
            this.samplerArrayLength[sName] = 0;
            for(var j = 0; j < this.samplerArrays[sName].length; j++) {
                this.samplerArrays[sName][j] = createSamplerState();
            }
        } else {
            this.samplers[sName] = createSamplerState();
        }
    } else {
        this.uniforms[sName] = null;
    }
}
for(var i = 0; i < pForeignKeys.length; i++) {
    sName = pForeignKeys[i];
    eType = PassInputBlend.getVariableType(pForeignMap[sName]);
    this._pForeignTypeMap[sName] = eType;
    this.foreigns[sName] = null;
}
for(var i = 0; i < pTextureKeys.length; i++) {
    sName = pTextureKeys[i];
    eType = EAFXShaderVariableType.k_Texture;
    this._pTextureTypeMap[sName] = eType;
    this.textures[sName] = null;
}
this.samplerKeys = Object.keys(this.samplers);
this.samplerArrayKeys = Object.keys(this.samplerArrays);
this.uniformKeys = Object.keys(this.uniforms);
this.foreignKeys = Object.keys(this.foreigns);
this.textureKeys = Object.keys(this.textures);
getVariableType(pVar, IAFXVariableDeclInstruction);
EAFXShaderVariableType;
 {
    var sBaseType = pVar.getType().getBaseType().getName();
    switch(sBaseType) {
        case "texture":
            return EAFXShaderVariableType.k_Texture;
        case "float":
            return EAFXShaderVariableType.k_Float;
        case "int":
            return EAFXShaderVariableType.k_Int;
        case "bool":
            return EAFXShaderVariableType.k_Bool;
        case "float2":
            return EAFXShaderVariableType.k_Float2;
        case "int2":
            return EAFXShaderVariableType.k_Int2;
        case "bool2":
            return EAFXShaderVariableType.k_Bool2;
        case "float3":
            return EAFXShaderVariableType.k_Float3;
        case "int3":
            return EAFXShaderVariableType.k_Int3;
        case "bool3":
            return EAFXShaderVariableType.k_Bool3;
        case "float4":
            return EAFXShaderVariableType.k_Float4;
        case "int4":
            return EAFXShaderVariableType.k_Int4;
        case "bool4":
            return EAFXShaderVariableType.k_Bool4;
        case "float2x2":
            return EAFXShaderVariableType.k_Float2x2;
        case "float3x3":
            return EAFXShaderVariableType.k_Float3x3;
        case "float4x4":
            return EAFXShaderVariableType.k_Float4x4;
        case "sampler":
        case "sampler2D":
            return EAFXShaderVariableType.k_Sampler2D;
        case "samplerCUBE":
            return EAFXShaderVariableType.k_SamplerCUBE;
        default:
            if (pVar.getType().isComplex()) {
                return EAFXShaderVariableType.k_Complex;
            } else {
                return EAFXShaderVariableType.k_NotVar;
            }
    }
}
inline;
isVarArray(pVar, IAFXVariableDeclInstruction);
bool;
 {
    return pVar.getType().isNotBaseArray();
}
clearSamplerState(pState, IAFXSamplerState);
void {
    pState: ,
    textureName:  = "",
    pState: ,
    texture:  = null,
    pState: ,
    wrap_s:  = ETextureWrapModes.CLAMP_TO_EDGE,
    pState: ,
    wrap_t:  = ETextureWrapModes.CLAMP_TO_EDGE,
    pState: ,
    mag_filter:  = ETextureFilters.LINEAR,
    pState: ,
    min_filter:  = ETextureFilters.LINEAR
};
var akra;
(function (akra) {
    (function (fx) {
        var Maker = (function () {
            function Maker() {
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pComposer = null;
                this._pShaderProgram = null;
                this._pRealUniformNameList = null;
                this._pRealAttrNameList = null;
                this._pUniformExistMap = {};
                this._pAttrExistMap = {};
                this._pRealUniformLengthMap = {};
                this._pRealUniformTypeMap = {};
                this._pRealUnifromFromInput = null;
                this._pRealSampleArraysFromInput = null;
                this._pRealSamplersFromInput = null;
                this._pRealSamplersNames = null;
                this._isUsedZero2D = false;
                this._isUsedZeroCube = false;
                this._pAttrContainer = null;
                this._pRealAttrSlotFromFlows = null;
                this._pRealAttrIsIndexData = null;
                this._pBufferSamplersFromFlows = null;
                this._pDataPoolArray = new util.ObjectArray();
                this.inline = isArray(sName, string);
            }
            return Maker;
        })();
        fx.Maker = Maker;        
 {
            return this.getLength(sName) > 0;
        }
        inline;
        getType(sName, string);
        EAFXShaderVariableType;
 {
            return this._pRealUniformTypeMap[sName];
        }
        inline;
        getLength(sName, string);
        number;
 {
            return this._pRealUniformLengthMap[sName];
        }
        setUniform(sName, string, pValue, any);
        void {
            var: eType,
            EAFXShaderVariableType:  = this.getType(sName)
        };
        var iLength = this.getLength(sName);
        if (webgl.isANGLE && (!isDef(eType) || eType === EAFXShaderVariableType.k_NotVar)) {
            this._pRealUniformTypeMap[sName] = EAFXShaderVariableType.k_NotVar;
            return;
        }
        if (iLength > 0) {
            this.applyUnifromArray(sName, eType, pValue);
        } else {
            this.applyUniform(sName, eType, pValue);
        }
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
applyUnifromArray(sName, string, eType, EAFXShaderVariableType, pValue, any);
void {
    switch: (eType)
};
 {
    EAFXShaderVariableType.k_Float;
    this._pShaderProgram.setFloat32Array(sName, pValue);
    break;
    EAFXShaderVariableType.k_Int;
    this._pShaderProgram.setInt32Array(sName, pValue);
    break;
    EAFXShaderVariableType.k_Float2;
    this._pShaderProgram.setVec2Array(sName, pValue);
    break;
    EAFXShaderVariableType.k_Int2;
    this._pShaderProgram.setVec2iArray(sName, pValue);
    break;
    EAFXShaderVariableType.k_Float3;
    this._pShaderProgram.setVec3Array(sName, pValue);
    break;
    EAFXShaderVariableType.k_Int3;
    this._pShaderProgram.setVec3iArray(sName, pValue);
    break;
    EAFXShaderVariableType.k_Float4;
    this._pShaderProgram.setVec4Array(sName, pValue);
    break;
    EAFXShaderVariableType.k_Int4;
    this._pShaderProgram.setVec4iArray(sName, pValue);
    break;
    EAFXShaderVariableType.k_Float3x3;
    this._pShaderProgram.setMat3Array(sName, pValue);
    break;
    EAFXShaderVariableType.k_Float4x4;
    this._pShaderProgram.setMat4Array(sName, pValue);
    break;
    EAFXShaderVariableType.k_Sampler2D;
    this._pShaderProgram.setSamplerArray(sName, pValue);
    break;
    EAFXShaderVariableType.k_SamplerCUBE;
    this._pShaderProgram.setSamplerArray(sName, pValue);
    break;
 {
        logger.setSourceLocation("fx/Maker.ts", 147);
        logger.criticalError("Wrong uniform array type (" + eType + ") with name " + sName);
    }
    ;
}
applyUniform(sName, string, eType, EAFXShaderVariableType, pValue, any);
void {
    switch: (eType)
};
 {
    EAFXShaderVariableType.k_Float;
    this._pShaderProgram.setFloat(sName, pValue || 0.);
    break;
    EAFXShaderVariableType.k_Int;
    this._pShaderProgram.setInt(sName, pValue || 0);
    break;
    EAFXShaderVariableType.k_Bool;
    this._pShaderProgram.setInt(sName, pValue ? 1 : 0);
    break;
    EAFXShaderVariableType.k_Float2;
    this._pShaderProgram.setVec2(sName, pValue || vec2(0));
    break;
    EAFXShaderVariableType.k_Int2;
    this._pShaderProgram.setVec2i(sName, pValue || vec2(0));
    break;
    EAFXShaderVariableType.k_Float3;
    this._pShaderProgram.setVec3(sName, pValue || vec3(0));
    break;
    EAFXShaderVariableType.k_Int3;
    this._pShaderProgram.setVec3i(sName, pValue || vec3(0));
    break;
    EAFXShaderVariableType.k_Float4;
    this._pShaderProgram.setVec4(sName, pValue || vec4(0));
    break;
    EAFXShaderVariableType.k_Int4;
    this._pShaderProgram.setVec4i(sName, pValue || vec4(0));
    break;
    EAFXShaderVariableType.k_Float3x3;
    this._pShaderProgram.setMat3(sName, pValue || mat3(0));
    break;
    EAFXShaderVariableType.k_Float4x4;
    this._pShaderProgram.setMat4(sName, pValue || mat4(0));
    break;
    EAFXShaderVariableType.k_Sampler2D;
    this._pShaderProgram.setSampler(sName, pValue);
    break;
    EAFXShaderVariableType.k_SamplerCUBE;
    this._pShaderProgram.setSampler(sName, pValue);
    break;
    EAFXShaderVariableType.k_SamplerVertexTexture;
    this._pShaderProgram.setVertexBuffer(sName, pValue);
    break;
 {
        logger.setSourceLocation("fx/Maker.ts", 213);
        logger.criticalError("Wrong uniform type (" + eType + ") with name " + sName);
    }
    ;
}
inline;
get;
shaderProgram();
IShaderProgram;
 {
    return this._pShaderProgram;
}
inline;
get;
attributeSemantics();
string[];
 {
    return this._pRealAttrSlotFromFlows;
}
inline;
get;
attributeNames();
string[];
 {
    return this._pRealAttrNameList;
}
constructor(pComposer, IAFXComposer);
 {
    this._pComposer = pComposer;
}
_create(sVertex, string, sPixel, string);
bool;
 {
    var pRmgr = this._pComposer.getEngine().getResourceManager();
    var pProgram = pRmgr.createShaderProgram(".shader-prorgam-" + this.getGuid().toString());
    if (!pProgram.create(sVertex, sPixel)) {
        return false;
    }
    this._pRealUniformNameList = pProgram._getActiveUniformNames();
    this._pRealAttrNameList = pProgram._getActiveAttributeNames();
    this._pShaderProgram = pProgram;
    for(var i = 0; i < this._pRealUniformNameList.length; i++) {
        this._pUniformExistMap[this._pRealUniformNameList[i]] = true;
    }
    for(var i = 0; i < this._pRealAttrNameList.length; i++) {
        this._pAttrExistMap[this._pRealAttrNameList[i]] = true;
    }
    return true;
}
inline;
_getShaderInput();
IShaderInput;
 {
    return this._pDataPoolArray.length > 0 ? this._pDataPoolArray.pop() : this._createDataPool();
}
inline;
_releaseShaderInput(pPool, IShaderInput);
void {
    this: ,
    _pDataPoolArray: ,
    push: (pPool)
};
inline;
isUniformExists(sName, string);
bool;
 {
    return this._pUniformExistMap[sName];
}
inline;
isAttrExists(sName, string);
bool;
 {
    return this._pAttrExistMap[sName];
}
_createDataPool();
IShaderInput;
 {
    var pInput = {};
    for(var i = 0; i < this._pRealUniformNameList.length; i++) {
        var sName = this._pRealUniformNameList[i];
        pInput[sName] = null;
        var eType = this._pRealUniformTypeMap[sName];
        var iLength = this._pRealUniformLengthMap[sName];
        if ((eType === EAFXShaderVariableType.k_Sampler2D || eType === EAFXShaderVariableType.k_SamplerCUBE)) {
            if (iLength > 0) {
                pInput[sName] = new Array(iLength);
                for(var j = 0; j < iLength; j++) {
                    pInput[sName][j] = createSamplerState();
                }
            } else {
                pInput[sName] = createSamplerState();
            }
        }
    }
    for(var i = 0; i < this._pRealAttrNameList.length; i++) {
        var sName = this._pRealAttrNameList[i];
        pInput[sName] = null;
    }
    return pInput;
}
_initInput(pPassInput, IAFXPassInputBlend, pBlend, SamplerBlender, pAttrs, AttributeBlendContainer);
bool;
 {
    var pUniformKeys = pPassInput.uniformKeys;
    this._pRealUnifromFromInput = [];
    for(var i = 0; i < pUniformKeys.length; i++) {
        var sName = pUniformKeys[i];
        var eType = pPassInput._getUniformType(sName);
        var iLength = pPassInput._getUnifromLength(sName);
        if (eType === EAFXShaderVariableType.k_Complex) {
            if (this.expandStructUniforms(pPassInput._getAFXUniformVar(sName))) {
                this._pRealUnifromFromInput.push(sName);
            }
            continue;
        }
        var sShaderName = (iLength > 0) ? (sName + "[0]") : sName;
        if (this.isUniformExists(sShaderName)) {
            this._pRealUniformTypeMap[sName] = eType;
            this._pRealUniformLengthMap[sName] = iLength;
            this._pRealUniformTypeMap[sShaderName] = eType;
            this._pRealUniformLengthMap[sShaderName] = iLength;
            this._pRealUnifromFromInput.push(sName);
        } else {
            this._pUniformExistMap[sShaderName] = false;
        }
    }
    var pSamplerArrayKeys = pPassInput.samplerArrayKeys;
    this._pRealSampleArraysFromInput = [];
    for(var i = 0; i < pSamplerArrayKeys.length; i++) {
        var sName = pSamplerArrayKeys[i];
        var eType = pPassInput._getUniformType(sName);
        var iLength = pPassInput._getUnifromLength(sName);
        var sShaderName = sName + "[0]";
        if (this.isUniformExists(sShaderName)) {
            this._pRealUniformTypeMap[sName] = eType;
            this._pRealUniformLengthMap[sName] = iLength;
            this._pRealUniformTypeMap[sShaderName] = eType;
            this._pRealUniformLengthMap[sShaderName] = iLength;
            this._pRealSampleArraysFromInput.push(sName);
        } else {
            this._pUniformExistMap[sShaderName] = false;
        }
    }
    this._pRealSamplersFromInput = [];
    this._pRealSamplersNames = [];
    var iTotalSamplerSlots = pBlend.totalActiveSlots;
    for(var i = 0; i < iTotalSamplerSlots; i++) {
        if (i === 0) {
            this._isUsedZero2D = this.isUniformExists("as0") || false;
            this._isUsedZeroCube = this.isUniformExists("asc0") || false;
            if (this._isUsedZero2D) {
                this._pRealUniformTypeMap["as0"] = EAFXShaderVariableType.k_Int;
                this._pRealUniformLengthMap["as0"] = 0;
            }
            if (this._isUsedZeroCube) {
                this._pRealUniformTypeMap["asc0"] = EAFXShaderVariableType.k_Int;
                this._pRealUniformLengthMap["asc0"] = 0;
            }
            continue;
        }
        var pSamplers = pBlend.getSamplersBySlot(i);
        var sRealSamplerName = "as" + i.toString();
        if (this.isUniformExists(sRealSamplerName)) {
            var pSampler = pBlend.getSamplersBySlot(i).value(0);
            var sSampler = pSampler.getSemantic() || pSampler.getName();
            this._pRealSamplersFromInput.push(sSampler);
            this._pRealSamplersNames.push(sRealSamplerName);
            this._pRealUniformTypeMap[sRealSamplerName] = pSampler.getType().isSampler2D() ? EAFXShaderVariableType.k_Sampler2D : EAFXShaderVariableType.k_SamplerCUBE;
            this._pRealUniformLengthMap[sRealSamplerName] = 0;
        } else {
            this._pUniformExistMap[sRealSamplerName] = false;
        }
    }
    this._pRealAttrSlotFromFlows = [];
    this._pRealAttrIsIndexData = [];
    this._pBufferSamplersFromFlows = [];
    var iTotalAttrSlots = pAttrs.totalSlots;
    var pSemantics = pAttrs.semantics;
    var nPreparedAttrs = -1;
    var nPreparedBuffers = -1;
    var pSemanticsBySlot = {};
    for(var i = 0; i < pSemantics.length; i++) {
        var sSemantic = pSemantics[i];
        var iSlot = pAttrs.getSlotBySemantic(sSemantic);
        if (iSlot === -1) {
            continue;
        }
        var iBufferSlot = pAttrs.getBufferSlotBySemantic(sSemantic);
        if (iSlot > nPreparedAttrs) {
            var sAttrName = "aa" + iSlot.toString();
            if (this.isAttrExists(sAttrName)) {
                this._pRealAttrSlotFromFlows.push(sSemantic);
                if (pAttrs.getType(sSemantic).isComplex()) {
                    this._pRealAttrIsIndexData.push(true);
                } else {
                    this._pRealAttrIsIndexData.push(false);
                }
                pSemanticsBySlot[iSlot] = sSemantic;
            } else {
                this._pRealAttrSlotFromFlows.push(null);
                this._pAttrExistMap[sAttrName] = false;
                pSemanticsBySlot[iSlot] = null;
            }
            nPreparedAttrs++;
        }
        if (iBufferSlot > nPreparedBuffers) {
            var sBufferName = "abs" + iBufferSlot.toString();
            if (this.isUniformExists(sBufferName)) {
                this._pBufferSamplersFromFlows.push(sSemantic);
                this._pRealUniformTypeMap[sBufferName] = EAFXShaderVariableType.k_SamplerVertexTexture;
            } else {
                this._pUniformExistMap[sBufferName] = false;
            }
            nPreparedBuffers++;
        }
    }
    this._pAttrContainer = pAttrs;
    return true;
}
_make(pPassInput, IAFXPassInputBlend, pBufferMap, util.BufferMap);
IShaderInput;
 {
    var pUniforms = pPassInput.uniforms;
    var pTextures = pPassInput.textures;
    var pSamplers = pPassInput.samplers;
    var pSamplerArrays = pPassInput.samplerArrays;
    var pInput = this._getShaderInput();
    for(var i = 0; i < this._pRealUnifromFromInput.length; i++) {
        var sName = this._pRealUnifromFromInput[i];
        var iLength = this._pRealUniformLengthMap[sName];
        var eType = this._pRealUniformTypeMap[sName];
        if (eType !== EAFXShaderVariableType.k_Complex) {
            if (iLength > 0) {
                pInput[sName + "[0]"] = pUniforms[sName];
            } else {
                pInput[sName] = pUniforms[sName];
            }
        } else {
            this.applyStructUniform(sName, pUniforms[sName], pInput);
        }
    }
    for(var i = 0; i < this._pRealSamplersFromInput.length; i++) {
        var sRealName = this._pRealSamplersNames[i];
        var sName = this._pRealSamplersFromInput[i];
        var pState = null;
        var pTexture = null;
        if (pPassInput._getAFXUniformVar(sName).getType().isArray()) {
            pState = pSamplerArrays[sName][0];
        } else {
            pState = pPassInput._getSamplerState(sName);
        }
        pTexture = pPassInput._getTextureForSamplerState(pState);
        this.setSamplerState(pInput[sRealName], pTexture, pState);
    }
    for(var i = 0; i < this._pRealSampleArraysFromInput.length; i++) {
        var sName = this._pRealSampleArraysFromInput[i];
        var iLength = this._pRealUniformLengthMap[sName];
        var pSamplerStates = pSamplerArrays[sName];
        var pInputStates = pInput[sName + "[0]"];
        for(var j = 0; j < iLength; j++) {
            var pTexture = pPassInput._getTextureForSamplerState(pSamplerStates[j]);
            this.setSamplerState(pInputStates[j], pTexture, pSamplerStates[j]);
        }
    }
    var iBufferSlot = 0;
    for(var i = 0; i < this._pRealAttrSlotFromFlows.length; i++) {
        var sSemantic = this._pRealAttrSlotFromFlows[i];
        if (isNull(sSemantic)) {
            continue;
        }
        var isIndex = this._pRealAttrIsIndexData[i];
        var pFlow = isIndex ? (pBufferMap.findFlow(sSemantic) || pBufferMap.getFlow(sSemantic, true)) : pBufferMap.getFlow(sSemantic, true);
        var sBufferFlowSemantic = this._pBufferSamplersFromFlows[iBufferSlot];
        if (sBufferFlowSemantic === sSemantic) {
            var sBufferName = "abs" + iBufferSlot.toString();
            pInput[sBufferName] = pFlow.data.buffer;
            iBufferSlot++;
        }
        var sAttrName = "aa" + i.toString();
        pInput[sAttrName] = pFlow;
        var pOffsetVars = this._pAttrContainer.getOffsetVarsBySemantic(sSemantic);
        if (!isNull(pOffsetVars)) {
            var pVertexDecl = pFlow.data.getVertexDeclaration();
            for(var j = 0; j < pOffsetVars.length; j++) {
                var sOffsetSemantic = pOffsetVars[j].getSemantic();
                var sOffsetName = pOffsetVars[j].getRealName();
                if (this.isUniformExists(sOffsetName)) {
                    var pElement = pVertexDecl.findElement(sOffsetSemantic);
                    if (isNull(pElement)) {
                        pInput[sOffsetName] = this._pAttrContainer.getOffsetDefault(sOffsetName);
                    } else {
                        pInput[sOffsetName] = pElement.offset;
                    }
                    this._pRealUniformTypeMap[sOffsetName] = EAFXShaderVariableType.k_Float;
                } else {
                    this._pUniformExistMap[sOffsetName] = null;
                }
            }
        }
    }
    if (this._isUsedZero2D) {
        pInput["as0"] = 19;
    }
    if (this._isUsedZeroCube) {
        pInput["asc0"] = 19;
    }
    return pInput;
}
setSamplerState(pOut, IAFXSamplerState, pTexture, ITexture, pFrom, IAFXSamplerState);
void {
    pOut: ,
    texture:  = pTexture,
    pOut: ,
    wrap_s:  = pFrom.wrap_s,
    pOut: ,
    wrap_t:  = pFrom.wrap_t,
    pOut: ,
    mag_filter:  = pFrom.mag_filter,
    pOut: ,
    min_filter:  = pFrom.min_filter
};
expandStructUniforms(pVariable, IAFXVariableDeclInstruction, sPrevName ?  : string = "");
bool;
 {
    var sRealName = pVariable.getRealName();
    if (sPrevName !== "") {
        sPrevName += "." + sRealName;
    } else {
        sPrevName = sRealName;
    }
    var pVarType = pVariable.getType();
    var pFieldNameList = pVarType.getFieldNameList();
    var isArray = pVarType.isNotBaseArray();
    var iLength = isArray ? pVarType.getLength() : 1;
    if (isArray && (iLength === 0xffffff || iLength === 0)) {
        this._pUniformExistMap[sPrevName] = false;
        return;
    }
    var isAnyFieldExist = false;
    var sFieldPrevName = "";
    for(var i = 0; i < iLength; i++) {
        sFieldPrevName = sPrevName;
        if (isArray) {
            sFieldPrevName += "[" + i + "]";
        }
        for(var j = 0; j < pFieldNameList.length; j++) {
            var sFieldName = pFieldNameList[j];
            var pField = pVarType.getField(sFieldName);
            if (pField.getType().isComplex()) {
                isAnyFieldExist = this.expandStructUniforms(pField, sFieldPrevName) || isAnyFieldExist;
            } else {
                var sFieldRealName = sFieldPrevName + "." + pField.getRealName();
                var eFieldType = PassInputBlend.getVariableType(pField);
                var iFieldLength = pField.getType().getLength();
                var sFieldShaderName = sFieldRealName;
                if (pField.getType().isNotBaseArray()) {
                    sFieldShaderName += "[0]";
                }
                if (this.isUniformExists(sFieldShaderName)) {
                    this._pRealUniformTypeMap[sFieldRealName] = eFieldType;
                    this._pRealUniformLengthMap[sFieldRealName] = iFieldLength;
                    this._pUniformExistMap[sFieldRealName] = true;
                    this._pRealUniformTypeMap[sFieldShaderName] = eFieldType;
                    this._pRealUniformLengthMap[sFieldShaderName] = iFieldLength;
                    isAnyFieldExist = true;
                } else {
                    this._pUniformExistMap[sFieldShaderName] = false;
                    this._pUniformExistMap[sFieldRealName] = false;
                }
            }
        }
    }
    if (isAnyFieldExist) {
        this._pRealUniformTypeMap[sPrevName] = EAFXShaderVariableType.k_Complex;
        this._pRealUniformLengthMap[sPrevName] = isArray ? iLength : 0;
        this._pUniformExistMap[sPrevName] = true;
    } else {
        this._pUniformExistMap[sPrevName] = false;
    }
    return isAnyFieldExist;
}
applyStructUniform(sName, string, pValue, any, pInput, IShaderInput);
void {
    if: (!isDefAndNotNull(pValue))
};
 {
    return;
}
var iLength = this._pRealUniformLengthMap[sName];
if (iLength > 0) {
    if (!isDef(pValue.length)) {
        return;
    }
    iLength = math.min(iLength, pValue.length);
    for(var i = 0; i < iLength; i++) {
        var sFieldPrevName = sName + "[" + i + "]";
        for(var j in pValue[i]) {
            var sFieldName = sFieldPrevName + "." + j;
            if (this.isUniformExists(sFieldName)) {
                var eType = this._pRealUniformTypeMap[sFieldName];
                if (eType === EAFXShaderVariableType.k_Complex) {
                    this.applyStructUniform(sFieldName, pValue[i][j], pInput);
                } else {
                    var iLength = this._pRealUniformLengthMap[sFieldName];
                    if (iLength > 0) {
                        pInput[sFieldName + "[0]"] = pValue[i][j];
                    } else {
                        pInput[sFieldName] = pValue[i][j];
                    }
                }
            }
        }
    }
} else {
    for(var j in pValue) {
        var sFieldName = sName + "." + j;
        if (this.isUniformExists(sFieldName)) {
            var eType = this._pRealUniformTypeMap[sFieldName];
            if (eType === EAFXShaderVariableType.k_Complex) {
                this.applyStructUniform(sFieldName, pValue[j], pInput);
            } else {
                var iLength = this._pRealUniformLengthMap[sFieldName];
                if (iLength > 0) {
                    pInput[sFieldName + "[0]"] = pValue[j];
                } else {
                    pInput[sFieldName] = pValue[j];
                }
            }
        }
    }
}
var akra;
(function (akra) {
    (function (fx) {
        var PassBlend = (function () {
            function PassBlend(pComposer) {
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pComposer = null;
                this._pFXMakerByHashMap = null;
                this._pExtSystemDataV = null;
                this._pComplexTypeContainerV = null;
                this._pForeignContainerV = null;
                this._pUniformContainerV = null;
                this._pSharedContainerV = null;
                this._pGlobalContainerV = null;
                this._pAttributeContainerV = null;
                this._pVaryingContainerV = null;
                this._pVertexOutType = null;
                this._pUsedFunctionListV = null;
                this._pPassFunctionListV = null;
                this._pTextureMapV = null;
                this._pExtSystemDataP = null;
                this._pComplexTypeContainerP = null;
                this._pForeignContainerP = null;
                this._pUniformContainerP = null;
                this._pSharedContainerP = null;
                this._pGlobalContainerP = null;
                this._pVaryingContainerP = null;
                this._pUsedFunctionListP = null;
                this._pPassFunctionListP = null;
                this._pTextureMapP = null;
                this._hasEmptyVertex = true;
                this._hasEmptyPixel = true;
                this._sUniformSamplerCodeV = "";
                this._sAttrBufferDeclCode = "";
                this._sAttrDeclCode = "";
                this._sAFXAttrDeclCode = "";
                this._sAttrBufferInitCode = "";
                this._sAFXAttrInitCode = "";
                this._sSystemExtBlockCodeV = "";
                this._sFunctionDefCodeV = "";
                this._sSharedVarCodeV = "";
                this._sVaryingDeclCodeV = "";
                this._sVertexOutDeclCode = "";
                this._sVertexOutToVaryingCode = "";
                this._sPassFunctionCallCodeV = "";
                this._sUniformSamplerCodeP = "";
                this._sSystemExtBlockCodeP = "";
                this._sFunctionDefCodeP = "";
                this._sSharedVarCodeP = "";
                this._sVaryingDeclCodeP = "";
                this._sPassFunctionCallCodeP = "";
                this._sVertexCode = "";
                this._sPixelCode = "";
                this._pDefaultSamplerBlender = null;
                this._pTexcoordSwapper = null;
                this.inline = getMakerByHash(sHash, string);
                this.IAFXMaker = {
                    return: this._pFXMakerByHashMap[sHash] || null
                };
                this.inline = hasUniform(pVar, IAFXVariableDeclInstruction);
                this.bool = {
                    return: this.hasUniformWithName(pVar.getRealName())
                };
                this.inline = hasUniformWithName(sName, string);
                this.bool = {
                    return: this._pUniformContainerV.hasVariableWithName(sName) || this._pUniformContainerP.hasVariableWithName(sName)
                };
                this.inline = getUniformByName(sName, string);
                this.IAFXVariableDeclInstruction = {
                    return: this._pUniformContainerV.getVariableByName(sName) || this._pUniformContainerP.getVariableByName(sName)
                };
                this.inline = prepareSurfaceMaterial(pMaterial, ISurfaceMaterial);
                this.string = {
                    return: isNull(pMaterial) ? "" : pMaterial._getHash()
                };
                this.inline = swapTexcoords(pMaterial, ISurfaceMaterial);
                this._pComposer = pComposer;
                this._pFXMakerByHashMap = {};
                this._pExtSystemDataV = new ExtSystemDataContainer();
                this._pComplexTypeContainerV = new ComplexTypeBlendContainer();
                this._pForeignContainerV = new VariableBlendContainer();
                this._pUniformContainerV = new VariableBlendContainer();
                this._pSharedContainerV = new VariableBlendContainer();
                this._pGlobalContainerV = new VariableBlendContainer();
                this._pAttributeContainerV = new AttributeBlendContainer();
                this._pVaryingContainerV = new VariableBlendContainer();
                this._pVertexOutType = Effect.getBaseVertexOutType();
                this._pUsedFunctionListV = [];
                this._pPassFunctionListV = [];
                this._pTextureMapV = {};
                this._pExtSystemDataP = new ExtSystemDataContainer();
                this._pComplexTypeContainerP = new ComplexTypeBlendContainer();
                this._pForeignContainerP = new VariableBlendContainer();
                this._pUniformContainerP = new VariableBlendContainer();
                this._pSharedContainerP = new VariableBlendContainer();
                this._pGlobalContainerP = new VariableBlendContainer();
                this._pVaryingContainerP = new VariableBlendContainer();
                this._pUsedFunctionListP = [];
                this._pPassFunctionListP = [];
                this._pTextureMapP = {};
                this._pDefaultSamplerBlender = Composer.pDefaultSamplerBlender;
                if (isNull(PassBlend.texcoordSwapper)) {
                    PassBlend.texcoordSwapper = new TexcoordSwapper();
                }
                this._pTexcoordSwapper = PassBlend.texcoordSwapper;
            }
            PassBlend.texcoordSwapper = null;
            PassBlend.prototype.initFromPassList = function (pPassList) {
                for(var i = 0; i < pPassList.length; i++) {
                    if (!this.addPass(pPassList[i])) {
                        return false;
                    }
                }
                if (!this.finalizeBlend()) {
                    return false;
                }
                return true;
            };
            PassBlend.prototype.generateFXMaker = function (pPassInput, pSurfaceMaterial, pBuffer, isFirst) {
                if (typeof isFirst === "undefined") { isFirst = true; }
                pPassInput.setSurfaceMaterial(pSurfaceMaterial);
                var iTime = now();
                var sSamplerPartHash = this.prepareSamplers(pPassInput);
                var sMaterialPartHash = this.prepareSurfaceMaterial(pSurfaceMaterial);
                var sBufferPartHash = this.prepareBufferMap(pBuffer);
                var sTotalHash = sSamplerPartHash + "|" + sMaterialPartHash + "|" + sBufferPartHash;
                var pMaker = this.getMakerByHash(sTotalHash);
                if (isNull(pMaker)) {
 {
                        logger.setSourceLocation("fx/PassBlend.ts", 162);
                        logger.log("generateShaderProgram. HASH: ", sTotalHash, "---NEW---", now() - iTime);
                    }
                    ;
                    this.applyForeigns(pPassInput);
                    this.swapTexcoords(pSurfaceMaterial);
                    this.generateShaderCode();
                    pMaker = new Maker(this._pComposer);
                    var isCreate = pMaker._create(this._sVertexCode, this._sPixelCode);
                    if (!isCreate) {
                        return null;
                    }
                    pMaker._initInput(pPassInput, this._pDefaultSamplerBlender, this._pAttributeContainerV);
                    this._pFXMakerByHashMap[sTotalHash] = pMaker;
                } else {
                }
                this._pDefaultSamplerBlender.clear();
                return pMaker;
            };
            PassBlend.prototype.finalizeBlend = function () {
                if (!this.finalizeBlendForVertex()) {
                    return false;
                }
                if (!this.finalizeBlendForPixel()) {
                    return false;
                }
                return true;
            };
            PassBlend.prototype.addPass = function (pPass) {
                var pVertex = pPass.getVertexShader();
                var pPixel = pPass.getPixelShader();
                var pForeignMap = null;
                var pGlobalMap = null;
                var pSharedMap = null;
                var pUniformMap = null;
                var pTextureMap = null;
                var pAttributeMap = null;
                var pVaryingMap = null;
                var pComplexTypeMap = null;
                var pForeignKeys = null;
                var pGlobalKeys = null;
                var pSharedKeys = null;
                var pUniformKeys = null;
                var pTextureKeys = null;
                var pAttributeKeys = null;
                var pVaryingKeys = null;
                var pComplexTypeKeys = null;
                var pForeign = null;
                var pGlobal = null;
                var pShared = null;
                var pUniform = null;
                var pTexture = null;
                var pAttribute = null;
                var pVarying = null;
                var pComplexType = null;
                var pUsedFunctionList = null;
                var pUsedFunction = null;
                if (!isNull(pVertex)) {
                    this._hasEmptyVertex = false;
                    this._pExtSystemDataV.addFromFunction(pVertex);
                    pForeignMap = pVertex._getForeignVariableMap();
                    pForeignKeys = pVertex._getForeignVariableKeys();
                    if (!isNull(pForeignKeys)) {
                        for(var i = 0; i < pForeignKeys.length; i++) {
                            pForeign = pForeignMap[pForeignKeys[i]];
                            if (!this._pForeignContainerV.addVariable(pForeign, EAFXBlendMode.k_Foreign)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 260);
                                    logger.error("Could not add foreign variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pGlobalMap = pVertex._getGlobalVariableMap();
                    pGlobalKeys = pVertex._getGlobalVariableKeys();
                    if (!isNull(pGlobalKeys)) {
                        for(var i = 0; i < pGlobalKeys.length; i++) {
                            pGlobal = pGlobalMap[pGlobalKeys[i]];
                            if (!this._pGlobalContainerV.addVariable(pGlobal, EAFXBlendMode.k_Global)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 275);
                                    logger.error("Could not add global variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pSharedMap = pVertex._getSharedVariableMap();
                    pSharedKeys = pVertex._getSharedVariableKeys();
                    if (!isNull(pSharedKeys)) {
                        for(var i = 0; i < pSharedKeys.length; i++) {
                            pShared = pSharedMap[pSharedKeys[i]];
                            if (!this._pSharedContainerV.addVariable(pShared, EAFXBlendMode.k_Shared)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 290);
                                    logger.error("Could not add shared variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pUniformMap = pVertex._getUniformVariableMap();
                    pUniformKeys = pVertex._getUniformVariableKeys();
                    if (!isNull(pUniformKeys)) {
                        for(var i = 0; i < pUniformKeys.length; i++) {
                            pUniform = pUniformMap[pUniformKeys[i]];
                            if (isNull(pUniform)) {
                                continue;
                            }
                            if (!this._pUniformContainerV.addVariable(pUniform, EAFXBlendMode.k_Uniform)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 309);
                                    logger.error("Could not add uniform variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pTextureMap = pVertex._getTextureVariableMap();
                    pTextureKeys = pVertex._getTextureVariableKeys();
                    if (!isNull(pTextureKeys)) {
                        for(var i = 0; i < pTextureKeys.length; i++) {
                            pTexture = pTextureMap[pTextureKeys[i]];
                            if (isNull(pTexture)) {
                                continue;
                            }
                            this._pTextureMapV[pTexture.getRealName()] = true;
                        }
                    }
                    pAttributeMap = pVertex._getAttributeVariableMap();
                    pAttributeKeys = pVertex._getAttributeVariableKeys();
                    if (!isNull(pAttributeKeys)) {
                        for(var i = 0; i < pAttributeKeys.length; i++) {
                            pAttribute = pAttributeMap[pAttributeKeys[i]];
                            if (!this._pAttributeContainerV.addAttribute(pAttribute)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 341);
                                    logger.error("Could not add attribute variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pVaryingMap = pVertex._getVaryingVariableMap();
                    pVaryingKeys = pVertex._getVaryingVariableKeys();
                    if (!isNull(pVaryingKeys)) {
                        for(var i = 0; i < pVaryingKeys.length; i++) {
                            pVarying = pVaryingMap[pVaryingKeys[i]];
                            if (!this._pVaryingContainerV.addVariable(pVarying, EAFXBlendMode.k_Varying)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 356);
                                    logger.error("Could not add varying variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pComplexTypeMap = pVertex._getUsedComplexTypeMap();
                    pComplexTypeKeys = pVertex._getUsedComplexTypeKeys();
                    if (!isNull(pComplexTypeKeys)) {
                        for(var i = 0; i < pComplexTypeKeys.length; i++) {
                            pComplexType = pComplexTypeMap[pComplexTypeKeys[i]];
                            if (!this._pComplexTypeContainerV.addComplexType(pComplexType)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 371);
                                    logger.error("Could not add type declaration");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pUsedFunctionList = pVertex._getUsedFunctionList();
                    if (!isNull(pUsedFunctionList)) {
                        for(var i = 0; i < pUsedFunctionList.length; i++) {
                            pUsedFunction = pUsedFunctionList[i];
                            if (this._pUsedFunctionListV.indexOf(pUsedFunction) === -1) {
                                this._pUsedFunctionListV.push(pUsedFunction);
                            }
                        }
                    }
                    var pVertexOut = pVertex.getReturnType().getBaseType();
                    if (pVertexOut.isComplex()) {
                        this._pVertexOutType = this._pVertexOutType.blend(pVertexOut, EAFXBlendMode.k_VertexOut);
                    }
                    this._pPassFunctionListV.push(pVertex);
                }
                if (!isNull(pPixel)) {
                    this._hasEmptyPixel = false;
                    this._pExtSystemDataP.addFromFunction(pPixel);
                    pForeignMap = pPixel._getForeignVariableMap();
                    pForeignKeys = pPixel._getForeignVariableKeys();
                    if (!isNull(pForeignKeys)) {
                        for(var i = 0; i < pForeignKeys.length; i++) {
                            pForeign = pForeignMap[pForeignKeys[i]];
                            if (!this._pForeignContainerP.addVariable(pForeign, EAFXBlendMode.k_Foreign)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 412);
                                    logger.error("Could not add foreign variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pGlobalMap = pPixel._getGlobalVariableMap();
                    pGlobalKeys = pPixel._getGlobalVariableKeys();
                    if (!isNull(pGlobalKeys)) {
                        for(var i = 0; i < pGlobalKeys.length; i++) {
                            pGlobal = pGlobalMap[pGlobalKeys[i]];
                            if (!this._pGlobalContainerP.addVariable(pGlobal, EAFXBlendMode.k_Global)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 427);
                                    logger.error("Could not add global variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pSharedMap = pPixel._getSharedVariableMap();
                    pSharedKeys = pPixel._getSharedVariableKeys();
                    if (!isNull(pSharedKeys)) {
                        for(var i = 0; i < pSharedKeys.length; i++) {
                            pShared = pSharedMap[pSharedKeys[i]];
                            if (!this._pSharedContainerP.addVariable(pShared, EAFXBlendMode.k_Shared)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 442);
                                    logger.error("Could not add shared variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pUniformMap = pPixel._getUniformVariableMap();
                    pUniformKeys = pPixel._getUniformVariableKeys();
                    if (!isNull(pUniformKeys)) {
                        for(var i = 0; i < pUniformKeys.length; i++) {
                            pUniform = pUniformMap[pUniformKeys[i]];
                            if (isNull(pUniform)) {
                                continue;
                            }
                            if (!this._pUniformContainerP.addVariable(pUniform, EAFXBlendMode.k_Uniform)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 461);
                                    logger.error("Could not add uniform variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pTextureMap = pPixel._getTextureVariableMap();
                    pTextureKeys = pPixel._getTextureVariableKeys();
                    if (!isNull(pTextureKeys)) {
                        for(var i = 0; i < pTextureKeys.length; i++) {
                            pTexture = pTextureMap[pTextureKeys[i]];
                            if (isNull(pTexture)) {
                                continue;
                            }
                            this._pTextureMapP[pTexture.getRealName()] = true;
                        }
                    }
                    pVaryingMap = pPixel._getVaryingVariableMap();
                    pVaryingKeys = pPixel._getVaryingVariableKeys();
                    if (!isNull(pVaryingKeys)) {
                        for(var i = 0; i < pVaryingKeys.length; i++) {
                            pVarying = pVaryingMap[pVaryingKeys[i]];
                            if (!this._pVaryingContainerP.addVariable(pVarying, EAFXBlendMode.k_Varying)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 492);
                                    logger.error("Could not add varying variable");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pComplexTypeMap = pPixel._getUsedComplexTypeMap();
                    pComplexTypeKeys = pPixel._getUsedComplexTypeKeys();
                    if (!isNull(pComplexTypeKeys)) {
                        for(var i = 0; i < pComplexTypeKeys.length; i++) {
                            pComplexType = pComplexTypeMap[pComplexTypeKeys[i]];
                            if (!this._pComplexTypeContainerP.addComplexType(pComplexType)) {
 {
                                    logger.setSourceLocation("fx/PassBlend.ts", 507);
                                    logger.error("Could not add type declaration");
                                }
                                ;
                                return false;
                            }
                        }
                    }
                    pUsedFunctionList = pPixel._getUsedFunctionList();
                    if (!isNull(pUsedFunctionList)) {
                        for(var i = 0; i < pUsedFunctionList.length; i++) {
                            pUsedFunction = pUsedFunctionList[i];
                            if (this._pUsedFunctionListP.indexOf(pUsedFunction) === -1) {
                                this._pUsedFunctionListP.push(pUsedFunction);
                            }
                        }
                    }
                    this._pPassFunctionListP.push(pPixel);
                }
                return true;
            };
            PassBlend.prototype.finalizeBlendForVertex = function () {
                if (this._hasEmptyVertex) {
                    return true;
                }
                if (!this.finalizeComplexTypeForShader(EFunctionType.k_Vertex)) {
                    return false;
                }
                this._pAttributeContainerV.generateOffsetMap();
                return true;
            };
            PassBlend.prototype.finalizeBlendForPixel = function () {
                if (this._hasEmptyPixel) {
                    return true;
                }
                if (!this.finalizeComplexTypeForShader(EFunctionType.k_Pixel)) {
                    return false;
                }
                return true;
            };
            PassBlend.prototype.enableVaringPrefixes = function (eType, bEnabled) {
                var pVars = null;
                if (eType === EFunctionType.k_Vertex) {
                    pVars = this._pVaryingContainerV;
                } else {
                    pVars = this._pVaryingContainerP;
                }
                var pKeys = pVars.keys;
                for(var i = 0; i < pKeys.length; i++) {
                    var sName = pKeys[i];
                    var pVarList = pVars.getVarList(sName);
                    for(var j = 0; j < pVarList.length; j++) {
                        pVarList[j]._markAsVarying(bEnabled);
                    }
                }
            };
            PassBlend.prototype.finalizeComplexTypeForShader = function (eType) {
                var pTypeContainer = null;
                var pUniformContainer = null;
                var pGlobalContainer = null;
                var pSharedContainer = null;
                var pUsedFunctions = null;
                var pAttributeContainer = null;
                if (eType === EFunctionType.k_Vertex) {
                    pTypeContainer = this._pComplexTypeContainerV;
                    pUniformContainer = this._pUniformContainerV;
                    pGlobalContainer = this._pGlobalContainerV;
                    pSharedContainer = this._pSharedContainerV;
                    pUsedFunctions = this._pUsedFunctionListV;
                    pAttributeContainer = this._pAttributeContainerV;
                } else if (eType === EFunctionType.k_Pixel) {
                    pTypeContainer = this._pComplexTypeContainerP;
                    pUniformContainer = this._pUniformContainerP;
                    pGlobalContainer = this._pGlobalContainerP;
                    pSharedContainer = this._pSharedContainerP;
                    pUsedFunctions = this._pUsedFunctionListP;
                }
                if (!pTypeContainer.addFromVarConatiner(pUniformContainer) || !pTypeContainer.addFromVarConatiner(pGlobalContainer) || !pTypeContainer.addFromVarConatiner(pSharedContainer) || !pTypeContainer.addFromVarConatiner(pAttributeContainer)) {
                    return false;
                }
                for(var i = 0; i < pUsedFunctions.length; i++) {
                    var pReturnBaseType = pUsedFunctions[i].getReturnType().getBaseType();
                    if (pReturnBaseType.isComplex()) {
                        if (!pTypeContainer.addComplexType(pReturnBaseType)) {
                            return false;
                        }
                    }
                }
                return true;
            };
            PassBlend.prototype.prepareSamplers = function (pPassInput) {
                var pBlender = this._pDefaultSamplerBlender;
                var pSamplers = pPassInput.samplers;
                var pSamplerKeys = pPassInput.samplerKeys;
                for(var i = 0; i < pSamplerKeys.length; i++) {
                    var sName = pSamplerKeys[i];
                    if (!this.hasUniformWithName(sName)) {
                        continue;
                    }
                    var pSampler = this.getUniformByName(sName);
                    var pSamplerState = pSamplers[sName];
                    var pTexture = pPassInput._getTextureForSamplerState(pSamplerState);
                    if (isNull(pTexture)) {
                        pBlender.addObjectToSlotById(pSampler, 0);
                    } else {
                        pBlender.addTextureSlot(pTexture.getGuid());
                        pBlender.addObjectToSlotById(pSampler, pTexture.getGuid());
                    }
                }
                var pSamplerArrays = pPassInput.samplerArrays;
                var pSamplerArrayKeys = pPassInput.samplerArrayKeys;
                for(var i = 0; i < pSamplerArrayKeys.length; i++) {
                    var sName = pSamplerArrayKeys[i];
                    if (!this.hasUniformWithName(sName)) {
                        continue;
                    }
                    var pSamplerStateList = pSamplerArrays[sName];
                    var isNeedToCollapse = true;
                    var pTexture = null;
                    var iLength = pPassInput.samplerArrayLength[sName];
                    for(var j = 0; j < iLength; j++) {
                        if (j === 0) {
                            pTexture = pPassInput._getTextureForSamplerState(pSamplerStateList[j]);
                        } else {
                            if (pTexture !== pPassInput._getTextureForSamplerState(pSamplerStateList[j])) {
                                isNeedToCollapse = false;
                            }
                        }
                    }
                    var pSamplerArray = this.getUniformByName(sName);
                    if (isNeedToCollapse) {
                        pSamplerArray._setCollapsed(true);
                        if (isNull(pTexture)) {
                            pBlender.addObjectToSlotById(pSamplerArray, 0);
                        } else {
                            pBlender.addTextureSlot(pTexture.getGuid());
                            pBlender.addObjectToSlotById(pSamplerArray, pTexture.getGuid());
                        }
                    } else {
                        pSamplerArray._setCollapsed(false);
                    }
                }
                return pBlender.getHash();
            };
            PassBlend.prototype.prepareBufferMap = function (pMap) {
                this._pAttributeContainerV.initFromBufferMap(pMap);
                return this._pAttributeContainerV.getHash();
            };
            return PassBlend;
        })();
        fx.PassBlend = PassBlend;        
        void {
            this: ,
            _pTexcoordSwapper: ,
            generateSwapCode: (pMaterial, 
this._pAttributeContainerV)
        };
        isSamplerUsedInShader(pSampler, IAFXVariableDeclInstruction, eType, EFunctionType);
        bool;
 {
            return (eType === EFunctionType.k_Vertex && this._pUniformContainerV.hasVariable(pSampler)) || (eType === EFunctionType.k_Pixel && this._pUniformContainerP.hasVariable(pSampler));
        }
        applyForeigns(pPassInput, IAFXPassInputBlend);
        void {
            var: pForeignValues,
            any:  = pPassInput.foreigns
        };
        var pKeys = pPassInput.foreignKeys;
        var pForeignsV = this._pForeignContainerV;
        var pForeignsP = this._pForeignContainerP;
        for(var i = 0; i < pKeys.length; i++) {
            var sName = pKeys[i];
            var pVarList = null;
            if (pForeignsV.hasVariableWithName(sName)) {
                pVarList = pForeignsV.getVarList(sName);
                for(var j = 0; j < pVarList.length; j++) {
                    pVarList[j].setValue(pForeignValues[sName] || 1);
                }
            }
            if (pForeignsP.hasVariableWithName(sName)) {
                pVarList = pForeignsP.getVarList(sName);
                for(var j = 0; j < pVarList.length; j++) {
                    pVarList[j].setValue(pForeignValues[sName] || 1);
                }
            }
        }
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
inline;
generateShaderCode();
void {
    this: ,
    clearCodeFragments: 
};
this.reduceSamplers();
this.reduceAttributes();
this._sVertexCode = this.generateCodeForVertex();
this._sPixelCode = this.generateCodeForPixel();
generateCodeForVertex();
string;
 {
    var sCode = "";
    var eType = EFunctionType.k_Vertex;
    sCode = this.generateSystemExtBlock(eType) + "\n" + this.generateTypeDels(eType) + "\n" + this.generateFunctionDefenitions(eType) + "\n" + this.generateSharedVars(eType) + "\n" + this.generateVertexOut() + "\n";
    this.enableVaringPrefixes(eType, true);
    sCode += this.generateVaryings(eType) + "\n";
    this.enableVaringPrefixes(eType, false);
    sCode += this.generateUniformSamplers(eType) + "\n" + this.generateUniformVars(eType) + "\n" + this.generateAttrBuffers() + "\n" + this.generateGlobalVars(eType) + "\n" + this.generateFunctions(eType) + "\n" + this.generateRealAttrs() + "\n" + this.generateAFXAttrs() + "\n" + this.generatePassFunctions(eType) + "\n" + "void main() {\n" + this.generateAttrBufferInit() + "\n" + this.generateAFXAttrInit() + "\n" + this.generateTexcoordSwap() + "\n" + this.generatePassFunctionCall(eType) + "\n" + this.generateVertexOutToVaryings() + "\n" + "}";
    return sCode;
}
generateCodeForPixel();
string;
 {
    if (this._hasEmptyPixel) {
        return "void main(){}";
    }
    var sCode = "";
    var eType = EFunctionType.k_Pixel;
    this.enableVaringPrefixes(eType, true);
    sCode = this.generateSystemExtBlock(eType) + "\n" + this.generateTypeDels(eType) + "\n" + this.generateFunctionDefenitions(eType) + "\n" + this.generateSharedVars(eType) + "\n" + this.generateVaryings(eType) + "\n" + this.generateUniformSamplers(eType) + "\n" + this.generateUniformVars(eType) + "\n" + this.generateGlobalVars(eType) + "\n" + this.generateFunctions(eType) + "\n" + this.generatePassFunctions(eType) + "\n" + "void main() {\n" + this.generatePassFunctionCall(eType) + "\n" + "}";
    this.enableVaringPrefixes(eType, false);
    return sCode;
}
clearCodeFragments();
void {
    this: ,
    _sUniformSamplerCodeV:  = ""
};
this._sAttrBufferDeclCode = "";
this._sAttrDeclCode = "";
this._sAFXAttrDeclCode = "";
this._sAttrBufferInitCode = "";
this._sAFXAttrInitCode = "";
this._sUniformSamplerCodeP = "";
reduceSamplers();
void {
    var: pSamplerBlender,
    SamplerBlender:  = this._pDefaultSamplerBlender
};
var iTotalSlots = pSamplerBlender.totalActiveSlots;
var sUniformSamplerCodeV = "";
var sUniformSamplerCodeP = "";
var isZeroSampler2DV = false;
var isZeroSamplerCubeV = false;
var isZeroSampler2DP = false;
var isZeroSamplerCubeP = false;
for(var i = 0; i < iTotalSlots; i++) {
    var pSamplers = pSamplerBlender.getSamplersBySlot(i);
    var isInVertex = false;
    var isInPixel = false;
    var sSamplerName = "as" + i.toString();
    for(var j = 0; j < pSamplers.length; j++) {
        if (i === 0) {
            pSamplers.value(j).defineByZero(true);
            if (this.isSamplerUsedInShader(pSamplers.value(j), EFunctionType.k_Vertex)) {
                if (pSamplers.value(j).getType().isSampler2D()) {
                    isZeroSampler2DV = true;
                } else {
                    isZeroSamplerCubeV = true;
                }
            }
            if (this.isSamplerUsedInShader(pSamplers.value(j), EFunctionType.k_Pixel)) {
                if (pSamplers.value(j).getType().isSampler2D()) {
                    isZeroSampler2DP = true;
                } else {
                    isZeroSamplerCubeP = true;
                }
            }
        } else {
            if (this.isSamplerUsedInShader(pSamplers.value(j), EFunctionType.k_Vertex)) {
                isInVertex = true;
            }
            if (this.isSamplerUsedInShader(pSamplers.value(j), EFunctionType.k_Pixel)) {
                isInPixel = true;
            }
        }
        pSamplers.value(j).setRealName(sSamplerName);
    }
    if (i === 0) {
        if (isZeroSampler2DV) {
            sUniformSamplerCodeV += "uniform sampler2D as0;";
        }
        if (isZeroSamplerCubeV) {
            sUniformSamplerCodeV += "uniform samplerCube asc0;";
        }
        if (isZeroSampler2DP) {
            sUniformSamplerCodeP += "uniform sampler2D as0;";
        }
        if (isZeroSamplerCubeP) {
            sUniformSamplerCodeP += "uniform samplerCube asc0;";
        }
    } else {
        if (isInVertex) {
            sUniformSamplerCodeV += "uniform " + pSamplers.value(0).getType().getBaseType().getRealName() + " " + sSamplerName + ";";
        }
        if (isInPixel) {
            sUniformSamplerCodeP += "uniform " + pSamplers.value(0).getType().getBaseType().getRealName() + " " + sSamplerName + ";";
        }
    }
}
this._sUniformSamplerCodeV = sUniformSamplerCodeV;
this._sUniformSamplerCodeP = sUniformSamplerCodeP;
reduceAttributes();
void {
    var: pAttributeContainer,
    AttributeBlendContainer:  = this._pAttributeContainerV
};
var pSemantics = pAttributeContainer.semantics;
var nPreparedBufferSlots = -1;
var nPreparedAttributeSlots = -1;
for(var i = 0; i < pSemantics.length; i++) {
    var sSemantic = pSemantics[i];
    var pFlow = pAttributeContainer.getFlowBySemantic(sSemantic);
    var pAttributes = pAttributeContainer.getAttributeList(sSemantic);
    var iBufferSlot = -1;
    var iSlot = -1;
    var sAttrName = "";
    if (isNull(pFlow)) {
        for(var j = 0; j < pAttributes.length; j++) {
            if (pAttributes[j].getType().isStrictPointer()) {
                pAttributes[j].getType().getVideoBuffer().defineByZero(true);
            }
        }
    } else {
        iSlot = pAttributeContainer.getSlotBySemantic(sSemantic);
        iBufferSlot = pAttributeContainer.getBufferSlotBySemantic(sSemantic);
        sAttrName = "aa" + iSlot.toString();
        if (iBufferSlot >= 0) {
            var sSamplerBufferName = "abs" + iBufferSlot.toString();
            var sHeaderBufferName = "abh" + iBufferSlot.toString();
            var pBufferVar = null;
            for(var j = 0; j < pAttributes.length; j++) {
                pBufferVar = pAttributes[j].getType().getVideoBuffer();
                pBufferVar.setVideoBufferRealName(sSamplerBufferName, sHeaderBufferName);
            }
            if (iBufferSlot > nPreparedBufferSlots) {
                var pBufferVar = pAttributes[0].getType().getVideoBuffer();
                this._sAttrBufferDeclCode = pBufferVar.toFinalCode() + ";\n";
                this._sAttrBufferInitCode = pBufferVar._getVideoBufferInitExpr().toFinalCode() + ";\n";
                nPreparedBufferSlots++;
            }
        }
        if (iSlot > nPreparedAttributeSlots) {
            this._sAttrDeclCode += "attribute " + pAttributeContainer.getTypeBySlot(i).toFinalCode() + " " + sAttrName + ";\n";
            nPreparedAttributeSlots++;
        }
    }
    var pAttribute = pAttributeContainer.getAttribute(sSemantic);
    var pAttributeType = pAttribute.getType();
    this._sAFXAttrDeclCode += pAttribute.toFinalCode() + ";\n";
    if (pAttributeType.isStrictPointer() || (pAttributeType.isPointer() && iBufferSlot >= 0)) {
        var pAttrSubDecls = pAttribute.getSubVarDecls();
        for(var j = 0; j < pAttrSubDecls.length; j++) {
            this._sAFXAttrDeclCode += pAttrSubDecls[j].toFinalCode() + ";\n";
        }
    }
    if (iSlot >= 0) {
        if (iBufferSlot >= 0) {
            this._sAFXAttrInitCode += pAttributeType._getMainPointer().getRealName() + "=" + sAttrName + ";";
            this._sAFXAttrInitCode += pAttribute._getAttrExtractionBlock().toFinalCode();
        } else {
            this._sAFXAttrInitCode += pAttribute.getRealName() + "=" + sAttrName + ";";
        }
    }
}
generateSystemExtBlock(eType, EFunctionType);
string;
 {
    var pExtBlock = null;
    if (eType === EFunctionType.k_Vertex) {
        pExtBlock = this._pExtSystemDataV;
        if (this._sSystemExtBlockCodeV !== "") {
            return this._sSystemExtBlockCodeV;
        }
    } else {
        pExtBlock = this._pExtSystemDataP;
        if (this._sSystemExtBlockCodeP !== "") {
            return this._sSystemExtBlockCodeP;
        }
    }
    var sCode = "";
    var pMacroses = pExtBlock.macroses;
    var pTypes = pExtBlock.types;
    var pFunctions = pExtBlock.functions;
    for(var i = 0; i < pMacroses.length; i++) {
        sCode += pMacroses[i].toFinalCode() + "\n";
    }
    for(var i = 0; i < pTypes.length; i++) {
        sCode += pTypes[i].toFinalCode() + "\n";
    }
    for(var i = 0; i < pFunctions.length; i++) {
        sCode += pFunctions[i].toFinalCode() + "\n";
    }
    if (eType === EFunctionType.k_Vertex) {
        this._sSystemExtBlockCodeV = sCode;
    } else {
        sCode = "#define AKRA_FRAGMENT 1\n" + "#ifdef GL_ES\nprecision highp float;\n#endif\n" + sCode;
        this._sSystemExtBlockCodeP = sCode;
    }
    return sCode;
}
generateTypeDels(eType, EFunctionType);
string;
 {
    var pTypeBlock = null;
    if (eType === EFunctionType.k_Vertex) {
        pTypeBlock = this._pComplexTypeContainerV;
    } else {
        pTypeBlock = this._pComplexTypeContainerP;
    }
    var sCode = "";
    var pKeys = pTypeBlock.keys;
    var pTypes = pTypeBlock.types;
    for(var i = 0; i < pKeys.length; i++) {
        sCode += pTypes[pKeys[i]]._toDeclString() + ";\n";
    }
    return sCode;
}
generateFunctionDefenitions(eType, EFunctionType);
string;
 {
    var pFunctions = null;
    if (eType === EFunctionType.k_Vertex) {
        pFunctions = this._pUsedFunctionListV;
        if (this._sFunctionDefCodeV !== "") {
            return this._sFunctionDefCodeV;
        }
    } else {
        pFunctions = this._pUsedFunctionListP;
        if (this._sFunctionDefCodeP !== "") {
            return this._sFunctionDefCodeP;
        }
    }
    var sCode = "";
    for(var i = 0; i < pFunctions.length; i++) {
        sCode += pFunctions[i].toFinalDefCode() + ";\n";
    }
    if (eType === EFunctionType.k_Vertex) {
        this._sFunctionDefCodeV = sCode;
    } else {
        this._sFunctionDefCodeP = sCode;
    }
    return sCode;
}
generateSharedVars(eType, EFunctionType);
string;
 {
    var pVars = null;
    if (eType === EFunctionType.k_Vertex) {
        pVars = this._pSharedContainerV;
        if (this._sSharedVarCodeV !== "") {
            return this._sSharedVarCodeV;
        }
    } else {
        pVars = this._pSharedContainerP;
        if (this._sSharedVarCodeP !== "") {
            return this._sSharedVarCodeP;
        }
    }
    var sCode = "";
    var pKeys = pVars.keys;
    for(var i = 0; i < pKeys.length; i++) {
        sCode += pVars.getDeclCodeForVar(pKeys[i]) + ";\n";
    }
    if (eType === EFunctionType.k_Vertex) {
        this._sSharedVarCodeV = sCode;
    } else {
        this._sSharedVarCodeP = sCode;
    }
    return sCode;
}
generateVertexOut();
string;
 {
    if (this._sVertexOutDeclCode === "") {
        this._sVertexOutDeclCode = this._pVertexOutType._toDeclString() + " Out;\n";
    }
    return this._sVertexOutDeclCode;
}
generateVaryings(eType, EFunctionType);
string;
 {
    var pVars = null;
    if (eType === EFunctionType.k_Vertex) {
        pVars = this._pVaryingContainerV;
        if (this._sVaryingDeclCodeV !== "") {
            return this._sVaryingDeclCodeV;
        }
    } else {
        pVars = this._pVaryingContainerP;
        if (this._sVaryingDeclCodeP !== "") {
            return this._sVaryingDeclCodeP;
        }
    }
    var sCode = "";
    var pKeys = pVars.keys;
    for(var i = 0; i < pKeys.length; i++) {
        sCode += "varying " + pVars.getDeclCodeForVar(pKeys[i]) + ";\n";
    }
    if (eType === EFunctionType.k_Vertex) {
        this._sVaryingDeclCodeV = sCode;
    } else {
        this._sVaryingDeclCodeP = sCode;
    }
    return sCode;
}
generateUniformSamplers(eType, EFunctionType);
string;
 {
    if (eType === EFunctionType.k_Vertex) {
        return this._sUniformSamplerCodeV;
    } else {
        return this._sUniformSamplerCodeP;
    }
}
generateUniformVars(eType, EFunctionType);
string;
 {
    var pVars = null;
    if (eType === EFunctionType.k_Vertex) {
        pVars = this._pUniformContainerV;
    } else {
        pVars = this._pUniformContainerP;
    }
    var sCode = "";
    var pKeys = pVars.keys;
    for(var i = 0; i < pKeys.length; i++) {
        var pVar = pVars.getVariableByName(pKeys[i]);
        var pType = pVars.getBlendType(pKeys[i]);
        if (pType.isSampler() && (!pType.isArray() || pVar.isDefinedByZero() || pVar._isCollapsed())) {
            continue;
        }
        sCode += "uniform " + pVars.getDeclCodeForVar(pKeys[i]) + ";\n";
    }
    return sCode;
}
inline;
generateAttrBuffers();
string;
 {
    return this._sAttrBufferDeclCode;
}
generateGlobalVars(eType, EFunctionType);
string;
 {
    var pVars = null;
    if (eType === EFunctionType.k_Vertex) {
        pVars = this._pGlobalContainerV;
    } else {
        pVars = this._pGlobalContainerP;
    }
    var sCode = "";
    var pKeys = pVars.keys;
    for(var i = 0; i < pKeys.length; i++) {
        sCode += pVars.getDeclCodeForVar(pKeys[i]) + ";\n";
    }
    return sCode;
}
generateFunctions(eType, EFunctionType);
string;
 {
    var pFunctions = null;
    if (eType === EFunctionType.k_Vertex) {
        pFunctions = this._pUsedFunctionListV;
    } else {
        pFunctions = this._pUsedFunctionListP;
    }
    var sCode = "";
    for(var i = 0; i < pFunctions.length; i++) {
        sCode += pFunctions[i].toFinalCode() + "\n";
    }
    return sCode;
}
generatePassFunctions(eType, EFunctionType);
string;
 {
    var pFunctions = null;
    if (eType === EFunctionType.k_Vertex) {
        pFunctions = this._pPassFunctionListV;
    } else {
        pFunctions = this._pPassFunctionListP;
    }
    var sCode = "";
    for(var i = 0; i < pFunctions.length; i++) {
        sCode += pFunctions[i].toFinalCode() + "\n";
    }
    return sCode;
}
inline;
generateRealAttrs();
string;
 {
    return this._sAttrDeclCode;
}
inline;
generateAFXAttrs();
string;
 {
    return this._sAFXAttrDeclCode;
}
inline;
generateAttrBufferInit();
string;
 {
    return this._sAttrBufferInitCode;
}
inline;
generateAFXAttrInit();
string;
 {
    return this._sAFXAttrInitCode;
}
inline;
generateTexcoordSwap();
string;
 {
    return this._pTexcoordSwapper.getTmpDeclCode() + "\n" + this._pTexcoordSwapper.getTecoordSwapCode();
}
inline;
generatePassFunctionCall(eType, EFunctionType);
string;
 {
    var pFunctions = null;
    if (eType === EFunctionType.k_Vertex) {
        pFunctions = this._pPassFunctionListV;
        if (this._sPassFunctionCallCodeV !== "") {
            return this._sPassFunctionCallCodeV;
        }
    } else {
        pFunctions = this._pPassFunctionListP;
        if (this._sPassFunctionCallCodeP !== "") {
            return this._sPassFunctionCallCodeP;
        }
    }
    var sCode = "";
    for(var i = 0; i < pFunctions.length; i++) {
        sCode += pFunctions[i].getRealName() + "();\n";
    }
    if (eType === EFunctionType.k_Vertex) {
        this._sPassFunctionCallCodeV = sCode;
    } else {
        this._sPassFunctionCallCodeP = sCode;
    }
    return sCode;
}
generateVertexOutToVaryings();
string;
 {
    if (this._sVertexOutToVaryingCode !== "") {
        return this._sVertexOutToVaryingCode;
    }
    var pVars = this._pVaryingContainerV;
    var pKeys = pVars.keys;
    var sCode = "";
    sCode += "gl_Position=Out.POSITION;\ngl_PointSize=Out.PSIZE;\n";
    for(var i = 0; i < pKeys.length; i++) {
        var sName = pKeys[i];
        if (sName !== "POSITION" && sName !== "PSIZE") {
            sCode += "V_" + sName + "=" + "Out." + sName + ";\n";
        }
    }
    this._sVertexOutToVaryingCode = sCode;
    return this._sVertexOutToVaryingCode;
}
var akra;
(function (akra) {
    (function (fx) {
        var ComponentBlend = (function () {
            function ComponentBlend(pComposer) {
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pComposer = null;
                this._isReady = false;
                this._sHash = "";
                this._bNeedToUpdateHash = false;
                this._pComponentHashMap = null;
                this._pComponentList = null;
                this._pComponentShiftList = null;
                this._pComponentPassIdList = null;
                this._iShiftMin = 0;
                this._iShiftMax = 0;
                this._pPassesDList = null;
                this._pComponentInputVarBlend = null;
                this.inline = isReadyToUse();
                this.bool = {
                    return: this._isReady
                };
                this.inline = isEmpty();
                this.bool = {
                    return: this._pComponentList.length === 0
                };
                this.inline = getComponentCount();
                this.number = {
                    return: this._pComponentList.length
                };
                this.inline = getTotalPasses();
                this.number = {
                    return: !isNull(this._pPassesDList) ? this._pPassesDList.length : 0
                };
                this.inline = containComponentWithShift(pComponent, IAFXComponent, iShift, number, iPass, number);
                this.bool = {
                    return: this.containComponentHash(pComponent.getHash(iShift, iPass))
                };
                this.inline = containComponentHash(sComponentHash, string);
                this.bool = {
                    return: (this._pComponentHashMap[sComponentHash])
                };
                this.inline = _getComponentList();
                this.IAFXComponent = [];
                this._pComposer = pComposer;
                this._pComponentHashMap = {};
                this._pComponentList = [];
                this._pComponentShiftList = [];
                this._pComponentPassIdList = [];
            }
            ComponentBlend.prototype.getHash = function () {
                if (this._bNeedToUpdateHash) {
                    this._sHash = this.calcHash();
                    this._bNeedToUpdateHash = false;
                }
                return this._sHash;
            };
            ComponentBlend.prototype.addComponent = function (pComponent, iShift, iPass) {
                var sComponentHash = pComponent.getHash(iShift, iPass);
                var iPassCount = pComponent.getTotalPasses();
                if (iPass === 0xffffff) {
                    for(var i = 0; i < iPassCount; i++) {
                        this.addComponent(pComponent, iShift + i, i);
                    }
                    return;
                } else if (iPass < 0 || iPass >= iPassCount) {
                    return;
                }
                var sComponentHash = pComponent.getHash(iShift, iPass);
                if (this.containComponentHash(sComponentHash)) {
 {
                        logger.setSourceLocation("fx/ComponentBlend.ts", 93);
                        logger.warning("You try to add already used component '" + sComponentHash + "' in blend.");
                    }
                    ;
                    return;
                }
                if (iShift < this._iShiftMin) {
                    this._iShiftMin = iShift;
                }
                if (iShift > this._iShiftMax) {
                    this._iShiftMax = iShift;
                }
                this._pComponentHashMap[sComponentHash] = true;
                this._pComponentList.push(pComponent);
                this._pComponentShiftList.push(iShift);
                this._pComponentPassIdList.push(iPass);
                this._isReady = false;
                this._bNeedToUpdateHash = true;
            };
            ComponentBlend.prototype.removeComponent = function (pComponent, iShift, iPass) {
                var sComponentHash = pComponent.getHash(iShift, iPass);
                var iPassCount = pComponent.getTotalPasses();
                if (!this.containComponentHash(sComponentHash)) {
 {
                        logger.setSourceLocation("fx/ComponentBlend.ts", 120);
                        logger.warning("You try to remove not used component '" + sComponentHash + "' from blend.");
                    }
                    ;
                    return;
                }
                if (iPass === 0xffffff) {
                    for(var i = 0; i < iPassCount; i++) {
                        this.removeComponent(pComponent, iShift + i, i);
                    }
                    return;
                } else if (iPass < 0 || iPass >= iPassCount) {
                    return;
                }
                this._pComponentHashMap[sComponentHash] = false;
                for(var i = 0; i < this._pComponentList.length; i++) {
                    if (this._pComponentList[i] === pComponent && this._pComponentShiftList[i] === iShift && this._pComponentPassIdList[i] === iPass) {
                        this._pComponentList.splice(i, 1);
                        this._pComponentShiftList.splice(i, 1);
                        this._pComponentPassIdList.splice(i, 1);
                        break;
                    }
                }
                if (this._iShiftMin === iShift && this._iShiftMax === iShift) {
                    this._iShiftMax = 0;
                    this._iShiftMin = 0;
                    for(var i = 0; i < this._pComponentShiftList.length; i++) {
                        if (this._pComponentShiftList[i] < this._iShiftMin) {
                            this._iShiftMin = this._pComponentShiftList[i];
                        }
                        if (this._pComponentShiftList[i] > this._iShiftMax) {
                            this._iShiftMax = this._pComponentShiftList[i];
                        }
                    }
                }
                this._isReady = false;
                this._bNeedToUpdateHash = true;
            };
            ComponentBlend.prototype.finalizeBlend = function () {
                if (this._isReady) {
                    return true;
                }
                this._pPassesDList = [];
                this._pComponentInputVarBlend = [];
                for(var i = 0; i < this._pComponentList.length; i++) {
                    var pComponentTechnique = this._pComponentList[i].getTechnique();
                    var iShift = this._pComponentShiftList[i] - this._iShiftMin;
                    var iPass = this._pComponentPassIdList[i];
                    var pPass = pComponentTechnique.getPass(iPass);
                    if (!isDef(this._pPassesDList[iShift])) {
                        this._pPassesDList[iShift] = [];
                        this._pComponentInputVarBlend[iShift] = new ComponentPassInputBlend();
                    }
                    this._pPassesDList[iShift].push(pPass);
                    this._pComponentInputVarBlend[iShift].addDataFromPass(pPass);
                }
                for(var i = 0; i < this._pComponentInputVarBlend.length; i++) {
                    if (isDef(this._pComponentInputVarBlend[i])) {
                        this._pComponentInputVarBlend[i].finalizeInput();
                    } else {
                        this._pComponentInputVarBlend[i] = null;
                        this._pPassesDList[i] = null;
                    }
                }
                this._isReady = true;
                return true;
            };
            ComponentBlend.prototype.getPassInputForPass = function (iPass) {
                if (!this._isReady) {
                    return null;
                }
                if (iPass < 0 || iPass > this.getTotalPasses() || isNull(this._pComponentInputVarBlend[iPass])) {
                    return null;
                }
                return this._pComponentInputVarBlend[iPass].getPassInput();
            };
            ComponentBlend.prototype.getPassListAtPass = function (iPass) {
                if (!this._isReady) {
                    return null;
                }
                if (iPass < 0 || iPass > this.getTotalPasses()) {
                    return null;
                }
                return this._pPassesDList[iPass];
            };
            ComponentBlend.prototype.clone = function () {
                var pClone = new ComponentBlend(this._pComposer);
                pClone._setDataForClone(this._pComponentList, this._pComponentShiftList, this._pComponentPassIdList, this._pComponentHashMap, this._iShiftMin, this._iShiftMax);
                return pClone;
            };
            return ComponentBlend;
        })();
        fx.ComponentBlend = ComponentBlend;        
 {
            return this._pComponentList;
        }
        inline;
        _getComponentShiftList();
        number[];
 {
            return this._pComponentShiftList;
        }
        inline;
        _getComponentPassIdList();
        number[];
 {
            return this._pComponentPassIdList;
        }
        _setDataForClone(pComponentList, IAFXComponent[], pComponentShiftList, number[], pComponentPassNumnerList, number[], pComponentHashMap, BoolMap, iShiftMin, number, iShiftMax, number);
        void {
            for: 
        };
        var i = 0;
        i < pComponentList.length;
        i++;
 {
            this._pComponentList.push(pComponentList[i]);
            this._pComponentShiftList.push(pComponentShiftList[i]);
            this._pComponentPassIdList.push(pComponentPassNumnerList[i]);
            var sComponentHash = pComponentList[i].getHash(pComponentShiftList[i], pComponentPassNumnerList[i]);
            this._pComponentHashMap[sComponentHash] = pComponentHashMap[sComponentHash];
        }
        this._iShiftMin = iShiftMin;
        this._iShiftMax = iShiftMax;
        this._bNeedToUpdateHash = true;
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
calcHash();
string;
 {
    var sHash = "";
    if (this.isEmpty()) {
        return "EMPTY_BLEND";
    }
    for(var i = 0; i < this._pComponentList.length; i++) {
        var sComponentHash = this._pComponentList[i].getHash(this._pComponentShiftList[i], this._pComponentPassIdList[i]);
        sHash += sComponentHash + ":";
    }
    return sHash;
}
var ComponentPassInputBlend = (function () {
    function ComponentPassInputBlend() {
        this._pUniformNameToRealMap = null;
        this._pUniformByRealNameMap = null;
        this._pUniformDefaultValueMap = null;
        this._pTextureNameToRealMap = null;
        this._pTextureByRealNameMap = null;
        this._pForeignByNameMap = null;
        this._pUniformRealNameList = null;
        this._pUniformNameList = null;
        this._pTextureRealNameList = null;
        this._pTextureNameList = null;
        this._pForeignNameList = null;
        this._pFreePassInputBlendList = null;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this.inline = get;
        this._pUniformNameToRealMap = {};
        this._pUniformByRealNameMap = {};
        this._pUniformDefaultValueMap = {};
        this._pTextureNameToRealMap = {};
        this._pTextureByRealNameMap = {
            TEXTURE0: null,
            TEXTURE1: null,
            TEXTURE2: null,
            TEXTURE3: null,
            TEXTURE4: null,
            TEXTURE5: null,
            TEXTURE6: null,
            TEXTURE7: null,
            TEXTURE8: null,
            TEXTURE9: null,
            TEXTURE10: null,
            TEXTURE11: null,
            TEXTURE12: null,
            TEXTURE13: null,
            TEXTURE14: null,
            TEXTURE15: null
        };
        this._pForeignByNameMap = {};
    }
    ComponentPassInputBlend.prototype.uniformNameToReal = function () {
        return this._pUniformNameToRealMap;
    };
    ComponentPassInputBlend.prototype.uniformByRealName = function () {
        return this._pUniformByRealNameMap;
    };
    ComponentPassInputBlend.prototype.uniformDefaultValue = function () {
        return this._pUniformDefaultValueMap;
    };
    ComponentPassInputBlend.prototype.textureNameToReal = function () {
        return this._pTextureNameToRealMap;
    };
    ComponentPassInputBlend.prototype.textureByRealName = function () {
        return this._pTextureByRealNameMap;
    };
    ComponentPassInputBlend.prototype.foreignByName = function () {
        return this._pForeignByNameMap;
    };
    ComponentPassInputBlend.prototype.uniformNameList = function () {
        return this._pUniformNameList;
    };
    ComponentPassInputBlend.prototype.uniformRealNameList = function () {
        return this._pUniformRealNameList;
    };
    ComponentPassInputBlend.prototype.textureNameList = function () {
        return this._pTextureNameList;
    };
    ComponentPassInputBlend.prototype.textureRealNameList = function () {
        return this._pTextureRealNameList;
    };
    ComponentPassInputBlend.prototype.foreignNameList = function () {
        return this._pForeignNameList;
    };
    ComponentPassInputBlend.prototype.addDataFromPass = function (pPass) {
        var pUniformMap = pPass._getFullUniformMap();
        var pForeignMap = pPass._getFullForeignMap();
        var pTextureMap = pPass._getFullTextureMap();
        var pVar = null;
        for(var i in pForeignMap) {
            pVar = pForeignMap[i];
            this._pForeignByNameMap[pVar.getName()] = pVar;
        }
        for(var i in pTextureMap) {
            pVar = pTextureMap[i];
            this._pTextureNameToRealMap[pVar.getName()] = pVar.getRealName();
            this._pTextureByRealNameMap[pVar.getRealName()] = pVar;
        }
        for(var i in pUniformMap) {
            pVar = pUniformMap[i];
            this.addUniformVariable(pVar, "", "");
        }
    };
    ComponentPassInputBlend.prototype.finalizeInput = function () {
        this._pUniformNameList = Object.keys(this._pUniformNameToRealMap);
        this._pUniformRealNameList = Object.keys(this._pUniformByRealNameMap);
        this._pTextureNameList = Object.keys(this._pTextureNameToRealMap);
        this._pTextureRealNameList = Object.keys(this._pTextureByRealNameMap);
        this._pForeignNameList = Object.keys(this._pForeignByNameMap);
        this._pFreePassInputBlendList = [];
        this.generateNewPassInputs();
    };
    ComponentPassInputBlend.prototype.getPassInput = function () {
        if (this._pFreePassInputBlendList.length === 0) {
            this.generateNewPassInputs();
        }
        return this._pFreePassInputBlendList.pop();
    };
    ComponentPassInputBlend.prototype.releasePassInput = function (pInput) {
        this._pFreePassInputBlendList.push(pInput);
    };
    ComponentPassInputBlend.prototype.addUniformVariable = function (pVariable, sPrevName, sPrevRealName) {
        var sName = "";
        var sRealName = "";
        sName = pVariable.getName();
        sRealName = pVariable.getRealName();
        var pHasVar = this._pUniformByRealNameMap[sRealName];
        if (isDef(pHasVar) && !pHasVar.getType().isEqual(pVariable.getType())) {
 {
                logger.setSourceLocation("fx/ComponentBlend.ts", 462);
                logger.warning("You used uniforms with the same real-names. Now we don`t work very well with that.");
            }
            ;
            return;
        }
        var pVariableType = pVariable.getType();
        this._pUniformNameToRealMap[sName] = sRealName;
        this._pUniformByRealNameMap[sRealName] = pVariable;
        this._pUniformDefaultValueMap[sRealName] = pVariable.getDefaultValue();
    };
    ComponentPassInputBlend.prototype.generateNewPassInputs = function (nCount) {
        if (typeof nCount === "undefined") { nCount = 5; }
        for(var i = 0; i < nCount; i++) {
            var pPassInput = new PassInputBlend(this);
            this._pFreePassInputBlendList.push(pPassInput);
        }
    };
    return ComponentPassInputBlend;
})();
exports.ComponentPassInputBlend = ComponentPassInputBlend;
var akra;
(function (akra) {
    (function (fx) {
        var Blender = (function () {
            function Blender(pComposer) {
                this._pComposer = null;
                this._pComponentBlendByHashMap = null;
                this._pBlendWithComponentMap = null;
                this._pBlendWithBlendMap = null;
                this._pPassBlendByHashMap = null;
                this._pPassBlendByIdMap = null;
                this.inline = getPassBlendById(id, number);
                this.IAFXPassBlend = {
                    return: this._pPassBlendByIdMap[id] || null
                };
                this._pComposer = pComposer;
                this._pComponentBlendByHashMap = {};
                this._pBlendWithComponentMap = {};
                this._pBlendWithBlendMap = {};
                this._pPassBlendByHashMap = {};
                this._pPassBlendByIdMap = {};
            }
            Blender.prototype.addComponentToBlend = function (pComponentBlend, pComponent, iShift, iPass) {
                var sBlendPartHash = isDefAndNotNull(pComponentBlend) ? pComponentBlend.getGuid().toString() : "";
                var sComponentPartHash = pComponent.getHash(iShift, iPass);
                var sShortHash = sBlendPartHash + "+" + sComponentPartHash;
                if (isDef(this._pBlendWithComponentMap[sShortHash])) {
                    return this._pBlendWithComponentMap[sShortHash];
                }
                var pNewBlend = null;
                if (isNull(pComponentBlend)) {
                    pNewBlend = new ComponentBlend(this._pComposer);
                } else {
                    pNewBlend = pComponentBlend.clone();
                }
                var pTechnique = pComponent.getTechnique();
                var pTechComponentList = pTechnique.getFullComponentList();
                var pTechComponentShiftList = pTechnique.getFullComponentShiftList();
                if (iPass === 0xffffff) {
                    if (!isNull(pTechComponentList)) {
                        for(var i = 0; i < pTechComponentList.length; i++) {
                            pNewBlend.addComponent(pTechComponentList[i], pTechComponentShiftList[i] + iShift, 0xffffff);
                        }
                    }
                    pNewBlend.addComponent(pComponent, iShift, 0xffffff);
                } else {
                    if (!isNull(pTechComponentList)) {
                        for(var i = 0; i < pTechComponentList.length; i++) {
                            pNewBlend.addComponent(pTechComponentList[i], pTechComponentShiftList[i] + iShift, iPass - pTechComponentShiftList[i]);
                        }
                    }
                    pNewBlend.addComponent(pComponent, iShift, iPass);
                }
                this._pBlendWithComponentMap[sShortHash] = pNewBlend;
                var sNewBlendHash = pNewBlend.getHash();
                if (isDef(this._pComponentBlendByHashMap[sNewBlendHash])) {
                    return this._pComponentBlendByHashMap[sNewBlendHash];
                } else {
                    this._pComponentBlendByHashMap[sNewBlendHash] = pNewBlend;
                }
                return pNewBlend;
            };
            Blender.prototype.removeComponentFromBlend = function (pComponentBlend, pComponent, iShift, iPass) {
                if (isNull(pComponentBlend)) {
 {
                        logger.setSourceLocation("fx/Blender.ts", 95);
                        logger.warning("You try to remove component '" + pComponent.getName() + "' with shift " + iShift.toString() + "from empty blend.");
                    }
                    ;
                    return null;
                }
                var sBlendPartHash = isDefAndNotNull(pComponentBlend) ? pComponentBlend.getGuid().toString() : "";
                var sComponentPartHash = pComponent.getHash(iShift, iPass);
                var sShortHash = sBlendPartHash + "-" + sComponentPartHash;
                if (isDef(this._pBlendWithComponentMap[sShortHash])) {
                    return this._pBlendWithComponentMap[sShortHash];
                }
                if (!pComponentBlend.containComponentHash(sComponentPartHash)) {
 {
                        logger.setSourceLocation("fx/Blender.ts", 109);
                        logger.warning("You try to remove component '" + pComponent.getName() + "' with shift " + iShift.toString() + "from blend that not contain it.");
                    }
                    ;
                    return null;
                }
                var pNewBlend = pComponentBlend.clone();
                var pTechnique = pComponent.getTechnique();
                var pTechComponentList = pTechnique.getFullComponentList();
                var pTechComponentShiftList = pTechnique.getFullComponentShiftList();
                if (iPass === 0xffffff) {
                    if (!isNull(pTechComponentList)) {
                        for(var i = 0; i < pTechComponentList.length; i++) {
                            pNewBlend.removeComponent(pTechComponentList[i], pTechComponentShiftList[i] + iShift, 0xffffff);
                        }
                    }
                    pNewBlend.removeComponent(pComponent, iShift, 0xffffff);
                } else {
                    if (!isNull(pTechComponentList)) {
                        for(var i = 0; i < pTechComponentList.length; i++) {
                            pNewBlend.removeComponent(pTechComponentList[i], pTechComponentShiftList[i] + iShift, iPass - pTechComponentShiftList[i]);
                        }
                    }
                    pNewBlend.removeComponent(pComponent, iShift, iPass);
                }
                this._pBlendWithComponentMap[sShortHash] = pNewBlend;
                var sNewBlendHash = pNewBlend.getHash();
                if (isDef(this._pComponentBlendByHashMap[sNewBlendHash])) {
                    return this._pComponentBlendByHashMap[sNewBlendHash];
                } else {
                    this._pComponentBlendByHashMap[sNewBlendHash] = pNewBlend;
                }
                return pNewBlend;
            };
            Blender.prototype.addBlendToBlend = function (pComponentBlend, pAddBlend, iShift) {
                if (isNull(pComponentBlend)) {
                    return pAddBlend;
                }
                if (isNull(pAddBlend)) {
                    return pComponentBlend;
                }
                var sShortHash = pComponentBlend.getGuid().toString() + "+" + pAddBlend.getGuid().toString();
                if (isDef(this._pBlendWithBlendMap[sShortHash])) {
                    return this._pBlendWithBlendMap[sShortHash];
                }
                var pNewBlend = pComponentBlend.clone();
                var pAddComponentList = pAddBlend._getComponentList();
                var pAddComponentShiftList = pAddBlend._getComponentShiftList();
                var pAddComponentPassIdList = pAddBlend._getComponentPassIdList();
                for(var i = 0; i < pAddComponentList.length; i++) {
                    pNewBlend.addComponent(pAddComponentList[i], pAddComponentShiftList[i] + iShift, pAddComponentPassIdList[i]);
                }
                this._pBlendWithBlendMap[sShortHash] = pNewBlend;
                var sNewBlendHash = pNewBlend.getHash();
                if (isDef(this._pComponentBlendByHashMap[sNewBlendHash])) {
                    return this._pComponentBlendByHashMap[sNewBlendHash];
                } else {
                    this._pComponentBlendByHashMap[sNewBlendHash] = pNewBlend;
                }
                return pNewBlend;
            };
            Blender.prototype.generatePassBlend = function (pPassList, pStates, pForeigns, pUniforms) {
                var sPassBlendHash = "";
                for(var i = 0; i < pPassList.length; i++) {
                    var pPass = pPassList[i];
                    pPass.evaluate(pStates, pForeigns, pUniforms);
                    var pVertexShader = pPass.getVertexShader();
                    var pPixelShader = pPass.getPixelShader();
                    if (!isNull(pVertexShader)) {
                        sPassBlendHash += pVertexShader.getGuid().toString() + ":";
                    } else {
                        sPassBlendHash += "E:";
                    }
                    if (!isNull(pPixelShader)) {
                        sPassBlendHash += pPixelShader.getGuid().toString() + ":";
                    } else {
                        sPassBlendHash += "E:";
                    }
                }
                if (isDef(this._pPassBlendByHashMap[sPassBlendHash])) {
                    return this._pPassBlendByHashMap[sPassBlendHash];
                }
                var pNewPassBlend = new PassBlend(this._pComposer);
                var isOk = pNewPassBlend.initFromPassList(pPassList);
                if (!isOk) {
                    return null;
                }
                this._pPassBlendByHashMap[sPassBlendHash] = pNewPassBlend;
                this._pPassBlendByIdMap[pNewPassBlend.getGuid()] = pNewPassBlend;
                return pNewPassBlend;
            };
            return Blender;
        })();
        fx.Blender = Blender;        
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        var BufferMap = (function () {
            function BufferMap() { }
            return BufferMap;
        })();
        util.BufferMap = BufferMap;        
        ReferenceCounter;
 {
            _pFlows:
IDataFlow[] = null
            _pMappers:
IDataMapper[] = null
            _pIndex:
IIndexData = null
            _nLength:
number = 0
            _ePrimitiveType:
EPrimitiveTypes
            _pCompleteFlows:
IDataFlow[] = null
            _nCompleteFlows:
number = 0
            _nCompleteVideoBuffers:
number = 0
            _pCompleteVideoBuffers:
IVertexBuffer[] = null
            _nUsedFlows:
number = 0
            _pEngine:
IEngine = null
            _nStartIndex:
number = 0
            _pBuffersCompatibleMap:
IBuffersCompatibleMap = null
            _pSemanticsMap:
ISemanticsMap = null
            constructor(pEngine, IEngine);
 {
                _super.prototype();
                this._pEngine = pEngine;
                this.reset();
            }
            ;
            inline;
            get;
            primType();
            EPrimitiveTypes;
 {
                return this._pIndex ? this._pIndex.getPrimitiveType() : this._ePrimitiveType;
            }
            ;
            inline;
            set;
            primType(eType, EPrimitiveTypes);
 {
                this._ePrimitiveType = eType;
            }
            ;
            inline;
            get;
            primCount();
            number;
 {
                return data.IndexData.getPrimitiveCount(this.primType, this.length);
            }
            ;
            inline;
            get;
            index();
            IIndexData;
 {
                return this._pIndex;
            }
            ;
            inline;
            set;
            index(pIndexData, IIndexData);
 {
                if (this._pIndex === pIndexData) {
                    return;
                }
                this._pIndex = pIndexData;
                this.update();
            }
            ;
            inline;
            get;
            limit();
            number;
 {
                return this._pFlows.length;
            }
            ;
            inline;
            get;
            length();
            number;
 {
                return (this._pIndex ? this._pIndex.length : this._nLength);
            }
            inline;
            set;
            length(nLength, number);
 {
                this._nLength = Math.min(this._nLength, nLength);
            }
            inline;
            set;
            _length(nLength, number);
 {
                this._nLength = nLength;
            }
            inline;
            get;
            startIndex();
            number;
 {
                return this._nStartIndex;
            }
            inline;
            get;
            size();
            number;
 {
                return this._nCompleteFlows;
            }
            inline;
            get;
            flows();
            IDataFlow[];
 {
                return this._pCompleteFlows;
            }
            inline;
            get;
            mappers();
            IDataMapper[];
 {
                return this._pMappers;
            }
            inline;
            get;
            offset();
            number;
 {
                return (this._pIndex ? this._pIndex.byteOffset : 0);
            }
            _draw();
            void {
                isNull: (this._pIndex) ? this.drawArrays() : this.drawElements()
            };
            inline;
            drawArrays();
            void {}(this._pEngine.getRenderer()).getWebGLContext().drawArrays(webgl.getWebGLPrimitiveType(this._ePrimitiveType), this._nStartIndex, this._nLength);
        }
        inline;
        drawElements();
        void {}(this._pEngine.getRenderer()).getWebGLContext().drawElements(webgl.getWebGLPrimitiveType(this._ePrimitiveType), this._pIndex.getPrimitiveCount(), webgl.getWebGLPrimitiveType(this._pIndex.getPrimitiveType()), this._pIndex.byteOffset / 4);
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
getFlow(sSemantics, string, bComplete, bool = true);
IDataFlow;
getFlow(iFlow, number, bComplete, bool = true);
IDataFlow;
getFlow(iFlow, any, bComplete, bool = true);
IDataFlow;
 {
    if (isString(arguments[0])) {
        var nTotal;
        var pFlows;
        if (bComplete) {
            pFlows = this._pCompleteFlows;
            nTotal = this._nCompleteFlows;
        } else {
            pFlows = this._pFlows;
            nTotal = this._pFlows.length;
        }
        for(var i = 0; i < nTotal; ++i) {
            if (!pFlows[i].data) {
                continue;
            }
            if (pFlows[i].data.hasSemantics(arguments[0])) {
                return pFlows[i];
            }
        }
        return null;
    }
    if (bComplete) {
        for(var i = 0, pFlows = this._pCompleteFlows; i < this._nCompleteFlows; ++i) {
            if (pFlows[i].flow == iFlow) {
                return pFlows[i];
            }
        }
        return null;
    }
    return this._pFlows[iFlow];
}
reset();
void {
    this: ,
    _pIndex:  = null
};
this._ePrimitiveType = EPrimitiveTypes.TRIANGLELIST;
var nFlowLimit = 16;
nFlowLimit = Math.min(16, webgl.maxVertexAttributes);
this._pMappers = [];
this._pFlows = new Array(nFlowLimit);
for(var i = 0; i < nFlowLimit; i++) {
    this._pFlows[i] = {
        flow: i,
        data: null,
        type: EDataFlowTypes.UNMAPPABLE,
        mapper: null
    };
}
this._nLength = MAX_INT32;
this._pCompleteFlows = new Array(nFlowLimit);
this._nCompleteFlows = 0;
this._nStartIndex = MAX_INT32;
this._pBuffersCompatibleMap = {};
this._pCompleteVideoBuffers = new Array(nFlowLimit);
this._nCompleteVideoBuffers = 0;
this._nUsedFlows = 0;
this._pSemanticsMap = {};
flow(pVertexData, IVertexData);
number;
flow(iFlow, number, pVertexData, IVertexData);
number;
flow(iFlow, pData ?  : );
number;
 {
    var pFlow = null;
    var pVertexData = null;
    if (arguments.length < 2) {
        pVertexData = arguments[0];
        iFlow = (this._nUsedFlows++);
    } else {
        iFlow = arguments[0];
        pVertexData = arguments[1];
    }
    pFlow = this._pFlows[iFlow];
 {
        logger.setSourceLocation("util/BufferMap.ts", 239);
        logger.assert(iFlow < this.limit, 'Invalid strem. Maximum allowable number of stream ' + this.limit + '.');
    }
    ;
    if (!pVertexData || pFlow.data === pVertexData) {
 {
            logger.setSourceLocation("util/BufferMap.ts", 243);
            logger.warning("BufferMap::flow(", iFlow, pVertexData, ") failed.", isNull(pVertexData) ? "vertex data is null" : "flow.data alreay has same vertex data");
        }
        ;
        return -1;
    }
    if (core.pool.resources.isVBO(pVertexData.buffer)) {
        pFlow.type = EDataFlowTypes.UNMAPPABLE;
        this.length = pVertexData.length;
 {
            logger.setSourceLocation("util/BufferMap.ts", 252);
            logger.assert(this.checkData(pVertexData), 'You can use several unmappable data flows from one buffer.');
        }
        ;
        this.pushEtalon(pVertexData);
    } else {
        pFlow.type = EDataFlowTypes.MAPPABLE;
    }
    pFlow.data = pVertexData;
    return this.update() ? iFlow : -1;
}
clearLinks();
void {
    for: 
};
var sSemantics;
this._pSemanticsMap;
 {
    this._pSemanticsMap[sSemantics] = null;
}
linkFlow(pFlow, IDataFlow);
void {
    var: pDecl,
    data: ,
    VertexDeclaration:  = pFlow.data.getVertexDeclaration()
};
for(var i = 0; i < pDecl.length; ++i) {
    var pElement = pDecl.element(i);
    var sSemantics = pElement.semantics;
    if (pElement.isEnd()) {
        continue;
    }
    var isSemanticsExists = isDefAndNotNull(this._pSemanticsMap[sSemantics]);
 {
        logger.setSourceLocation("util/BufferMap.ts", 285);
        logger.assert(!isSemanticsExists, "overwrited semantics: " + sSemantics);
    }
    ;
    if (!isSemanticsExists) {
        this._pSemanticsMap[sSemantics] = pFlow;
    }
}
if (pFlow.type === EDataFlowTypes.MAPPABLE) {
    var sSemantics = pFlow.mapper.semantics;
    var isSemanticsExists = isDefAndNotNull(this._pSemanticsMap[sSemantics]);
 {
        logger.setSourceLocation("util/BufferMap.ts", 296);
        logger.assert(!isSemanticsExists, "overwrited semantics(MAPPER!): " + sSemantics);
    }
    ;
    if (!isSemanticsExists) {
        this._pSemanticsMap[sSemantics] = pFlow;
    }
}
checkData(pData, IVertexData);
bool;
 {
    var pEtalon = this._pBuffersCompatibleMap[pData.getBufferHandle()];
    if (!pEtalon || pEtalon.byteOffset === pData.byteOffset) {
        return true;
    }
    return false;
}
findMapping(pMap, eSemantics, iAddition);
IDataMapper;
 {
 {
        logger.setSourceLocation("util/BufferMap.ts", 313);
        logger.assert(this.checkData(pMap), 'You can use several different maps from one buffer.');
    }
    ;
    for(var i = 0, pMappers = this._pMappers, pExistsMap; i < pMappers.length; i++) {
        pExistsMap = pMappers[i].data;
        if (pExistsMap === pMap) {
            if (pMappers[i].semantics === eSemantics && pMappers[i].addition == iAddition) {
                return pMappers[i];
            }
        } else {
 {
                logger.setSourceLocation("util/BufferMap.ts", 325);
                logger.assert(pExistsMap.getStartIndex() === pMap.getStartIndex(), 'You can not use maps with different indexing');
            }
            ;
        }
    }
    return null;
}
;
mapping(iFlow, number, pMap, IVertexData, eSemantics, string, iAddition, number = 0);
bool;
 {
    var pMapper = this.findMapping(pMap, eSemantics, iAddition);
    var pFlow = this._pFlows[iFlow];
 {
        logger.setSourceLocation("util/BufferMap.ts", 337);
        logger.assert(isDefAndNotNull(pFlow.data) && (pFlow.type === EDataFlowTypes.MAPPABLE), 'Cannot mapping empty/unmappable flow.');
    }
    ;
 {
        logger.setSourceLocation("util/BufferMap.ts", 338);
        logger.assert(isDef(pMap), 'Passed empty mapper.');
    }
    ;
    if (!eSemantics) {
        eSemantics = pMap.getVertexDeclaration()[0].eUsage;
    } else if (pMap.hasSemantics(eSemantics) === false) {
 {
            logger.setSourceLocation("util/BufferMap.ts", 344);
            logger.error('Passed mapper does not have semantics: ' + eSemantics + '.');
        }
        ;
        return false;
    }
    if (pMapper) {
        if (pFlow.mapper === pMapper) {
            return pMapper.semantics === eSemantics && pMapper.addition === iAddition ? true : false;
        }
    } else {
        pMapper = {
            data: pMap,
            semantics: eSemantics,
            addition: iAddition
        };
        this._pMappers.push(pMapper);
        this.length = pMap.length;
        this.pushEtalon(pMap);
    }
    pFlow.mapper = pMapper;
    return this.update();
}
inline;
pushEtalon(pData, IVertexData);
void {
    this: ,
    _pBuffersCompatibleMap: [
        pData.getBufferHandle()
    ] = pData
};
update();
bool;
 {
    var pFlows = this._pFlows;
    var pFlow;
    var pMapper;
    var isMappable = false;
    var pCompleteFlows = this._pCompleteFlows;
    var nCompleteFlows = 0;
    var pCompleteVideoBuffers = this._pCompleteVideoBuffers;
    var nCompleteVideoBuffers = 0;
    var nUsedFlows = 0;
    var pVideoBuffer;
    var isVideoBufferAdded = false;
    var nStartIndex = MAX_INT32, nCurStartIndex;
    this.clearLinks();
    for(var i = 0; i < pFlows.length; i++) {
        pFlow = pFlows[i];
        pMapper = pFlow.mapper;
        isMappable = (pFlow.type === EDataFlowTypes.MAPPABLE);
        if (pFlow.data) {
            nUsedFlows++;
        }
        if (pFlow.data === null || (isMappable && pMapper === null)) {
            continue;
        }
        pCompleteFlows[nCompleteFlows++] = pFlow;
        this.linkFlow(pFlow);
        if (isMappable) {
            nCurStartIndex = pMapper.data.startIndex;
            pVideoBuffer = pFlow.data.buffer;
            for(var j = 0; j < nCompleteVideoBuffers; j++) {
                if (pCompleteVideoBuffers[j] === pVideoBuffer) {
                    isVideoBufferAdded = true;
                    break;
                }
            }
            if (!isVideoBufferAdded) {
                pCompleteVideoBuffers[nCompleteVideoBuffers++] = pVideoBuffer;
            }
        } else {
            nCurStartIndex = pFlow.data.startIndex;
        }
        if (nStartIndex === MAX_INT32) {
            nStartIndex = nCurStartIndex;
            continue;
        }
 {
            logger.setSourceLocation("util/BufferMap.ts", 427);
            logger.assert(nStartIndex == nCurStartIndex, 'You can not use a maps or unmappable buffers having different starting index.');
        }
        ;
    }
    this._nStartIndex = nStartIndex;
    this._nCompleteFlows = nCompleteFlows;
    this._nCompleteVideoBuffers = nCompleteVideoBuffers;
    this._nUsedFlows = nUsedFlows;
    return true;
}
findFlow(sSemantics, string);
 {
    return !isDef(this._pSemanticsMap[sSemantics]) ? (this._pSemanticsMap[sSemantics] = null) : this._pSemanticsMap[sSemantics];
}
clone(bWithMapping, bool = true);
IBufferMap;
 {
    var pMap = this._pEngine.createBufferMap();
    for(var i = 0, pFlows = this._pFlows; i < pFlows.length; ++i) {
        if (pFlows[i].data === null) {
            continue;
        }
        if (pMap.flow(pFlows[i].flow, pFlows[i].data) < 0) {
            pMap = null;
 {
                logger.setSourceLocation("util/BufferMap.ts", 456);
                logger.log("BufferMap::clone() failed on", pFlows[i].flow, pFlows[i].data);
            }
            ;
            return null;
        }
        if (!bWithMapping) {
            continue;
        }
        if (pFlows[i].mapper) {
            pMap.mapping(pFlows[i].flow, pFlows[i].mapper.data, pFlows[i].mapper.semantics, pFlows[i].mapper.addition);
        }
    }
    return pMap;
}
toString(bListAll, bool = false);
string;
 {
    function _an(sValue, n, bBackward) {
        sValue = String(sValue);
        bBackward = bBackward || false;
        if (sValue.length < n) {
            for(var i = 0, l = sValue.length; i < n - l; ++i) {
                if (!bBackward) {
                    sValue += ' ';
                } else {
                    sValue = ' ' + sValue;
                }
            }
        }
        return sValue;
    }
    var s = '\n\n', t;
    s += '      $1 Flows     : OFFSET / SIZE   |   BUFFER / OFFSET   :      Mapping  / Shift    : OFFSET |    Additional    \n';
    s = s.replace("$1", bListAll ? "   Total" : "Complete");
    t = '-------------------------:-----------------+---------------------:--------------------------:--------+------------------\n';
    s += t;
    var pFlows = bListAll ? this._pFlows : this._pCompleteFlows;
    var nFlows = bListAll ? this._nUsedFlows : this._nCompleteFlows;
    for(var i = 0; i < nFlows; ++i) {
        var pFlow = pFlows[i];
        var pMapper = pFlow.mapper;
        var pVertexData = pFlow.data;
        var pDecl = pVertexData.getVertexDeclaration();
        s += '#' + _an(pFlow.flow, 2) + ' ' + _an('[ ' + (pDecl.element(0).usage !== DeclUsages.END ? pDecl.element(0).usage : '<end>') + ' ]', 20) + ' : ' + _an(pDecl.element(0).offset, 6, true) + ' / ' + _an(pDecl.element(0).size, 6) + ' | ' + _an(pVertexData.getBufferHandle(), 8, true) + ' / ' + _an(pVertexData.byteOffset, 8) + ' : ' + (pMapper ? _an(pMapper.semantics, 15, true) + ' / ' + _an(pMapper.addition, 7) + ': ' + _an(pMapper.data.getVertexDeclaration().findElement(pMapper.semantics).offset, 6) : _an('-----', 25) + ': ' + _an('-----', 6)) + ' |                  \n';
        for(var j = 1; j < pDecl.length; ++j) {
            s += '    ' + _an('[ ' + (pDecl.element(j).usage !== DeclUsages.END ? pDecl.element(j).usage : '<end>') + ' ]', 20) + ' : ' + _an(pDecl.element(j).offset, 6, true) + ' / ' + _an(pDecl.element(j).size, 6) + ' |                     :                          :        |                  \n';
        }
        s += t;
    }
    ;
    s += '=================================================================\n';
    s += '      PRIMITIVE TYPE : ' + '0x' + Number(this.primType).toString(16) + '\n';
    s += '     PRIMITIVE COUNT : ' + this.primCount + '\n';
    s += '         START INDEX : ' + this.startIndex + '\n';
    s += '              LENGTH : ' + this.length + '\n';
    s += '  USING INDEX BUFFER : ' + (this.index ? 'TRUE' : 'FALSE') + '\n';
    s += '=================================================================\n';
    return s + '\n\n';
}
function createBufferMap(pEngine) {
    return new BufferMap(pEngine);
}
exports.createBufferMap = createBufferMap;
var akra;
(function (akra) {
    (function (fx) {
        var Composer = (function () {
            function Composer(pEngine) {
                this._pEngine = null;
                this._pTechniqueToBlendMap = null;
                this._pTechniqueToOwnBlendMap = null;
                this._pTechniqueLastGlobalBlendMap = null;
                this._pTechniqueNeedUpdateMap = null;
                this._pEffectResourceToComponentBlendMap = null;
                this._pBlender = null;
                this._pGlobalEffectResorceIdStack = null;
                this._pGlobalComponentBlendStack = null;
                this._pGlobalComponentBlend = null;
                this._pCurrentSceneObject = null;
                this._pCurrentViewport = null;
                this._pCurrentRenderable = null;
                this._pCurrentBufferMap = null;
                this._pCurrentSurfaceMaterial = null;
                this._pComposerState = {
                    mesh: {
                        isSkinning: false
                    }
                };
                this._pRenderTargetA = null;
                this._pRenderTargetB = null;
                this._pLastRenderTarget = null;
                this._pPostEffectTextureA = null;
                this._pPostEffectTextureB = null;
                this._pPostEffectDepthBuffer = null;
                this.inline = getEngine();
                this.IEngine = {
                    return: this._pEngine
                };
                this.inline = _setCurrentSceneObject(pSceneObject, ISceneObject);
                this._pEngine = pEngine;
                this._pBlender = new Blender(this);
                this._pTechniqueToBlendMap = {};
                this._pTechniqueToOwnBlendMap = {};
                this._pTechniqueLastGlobalBlendMap = {};
                this._pTechniqueNeedUpdateMap = {};
                this._pEffectResourceToComponentBlendMap = {};
                this._pGlobalEffectResorceIdStack = [];
                this._pGlobalComponentBlendStack = [];
                this._pGlobalComponentBlend = null;
                this.initPostEffectTextures();
                if (isNull(Composer.pDefaultSamplerBlender)) {
                    Composer.pDefaultSamplerBlender = new SamplerBlender();
                }
            }
            Composer.pDefaultSamplerBlender = null;
            Composer.prototype.getComponentByName = function (sComponentName) {
                return this._pEngine.getResourceManager().componentPool.findResource(sComponentName);
            };
            Composer.prototype.getComponentCountForEffect = function (pEffectResource) {
                var id = pEffectResource.resourceHandle;
                if (isDef(this._pEffectResourceToComponentBlendMap[id])) {
                    return this._pEffectResourceToComponentBlendMap[id].getComponentCount();
                } else {
                    return 0;
                }
            };
            Composer.prototype.getTotalPassesForEffect = function (pEffectResource) {
                var id = pEffectResource.resourceHandle;
                if (isDef(this._pEffectResourceToComponentBlendMap[id])) {
                    return this._pEffectResourceToComponentBlendMap[id].getTotalPasses();
                } else {
                    return 0;
                }
            };
            Composer.prototype.addComponentToEffect = function (pEffectResource, pComponent, iShift, iPass) {
                var id = pEffectResource.resourceHandle;
                var pCurrentBlend = null;
                if (isDef(this._pEffectResourceToComponentBlendMap[id])) {
                    pCurrentBlend = this._pEffectResourceToComponentBlendMap[id];
                }
                var pNewBlend = this._pBlender.addComponentToBlend(pCurrentBlend, pComponent, iShift, iPass);
                if (isNull(pNewBlend)) {
                    return false;
                }
                this._pEffectResourceToComponentBlendMap[id] = pNewBlend;
                return true;
            };
            Composer.prototype.removeComponentFromEffect = function (pEffectResource, pComponent, iShift, iPass) {
                var id = pEffectResource.resourceHandle;
                var pCurrentBlend = null;
                if (isDef(this._pEffectResourceToComponentBlendMap[id])) {
                    pCurrentBlend = this._pEffectResourceToComponentBlendMap[id];
                }
                var pNewBlend = this._pBlender.removeComponentFromBlend(pCurrentBlend, pComponent, iShift, iPass);
                if (isNull(pNewBlend)) {
                    return false;
                }
                this._pEffectResourceToComponentBlendMap[id] = pNewBlend;
                return true;
            };
            Composer.prototype.activateEffectResource = function (pEffectResource, iShift) {
                var id = pEffectResource.resourceHandle;
                var pComponentBlend = this._pEffectResourceToComponentBlendMap[id];
                if (!isDef(pComponentBlend)) {
                    return false;
                }
                var pNewGlobalBlend = null;
                if (isNull(this._pGlobalComponentBlend)) {
                    pNewGlobalBlend = pComponentBlend;
                } else {
                    pNewGlobalBlend = this._pBlender.addBlendToBlend(this._pGlobalComponentBlend, pComponentBlend, iShift);
                }
                if (isNull(pNewGlobalBlend)) {
                    return false;
                }
                this._pGlobalEffectResorceIdStack.push(id);
                this._pGlobalComponentBlendStack.push(pNewGlobalBlend);
                this._pGlobalComponentBlend = pNewGlobalBlend;
                return true;
            };
            Composer.prototype.deactivateEffectResource = function (pEffectResource) {
                var id = pEffectResource.resourceHandle;
                var iStackLength = this._pGlobalEffectResorceIdStack.length;
                if (iStackLength === 0) {
                    return false;
                }
                var iLastId = this._pGlobalEffectResorceIdStack[iStackLength - 1];
                if (iLastId !== id) {
                    return false;
                }
                this._pGlobalEffectResorceIdStack.splice(iStackLength - 1, 1);
                this._pGlobalComponentBlendStack.splice(iStackLength - 1, 1);
                if (iStackLength > 1) {
                    this._pGlobalComponentBlend = this._pGlobalComponentBlendStack[iStackLength - 2];
                } else {
                    this._pGlobalComponentBlend = null;
                }
                return true;
            };
            Composer.prototype.getTotalPassesForTechnique = function (pRenderTechnique) {
                this.prepareTechniqueBlend(pRenderTechnique);
                var id = pRenderTechnique.getGuid();
                if (isDefAndNotNull(this._pTechniqueToBlendMap[id])) {
                    return this._pTechniqueToBlendMap[id].getTotalPasses();
                } else {
                    return 0;
                }
            };
            Composer.prototype.addOwnComponentToTechnique = function (pRenderTechnique, pComponent, iShift, iPass) {
                var id = pRenderTechnique.getGuid();
                var pCurrentBlend = null;
                if (isDef(this._pTechniqueToOwnBlendMap[id])) {
                    pCurrentBlend = this._pTechniqueToOwnBlendMap[id];
                }
                var pNewBlend = this._pBlender.addComponentToBlend(pCurrentBlend, pComponent, iShift, iPass);
                if (isNull(pNewBlend)) {
                    return false;
                }
                this._pTechniqueToOwnBlendMap[id] = pNewBlend;
                this._pTechniqueNeedUpdateMap[id] = true;
                return true;
            };
            Composer.prototype.removeOwnComponentToTechnique = function (pRenderTechnique, pComponent, iShift, iPass) {
                var id = pRenderTechnique.getGuid();
                var pCurrentBlend = null;
                if (isDef(this._pTechniqueToOwnBlendMap[id])) {
                    pCurrentBlend = this._pTechniqueToOwnBlendMap[id];
                }
                var pNewBlend = this._pBlender.removeComponentFromBlend(pCurrentBlend, pComponent, iShift, iPass);
                if (isNull(pNewBlend)) {
                    return false;
                }
                this._pTechniqueToOwnBlendMap[id] = pNewBlend;
                this._pTechniqueNeedUpdateMap[id] = true;
                return true;
            };
            Composer.prototype.hasOwnComponentInTechnique = function (pRenderTechnique, pComponent, iShift, iPass) {
                var id = pRenderTechnique.getGuid();
                var pCurrentBlend = null;
                if (isDef(this._pTechniqueToOwnBlendMap[id])) {
                    pCurrentBlend = this._pTechniqueToOwnBlendMap[id];
                }
                if (isNull(pCurrentBlend)) {
                    return false;
                }
                return pCurrentBlend.containComponentWithShift(pComponent, iShift, iPass);
            };
            Composer.prototype.prepareTechniqueBlend = function (pRenderTechnique) {
                if (pRenderTechnique.isFreeze()) {
                    return true;
                }
                var id = pRenderTechnique.getGuid();
                var isTechniqueUpdate = !!(this._pTechniqueNeedUpdateMap[id]);
                var isUpdateGlobalBlend = (this._pGlobalComponentBlend !== this._pTechniqueLastGlobalBlendMap[id]);
                var isNeedToUpdatePasses = false;
                if (isTechniqueUpdate || isUpdateGlobalBlend) {
                    var iEffect = pRenderTechnique.getMethod().effect.resourceHandle;
                    var pEffectBlend = this._pEffectResourceToComponentBlendMap[iEffect] || null;
                    var pTechniqueBlend = this._pTechniqueToOwnBlendMap[id] || null;
                    var pNewBlend = null;
                    pNewBlend = this._pBlender.addBlendToBlend(this._pGlobalComponentBlend, pEffectBlend, 0);
                    pNewBlend = this._pBlender.addBlendToBlend(pNewBlend, pTechniqueBlend, 0);
                    if (this._pTechniqueToBlendMap[id] !== pNewBlend) {
                        isNeedToUpdatePasses = true;
                    }
                    this._pTechniqueToBlendMap[id] = pNewBlend;
                    this._pTechniqueNeedUpdateMap[id] = false;
                    this._pTechniqueLastGlobalBlendMap[id] = this._pGlobalComponentBlend;
                }
                var pBlend = this._pTechniqueToBlendMap[id];
                if (isDefAndNotNull(pBlend)) {
                    if (!pBlend.isReadyToUse()) {
                        isNeedToUpdatePasses = true;
                    }
                    if (!pBlend.finalizeBlend()) {
                        return false;
                    }
                    if (isNeedToUpdatePasses) {
                        pRenderTechnique.updatePasses(isTechniqueUpdate);
                    }
                } else {
                    return false;
                }
            };
            Composer.prototype.markTechniqueAsNeedUpdate = function (pRenderTechnique) {
                this._pTechniqueNeedUpdateMap[pRenderTechnique.getGuid()] = true;
            };
            Composer.prototype.getPassInputBlend = function (pRenderTechnique, iPass) {
                var id = pRenderTechnique.getGuid();
                if (!isDef(this._pTechniqueToBlendMap[id])) {
                    return null;
                }
                return this._pTechniqueToBlendMap[id].getPassInputForPass(iPass);
            };
            Composer.prototype.applyBufferMap = function (pMap) {
                this._pCurrentBufferMap = pMap;
                return true;
            };
            Composer.prototype.applySurfaceMaterial = function (pSurfaceMaterial) {
                this._pCurrentSurfaceMaterial = pSurfaceMaterial;
                return true;
            };
            return Composer;
        })();
        fx.Composer = Composer;        
        void {
            this: ,
            _pCurrentSceneObject:  = pSceneObject
        };
        inline;
        _setCurrentViewport(pViewport, IViewport);
        void {
            this: ,
            _pCurrentViewport:  = pViewport
        };
        inline;
        _setCurrentRenderableObject(pRenderable, IRenderableObject);
        void {
            this: ,
            _pCurrentRenderable:  = pRenderable
        };
        inline;
        _getCurrentSceneObject();
        ISceneObject;
 {
            return this._pCurrentSceneObject;
        }
        inline;
        _getCurrentViewport();
        IViewport;
 {
            return this._pCurrentViewport;
        }
        inline;
        _getCurrentRenderableObject();
        IRenderableObject;
 {
            return this._pCurrentRenderable;
        }
        renderTechniquePass(pRenderTechnique, IRenderTechnique, iPass, number);
        void {
            var: pPass,
            IRenderPass:  = pRenderTechnique.getPass(iPass)
        };
        var pPassInput = pPass.getPassInput();
        var pPassBlend = null;
        var pMaker = null;
        this.applySystemUnifoms(pPassInput);
        if (!pPassInput._isNeedToCalcShader()) {
        } else {
            if (!pPassInput._isNeedToCalcBlend()) {
                pPassBlend = this._pBlender.getPassBlendById(pPassInput._getLastPassBlendId());
            } else {
                var id = pRenderTechnique.getGuid();
                var pComponentBlend = this._pTechniqueToBlendMap[id];
                var pPassInstructionList = pComponentBlend.getPassListAtPass(iPass);
                if (!isNull(this._pCurrentRenderable)) {
                    if (render.isMeshSubset(this._pCurrentRenderable) && (this._pCurrentRenderable).isSkinned()) {
                        this._pComposerState.mesh.isSkinning = true;
                    } else {
                        this._pComposerState.mesh.isSkinning = false;
                    }
                }
                pPassBlend = this._pBlender.generatePassBlend(pPassInstructionList, this._pComposerState, pPassInput.foreigns, pPassInput.uniforms);
            }
            if (isNull(pPassBlend)) {
 {
                    logger.setSourceLocation("fx/Composer.ts", 465);
                    logger.error("Could not render. Error with generation pass-blend.");
                }
                ;
                return;
            }
            pMaker = pPassBlend.generateFXMaker(pPassInput, this._pCurrentSurfaceMaterial, this._pCurrentBufferMap);
        }
        var pInput = pMaker._make(pPassInput, this._pCurrentBufferMap);
        var pRenderer = this._pEngine.getRenderer();
        var pEntry = pRenderer.createEntry();
        pEntry.maker = pMaker;
        pEntry.input = pInput;
        pEntry.viewport = this._pCurrentViewport;
        pEntry.bufferMap = this._pCurrentBufferMap;
        if (pRenderTechnique.hasGlobalPostEffect()) {
            if (!pRenderTechnique.isFirstPass(iPass)) {
                pRenderer._setDepthBufferParams(false, false, 0);
                pRenderer._setRenderTarget(this._pRenderTargetA);
                pRenderer.clearFrameBuffer(EFrameBufferTypes.COLOR | EFrameBufferTypes.DEPTH, Color.ZERO, 1., 0);
                if (pEntry.viewport.getClearEveryFrame()) {
                    var pViewportState = pEntry.viewport._getViewportState();
                    pRenderer.clearFrameBuffer(pViewportState.clearBuffers, pViewportState.clearColor, pViewportState.clearDepth, 0);
                }
            }
            if (pEntry.viewport.actualWidth > this._pRenderTargetA.width || pEntry.viewport.actualHeight > this._pRenderTargetA.height) {
                this.resizePostEffectTextures(pEntry.viewport.actualWidth, pEntry.viewport.actualHeight);
            }
            if (!pRenderTechnique.isPostEffectPass(iPass)) {
                this._pLastRenderTarget = this._pRenderTargetA;
                pEntry.renderTarget = this._pRenderTargetA;
            } else {
                if (pRenderTechnique.isLastPass(iPass)) {
                    this._pLastRenderTarget = null;
                } else {
                    if (this._pLastRenderTarget === this._pRenderTargetA) {
                        pEntry.renderTarget = this._pRenderTargetB;
                        this._pLastRenderTarget = this._pRenderTargetB;
                    } else {
                        pEntry.renderTarget = this._pRenderTargetA;
                        this._pLastRenderTarget = this._pRenderTargetA;
                    }
                }
            }
        }
        pRenderer.pushEntry(pEntry);
    })(akra.fx || (akra.fx = {}));
    var fx = akra.fx;
})(akra || (akra = {}));
_loadEffectFromSyntaxTree(pTree, IParseTree, sFileName, string);
bool;
 {
    var pEffect = new fx.Effect(this);
    pEffect.setAnalyzedFileName(sFileName);
    var isOk = pEffect.analyze(pTree);
    if (isOk) {
        var pTechniqueList = pEffect.getTechniqueList();
        for(var i = 0; i < pTechniqueList.length; i++) {
            isOk = this.initComponent(pTechniqueList[i]);
            if (!isOk) {
 {
                    logger.setSourceLocation("fx/Composer.ts", 556);
                    logger.warning("Cannot initialize fx-component from technique '" + pTechniqueList[i].getName() + "'.");
                }
                ;
                return false;
            }
        }
    } else {
 {
            logger.setSourceLocation("fx/Composer.ts", 562);
            logger.warning("Error are occured during analyze of effect file '" + sFileName + "'.");
        }
        ;
        return false;
    }
    return true;
}
_loadEffectFromBinary(pData, Uint8Array, sFileName, string);
bool;
 {
    return false;
}
initComponent(pTechnique, IAFXTechniqueInstruction);
bool;
 {
    var sTechniqueName = pTechnique.getName();
    var pComponentPool = this._pEngine.getResourceManager().componentPool;
    if (!isNull(pComponentPool.findResource(sTechniqueName))) {
        return false;
    }
    var pComponent = pComponentPool.createResource(sTechniqueName);
    pComponent.create();
    pComponent.setTechnique(pTechnique);
    return true;
}
clearPreRenderState();
void {};
applySystemUnifoms(pPassInput, IAFXPassInputBlend);
void {
    var: pSceneObject,
    ISceneObject:  = this._getCurrentSceneObject()
};
var pViewport = this._getCurrentViewport();
var pRenderable = this._getCurrentRenderableObject();
if (!isNull(pSceneObject)) {
    pPassInput.setUniform("MODEL_MATRIX", pSceneObject.worldMatrix);
}
if (!isNull(pViewport)) {
    var pCamera = pViewport.getCamera();
    pPassInput.setUniform("VIEW_MATRIX", pCamera.viewMatrix);
    pPassInput.setUniform("PROJ_MATRIX", pCamera.projectionMatrix);
    pPassInput.setUniform("INV_VIEW_CAMERA_MAT", pCamera.worldMatrix);
    pPassInput.setUniform("CAMERA_POSITION", pCamera.worldPosition);
    if (pCamera.type === EEntityTypes.SHADOW_CASTER) {
        pPassInput.setUniform("OPTIMIZED_PROJ_MATRIX", (pCamera).optimizedProjection);
    }
}
if (!isNull(pRenderable)) {
    if (render.isMeshSubset(pRenderable) && (pRenderable).isSkinned()) {
        pPassInput.setUniform("BIND_SHAPE_MATRIX", (pRenderable).skin.getBindMatrix());
    }
    pPassInput.setUniform("RENDER_OBJECT_ID", pRenderable.getGuid());
}
if (!isNull(this._pLastRenderTarget)) {
    var pLastTexture = this._pLastRenderTarget === this._pRenderTargetA ? this._pPostEffectTextureA : this._pPostEffectTextureB;
    pPassInput.setTexture("INPUT_TEXTURE", pLastTexture);
    pPassInput.setSamplerTexture("INPUT_SAMPLER", pLastTexture);
    pPassInput.setUniform("INPUT_TEXTURE_SIZE", vec2(pLastTexture.width, pLastTexture.height));
    pPassInput.setUniform("INPUT_TEXTURE_RATIO", vec2(this._pCurrentViewport.actualWidth / pLastTexture.width, this._pCurrentViewport.actualHeight / pLastTexture.height));
}
initPostEffectTextures();
void {
    var: pRmgr,
    IResourcePoolManager:  = this._pEngine.getResourceManager()
};
this._pPostEffectTextureA = pRmgr.createTexture(".global-post-effect-texture-A");
this._pPostEffectTextureB = pRmgr.createTexture(".global-post-effect-texture-B");
this._pPostEffectTextureA.create(512, 512, 1, null, ETextureFlags.RENDERTARGET, 0, 0, ETextureTypes.TEXTURE_2D, EPixelFormats.R8G8B8A8);
this._pPostEffectTextureB.create(512, 512, 1, null, ETextureFlags.RENDERTARGET, 0, 0, ETextureTypes.TEXTURE_2D, EPixelFormats.R8G8B8A8);
this._pRenderTargetA = this._pPostEffectTextureA.getBuffer().getRenderTarget();
this._pRenderTargetB = this._pPostEffectTextureB.getBuffer().getRenderTarget();
this._pPostEffectDepthBuffer = pRmgr.renderBufferPool.createResource(".global-post-effect-depth");
(this._pPostEffectDepthBuffer).create(0x1902, 512, 512, false);
this._pRenderTargetA.attachDepthPixelBuffer(this._pPostEffectDepthBuffer);
resizePostEffectTextures(iWidth, number, iHeight, number);
void {
    iWidth:  = math.ceilingPowerOfTwo(iWidth),
    iHeight:  = math.ceilingPowerOfTwo(iHeight)
};
this._pPostEffectTextureA.reset(iWidth, iHeight);
this._pPostEffectTextureB.reset(iWidth, iHeight);
var akra;
(function (akra) {
    var DDSCodec = (function (_super) {
        __extends(DDSCodec, _super);
        function DDSCodec() {
            _super.apply(this, arguments);

            this._sType = "dds";
        }
        DDSCodec._pInstance = null;
        DDSCodec.prototype.magicNumberToFileExt = function (pMagicNumber) {
            var dwMagic4 = (new Uint32Array(pMagicNumber.buffer, 0, 1))[0];
            if (0x20534444 == dwMagic4) {
                return "dds";
            }
            return null;
        };
        DDSCodec.startup = function startup() {
            if (!isDefAndNotNull(this._pInstance)) {
 {
                    logger.setSourceLocation("pixelUtil/DDSCodec.ts", 163);
                    logger.log("DDS codec registering");
                }
                ;
                this._pInstance = new DDSCodec();
                Codec.registerCodec(this._pInstance);
            }
        };
        DDSCodec.shutdown = function shutdown() {
            if (isDef(this._pInstance)) {
                Codec.unRegisterCodec(this._pInstance);
                this._pInstance = undefined;
            }
        };
        DDSCodec.prototype.getType = function () {
            return this._sType;
        };
        DDSCodec.prototype.decode = function (pData, pImgData) {
            var iOffset = 0;
            var dwMagic4 = (new Uint32Array(pData.buffer, 0, 1))[0];
            if (dwMagic4 != 0x20534444) {
 {
                    logger.setSourceLocation("pixelUtil/DDSCodec.ts", 189);
                    logger.criticalError("This is not a DDS file! DDSCodec.decode");
                }
                ;
            }
            var pDDSHeader = new Uint32Array(pData.buffer, 4, 31);
            var pHeader = {};
            pHeader.dwSize = pDDSHeader[0];
            pHeader.dwFlags = pDDSHeader[1];
            pHeader.dwHeight = pDDSHeader[2];
            pHeader.dwWidth = pDDSHeader[3];
            pHeader.dwPitchOrLinearSize = pDDSHeader[4];
            pHeader.dwDepth = pDDSHeader[5];
            pHeader.dwMipMapCount = pDDSHeader[6];
            pHeader.dwReserved1 = [];
            pHeader.dwReserved1[0] = pDDSHeader[7];
            pHeader.dwReserved1[1] = pDDSHeader[8];
            pHeader.dwReserved1[2] = pDDSHeader[9];
            pHeader.dwReserved1[3] = pDDSHeader[10];
            pHeader.dwReserved1[4] = pDDSHeader[11];
            pHeader.dwReserved1[5] = pDDSHeader[12];
            pHeader.dwReserved1[6] = pDDSHeader[13];
            pHeader.dwReserved1[7] = pDDSHeader[14];
            pHeader.dwReserved1[8] = pDDSHeader[15];
            pHeader.dwReserved1[9] = pDDSHeader[16];
            pHeader.dwReserved1[10] = pDDSHeader[17];
            pHeader.ddspf = {};
            pHeader.ddspf.dwSize = pDDSHeader[18];
            pHeader.ddspf.dwFlags = pDDSHeader[19];
            pHeader.ddspf.dwFourCC = pDDSHeader[20];
            pHeader.ddspf.dwRGBBitCount = pDDSHeader[21];
            pHeader.ddspf.dwRBitMask = pDDSHeader[22];
            pHeader.ddspf.dwGBitMask = pDDSHeader[23];
            pHeader.ddspf.dwBBitMask = pDDSHeader[24];
            pHeader.ddspf.dwABitMask = pDDSHeader[25];
            pHeader.dwCaps = pDDSHeader[26];
            pHeader.dwCaps2 = pDDSHeader[27];
            pHeader.dwCaps3 = pDDSHeader[28];
            pHeader.dwCaps4 = pDDSHeader[29];
            pHeader.dwReserved2 = pDDSHeader[30];
            iOffset += 128;
            if (pHeader.dwSize != 124) {
 {
                    logger.setSourceLocation("pixelUtil/DDSCodec.ts", 258);
                    logger.error("Размер заголовка DDS всегда должэен равняться 124");
                }
                ;
            }
            if (pHeader.ddspf.dwSize != 32) {
 {
                    logger.setSourceLocation("pixelUtil/DDSCodec.ts", 261);
                    logger.error("Размер DDS_PIXELFORMAT всегда должен равняться 32");
                }
                ;
            }
            if (!(pHeader.dwFlags & 0x00000001)) {
 {
                    logger.setSourceLocation("pixelUtil/DDSCodec.ts", 264);
                    logger.error("Флаг DDSD_CAPS в заголовке DDS всегда должен быть");
                }
                ;
            }
            if (!(pHeader.dwFlags & 0x00000002)) {
 {
                    logger.setSourceLocation("pixelUtil/DDSCodec.ts", 267);
                    logger.error("Флаг DDSD_HEIGHT в заголовке DDS всегда должен быть");
                }
                ;
            }
            if (!(pHeader.dwFlags & 0x00000004)) {
 {
                    logger.setSourceLocation("pixelUtil/DDSCodec.ts", 270);
                    logger.error("Флаг DDSD_WIDTH в заголовке DDS всегда должен быть");
                }
                ;
            }
            if (!(pHeader.dwFlags & 0x00001000)) {
 {
                    logger.setSourceLocation("pixelUtil/DDSCodec.ts", 273);
                    logger.error("Флаг DDSD_PIXELFORMAT в заголовке DDS всегда должен быть");
                }
                ;
            }
            pImgData.width = pHeader.dwWidth;
            pImgData.height = pHeader.dwHeight;
            pImgData.depth = 1;
            var nFace = 1;
            pImgData.flags = 0;
            if (pHeader.dwCaps2 & 0x200) {
                pImgData.flags |= EImageFlags.CUBEMAP;
                nFace = 0;
                if (pHeader.dwCaps2 & 0x400) {
                    nFace++;
                    pImgData.cubeFlags |= EImageCubeFlags.POSITIVE_X;
                }
                if (pHeader.dwCaps2 & 0x800) {
                    nFace++;
                    pImgData.cubeFlags |= EImageCubeFlags.NEGATIVE_X;
                }
                if (pHeader.dwCaps2 & 0x1000) {
                    nFace++;
                    pImgData.cubeFlags |= EImageCubeFlags.POSITIVE_Y;
                }
                if (pHeader.dwCaps2 & 0x2000) {
                    nFace++;
                    pImgData.cubeFlags |= EImageCubeFlags.NEGATIVE_Y;
                }
                if (pHeader.dwCaps2 & 0x4000) {
                    nFace++;
                    pImgData.cubeFlags |= EImageCubeFlags.POSITIVE_Z;
                }
                if (pHeader.dwCaps2 & 0x8000) {
                    nFace++;
                    pImgData.cubeFlags |= EImageCubeFlags.NEGATIVE_Z;
                }
                if (nFace == 0) {
 {
                        logger.setSourceLocation("pixelUtil/DDSCodec.ts", 313);
                        logger.warning("Выставлен фдлаг с кубической текстурой, а самих текстур нету");
                    }
                    ;
                }
            }
            if (pHeader.dwCaps2 & 0x200000) {
                pImgData.flags |= EImageFlags.TEXTURE_3D;
                pImgData.depth = pHeader.dwDepth;
            }
            var eSourceFormat = EPixelFormats.UNKNOWN;
            if (pHeader.ddspf.dwFlags & 0x00000004) {
                if (pHeader.ddspf.dwFourCC == 0x31545844) {
                    eSourceFormat = EPixelFormats.DXT1;
                } else if (pHeader.ddspf.dwFourCC == 0x32545844) {
                    eSourceFormat = EPixelFormats.DXT1;
                } else if (pHeader.ddspf.dwFourCC == 0x33545844) {
                    eSourceFormat = EPixelFormats.DXT3;
                } else if (pHeader.ddspf.dwFourCC == 0x34545844) {
                    eSourceFormat = EPixelFormats.DXT4;
                } else if (pHeader.ddspf.dwFourCC == 0x35545844) {
                    eSourceFormat = EPixelFormats.DXT5;
                } else if (pHeader.ddspf.dwFourCC == 0x30315844) {
                    var pDDS10Header = new Uint32Array(pData.buffer, 128, 5);
                    var header10 = {};
                    header10.dxgiFormat = pDDS10Header[0];
                    header10.resourceDimension = pDDS10Header[1];
                    header10.miscFlag = pDDS10Header[2];
                    header10.arraySize = pDDS10Header[3];
                    header10.reserved = pDDS10Header[4];
 {
                        logger.setSourceLocation("pixelUtil/DDSCodec.ts", 350);
                        logger.criticalError("Формат D3DFMT_DX10 не поддерживается");
                    }
                    ;
                    iOffset += 20;
                } else if (pHeader.ddspf.dwFourCC == 0x0000006F) {
                    eSourceFormat = EPixelFormats.FLOAT16_R;
                } else if (pHeader.ddspf.dwFourCC == 0x00000070) {
                    eSourceFormat = EPixelFormats.FLOAT16_GR;
                } else if (pHeader.ddspf.dwFourCC == 0x00000071) {
                    eSourceFormat = EPixelFormats.FLOAT16_RGBA;
                } else if (pHeader.ddspf.dwFourCC == 0x00000072) {
                    eSourceFormat = EPixelFormats.FLOAT32_R;
                } else if (pHeader.ddspf.dwFourCC == 0x00000073) {
                    eSourceFormat = EPixelFormats.FLOAT32_GR;
                } else if (pHeader.ddspf.dwFourCC == 0x00000074) {
                    eSourceFormat = EPixelFormats.FLOAT32_RGBA;
                } else {
 {
                        logger.setSourceLocation("pixelUtil/DDSCodec.ts", 390);
                        logger.criticalError("Флаг DDPF_FOURCC стоит, а подходящего dwFourCC нет");
                    }
                    ;
                }
            } else {
                var iAMask = pHeader.ddspf.dwFlags & 0x00000001 ? pHeader.ddspf.dwABitMask : 0;
                var ePF;
                for(ePF = EPixelFormats.UNKNOWN + 1; ePF < EPixelFormats.TOTAL; ePF++) {
                    if ((!!(pHeader.ddspf.dwFlags & 0x00020000)) != pixelUtil.isLuminance(ePF)) {
                        continue;
                    }
                    if ((!!(pHeader.ddspf.dwFlags & 0x00000001)) != pixelUtil.hasAlpha(ePF)) {
                        continue;
                    }
                    if (pixelUtil.getNumElemBits(ePF) == pHeader.ddspf.dwRGBBitCount) {
                        var pTestMasks = pixelUtil.getBitMasks(ePF);
                        var pTestBits = pixelUtil.getBitDepths(ePF);
                        if (pTestMasks[0] == pHeader.ddspf.dwRBitMask && pTestMasks[1] == pHeader.ddspf.dwGBitMask && pTestMasks[2] == pHeader.ddspf.dwBBitMask && (pTestMasks[3] == iAMask || (iAMask == 0 && pTestBits[3] == 0))) {
                            break;
                        }
                    }
                }
                if (ePF == EPixelFormats.TOTAL) {
 {
                        logger.setSourceLocation("pixelUtil/DDSCodec.ts", 429);
                        logger.criticalError("Cannot determine pixel format. DDSCodec.decode");
                    }
                    ;
                } else {
                    eSourceFormat = ePF;
                }
            }
            pImgData.format = eSourceFormat;
            if (pHeader.dwFlags & 0x00020000) {
                pImgData.numMipMaps = pHeader.dwMipMapCount - 1;
                if (pImgData.numMipMaps != core.pool.resources.Img.getMaxMipmaps(pImgData.width, pImgData.height, pImgData.depth, pImgData.format)) {
 {
                        logger.setSourceLocation("pixelUtil/DDSCodec.ts", 459);
                        logger.warning("Количество мипмапов не такое чтобы уменьшить размер картинки до 1x1 " + pHeader.dwMipMapCount + "," + pHeader.dwWidth + "x" + pHeader.dwHeight + ")");
                    }
                    ;
                }
            } else {
                pImgData.numMipMaps = 0;
            }
            var pOutput = new Uint8Array(pImgData.size);
            var iOutputOffset = 0;
            for(var i = 0; i < nFace; i++) {
                var iWidth = pImgData.width;
                var iHeight = pImgData.height;
                var iDepth = pImgData.depth;
                for(var iMip = 0; iMip <= pImgData.numMipMaps; iMip++) {
                    if (pixelUtil.isCompressed(pImgData.format)) {
                        var iDXTSize = pixelUtil.getMemorySize(iWidth, iHeight, iDepth, pImgData.format);
                        for(var a = 0; a < iDXTSize; a++) {
                            pOutput[a + iOutputOffset] = pData[iOffset + a];
                        }
                        iOffset += iDXTSize;
                        iOutputOffset += iDXTSize;
                    } else {
                        var iDstPitch = iWidth * pixelUtil.getNumElemBytes(pImgData.format);
                        var iSrcPitch = 0;
                        if (pHeader.dwFlags & 0x00000008) {
                            iSrcPitch = pHeader.dwPitchOrLinearSize / Math.max(1, iMip * 2);
                        } else {
                            iSrcPitch = iDstPitch;
                        }
                        if (iSrcPitch < iDstPitch) {
 {
                                logger.setSourceLocation("pixelUtil/DDSCodec.ts", 506);
                                logger.warning("Странный размер питча у картинки");
                            }
                        }
                        for(var z = 0; z < pImgData.depth; z++) {
                            for(var y = 0; y < pImgData.height; y++) {
                                for(var a = 0; a < iDstPitch; a++) {
                                    pOutput[a + iOutputOffset] = pData[iOffset + a];
                                }
                                iOutputOffset = iOutputOffset + iDstPitch;
                                iOffset = iOffset + iSrcPitch;
                            }
                        }
                    }
                    if (iWidth != 1) {
                        iWidth = Math.floor(iWidth / 2);
                    }
                    if (iHeight != 1) {
                        iHeight = Math.floor(iHeight / 2);
                    }
                    if (iDepth != 1) {
                        iDepth = Math.floor(iDepth / 2);
                    }
                }
            }
            return pOutput;
        };
        return DDSCodec;
    })(ImgCodec);
    akra.DDSCodec = DDSCodec;    
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (util) {
        (function (EDepsManagerStates) {
            EDepsManagerStates._map = [];
            EDepsManagerStates._map[0] = "IDLE";
            EDepsManagerStates.IDLE = 0;
            EDepsManagerStates._map[1] = "LOADING";
            EDepsManagerStates.LOADING = 1;
        })(util.EDepsManagerStates || (util.EDepsManagerStates = {}));
        var EDepsManagerStates = util.EDepsManagerStates;
        var DepsManager = (function () {
            function DepsManager(pEngine) {
                this._eState = EDepsManagerStates.IDLE;
                this.inline = getEngine();
                this.IEngine = {
                    return: this._pEngine
                };
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.inline = getEventTable();
                this.IEventTable = {
                    return: DepsManager._pEventTable
                };
                this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = _syncTable(pFrom, IEventProvider);
                this._pEngine = pEngine;
            }
            DepsManager.prototype.load = function (pDeps, sRoot) {
                if (typeof sRoot === "undefined") { sRoot = null; }
                if (!isDefAndNotNull(pDeps)) {
                    return false;
                }
                if (this._eState === EDepsManagerStates.LOADING) {
 {
                        logger.setSourceLocation("util/DepsManager.ts", 33);
                        logger.warning("deps manager in loading state");
                    }
                    ;
                    return false;
                }
                this.normalizeDepsPaths(pDeps, pDeps.root || sRoot);
                this.createDepsResources(pDeps);
                this.loadDeps(pDeps);
                return true;
            };
            DepsManager.prototype.walk = function (pDeps, fn, iDepth) {
                if (typeof iDepth === "undefined") { iDepth = 0; }
                var pFiles = pDeps.files;
                if (isDefAndNotNull(pFiles)) {
                    for(var i = 0; i < pFiles.length; ++i) {
                        fn.call(this, pDeps, i, iDepth);
                    }
                }
                if (isDefAndNotNull(pDeps.deps)) {
                    this.walk(pDeps.deps, fn, ++iDepth);
                }
            };
            DepsManager.prototype.normalizeDepsPaths = function (pDeps, sRoot) {
                this.walk(pDeps, function (pDeps, i) {
                    pDeps.files[i] = (sRoot || "") + "/" + pDeps.files[i];
                });
            };
            DepsManager.prototype.createDepsResources = function (pDeps) {
                var pRmgr = this.getEngine().getResourceManager();
                this.walk(pDeps, function (pDeps, i) {
                    var pFiles = pDeps.files;
                    switch(pathinfo(pFiles[i]).ext.toLowerCase()) {
                        case "afx":
                            if (!pRmgr.effectDataPool.findResource(pFiles[i])) {
                                pRmgr.effectDataPool.createResource(pFiles[i]);
                            }
                            break;
                    }
                });
            };
            DepsManager.prototype.loadDeps = function (pDeps) {
                var _this = this;
                var pRmgr = this.getEngine().getResourceManager();
                var pRes;
                if (!isArray(pDeps.files) || pDeps.files.length === 0) {
                    this._onDependencyLoad(pDeps);
                }
                this.walk({
                    files: pDeps.files
                }, function (pDep, i) {
                    var pFiles = pDeps.files;
                    var pManager = _this;
                    if (isDefAndNotNull(pDep.type)) {
                        if (pDep.type == "text" && isFunction(pDep.loader)) {
                            io.fopen(pFiles[i], "r").read(function (pErr, sData) {
                                if (!isNull(pErr)) {
                                    pManager.error(pErr);
                                }
                                pDep.loader(pDep, sData);
                                pManager._onDependencyLoad(pDeps, i);
                            });
                        }
                    }
                    switch(pathinfo(pFiles[i]).ext.toLowerCase()) {
                        case "gr":
                            io.fopen(pFiles[i], "r").read(function (pErr, sData) {
                                if (!isNull(pErr)) {
                                    pManager.error(pErr);
                                }
                                util.initAFXParser(sData);
                                pManager._onDependencyLoad(pDeps, i);
                            });
                            break;
                        case "afx":
                            pRes = pRmgr.effectDataPool.findResource(pFiles[i]);
                            if (pRes.loadResource(pFiles[i])) {
                                pManager._handleResourceEventOnce(pRes, "loaded", function (pItem) {
                                    pManager._onDependencyLoad(pDeps, i);
                                });
                            } else {
                                _this.error(new Error("could not laod resource: " + pFiles[i]));
                            }
                            break;
                        default:
 {
                                logger.setSourceLocation("util/DepsManager.ts", 138);
                                logger.warning("dependence " + pFiles[i] + " unknown, and will be skipped.");
                            }
                            ;
                    }
                });
            };
            DepsManager.prototype._handleResourceEventOnce = function (pRsc, sSignal, fnHandler) {
                var fn;
                fn = function (pItem) {
                    fnHandler(pItem);
                    pRsc.unbind(sSignal, fn);
                };
                pRsc.bind(sSignal, fn);
            };
            DepsManager.prototype._onDependencyLoad = function (pDeps, n) {
                if (isDef(n)) {
                    pDeps.files[n] = null;
                }
                for(var i = 0; i < pDeps.files.length; ++i) {
                    if (!isNull(pDeps.files[i])) {
                        return;
                    }
                }
                ;
                if (isDefAndNotNull(pDeps.deps)) {
                    this.loadDeps(pDeps.deps);
                } else {
                    this.loaded(pDeps);
                }
            };
            DepsManager._pEventTable = new events.EventTable();
            return DepsManager;
        })();        
        void {
            this: ,
            getEventTable: ._sync(this, pFrom)
        };
        loaded(deps);
        void {
            this: ,
            _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
        };
        var _broadcast = (this._pBroadcastSlotList).loaded;
        var _recivier = this;
        if (isDef(_broadcast)) {
            for(var i = 0; i < _broadcast.length; ++i) {
                _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, deps) : _broadcast[i].listener(_recivier, deps);
            }
        }
    })(akra.util || (akra.util = {}));
    var util = akra.util;
})(akra || (akra = {}));
;
;
error(pErr, Error);
void {
    if: (true)
};
throw pErr;
this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
var _broadcast = (this._pBroadcastSlotList).error;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pErr) : _broadcast[i].listener(_recivier, pErr);
    }
}
;
function createDepsManager(pEngine) {
 {
        logger.setSourceLocation("util/DepsManager.ts", 190);
        logger.assert(isDefAndNotNull(pEngine));
    }
    ;
    return new DepsManager(pEngine);
}
exports.createDepsManager = createDepsManager;
var akra;
(function (akra) {
    (function (EGamepadCodes) {
        EGamepadCodes._map = [];
        EGamepadCodes.FACE_1 = 0;
        EGamepadCodes.FACE_2 = 1;
        EGamepadCodes.FACE_3 = 2;
        EGamepadCodes.FACE_4 = 3;
        EGamepadCodes.LEFT_SHOULDER = 4;
        EGamepadCodes.RIGHT_SHOULDER = 5;
        EGamepadCodes.LEFT_SHOULDER_BOTTOM = 6;
        EGamepadCodes.RIGHT_SHOULDER_BOTTOM = 7;
        EGamepadCodes.SELECT = 8;
        EGamepadCodes.START = 9;
        EGamepadCodes.LEFT_ANALOGUE_STICK = 10;
        EGamepadCodes.RIGHT_ANALOGUE_STICK = 11;
        EGamepadCodes.PAD_TOP = 12;
        EGamepadCodes.PAD_BOTTOM = 13;
        EGamepadCodes.PAD_LEFT = 14;
        EGamepadCodes.PAD_RIGHT = 15;
    })(akra.EGamepadCodes || (akra.EGamepadCodes = {}));
    var EGamepadCodes = akra.EGamepadCodes;
    (function (EGamepadAxis) {
        EGamepadAxis._map = [];
        EGamepadAxis.LEFT_ANALOGUE_HOR = 0;
        EGamepadAxis.LEFT_ANALOGUE_VERT = 1;
        EGamepadAxis.RIGHT_ANALOGUE_HOR = 2;
        EGamepadAxis.RIGHT_ANALOGUE_VERT = 3;
    })(akra.EGamepadAxis || (akra.EGamepadAxis = {}));
    var EGamepadAxis = akra.EGamepadAxis;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (controls) {
        var GamepadMap = (function () {
            function GamepadMap() {
                this._bTicking = false;
                this._pCollection = new util.ObjectArray();
                this._pPrevRawGamepadTypes = [
                    null, 
                    null, 
                    null, 
                    null
                ];
                this._pPrevTimestamps = [
                    0, 
                    0, 
                    0, 
                    0
                ];
                this.inline = isActive();
                this.bool = {
                    return: this._bTicking
                };
                this.inline = _startPolling();
            }
            GamepadMap.prototype.init = function () {
                if (!info.api.gamepad) {
 {
                        logger.setSourceLocation("controls/GamepadMap.ts", 21);
                        logger.warning("Gamepad API is unsupported.");
                    }
                    ;
                    return false;
                }
                var pMap = this;
                var pCollection = this._pCollection;
                window.addEventListener('MozGamepadConnected', function (e) {
                    pCollection.push(e.gamepad);
                    pMap.connected(e.gamepad);
                    pMap._startPolling();
                }, false);
                window.addEventListener('MozGamepadDisconnected', function (e) {
                    for(var i = 0; i < pCollection.length; ++i) {
                        if (pCollection.value(i).index == e.gamepad.index) {
                            pMap.disconnected(pCollection.takeAt(i));
                            break;
                        }
                    }
                    if (pCollection.length == 0) {
                        pMap._stopPolling();
                    }
                }, false);
                if (!!navigator.gamepads || !!navigator.getGamepads) {
                    this._startPolling();
                    return true;
                }
                return false;
            };
            GamepadMap.prototype.find = function (id) {
                var sID = null;
                var i = 0;
                if (arguments.length) {
                    if (isString(arguments[0])) {
                        sID = arguments[0];
                    } else if (isInt(arguments[0])) {
                        i = arguments[0];
                    }
                }
                if (!isNull(sID)) {
                    for(i = 0; i < this._pCollection.length; ++i) {
                        if (this._pCollection.value(i).id == sID) {
                            return this._pCollection.value(i);
                        }
                    }
                }
                return this._pCollection.value(i);
            };
            return GamepadMap;
        })();        
        void {
            if: (!this._bTicking)
        };
 {
            this._bTicking = true;
            this.update();
        }
    })(akra.controls || (akra.controls = {}));
    var controls = akra.controls;
})(akra || (akra = {}));
inline;
_stopPolling();
void {
    this: ,
    _bTicking:  = false
};
inline;
update();
void {
    this: ,
    pollStatus: 
};
pollStatus();
void {
    if: (!this._bTicking)
};
 {
    return;
}
this.pollGamepads();
for(var i = 0; i < this._pCollection.length; ++i) {
    var pGamepad = this._pCollection.value(i);
    if (pGamepad.timestamp && (pGamepad.timestamp == this._pPrevTimestamps[i])) {
        continue;
    }
    this._pPrevTimestamps[i] = pGamepad.timestamp;
}
pollGamepads();
void {
    var: pRawGamepads,
    Gamepad: [] = (navigator.getGamepads && navigator.getGamepads()) || navigator.gamepads
};
if (isDefAndNotNull(pRawGamepads)) {
    this._pCollection.clear();
    var isGamepadsChanged = false;
    for(var i = 0; i < pRawGamepads.length; i++) {
        if (typeof pRawGamepads[i] != this._pPrevRawGamepadTypes[i]) {
            isGamepadsChanged = true;
            this._pPrevRawGamepadTypes[i] = typeof pRawGamepads[i];
            if (isDefAndNotNull(pRawGamepads[i])) {
 {
                    logger.setSourceLocation("controls/GamepadMap.ts", 135);
                    logger.log("gamepad " + i + " updated: " + pRawGamepads[i].id);
                }
                ;
                this.updated(pRawGamepads[i]);
            }
        }
        if (isDefAndNotNull(pRawGamepads[i])) {
            this._pCollection.push(pRawGamepads[i]);
        }
    }
}
_iGuid:
number = sid()
inline;
getGuid();
number;
 {
    return this._iGuid;
}
_pUnicastSlotMap:
IEventSlotMap = null
_pBroadcastSlotList:
IEventSlotListMap = null
_pEventTable:
IEventTable = new events.EventTable()
inline;
getEventTable();
IEventTable;
 {
    return GamepadMap._pEventTable;
}
inline;
connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
;
inline;
disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
bool;
 {
    return pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType);
}
inline;
bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
bool;
 {
    return this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType);
}
inline;
_syncTable(pFrom, IEventProvider);
void {
    this: ,
    getEventTable: ._sync(this, pFrom)
};
connected(pGamepad);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).connected;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pGamepad) : _broadcast[i].listener(_recivier, pGamepad);
    }
}
;
;
disconnected(pGamepad);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).disconnected;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pGamepad) : _broadcast[i].listener(_recivier, pGamepad);
    }
}
;
;
updated(pGamepad);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).updated;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pGamepad) : _broadcast[i].listener(_recivier, pGamepad);
    }
}
;
;
function createGamepadMap() {
    return new GamepadMap();
}
exports.createGamepadMap = createGamepadMap;
var akra;
(function (akra) {
    (function (EKeyCodes) {
        EKeyCodes._map = [];
        EKeyCodes.BACKSPACE = 8;
        EKeyCodes.TAB = 9;
        EKeyCodes.ENTER = 13;
        EKeyCodes.SHIFT = 16;
        EKeyCodes._map[17] = "CTRL";
        EKeyCodes.CTRL = 17;
        EKeyCodes._map[18] = "ALT";
        EKeyCodes.ALT = 18;
        EKeyCodes.PAUSE = 19;
        EKeyCodes.BREAK = 19;
        EKeyCodes.CAPSLOCK = 20;
        EKeyCodes.ESCAPE = 27;
        EKeyCodes.SPACE = 32;
        EKeyCodes.PAGEUP = 33;
        EKeyCodes._map[34] = "PAGEDOWN";
        EKeyCodes.PAGEDOWN = 34;
        EKeyCodes.END = 35;
        EKeyCodes._map[36] = "HOME";
        EKeyCodes.HOME = 36;
        EKeyCodes.LEFT = 37;
        EKeyCodes._map[38] = "UP";
        EKeyCodes.UP = 38;
        EKeyCodes._map[39] = "RIGHT";
        EKeyCodes.RIGHT = 39;
        EKeyCodes._map[40] = "DOWN";
        EKeyCodes.DOWN = 40;
        EKeyCodes.INSERT = 45;
        EKeyCodes._map[46] = "DELETE";
        EKeyCodes.DELETE = 46;
        EKeyCodes.N0 = 48;
        EKeyCodes._map[49] = "N1";
        EKeyCodes.N1 = 49;
        EKeyCodes._map[50] = "N2";
        EKeyCodes.N2 = 50;
        EKeyCodes._map[51] = "N3";
        EKeyCodes.N3 = 51;
        EKeyCodes._map[52] = "N4";
        EKeyCodes.N4 = 52;
        EKeyCodes._map[53] = "N5";
        EKeyCodes.N5 = 53;
        EKeyCodes._map[54] = "N6";
        EKeyCodes.N6 = 54;
        EKeyCodes._map[55] = "N7";
        EKeyCodes.N7 = 55;
        EKeyCodes._map[56] = "N8";
        EKeyCodes.N8 = 56;
        EKeyCodes._map[57] = "N9";
        EKeyCodes.N9 = 57;
        EKeyCodes.A = 65;
        EKeyCodes._map[66] = "B";
        EKeyCodes.B = 66;
        EKeyCodes._map[67] = "C";
        EKeyCodes.C = 67;
        EKeyCodes._map[68] = "D";
        EKeyCodes.D = 68;
        EKeyCodes._map[69] = "E";
        EKeyCodes.E = 69;
        EKeyCodes._map[70] = "F";
        EKeyCodes.F = 70;
        EKeyCodes._map[71] = "G";
        EKeyCodes.G = 71;
        EKeyCodes._map[72] = "H";
        EKeyCodes.H = 72;
        EKeyCodes._map[73] = "I";
        EKeyCodes.I = 73;
        EKeyCodes._map[74] = "J";
        EKeyCodes.J = 74;
        EKeyCodes._map[75] = "K";
        EKeyCodes.K = 75;
        EKeyCodes._map[76] = "L";
        EKeyCodes.L = 76;
        EKeyCodes._map[77] = "M";
        EKeyCodes.M = 77;
        EKeyCodes._map[78] = "N";
        EKeyCodes.N = 78;
        EKeyCodes._map[79] = "O";
        EKeyCodes.O = 79;
        EKeyCodes._map[80] = "P";
        EKeyCodes.P = 80;
        EKeyCodes._map[81] = "Q";
        EKeyCodes.Q = 81;
        EKeyCodes._map[82] = "R";
        EKeyCodes.R = 82;
        EKeyCodes._map[83] = "S";
        EKeyCodes.S = 83;
        EKeyCodes._map[84] = "T";
        EKeyCodes.T = 84;
        EKeyCodes._map[85] = "U";
        EKeyCodes.U = 85;
        EKeyCodes._map[86] = "V";
        EKeyCodes.V = 86;
        EKeyCodes._map[87] = "W";
        EKeyCodes.W = 87;
        EKeyCodes._map[88] = "X";
        EKeyCodes.X = 88;
        EKeyCodes._map[89] = "Y";
        EKeyCodes.Y = 89;
        EKeyCodes._map[90] = "Z";
        EKeyCodes.Z = 90;
        EKeyCodes.LEFTWINDOWKEY = 91;
        EKeyCodes._map[92] = "RIGHTWINDOWKEY";
        EKeyCodes.RIGHTWINDOWKEY = 92;
        EKeyCodes._map[93] = "SELECTKEY";
        EKeyCodes.SELECTKEY = 93;
        EKeyCodes.NUMPAD0 = 96;
        EKeyCodes._map[97] = "NUMPAD1";
        EKeyCodes.NUMPAD1 = 97;
        EKeyCodes._map[98] = "NUMPAD2";
        EKeyCodes.NUMPAD2 = 98;
        EKeyCodes._map[99] = "NUMPAD3";
        EKeyCodes.NUMPAD3 = 99;
        EKeyCodes._map[100] = "NUMPAD4";
        EKeyCodes.NUMPAD4 = 100;
        EKeyCodes._map[101] = "NUMPAD5";
        EKeyCodes.NUMPAD5 = 101;
        EKeyCodes._map[102] = "NUMPAD6";
        EKeyCodes.NUMPAD6 = 102;
        EKeyCodes._map[103] = "NUMPAD7";
        EKeyCodes.NUMPAD7 = 103;
        EKeyCodes._map[104] = "NUMPAD8";
        EKeyCodes.NUMPAD8 = 104;
        EKeyCodes._map[105] = "NUMPAD9";
        EKeyCodes.NUMPAD9 = 105;
        EKeyCodes.MULTIPLY = 106;
        EKeyCodes._map[107] = "ADD";
        EKeyCodes.ADD = 107;
        EKeyCodes.SUBTRACT = 109;
        EKeyCodes._map[110] = "DECIMALPOINT";
        EKeyCodes.DECIMALPOINT = 110;
        EKeyCodes._map[111] = "DIVIDE";
        EKeyCodes.DIVIDE = 111;
        EKeyCodes.F1 = 112;
        EKeyCodes._map[113] = "F2";
        EKeyCodes.F2 = 113;
        EKeyCodes._map[114] = "F3";
        EKeyCodes.F3 = 114;
        EKeyCodes._map[115] = "F4";
        EKeyCodes.F4 = 115;
        EKeyCodes._map[116] = "F5";
        EKeyCodes.F5 = 116;
        EKeyCodes._map[117] = "F6";
        EKeyCodes.F6 = 117;
        EKeyCodes._map[118] = "F7";
        EKeyCodes.F7 = 118;
        EKeyCodes._map[119] = "F8";
        EKeyCodes.F8 = 119;
        EKeyCodes._map[120] = "F9";
        EKeyCodes.F9 = 120;
        EKeyCodes._map[121] = "F10";
        EKeyCodes.F10 = 121;
        EKeyCodes._map[122] = "F11";
        EKeyCodes.F11 = 122;
        EKeyCodes._map[123] = "F12";
        EKeyCodes.F12 = 123;
        EKeyCodes.NUMLOCK = 144;
        EKeyCodes._map[145] = "SCROLLLOCK";
        EKeyCodes.SCROLLLOCK = 145;
        EKeyCodes.SEMICOLON = 186;
        EKeyCodes._map[187] = "EQUALSIGN";
        EKeyCodes.EQUALSIGN = 187;
        EKeyCodes._map[188] = "COMMA";
        EKeyCodes.COMMA = 188;
        EKeyCodes._map[189] = "DASH";
        EKeyCodes.DASH = 189;
        EKeyCodes._map[190] = "PERIOD";
        EKeyCodes.PERIOD = 190;
        EKeyCodes._map[191] = "FORWARDSLASH";
        EKeyCodes.FORWARDSLASH = 191;
        EKeyCodes._map[192] = "GRAVEACCENT";
        EKeyCodes.GRAVEACCENT = 192;
        EKeyCodes.OPENBRACKET = 219;
        EKeyCodes._map[220] = "BACKSLASH";
        EKeyCodes.BACKSLASH = 220;
        EKeyCodes._map[221] = "CLOSEBRACKET";
        EKeyCodes.CLOSEBRACKET = 221;
        EKeyCodes._map[222] = "SINGLEQUOTE";
        EKeyCodes.SINGLEQUOTE = 222;
        EKeyCodes.TOTAL = 256;
    })(akra.EKeyCodes || (akra.EKeyCodes = {}));
    var EKeyCodes = akra.EKeyCodes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (controls) {
        var KeyMap = (function () {
            function KeyMap(pTarget) {
                this._pMap = new Array(256);
                this._bAlt = false;
                this._bCtrl = false;
                this._bShift = false;
                this._bMouseDown = false;
                this._v2iMousePosition = new Vec2();
                this._v2iMousePrevPosition = new Vec2();
                this._v2iMouseShift = new Vec2();
                this.inline = isKeyPress(iCode, number);
                for(var i = EKeyCodes.TOTAL; i--; ) {
                    this._pMap[i] = false;
                }
                if (isDefAndNotNull(pTarget)) {
                    this.capture(pTarget);
                }
            }
            KeyMap.prototype.capture = function (pTarget) {
                this.captureMouse(pTarget);
                this.captureKeyboard(pTarget);
            };
            KeyMap.prototype.captureMouse = function (pTarget) {
                var pKeys = this;
                var fn = function (e) {
                    pKeys.dispatch(e);
                };
                if (pTarget.addEventListener) {
                    pTarget.addEventListener("mousemove", fn, true);
                    pTarget.addEventListener("mouseup", fn, true);
                    pTarget.addEventListener("mousedown", fn, true);
                } else if (pTarget.attachEvent) {
                    pTarget.attachEvent("onmousemove", fn);
                    pTarget.attachEvent("onmouseup", fn);
                    pTarget.attachEvent("onmousedown", fn);
                } else {
                    pTarget.onmousemove = pTarget.onmouseup = pTarget.onmousedown = fn;
                }
            };
            KeyMap.prototype.captureKeyboard = function (pTarget) {
                var pKeys = this;
                var fn = function (e) {
                    pKeys.dispatch(e);
                };
                if (pTarget.addEventListener) {
                    pTarget.addEventListener("keydown", fn, false);
                    pTarget.addEventListener("keyup", fn, false);
                } else if (pTarget.attachEvent) {
                    pTarget.attachEvent("onkeydown", fn);
                    pTarget.attachEvent("onkeyup", fn);
                } else {
                    pTarget.onkeydown = pTarget.onkeyup = fn;
                }
            };
            KeyMap.prototype.dispatch = function (e) {
                if (typeof e === "undefined") { e = window.event; }
                var iCode = (e).keyCode;
                if (e.type == "keydown") {
                    this._pMap[iCode] = true;
                    if (e.altKey) {
                        this._bAlt = true;
                    }
                    if (e.ctrlKey) {
                        this._bCtrl = true;
                    }
                    if (e.shiftKey) {
                        this._bShift = true;
                    }
                } else if (e.type == "keyup") {
                    this._pMap[iCode] = false;
                    if (iCode == EKeyCodes.ALT) {
                        this._bAlt = false;
                    }
                    if (iCode == EKeyCodes.CTRL) {
                        this._bCtrl = false;
                    }
                    if (iCode == EKeyCodes.SHIFT) {
                        this._bShift = false;
                    }
                }
                if (e.type == "mousemove") {
                    this._v2iMousePosition.x = (e).pageX;
                    this._v2iMousePosition.y = (e).pageY;
                } else if (e.type == "mouseup") {
                    this._bMouseDown = false;
                } else if (e.type == "mousedown") {
                    this._bMouseDown = true;
                }
            };
            return KeyMap;
        })();        
 {
            return this._pMap[iCode];
        }
        inline;
        getMouse();
        IVec2;
 {
            return this._v2iMousePosition;
        }
        inline;
        getMouseShift();
        IVec2;
 {
            return this._v2iMouseShift.set(this._v2iMousePosition.x - this._v2iMousePrevPosition.x, this._v2iMousePosition.y - this._v2iMousePrevPosition.y);
        }
        isMouseMoved();
        bool;
 {
            return this._v2iMousePosition.x != this._v2iMousePrevPosition.x || this._v2iMousePosition.y != this._v2iMousePrevPosition.y;
        }
        isMousePress();
        bool;
 {
            return this._bMouseDown;
        }
        update();
        void {
            this: ,
            _v2iMousePrevPosition: ,
            set: (this._v2iMousePosition)
        };
    })(akra.controls || (akra.controls = {}));
    var controls = akra.controls;
})(akra || (akra = {}));
function createKeymap(target) {
    return new KeyMap(target);
}
exports.createKeymap = createKeymap;
var akra;
(function (akra) {
    (function (EUILayouts) {
        EUILayouts._map = [];
        EUILayouts._map[0] = "UNKNOWN";
        EUILayouts.UNKNOWN = 0;
        EUILayouts._map[1] = "HORIZONTAL";
        EUILayouts.HORIZONTAL = 1;
        EUILayouts._map[2] = "VERTICAL";
        EUILayouts.VERTICAL = 2;
    })(akra.EUILayouts || (akra.EUILayouts = {}));
    var EUILayouts = akra.EUILayouts;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    (function (EUINodeTypes) {
        EUINodeTypes._map = [];
        EUINodeTypes._map[0] = "UNKNOWN";
        EUINodeTypes.UNKNOWN = 0;
        EUINodeTypes._map[1] = "HTML";
        EUINodeTypes.HTML = 1;
        EUINodeTypes._map[2] = "DND";
        EUINodeTypes.DND = 2;
        EUINodeTypes._map[3] = "LAYOUT";
        EUINodeTypes.LAYOUT = 3;
        EUINodeTypes._map[4] = "COMPONENT";
        EUINodeTypes.COMPONENT = 4;
    })(akra.EUINodeTypes || (akra.EUINodeTypes = {}));
    var EUINodeTypes = akra.EUINodeTypes;
})(akra || (akra = {}));
(function ($) {
    $.fn.disableSelection = function () {
        return this.attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false);
    };
})(jQuery);
var akra;
(function (akra) {
    (function (ui) {
        ui.$document = $(document);
        ui.$body = $(document.body);
        var Node = (function (_super) {
            __extends(Node, _super);
            function Node(parent, eNodeType) {
                if (typeof eNodeType === "undefined") { eNodeType = EUINodeTypes.UNKNOWN; }
                _super.call(this, EEntityTypes.UI_NODE);
                this.inline = get;
                this.inline = get;
                this._pUI = parent instanceof UI ? parent : (parent).ui;
                this._eNodeType = eNodeType;
                if (parent instanceof Node) {
                    this.attachToParent(parent);
                }
            }
            Node.prototype.ui = function () {
                return this._pUI;
            };
            Node.prototype.nodeType = function () {
                return this._eNodeType;
            };
            Node.prototype.render = function (to) {
                return false;
            };
            Node.prototype.recursiveRender = function () {
                this.render();
                if (this.sibling) {
                    (this.sibling).recursiveRender();
                }
                if (this.child) {
                    (this.child).recursiveRender();
                }
            };
            Node.prototype.renderTarget = function () {
                var pTarget = this.findRenderTarget();
                return isNull(pTarget) ? null : pTarget.renderTarget();
            };
            Node.prototype.hasRenderTarget = function () {
                return false;
            };
            Node.prototype.addChild = function (pChild) {
                if (this.child) {
                    var pRightSibling = this.child.rightSibling;
                    if (pRightSibling) {
                        pRightSibling.sibling = pChild;
                        this.childAdded(pChild);
                        return pChild;
                    }
                }
                return _super.prototype.addChild.call(this, pChild);
            };
            Node.prototype.attachToParent = function (pParent) {
                if (_super.prototype.attachToParent.call(this, pParent)) {
                    this.relocated(pParent);
                    return true;
                }
                return false;
            };
            Node.prototype.findRenderTarget = function () {
                var pParent = this.parent;
                while(!isNull(pParent)) {
                    if (!isNull(pParent.hasRenderTarget())) {
                        return pParent;
                    }
                    pParent = pParent.parent;
                }
                return null;
            };
            Node.prototype.relocated = function (pLocation) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).relocated;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pLocation) : _broadcast[i].listener(_recivier, pLocation);
                    }
                }
                ;
                var pNode = this.child;
                while(!isNull(pNode)) {
                    pNode.relocated(pLocation);
                    pNode = pNode.sibling;
                }
            };
            return Node;
        })(util.Entity);
        ui.Node = Node;        
                        function isUI(parent) {
            return parent instanceof UI;
        }
        ui.isUI = isUI;
                        function getUI(parent) {
            return isUI(parent) ? parent : (parent).ui;
        }
        ui.getUI = getUI;
        inline;
        function isUINode(pEntity) {
            return !isNull(pEntity) && pEntity.type === EEntityTypes.UI_NODE;
        }
        inline;
        function isLayout(pEntity) {
            return isUINode(pEntity) && (pEntity).nodeType === EUINodeTypes.LAYOUT;
        }
        inline;
        function containsHTMLElement(pEntity) {
            return isUINode(pEntity) && (pEntity).nodeType >= EUINodeTypes.HTML;
        }
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var HTMLNode = (function (_super) {
            __extends(HTMLNode, _super);
            function HTMLNode(parent, pElement, eNodeType) {
                if (typeof pElement === "undefined") { pElement = null; }
                if (typeof eNodeType === "undefined") { eNodeType = EUINodeTypes.HTML; }
                _super.call(this, getUI(parent), eNodeType);
                this.$element = null;
                this._fnEventRedirector = null;
                this.inline = get;
                this.inline = getHTMLElement();
                this.HTMLElement = {
                    return: this.$element.get()[0]
                };
                this.inline = width();
                this.number = {
                    return: this.$element.width()
                };
                this.inline = height();
                this.number = {
                    return: this.$element.height()
                };
                var pNode = this;
                var fnEventRedirector = this._fnEventRedirector = function (e) {
                    if (HTMLNode.EVENTS.indexOf(e.type) == -1) {
                        return;
                    }
                    return (pNode)[e.type](e);
                };
                this.$element = $(pElement || "<div />");
                if (!isUI(parent)) {
                    this.attachToParent(parent);
                }
            }
            HTMLNode.prototype.el = function () {
                return this.$element;
            };
            HTMLNode.prototype.handleEvent = function (sEvent) {
                this.$element.bind(sEvent, this._fnEventRedirector);
                return true;
            };
            HTMLNode.prototype.disableEvent = function (sEvent) {
                this.$element.unbind(sEvent, this._fnEventRedirector);
            };
            HTMLNode.prototype.hasRenderTarget = function () {
                return true;
            };
            HTMLNode.prototype.renderTarget = function () {
                return this.$element;
            };
            HTMLNode.prototype.render = function (to) {
                var $to = $body;
                var pTarget = null;
                if (!isDef(to)) {
                    pTarget = this.findRenderTarget();
                    $to = isNull(pTarget) ? $to : pTarget.renderTarget();
                } else {
                    if (to instanceof Node) {
                        if (this.parent != to) {
                            return this.attachToParent(to);
                        }
                        $to = (to).renderTarget();
                    } else {
                        $to = $(to);
                    }
                }
                this.beforeRender();
                $to.append(this.self());
                this.rendered();
                return true;
            };
            HTMLNode.prototype.attachToParent = function (pParent, bRender) {
                if (typeof bRender === "undefined") { bRender = true; }
                if (_super.prototype.attachToParent.call(this, pParent)) {
                    if (bRender && !this.isRendered()) {
                        this.render(pParent);
                    }
                    return true;
                }
                return false;
            };
            HTMLNode.prototype.isFocused = function () {
                return !isNull(this.$element) && this.$element.is(":focus");
            };
            HTMLNode.prototype.isRendered = function () {
                return !isNull(this.$element) && this.$element.parent().length > 0;
            };
            HTMLNode.prototype.destroy = function (bRecursive, bPromoteChildren) {
                _super.prototype.destroy.call(this, bRecursive, bPromoteChildren);
                this.$element.remove();
            };
            HTMLNode.prototype.valueOf = function () {
                return this.$element;
            };
            HTMLNode.prototype.hide = function () {
                this.el.hide();
            };
            HTMLNode.prototype.show = function () {
                this.el.show();
            };
            HTMLNode.prototype.self = function () {
                return this.$element;
            };
            HTMLNode.prototype.click = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).click;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.dblclick = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).dblclick;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mousemove = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).mousemove;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mouseup = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).mouseup;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mousedown = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).mousedown;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mouseover = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).mouseover;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mouseout = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).mouseout;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mouseenter = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).mouseenter;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.mouseleave = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).mouseleave;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.focusin = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).focusin;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.focusout = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).focusout;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.blur = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).blur;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.change = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).change;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.keydown = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).keydown;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.keyup = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).keyup;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            HTMLNode.prototype.resize = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).resize;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                }
            };
            HTMLNode.prototype.rendered = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).rendered;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                }
            };
            HTMLNode.prototype.beforeRender = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).beforeRender;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                    }
                }
            };
            HTMLNode.EVENTS = [
                "click", 
                "dblclick", 
                "mousemove", 
                "mouseup", 
                "mousedown", 
                "mouseover", 
                "mouseout", 
                "mouseenter", 
                "mouseleave", 
                "focusin", 
                "focusout", 
                "blur", 
                "change", 
                "keydown", 
                "keyup", 
                "resize"
            ];
            return HTMLNode;
        })(Node);
        ui.HTMLNode = HTMLNode;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var DNDNode = (function (_super) {
            __extends(DNDNode, _super);
            function DNDNode(parent, element, eNodeType) {
                if (typeof eNodeType === "undefined") { eNodeType = EUINodeTypes.DND; }
                _super.call(this, getUI(parent), element, eNodeType);
                this._bDraggableInited = false;
                this._bDroppableInited = false;
                this.inline = isDraggable();
                this.bool = {
                    return: this._bDraggableInited && !this.$element.draggable("option", "disabled")
                };
                if (!isUI(parent)) {
                    this.attachToParent(parent);
                }
            }
            DNDNode.prototype.setDraggable = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (!this._bDraggableInited) {
                    var pNode = this;
                    this.$element.draggable({
                        start: function (e) {
                            return pNode.dragStart(e);
                        },
                        stop: function (e) {
                            return pNode.dragStop(e);
                        },
                        drag: function (e) {
                            return pNode.move(e);
                        }
                    }).draggable("disable");
                    this._bDraggableInited = true;
                }
                if (!isNull(this.parent) && isDefAndNotNull(this.$element)) {
                    this.$element.draggable("option", "containment", "parent");
                }
                this.$element.draggable("option", "disabled", !bValue);
            };
            DNDNode.prototype.setDroppable = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (!this._bDroppableInited) {
                    var pNode = this;
                    this.$element.droppable({
                        drop: function (e) {
                            return pNode.drop(e);
                        }
                    });
                    this._bDroppableInited = true;
                }
            };
            DNDNode.prototype.attachToParent = function (pParent, bRender) {
                if (typeof bRender === "undefined") { bRender = true; }
                var isAttached = _super.prototype.attachToParent.call(this, pParent, bRender);
                if (this.isDraggable()) {
                    this.setDraggable(true);
                }
                return isAttached;
            };
            DNDNode.prototype.dragStart = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).dragStart;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            DNDNode.prototype.dragStop = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).dragStop;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            DNDNode.prototype.move = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).move;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            DNDNode.prototype.drop = function (e) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).drop;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, e) : _broadcast[i].listener(_recivier, e);
                    }
                }
            };
            return DNDNode;
        })(HTMLNode);
        ui.DNDNode = DNDNode;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EUIComponents) {
        EUIComponents._map = [];
        EUIComponents._map[0] = "UNKNOWN";
        EUIComponents.UNKNOWN = 0;
        EUIComponents._map[1] = "WINDOW";
        EUIComponents.WINDOW = 1;
        EUIComponents._map[2] = "BUTTON";
        EUIComponents.BUTTON = 2;
        EUIComponents._map[3] = "SWITCH";
        EUIComponents.SWITCH = 3;
        EUIComponents._map[4] = "PANEL";
        EUIComponents.PANEL = 4;
        EUIComponents._map[5] = "TABS";
        EUIComponents.TABS = 5;
        EUIComponents._map[6] = "LABEL";
        EUIComponents.LABEL = 6;
        EUIComponents._map[7] = "VECTOR";
        EUIComponents.VECTOR = 7;
        EUIComponents._map[8] = "TREE";
        EUIComponents.TREE = 8;
        EUIComponents._map[9] = "TREE_NODE";
        EUIComponents.TREE_NODE = 9;
        EUIComponents._map[10] = "CANVAS";
        EUIComponents.CANVAS = 10;
        EUIComponents._map[11] = "SLIDER";
        EUIComponents.SLIDER = 11;
        EUIComponents._map[12] = "CHECKBOX";
        EUIComponents.CHECKBOX = 12;
        EUIComponents._map[13] = "CHECKBOX_LIST";
        EUIComponents.CHECKBOX_LIST = 13;
        EUIComponents._map[14] = "VIEWPORT_STATS";
        EUIComponents.VIEWPORT_STATS = 14;
        EUIComponents._map[15] = "GRAPH";
        EUIComponents.GRAPH = 15;
        EUIComponents._map[16] = "GRAPH_NODE";
        EUIComponents.GRAPH_NODE = 16;
        EUIComponents._map[17] = "GRAPH_CONNECTOR";
        EUIComponents.GRAPH_CONNECTOR = 17;
        EUIComponents._map[18] = "GRAPH_CONTROLS";
        EUIComponents.GRAPH_CONTROLS = 18;
        EUIComponents._map[19] = "GRAPH_CONNECTIONAREA";
        EUIComponents.GRAPH_CONNECTIONAREA = 19;
    })(akra.EUIComponents || (akra.EUIComponents = {}));
    var EUIComponents = akra.EUIComponents;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (EAjaxDataTypes) {
        EAjaxDataTypes._map = [];
        EAjaxDataTypes._map[0] = "TEXT";
        EAjaxDataTypes.TEXT = 0;
        EAjaxDataTypes._map[1] = "JSON";
        EAjaxDataTypes.JSON = 1;
        EAjaxDataTypes._map[2] = "BLOB";
        EAjaxDataTypes.BLOB = 2;
        EAjaxDataTypes._map[3] = "ARRAY_BUFFER";
        EAjaxDataTypes.ARRAY_BUFFER = 3;
        EAjaxDataTypes._map[4] = "DOCUMENT";
        EAjaxDataTypes.DOCUMENT = 4;
    })(akra.EAjaxDataTypes || (akra.EAjaxDataTypes = {}));
    var EAjaxDataTypes = akra.EAjaxDataTypes;
    (function (EAjaxHttpMethods) {
        EAjaxHttpMethods._map = [];
        EAjaxHttpMethods.GET = 1;
        EAjaxHttpMethods._map[2] = "POST";
        EAjaxHttpMethods.POST = 2;
    })(akra.EAjaxHttpMethods || (akra.EAjaxHttpMethods = {}));
    var EAjaxHttpMethods = akra.EAjaxHttpMethods;
    (function (EAjaxHttpCodes) {
        EAjaxHttpCodes._map = [];
        EAjaxHttpCodes.OK = 200;
        EAjaxHttpCodes._map[201] = "CREATED";
        EAjaxHttpCodes.CREATED = 201;
        EAjaxHttpCodes._map[202] = "ACCEPTED";
        EAjaxHttpCodes.ACCEPTED = 202;
        EAjaxHttpCodes._map[203] = "PARTIAL_INFORMATION";
        EAjaxHttpCodes.PARTIAL_INFORMATION = 203;
        EAjaxHttpCodes.MOVED = 301;
        EAjaxHttpCodes._map[302] = "FOUND";
        EAjaxHttpCodes.FOUND = 302;
        EAjaxHttpCodes._map[303] = "METHOD";
        EAjaxHttpCodes.METHOD = 303;
        EAjaxHttpCodes.NOT_MODIFIED = 304;
        EAjaxHttpCodes.BAD_REQUEST = 400;
        EAjaxHttpCodes._map[401] = "UNAUTHORIZED";
        EAjaxHttpCodes.UNAUTHORIZED = 401;
        EAjaxHttpCodes._map[402] = "PAYMENT_REQUIRED";
        EAjaxHttpCodes.PAYMENT_REQUIRED = 402;
        EAjaxHttpCodes._map[403] = "FORBIDDEN";
        EAjaxHttpCodes.FORBIDDEN = 403;
        EAjaxHttpCodes._map[404] = "NOT_FOUND";
        EAjaxHttpCodes.NOT_FOUND = 404;
        EAjaxHttpCodes.INTERNAL_ERROR = 500;
        EAjaxHttpCodes._map[501] = "NOT_IMPLEMENTED";
        EAjaxHttpCodes.NOT_IMPLEMENTED = 501;
        EAjaxHttpCodes._map[502] = "SERVICE_TEMPORARILY_OVERLOADED";
        EAjaxHttpCodes.SERVICE_TEMPORARILY_OVERLOADED = 502;
        EAjaxHttpCodes._map[503] = "GATEWAY_TIMEOUT";
        EAjaxHttpCodes.GATEWAY_TIMEOUT = 503;
    })(akra.EAjaxHttpCodes || (akra.EAjaxHttpCodes = {}));
    var EAjaxHttpCodes = akra.EAjaxHttpCodes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (io) {
        var pDefaulParams = {
            async: false,
            statusCode: {},
            success: null,
            error: null,
            beforeSend: null,
            data: null,
            cache: false,
            contentType: "application/x-www-form-urlencoded",
            dataType: EAjaxDataTypes.TEXT,
            type: EAjaxHttpMethods.GET,
            timeout: 0
        };
        function stringToHttpMethod(sMethod) {
            sMethod = sMethod.toLowerCase();
            if (sMethod === "get") {
                return EAjaxHttpMethods.GET;
            }
            return EAjaxHttpMethods.POST;
        }
        io.stringToHttpMethod = stringToHttpMethod;
        function stringToAjaxDataType(sDataType) {
            sDataType = sDataType.toLowerCase();
            switch(sDataType) {
                case "json":
                    return EAjaxDataTypes.JSON;
                case "blob":
                    return EAjaxDataTypes.BLOB;
                case "html":
                case "document":
                    return EAjaxDataTypes.DOCUMENT;
                case "array_buffer":
                case "arraybuffer":
                    return EAjaxDataTypes.ARRAY_BUFFER;
            }
            return EAjaxDataTypes.TEXT;
        }
        io.stringToAjaxDataType = stringToAjaxDataType;
        function ajaxDataTypeToXHRResponseType(eDataType) {
            switch(eDataType) {
                case EAjaxDataTypes.BLOB:
                    return "blob";
                case EAjaxDataTypes.ARRAY_BUFFER:
                    return "arraybuffer";
                case EAjaxDataTypes.DOCUMENT:
                    return "document";
                case EAjaxDataTypes.TEXT:
                    return "text";
            }
            return "";
        }
        io.ajaxDataTypeToXHRResponseType = ajaxDataTypeToXHRResponseType;
        function createXMLHttpRequest() {
            if ((window).XMLHttpRequest) {
                return new XMLHttpRequest();
            } else if ((window).ActiveXObject) {
                return new ActiveXObject("Microsoft.XMLHTTP");
            }
            return null;
        }
        io.createXMLHttpRequest = createXMLHttpRequest;
        function queryString(pData, sPrefix) {
            if (typeof sPrefix === "undefined") { sPrefix = null; }
            if (isString(pData)) {
                return pData;
            }
            var pQueryParts = [];
            for(var p in pData) {
                var k = sPrefix ? sPrefix + "[" + p + "]" : p, v = pData[p];
                pQueryParts.push(isObject(v) ? queryString(v, k) : encodeURIComponent(k) + "=" + encodeURIComponent(v));
            }
            return pQueryParts.join("&");
        }
        io.queryString = queryString;
        function convertXHRResponse(pRequest, eType, isAsync) {
            switch(eType) {
                case EAjaxDataTypes.TEXT:
                    return String(pRequest.responseText);
                case EAjaxDataTypes.JSON:
                    return util.parseJSON(pRequest.responseText);
                case EAjaxDataTypes.BLOB:
                    return (isAsync ? pRequest.response : (new (Blob)([
                        pRequest.responseText
                    ], {
                        type: "application/octet-stream"
                    })));
                case EAjaxDataTypes.ARRAY_BUFFER:
                    return (isAsync ? (pRequest.response) : pRequest.responseText);
                case EAjaxDataTypes.DOCUMENT:
                    return (isAsync ? pRequest.response : util.parseHTML(pRequest.responseText));
            }
            return null;
        }
                        function _ajax(pUrl, pSettings, pRequest) {
            var iTimeoutId = 0;
            var isAborted = false;
            var sQueryString;
            var pData;
            var sUrl;
            if (isString(arguments[0])) {
                sUrl = String(arguments[0]);
                pSettings = arguments[1] || {};
                pRequest = arguments[2];
                pSettings.url = sUrl;
            } else {
                pSettings = arguments[0];
                pRequest = arguments[1];
            }
            pData = pSettings.data || {};
            for(var sKey in pDefaulParams) {
                if (isDef(pSettings[sKey])) {
                    continue;
                }
                pSettings[sKey] = pDefaulParams[sKey];
            }
            if (isString(pSettings.type)) {
                pSettings.type = stringToHttpMethod(pSettings.type);
            }
            if (isString(pSettings.dataType)) {
                pSettings.dataType = stringToAjaxDataType(pSettings.dataType);
            }
            var fnCauseError = function (pReq, pErr) {
                if (!pSettings.error) {
 {
                        logger.setSourceLocation("io/ajax.ts", 158);
                        logger.error(pErr);
                    }
                    ;
                } else {
                    pSettings.error(pReq, (pReq ? pReq.statusText : null), pErr);
                }
            };
            var fnBeforeResult = function () {
                if (iTimeoutId !== null) {
                    clearTimeout(iTimeoutId);
                }
            };
            pRequest = pRequest || createXMLHttpRequest();
            if (!pRequest) {
                fnCauseError(null, new Error("Invalid request object."));
            }
            if (pSettings.timeout > 0) {
                iTimeoutId = setTimeout(function () {
                    isAborted = true;
                    pRequest.abort();
                    fnCauseError(pRequest, new Error("Timeout is over."));
                }, pSettings.timeout);
            }
            if (pSettings.beforeSend) {
                if (!pSettings.beforeSend(pRequest, pSettings)) {
                    return null;
                }
            }
            if (pSettings.cache) {
                pData["TIMESTAMP"] = now();
            }
            sQueryString = queryString(pData);
            pRequest.onreadystatechange = function () {
                if (isAborted) {
                    return;
                }
                if (pRequest.readyState == this.HEADERS_RECEIVED) {
                    if (pSettings.timeout > 0) {
                        clearTimeout(iTimeoutId);
                    }
                }
                if (pRequest.readyState == this.DONE) {
                    var iStatusCode = pRequest.status;
                    var fnStatusHandler = pSettings.statusCode[iStatusCode];
                    if (isDefAndNotNull(fnStatusHandler)) {
                        fnStatusHandler(pRequest.status);
                    }
                    fnBeforeResult();
                    if (iStatusCode == EAjaxHttpCodes.OK) {
                        if (pSettings.success) {
                            pSettings.success(convertXHRResponse(pRequest, pSettings.dataType, true), pRequest.statusText, pRequest);
                        }
                    } else if (!fnStatusHandler) {
                        fnCauseError(pRequest, new Error("Request is not completed successfully (code: " + iStatusCode + ")"));
                    }
                }
            };
            if (isAborted) {
                return null;
            }
            if (pSettings.async) {
                try  {
                    if (pSettings.type == EAjaxHttpMethods.GET) {
                        pRequest.open("GET", pSettings.url + (sQueryString.length ? "?" + sQueryString : ""), true);
                        pRequest.responseType = ajaxDataTypeToXHRResponseType(pSettings.dataType);
                        pRequest.send(null);
                    } else {
                        pRequest.open("POST", pSettings.url, true);
                        pRequest.setRequestHeader("Content-Type", pSettings.contentType);
                        pRequest.responseType = ajaxDataTypeToXHRResponseType(pSettings.dataType);
                        pRequest.send(sQueryString);
                    }
                } catch (e) {
                    fnCauseError(pRequest, e);
                }
            } else {
                if (pSettings.type == EAjaxHttpMethods.GET) {
                    pRequest.open("GET", pSettings.url + "?" + sQueryString, false);
                    pRequest.send(null);
                } else {
                    pRequest.open("POST", pSettings.url, false);
                    pRequest.setRequestHeader("Content-type", pSettings.contentType);
                    pRequest.send(sQueryString);
                }
                fnBeforeResult();
                return {
                    data: convertXHRResponse(pRequest, pSettings.dataType, false),
                    statusText: pRequest.statusText,
                    xhr: pRequest
                };
            }
            return null;
        }
        io.ajax = _ajax;
    })(akra.io || (akra.io = {}));
    var io = akra.io;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        function _template(pNode, sTemplate, sName, pData, bRenderAsNormal, iDepth) {
            if (typeof pData === "undefined") { pData = null; }
            if (typeof bRenderAsNormal === "undefined") { bRenderAsNormal = false; }
            if (typeof iDepth === "undefined") { iDepth = 0; }
            var fnTemplate = swig.compile(sTemplate, {
                filename: sName
            });
            var sTplData = fnTemplate(pData);
            pNode.el.append(sTplData);
            pNode.el.find("component").each(function (i) {
                var $comp = $(this);
                var sType = $comp.attr("type");
                var sName = $comp.attr("name");
                if ($comp.parent("component").length > 0) {
                    return;
                }
                bRenderAsNormal = pNode.el[0] == $comp.parent()[0];
                var pComponent = pNode.createComponent(sType, {
                    show: bRenderAsNormal,
                    name: sName
                });
                pComponent._createdFrom($comp);
                var $subComp = $comp.find("component:first");
                if ($subComp.length > 0) {
                    _template(pComponent, $comp.html(), sName, pData, false, iDepth + 1);
                }
                if (!bRenderAsNormal) {
                    var $span = $("<span/>");
                    $comp.before($span);
                    pComponent.render($span);
                    pComponent.el.unwrap();
                }
                $comp.remove();
            });
        }
        function template(pNode, sUrl, pData) {
            var sTemplate = io.ajax(sUrl, {
                async: false
            }).data;
            _template(pNode, sTemplate, sUrl, pData);
        }
        ui.template = template;
        ui.COMPONENTS = {};
        var Component = (function (_super) {
            __extends(Component, _super);
            function Component(parent, options, eType, $el) {
                if (typeof eType === "undefined") { eType = EUIComponents.UNKNOWN; }
                _super.call(this, getUI(parent), $el, EUINodeTypes.COMPONENT);
                this._sGenericType = null;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = isGeneric();
                this.bool = {
                    return: !isNull(this._sGenericType)
                };
                var pOptions = mergeOptions(options, null);
                if (!isUI(parent)) {
                    this.attachToParent(parent, (!isDef(pOptions.show) || pOptions.show == true));
                }
                this._eComponentType = eType;
                this.applyOptions(pOptions);
            }
            Component.prototype.componentType = function () {
                return this._eComponentType;
            };
            Component.prototype.genericType = function () {
                return this._sGenericType;
            };
            Component.prototype.name = function () {
                return this._sName;
            };
            Component.prototype.name = function (sName) {
                this.$element.attr("name", sName);
                this._sName = sName;
            };
            Object.defineProperty(Component.prototype, "layout", {
                get: function () {
                    return isLayout(this.child) ? this.child : null;
                },
                enumerable: true,
                configurable: true
            });
            Component.prototype.template = function (sUrl, pData) {
                template(this, sUrl, pData);
            };
            Component.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                this.el.addClass("component");
            };
            Component.prototype.setLayout = function (type) {
                var eType = EUILayouts.UNKNOWN;
                if (isString(type)) {
                    switch((type).toLowerCase()) {
                        case "horizontal":
                            eType = EUILayouts.HORIZONTAL;
                            break;
                        case "vertical":
                            eType = EUILayouts.VERTICAL;
                            break;
                    }
                } else {
                    eType = type;
                }
                var pLayout = this.ui.createLayout(eType);
                if (isLayout(this.child)) {
                    var pLayoutPrev = this.child;
                    pLayoutPrev.relocateChildren(pLayout);
                    pLayoutPrev.destroy();
                }
                this.relocateChildren(pLayout);
                return pLayout.render(this);
            };
            Component.prototype.attachToParent = function (pParent, bRender) {
                if (typeof bRender === "undefined") { bRender = true; }
                if (isComponent(pParent) && isLayout(pParent.child) && !isLayout(pParent)) {
                    pParent = pParent.child;
                }
                return _super.prototype.attachToParent.call(this, pParent, bRender);
            };
            Component.prototype.applyOptions = function (pOptions) {
                if (!isDefAndNotNull(pOptions)) {
                    return;
                }
                var $element = this.el;
                this.name = isDef(pOptions.name) ? pOptions.name : null;
                if (isDefAndNotNull(pOptions.html)) {
                    $element.html(pOptions.html);
                }
                if (isDefAndNotNull(pOptions.css)) {
 {
                        logger.setSourceLocation("Component.ts", 164);
                        logger.log(pOptions.css);
                    }
                    ;
                    $element.css(pOptions.css);
                }
                if (isDefAndNotNull(pOptions.class)) {
                    $element.addClass(pOptions.class);
                }
                if (isDefAndNotNull(pOptions.width)) {
                    $element.width(pOptions.width);
                }
                if (isDefAndNotNull(pOptions.height)) {
                    $element.height(pOptions.height);
                }
                if (isDefAndNotNull(pOptions.draggable)) {
                    this.setDraggable(pOptions.draggable);
                }
                if (isDefAndNotNull(pOptions.layout)) {
                    this.setLayout(pOptions.layout);
                }
                if (isString(pOptions.generic)) {
                    this._sGenericType = pOptions.generic;
                }
                if (isDefAndNotNull(pOptions.dragZone)) {
                    $element.draggable("option", "containment", pOptions.dragZone);
                }
                if (isDefAndNotNull(pOptions.events)) {
                    if (isArray(pOptions.events)) {
                        pOptions.events = pOptions.events.join(' ');
                    }
                    this.handleEvent(pOptions.events);
                }
                if (isDefAndNotNull(pOptions.parent)) {
                    this.attachToParent(pOptions.parent, isDefAndNotNull(pOptions.show) ? pOptions.show : true);
                }
            };
            Component.prototype.createComponent = function (sType, pOptions) {
                var pComp = this.ui.createComponent(sType, pOptions);
                pComp.attachToParent(this, !isDefAndNotNull(pOptions) || pOptions.show !== false);
                return pComp;
            };
            Component.prototype._createdFrom = function ($comp) {
                this.$element.attr("style", $comp.attr("style"));
                this.$element.attr("class", $comp.attr("class"));
            };
            Component.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return (this.isGeneric() ? "<generic-" + this.genericType : "<component-" + "*") + (this.name ? " " + this.name : "") + ">";
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return Component;
        })(DNDNode);
        ui.Component = Component;        
        inline;
        function register(sType, pComponent) {
            ui.COMPONENTS[sType] = pComponent;
        }
        function isComponent(pEntity, eComponent) {
            if (!isUINode(pEntity) || (pEntity).nodeType !== EUINodeTypes.COMPONENT) {
                return false;
            }
            if (arguments.length > 1) {
                return (pEntity).componentType === eComponent;
            }
            return true;
        }
        ui.isComponent = isComponent;
        inline;
        function isGeneric(pEntity) {
            return isComponent(pEntity) && (pEntity).isGeneric();
        }
                                function mergeOptions(left, right) {
            var pOptionsLeft;
            var pOptionsRight;
            if (isString(left)) {
                pOptionsLeft = {
                    name: left
                };
            } else {
                pOptionsLeft = left || {};
            }
            if (isString(right)) {
                pOptionsRight = {
                    name: right
                };
            } else {
                pOptionsRight = right || {};
            }
            for(var sOpt in pOptionsRight) {
                pOptionsLeft[sOpt] = pOptionsRight[sOpt];
            }
            return pOptionsLeft;
        }
        ui.mergeOptions = mergeOptions;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Panel = (function (_super) {
            __extends(Panel, _super);
            function Panel(parent, options, eType) {
                if (typeof eType === "undefined") { eType = EUIComponents.PANEL; }
                _super.call(this, parent, mergeOptions({
                    layout: EUILayouts.VERTICAL
                }, options), eType, $("<div>						<div class='panel-title'>							<div class=\"controls\">								<input type=\"checkbox\" />							</div>							<span />						</div>					</div>"));
                this.index = -1;
                this.$controls = null;
                this.inline = get;
                this.inline = set;
                this.inline = isCollapsible();
                this.bool = {
                    return: this.el.hasClass("collapsible")
                };
                this.$title = this.el.find("div.panel-title:first");
                this.$controls = this.el.find("div.controls:first");
                if (isDefAndNotNull(options)) {
                    if (isString(options.title)) {
                        this.title = options.title;
                    }
                }
            }
            Panel.prototype.title = function () {
                return this.$title.find("span:first").html();
            };
            Panel.prototype.title = function (sTitle) {
                this.$title.find("span:first").html(sTitle || "");
                this.titleUpdated(sTitle);
            };
            Panel.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                this.title = $comp.attr('title');
                if (isDef($comp.attr("collapsible"))) {
                    this.setCollapsible($comp.attr("collapsible").toLowerCase() !== "false");
                }
            };
            Panel.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                this.el.addClass("component-panel");
            };
            Panel.prototype.setCollapsible = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (bValue === this.isCollapsible()) {
                    return;
                }
                this.el.addClass("collapsible");
                var $element = this.layout.el;
                this.$controls.click(function (e) {
                    $element.animate({
                        height: 'toggle'
                    }, 500);
                });
            };
            Panel.prototype.titleUpdated = function (sTitle) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).titleUpdated;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, sTitle) : _broadcast[i].listener(_recivier, sTitle);
                    }
                }
            };
            return Panel;
        })(Component);
        ui.Panel = Panel;        
        register("Panel", Panel);
        function isPanel(pEntity) {
            return isComponent(pEntity, EUIComponents.PANEL);
        }
        ui.isPanel = isPanel;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Tabs = (function (_super) {
            __extends(Tabs, _super);
            function Tabs(parent, options, eType) {
                if (typeof eType === "undefined") { eType = EUIComponents.TABS; }
                _super.call(this, parent, options, eType, $("<div class=\"component-tabs\"><div class=\"bookmarks\"></div></div>"));
                this._pTabs = [];
                this._iActiveTab = -1;
                this.inline = get;
                this.inline = get;
                this.inline = bookmarkFor(pPanel, IUIPanel);
                this.JQuery = {
                    return: this.$bookmarks.find("#tab-" + pPanel.getGuid())
                };
                this.$bookmarks = this.el.find(".bookmarks:first");
            }
            Tabs.prototype.active = function () {
                return this._pTabs[this._iActiveTab] || null;
            };
            Tabs.prototype.length = function () {
                return this._pTabs.length;
            };
            Tabs.prototype.addChild = function (pEntity) {
 {
                    logger.setSourceLocation("Tabs.ts", 30);
                    logger.assert(isPanel(pEntity), "only panels can be added to Tabs");
                }
                ;
                var pPanel = pEntity;
 {
                    logger.setSourceLocation("Tabs.ts", 34);
                    logger.assert(!pPanel.isCollapsible(), "panel cannot be collapsible!");
                }
                ;
                this.createBookmarkFor(pPanel);
                this.connect(pPanel, "titleUpdated", "_tabTitleUpdated");
                pPanel.index = this._pTabs.length;
                this._pTabs.push(pPanel);
                if (this._pTabs.length > 1) {
                    pPanel.hide();
                } else {
                    this.select(0);
                }
                return _super.prototype.addChild.call(this, pEntity);
            };
            Tabs.prototype.tabIndex = function (pPanel) {
                for(var i = 0; i < this._pTabs.length; ++i) {
                    if (pPanel == this._pTabs[i]) {
                        return i;
                    }
                }
                return -1;
            };
            Tabs.prototype.select = function (panel) {
                var n = 0;
                if (isInt(panel)) {
                    n = panel;
                } else {
                    n = this.tabIndex(panel);
                }
                if (n == this._iActiveTab || n < 0 || n > this._pTabs.length) {
                    return;
                }
                if (this.active) {
                    this.active.hide();
                    this.bookmarkFor(this.active).removeClass("active");
                }
                this.bookmarkFor(this._pTabs[n]).addClass("active");
                this._pTabs[n].show();
                this._iActiveTab = n;
            };
            Tabs.prototype._tabTitleUpdated = function (pPanel, sTitle) {
                this.bookmarkFor(pPanel).html(sTitle);
            };
            Tabs.prototype.createBookmarkFor = function (pPanel) {
                var $bookmark = $("<div class=\"bookmark\" id=\"tab-" + pPanel.getGuid() + "\">" + pPanel.title + "</div>");
                this.$bookmarks.append($bookmark);
                var pTabs = this;
                $bookmark.click(function (e) {
                    pTabs.select(pPanel.index);
                });
            };
            return Tabs;
        })(Component);
        ui.Tabs = Tabs;        
        register("Tabs", Tabs);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Button = (function (_super) {
            __extends(Button, _super);
            function Button(ui, options, eType) {
                if (typeof eType === "undefined") { eType = EUIComponents.BUTTON; }
                _super.call(this, ui, options, eType, $("<button class=\"component-button\"/>"));
                this.inline = get;
                this.inline = set;
                this.handleEvent("click");
            }
            Button.prototype.text = function () {
                return this.el.html();
            };
            Button.prototype.text = function (x) {
                this.el.html(x);
            };
            Button.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                this.text = $comp.attr("text") || "push";
            };
            Button.prototype.applyOptions = function (pOptions) {
                _super.prototype.applyOptions.call(this, pOptions);
                this.text = pOptions.text || "push";
            };
            return Button;
        })(Component);
        ui.Button = Button;        
        register("Button", Button);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Switch = (function (_super) {
            __extends(Switch, _super);
            function Switch(parent, options, eType) {
                if (typeof eType === "undefined") { eType = EUIComponents.SWITCH; }
                var _this = this;
                _super.call(this, parent, options, eType, $(("<div class=\"component-switch\">" + "<input type=\"checkbox\" id=\"slider-$1\" />" + "<label for=\"slider-$1\"></label>" + "</div>").replace(/\$1/g, sid())));
                this.inline = get;
                this.inline = set;
                this.inline = isOn();
                this.bool = {
                    return: this.$checkbox.is(':checked')
                };
                this.$checkbox = this.el.find("input[type=checkbox]");
                this.$checkbox.click(function (e) {
                    e.stopPropagation();
                    _this.changed(_this.value);
                });
            }
            Switch.prototype.value = function () {
                return this.isOn();
            };
            Switch.prototype.value = function (bValue) {
                if (bValue != this.value) {
                    this.$checkbox.attr("checked", bValue);
                    this.changed(bValue);
                }
            };
            Switch.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                this.value = isDef($comp.attr("on"));
            };
            Switch.prototype.changed = function (bValue) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).changed;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, bValue) : _broadcast[i].listener(_recivier, bValue);
                    }
                }
            };
            return Switch;
        })(Component);
        ui.Switch = Switch;        
        register("Switch", Switch);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Label = (function (_super) {
            __extends(Label, _super);
            function Label(ui, options, eType) {
                if (typeof eType === "undefined") { eType = EUIComponents.LABEL; }
                _super.call(this, ui, options, eType, $("<div>					<div class='label-text'></div>					<input 					onfocus=\"this.style.width = ((this.value.length + 1) * 6) + 'px';\" 					onkeyup=\"this.style.width = ((this.value.length + 1) * 6) + 'px';\" class='label-input' style='display:none;' type='text' value=''/>				</div>"));
                this._bEditable = false;
                this._sPostfix = null;
                this.inline = get;
                this.inline = set;
                this.inline = set;
                this.inline = get;
                this.inline = isEditable();
                this.bool = {
                    return: this._bEditable
                };
                this.$text = this.$element.find(".label-text");
                this.$input = this.$element.find(".label-input");
                this.text = isObject(options) ? options.text || "" : "";
                this.editable(isObject(options) ? options.editable || false : false);
            }
            Label.prototype.text = function () {
                var s = this.$text.html();
                return s.substr(0, s.length - (this._sPostfix || "").length);
            };
            Label.prototype.text = function (x) {
                this.$text.html(x + (this._sPostfix || ""));
            };
            Label.prototype.postfix = function (s) {
                this._sPostfix = s;
            };
            Label.prototype.postfix = function () {
                return this._sPostfix;
            };
            Label.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                this.text = $comp.attr("text");
                this.editable($comp.attr("editable") || false);
                this.postfix = $comp.attr("postfix");
            };
            Label.prototype.editable = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                this._bEditable = bValue;
                if (bValue) {
                    this.handleEvent("click keydown focusout");
                    this.el.addClass("editable");
                } else {
                    this.el.removeClass("editable");
                    this.disableEvent("click keydown focusout");
                }
            };
            Label.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                this.el.addClass("component-label");
            };
            Label.prototype.click = function (e) {
                this.$text.css("display", "none");
                this.$input.val(this.text);
                this.$input.css("display", "inline-block").focus();
                _super.prototype.click.call(this, e);
            };
            Label.prototype.keydown = function (e) {
                if (this.$input.is(":focus")) {
                    if ((e).keyCode == EKeyCodes.ENTER) {
                        this.focusout(e);
                    }
                }
                _super.prototype.keydown.call(this, e);
            };
            Label.prototype.focusout = function (e) {
                var sText = this.$input.val();
                var isChanged = (this.$text.html() !== sText);
                this.$text.html(sText);
                this.$text.css("display", "inline-block");
                this.$input.css("display", "none");
                if (isChanged) {
                    this.changed(sText);
                }
                _super.prototype.focusout.call(this, e);
            };
            Label.prototype.changed = function (value) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).changed;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, value) : _broadcast[i].listener(_recivier, value);
                    }
                }
            };
            return Label;
        })(Component);
        ui.Label = Label;        
        register("Label", Label);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        function prettifyNumber(x) {
            if (x === math.floor(x)) {
                return "" + x + ".";
            }
            return x.toFixed(2);
        }
        var Vector = (function (_super) {
            __extends(Vector, _super);
            function Vector(ui, options, eType) {
                if (typeof eType === "undefined") { eType = EUIComponents.VECTOR; }
                _super.call(this, ui, options, eType);
                this.totalComponents = 4;
                this._iFixed = 2;
                this._bEditable = false;
                this.inline = get;
                this.inline = isEditable();
                this.bool = {
                    return: this._bEditable
                };
                this.template("ui/templates/Vector.tpl");
                this.x = this.findEntity('x');
                this.y = this.findEntity('y');
                this.z = this.findEntity('z');
                this.w = this.findEntity('w');
                this.connect(this.x, "changed", "changed");
                this.connect(this.y, "changed", "changed");
                this.connect(this.z, "changed", "changed");
                this.connect(this.w, "changed", "changed");
                this.setVec4(vec4(0.));
            }
            Vector.prototype.value = function () {
                switch(this.totalComponents) {
                    case 2:
                        return this.toVec2();
                    case 3:
                        return this.toVec3();
                    case 4:
                        return this.toVec4();
                }
                return null;
            };
            Vector.prototype._createdFrom = function ($comp) {
                var bValue = $comp.attr("editable") || false;
                var sPostfix = $comp.attr("postfix") || null;
                this.x.postfix = sPostfix;
                this.y.postfix = sPostfix;
                this.z.postfix = sPostfix;
                this.w.postfix = sPostfix;
                this.editable(bValue);
            };
            Vector.prototype.editable = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (bValue) {
                    this.el.addClass("editable");
                } else {
                    this.el.removeClass("editable");
                }
                this.x.editable(bValue);
                this.y.editable(bValue);
                this.z.editable(bValue);
                this.w.editable(bValue);
                this._bEditable = bValue;
            };
            Vector.prototype.changed = function () {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).changed;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, this.value) : _broadcast[i].listener(_recivier, this.value);
                    }
                }
                ;
            };
            Vector.prototype.useComponents = function (n) {
                if (n === this.totalComponents) {
                    return;
                }
                var pSpanList = this.el.find(">span");
                switch(n) {
                    case 2:
                        $(pSpanList[3]).css("display", "none");
                        $(pSpanList[2]).css("display", "none");
                        break;
                    case 3:
                        $(pSpanList[3]).css("display", "none");
                        $(pSpanList[2]).css("display", "inline-block");
                        break;
                    case 4:
                        $(pSpanList[3]).css("display", "inline-block");
                        $(pSpanList[2]).css("display", "inline-block");
                }
                this.totalComponents = n;
            };
            Vector.prototype.setVec2 = function (v) {
                var n = this._iFixed;
                this.x.text = prettifyNumber(v.x);
                this.y.text = prettifyNumber(v.y);
                this.useComponents(2);
            };
            Vector.prototype.setVec3 = function (v) {
                var n = this._iFixed;
                this.x.text = prettifyNumber(v.x);
                this.y.text = prettifyNumber(v.y);
                this.z.text = prettifyNumber(v.z);
                this.useComponents(3);
            };
            Vector.prototype.setVec4 = function (v) {
                var n = this._iFixed;
                this.x.text = prettifyNumber(v.x);
                this.y.text = prettifyNumber(v.y);
                this.z.text = prettifyNumber(v.z);
                this.w.text = prettifyNumber(v.w);
                this.useComponents(4);
            };
            Vector.prototype.toVec2 = function () {
                return vec2(parseFloat(this.x.text), parseFloat(this.y.text));
            };
            Vector.prototype.toVec3 = function () {
                return vec3(parseFloat(this.x.text), parseFloat(this.y.text), parseFloat(this.z.text));
            };
            Vector.prototype.toVec4 = function () {
                return vec4(parseFloat(this.x.text), parseFloat(this.y.text), parseFloat(this.z.text), parseFloat(this.w.text));
            };
            Vector.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                this.el.addClass("component-vector");
            };
            return Vector;
        })(Component);
        ui.Vector = Vector;        
        register("Vector", Vector);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Layout = (function (_super) {
            __extends(Layout, _super);
            function Layout(parent, element, eType) {
                if (typeof element === "undefined") { element = $("<div />"); }
                if (typeof eType === "undefined") { eType = EUILayouts.UNKNOWN; }
                _super.call(this, parent, element, EUINodeTypes.LAYOUT);
                this._pAttrs = null;
                this.inline = get;
                this.inline = attr(sAttr, string);
                this.any = {
                    return: isNull(this._pAttrs) ? null : (this._pAttrs)[sAttr]
                };
                this._eLayoutType = eType;
            }
            Layout.prototype.layoutType = function () {
                return this._eLayoutType;
            };
            Layout.prototype.attachToParent = function (pParent) {
                if (isNull(pParent) || !isNull(pParent.child)) {
                }
                return _super.prototype.attachToParent.call(this, pParent);
            };
            Layout.prototype.setAttributes = function (pAttrs) {
                if (isNull(pAttrs)) {
                    return;
                }
                this._pAttrs = pAttrs;
            };
            Layout.prototype.childAdded = function (pChild) {
                _super.prototype.childAdded.call(this, pChild);
            };
            Layout.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<layout' + (this.name ? " " + this.name : "") + '>';
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return Layout;
        })(HTMLNode);
        ui.Layout = Layout;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Horizontal = (function (_super) {
            __extends(Horizontal, _super);
            function Horizontal(parent) {
                _super.call(this, parent, $("<div class='layout horizontal'><table/></div>"), EUILayouts.HORIZONTAL);
                this.$table = this.$element.find("table:first");
                this.$row = $("<tr />");
                this.$table.append(this.$row);
            }
            Horizontal.prototype.renderTarget = function () {
                var $td = $("<td />");
                this.$row.append($td);
                return $td;
            };
            Horizontal.prototype.removeChild = function (pChild) {
                if (containsHTMLElement(pChild)) {
                    (pChild).$element.parent().remove();
                }
                return _super.prototype.removeChild.call(this, pChild);
            };
            Horizontal.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<horizontal' + (this.name ? " " + this.name : "") + '>';
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return Horizontal;
        })(Layout);
        ui.Horizontal = Horizontal;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Vertical = (function (_super) {
            __extends(Vertical, _super);
            function Vertical(parent) {
                _super.call(this, parent, $("<div class='layout vertical'><table /></div>"), EUILayouts.VERTICAL);
                this.$table = this.$element.find("table:first");
            }
            Vertical.prototype.renderTarget = function () {
                var $trtd = $("<tr><td /></tr>");
                this.$table.append($trtd);
                return $trtd.find("> td");
            };
            Vertical.prototype.removeChild = function (pChild) {
                if (containsHTMLElement(pChild)) {
                    var $el = (pChild).$element;
                    $el.parent().parent().remove();
                }
                return _super.prototype.removeChild.call(this, pChild);
            };
            Vertical.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<vertical' + (this.name ? " " + this.name : "") + '>';
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            return Vertical;
        })(Layout);
        ui.Vertical = Vertical;        
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Slider = (function (_super) {
            __extends(Slider, _super);
            function Slider(parent, options, eType) {
                if (typeof eType === "undefined") { eType = EUIComponents.SLIDER; }
                _super.call(this, parent, options, eType);
                this._fRange = 100.0;
                this._fValue = 0.0;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.ui.createComponent("pin", {
                    class: "component-pin"
                }).attachToParent(this);
                this.pin.setDraggable();
                this.connect(this.pin, "move", "_updated");
            }
            Slider.prototype.pin = function () {
                return this.child;
            };
            Slider.prototype.value = function () {
                return this._fValue * this._fRange;
            };
            Slider.prototype.range = function () {
                return this._fRange;
            };
            Slider.prototype.range = function (fValue) {
                this._fRange = fValue;
            };
            Object.defineProperty(Slider.prototype, "value", {
                set: function (fValue) {
                    fValue = math.clamp(fValue / this._fRange, 0., 1.);
                    var iElementOffset = this.$element.offset().left;
                    var iPixelTotal = this.$element.width() - this.pin.$element.width();
                    var iPixelCurrent = iPixelTotal * fValue;
                    var iPinOffset = iPixelCurrent + iElementOffset + 1;
                    this.pin.$element.offset({
                        left: iPinOffset
                    });
                    this._fValue = fValue;
                },
                enumerable: true,
                configurable: true
            });
            Slider.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                this.el.addClass("component-slider");
            };
            Slider.prototype._updated = function (pPin, e) {
                var fValuePrev = this._fValue;
                var fValue;
                var iPinOffset = this.pin.$element.offset().left;
                var iElementOffset = this.$element.offset().left;
                var iPixelTotal = this.$element.width() - this.pin.$element.width();
                var iPixelCurrent = iPinOffset - iElementOffset - 1;
                fValue = this._fValue = math.clamp(iPixelCurrent / iPixelTotal, 0., 1.);
                if (fValue != fValuePrev) {
                    this.updated(this.value);
                }
            };
            Slider.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<slider' + (this.name ? " " + this.name : "") + '>';
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            Slider.prototype.updated = function (value) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).updated;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, value) : _broadcast[i].listener(_recivier, value);
                    }
                }
            };
            return Slider;
        })(Component);
        ui.Slider = Slider;        
        register("Slider", Slider);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Checkbox = (function (_super) {
            __extends(Checkbox, _super);
            function Checkbox(parent, options, eType) {
                if (typeof eType === "undefined") { eType = EUIComponents.CHECKBOX; }
                _super.call(this, getUI(parent), options, eType, $("<div><span class=\"checkbox-item-text\"></span></div>"));
                this._bChecked = false;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = set;
                this.inline = isChecked();
                this.bool = {
                    return: this._bChecked
                };
                this.$text = this.$element.find(".checkbox-item-text:first");
                if (isDefAndNotNull(options) && isString(options.text)) {
                    this.text = options.text;
                }
                if (!isUI(parent)) {
                    this.attachToParent(parent);
                }
                this.text = isObject(options) ? options.text || "" : "";
                this.handleEvent("click");
            }
            Checkbox.prototype.checked = function () {
                return this.isChecked();
            };
            Checkbox.prototype.checked = function (bValue) {
                var bPrev = this.isChecked();
                this._setValue(bValue);
                if (bValue != bPrev) {
                    this.changed(bValue);
                }
            };
            Checkbox.prototype.text = function () {
                return this.$text.html();
            };
            Checkbox.prototype.text = function (sValue) {
                this.$text.html(sValue);
            };
            Checkbox.prototype._setValue = function (bValue) {
                if (bValue) {
                    this.$element.addClass("active");
                } else {
                    this.$element.removeClass("active");
                }
                this._bChecked = bValue;
            };
            Checkbox.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                this.text = $comp.attr("text");
                if (isDef($comp.attr("checked"))) {
                    this.checked = true;
                }
            };
            Checkbox.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                this.el.addClass("component-checkbox");
            };
            Checkbox.prototype.click = function (e) {
                this.checked = !this.checked;
                _super.prototype.click.call(this, e);
            };
            Checkbox.prototype.toString = function (isRecursive, iDepth) {
                if (typeof isRecursive === "undefined") { isRecursive = false; }
                if (typeof iDepth === "undefined") { iDepth = 0; }
                if (!isRecursive) {
                    return '<checkbox' + (this.name ? " " + this.name : "") + '>';
                }
                return _super.prototype.toString.call(this, isRecursive, iDepth);
            };
            Checkbox.prototype.changed = function (value) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).changed;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, value) : _broadcast[i].listener(_recivier, value);
                    }
                }
            };
            return Checkbox;
        })(Component);
        ui.Checkbox = Checkbox;        
        inline;
        function isCheckbox(pEntity) {
            return isComponent(pEntity, EUIComponents.CHECKBOX);
        }
        register("Checkbox", Checkbox);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var CheckboxList = (function (_super) {
            __extends(CheckboxList, _super);
            function CheckboxList(parent, options, eType) {
                if (typeof eType === "undefined") { eType = EUIComponents.CHECKBOX_LIST; }
                _super.call(this, parent, options, eType);
                this._nSize = 0;
                this._pItems = [];
                this._bMultiSelect = false;
                this._bLikeRadio = false;
                this.inline = get;
                this.inline = get;
                this.inline = set;
                this.inline = get;
                this.inline = get;
                this.inline = hasMultiSelect();
                this.bool = {
                    return: this._bMultiSelect
                };
                this.setLayout(EUILayouts.HORIZONTAL);
                this.connect(this.layout, "childAdded", "_childAdded", EEventTypes.UNICAST);
                this.connect(this.layout, "childRemoved", "_childRemoved", EEventTypes.UNICAST);
                var pChild = this.layout.child;
                while(!isNull(pChild)) {
                    if (isCheckbox(pChild)) {
                        this.addCheckbox(pChild);
                    }
                    pChild = pChild.sibling;
                }
            }
            CheckboxList.prototype.length = function () {
                return this._nSize;
            };
            CheckboxList.prototype.radio = function () {
                return this._bLikeRadio;
            };
            CheckboxList.prototype.radio = function (b) {
                this._bLikeRadio = b;
            };
            CheckboxList.prototype.items = function () {
                return this._pItems;
            };
            CheckboxList.prototype.checked = function () {
                for(var i = 0; i < this.items.length; ++i) {
                    if (this.items[i].checked) {
                        return this.items[i];
                    }
                }
                return null;
            };
            CheckboxList.prototype._createdFrom = function ($comp) {
                _super.prototype._createdFrom.call(this, $comp);
                this.radio = isDef($comp.attr("radio")) && $comp.attr("radio").toLowerCase() !== "false";
            };
            CheckboxList.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                this.el.addClass("component-checkboxlist");
            };
            CheckboxList.prototype.update = function () {
                var pItems = this._pItems;
                if (pItems.length == 0) {
                    return;
                }
                pItems.first.$element.addClass("first");
                for(var i = 0; i < pItems.length - 1; ++i) {
                    pItems[i].$element.removeClass("last");
                }
                ;
                pItems.last.$element.addClass("last");
                return _super.prototype.update.call(this);
            };
            CheckboxList.prototype.addCheckbox = function (pCheckbox) {
                this._pItems.push(pCheckbox);
                this.connect(pCheckbox, "changed", "_changed");
                this.update();
            };
            CheckboxList.prototype._childAdded = function (pLayout, pNode) {
                if (isCheckbox(pNode)) {
                    this.addCheckbox(pNode);
                }
            };
            CheckboxList.prototype._childRemoved = function (pLayout, pNode) {
                if (isCheckbox(pNode)) {
                    var i = this._pItems.indexOf(pNode);
                    if (i != -1) {
                        var pCheckbox = this._pItems[i];
                        this.disconnect(pCheckbox, "changed", "_changed");
                        this._pItems.splice(i, 1);
                        this.update();
                    }
                }
            };
            CheckboxList.prototype._changed = function (pCheckbox, bCheked) {
                if (this.hasMultiSelect()) {
                    return;
                } else {
                    if (!bCheked && this.radio) {
                        pCheckbox.checked = true;
                        return;
                    }
                    var pItems = this._pItems;
                    for(var i = 0; i < pItems.length; ++i) {
                        if (pItems[i] === pCheckbox) {
                            continue;
                        }
                        pItems[i]._setValue(false);
                    }
                    this.changed(pCheckbox);
                }
            };
            CheckboxList.prototype.changed = function (pCheckbox) {
                this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                var _broadcast = (this._pBroadcastSlotList).changed;
                var _recivier = this;
                if (isDef(_broadcast)) {
                    for(var i = 0; i < _broadcast.length; ++i) {
                        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pCheckbox) : _broadcast[i].listener(_recivier, pCheckbox);
                    }
                }
            };
            return CheckboxList;
        })(Component);
        ui.CheckboxList = CheckboxList;        
        register("CheckboxList", CheckboxList);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var Window = (function (_super) {
            __extends(Window, _super);
            function Window(pUI, options) {
                _super.call(this, pUI, options, EUIComponents.WINDOW);
                this._pWindow = window.open("", "", "height=480, width=640", false);
                this.$document = $(this._pWindow.document);
                this.$element = this.$document.find("body");
                this.$document.find("head").append($document.find("link"));
                this.$element.html("");
            }
            return Window;
        })(Component);
        ui.Window = Window;        
        register("Window", Window);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var RenderTargetStats = (function (_super) {
            __extends(RenderTargetStats, _super);
            function RenderTargetStats(ui, options, pRenderTarget) {
                var _this = this;
                _super.call(this, ui, options, EUIComponents.VIEWPORT_STATS, $("<div class=\"component-fps\" ><div class=\"info\"></div><div class=\"graph\"></div></div>"));
                this._pRenderTarget = null;
                this._pUpdateInterval = -1;
                this.inline = get;
                this.inline = get;
                var $graph = this.el.find(".graph");
                var pInfo = this.el.find(".info").get()[0];
                var pTicks = [];
                var pValues = [];
                var iTotal = 100;
                for(var i = 0; i < iTotal; ++i) {
                    var $tick = $("<span class=\"tick\"/>");
                    $graph.append($tick);
                    pTicks.push($tick.get()[0]);
                    pValues.push(0);
                }
                this._pInfoElement = pInfo;
                this._pValues = pValues;
                this._pTicks = pTicks;
                if (isDefAndNotNull(pRenderTarget)) {
                    this.target = pRenderTarget;
                }
            }
            RenderTargetStats.prototype.info = function () {
                return this._pInfoElement;
            };
            RenderTargetStats.prototype.target = function () {
                return this._pRenderTarget;
            };
            Object.defineProperty(RenderTargetStats.prototype, "target", {
                set: function (pRenderTarget) {
                    if (!isNull(this._pRenderTarget)) {
                        clearInterval(this._pUpdateInterval);
                    }
                    this._pRenderTarget = pRenderTarget;
                    this._pUpdateInterval = setInterval(function () {
                        _this.updateStats();
                    }, 1000);
                },
                enumerable: true,
                configurable: true
            });
            RenderTargetStats.prototype.updateStats = function () {
                var pTarget = this.target;
                var pStat = pTarget.getStatistics();
                var fFPS = pStat.fps.last;
                var v = this._pValues;
                var iTotal = v.length;
                var iMaxHeight = 27;
                var sFps = fFPS.toFixed(2);
                for(var i = 0, n = iTotal - 1; i < n; ++i) {
                    v[i] = v[i + 1];
                }
                v[n] = fFPS;
                this.info.textContent = "FPS: " + (v[n] < 100 ? (v[n] < 10 ? "  " + sFps : " " + sFps) : sFps);
                var max = math.max.apply(math, v);
                var pTicks = this._pTicks;
                for(var i = 0; i < iTotal; ++i) {
                    pTicks[i].style.height = math.floor(v[i] / max * iMaxHeight) + "px";
                    var fColor = math.min(v[i], 60.) / 60.;
                    pTicks[i].style.backgroundColor = "rgb(" + (math.floor((1 - fColor) * 125) + 125) + ", " + (math.floor(fColor * 125) + 125) + ", 0)";
                }
            };
            RenderTargetStats.prototype.rendered = function () {
                this.el.addClass("component-fps");
            };
            return RenderTargetStats;
        })(Component);
        ui.RenderTargetStats = RenderTargetStats;        
        register("RenderTargetStats", RenderTargetStats);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var TreeNode = (function () {
            function TreeNode(pTree, pSource) {
                this.el = null;
                this.parent = null;
                this.tree = null;
                this.source = null;
                this.expanded = false;
                this._pNodeMap = {};
                this.$childrenNode = null;
                this.inline = get;
                this.inline = get;
                this.inline = sourceName();
                this.string = {
                    return: this.source.name ? this.source.name : "<span class=\"unnamed\">[unnamed]</span>"
                };
                this.tree = pTree;
                this.source = pSource;
 {
                    logger.setSourceLocation("Tree.ts", 45);
                    logger.assert(!isNull(pSource), "source entity can not be null");
                }
                ;
                var pNode = this;
                this.el = $("<li><label  for=\"" + this.getID() + "\">" + this.sourceName() + "</label></li>");
                this.el.find("label:first").click(function (e) {
                    e.stopPropagation();
                    pNode.select();
                });
                this.tree._link(this);
                this.sync();
            }
            TreeNode.prototype.totalChildren = function () {
                return Object.keys(this._pNodeMap).length;
            };
            TreeNode.prototype.selected = function () {
                return this.tree.isSelected(this);
            };
            Object.defineProperty(TreeNode.prototype, "selected", {
                set: function (bValue) {
                    if (!this.selected && !bValue) {
                        this.el.find("label:first").removeClass("selected");
                    } else if (this.selected && bValue) {
                        this.el.find("label:first").addClass("selected");
                    }
                },
                enumerable: true,
                configurable: true
            });
            TreeNode.prototype.expand = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                if (this.totalChildren) {
                    this.el.find("input").attr("checked", bValue);
                }
                this.expanded = bValue;
            };
            TreeNode.prototype.select = function (isSelect) {
                if (typeof isSelect === "undefined") { isSelect = true; }
                return this.tree.select(this);
            };
            TreeNode.prototype.getID = function () {
                return "node-guid-" + this.source.getGuid();
            };
            TreeNode.prototype.sync = function (bRecursive) {
                if (typeof bRecursive === "undefined") { bRecursive = true; }
                this.el.find("label:first").html(this.sourceName());
                if (bRecursive) {
                    var pChildren = this.source.children();
                    var pChildMap = {};
                    for(var i = 0; i < pChildren.length; ++i) {
                        var pChild = pChildren[i];
                        pChildMap[pChild.getGuid()] = pChild;
                        if (!this.inChildren(pChild)) {
                            this.addChild(this.tree._createNode(pChild));
                        }
                    }
                    for(var iGuid in this._pNodeMap) {
                        if (!isDef(pChildMap[iGuid])) {
                            this._pNodeMap[iGuid].destroy();
                        }
                    }
                }
            };
            TreeNode.prototype.synced = function () {
                this.el.find("label:first").removeClass("updating");
            };
            TreeNode.prototype.waitForSync = function () {
                this.el.find("label:first").addClass("updating");
            };
            TreeNode.prototype.removeChildren = function () {
                for(var i in this._pNodeMap) {
                    this._pNodeMap[i].destroy();
                    this._pNodeMap[i] = null;
                }
            };
            TreeNode.prototype.inChildren = function (pNode) {
                return isDefAndNotNull(this._pNodeMap[pNode.getGuid()]);
            };
            TreeNode.prototype.addChild = function (pNode) {
                if (isNull(this.$childrenNode)) {
                    this.el.append("<input " + (this.expanded ? "checked" : "") + " type=\"checkbox\"  id=\"" + this.getID() + "\" />");
                    this.el.removeClass("file");
                    this.$childrenNode = $("<ol />");
                    this.el.append(this.$childrenNode);
                }
                this.$childrenNode.append(pNode.el);
                this._pNodeMap[pNode.source.getGuid()] = pNode;
            };
            TreeNode.prototype.destroy = function () {
                this.removeChildren();
                this.tree._unlink(this);
                this.tree = null;
                this.source = null;
                this.el.remove();
            };
            return TreeNode;
        })();
        ui.TreeNode = TreeNode;        
        var Tree = (function (_super) {
            __extends(Tree, _super);
            function Tree(ui, options, eType) {
                if (typeof eType === "undefined") { eType = EUIComponents.TREE; }
                _super.call(this, ui, options, eType, $("<ol class='tree'/>"));
                this._pNodeMap = {};
                this._pRootNode = null;
                this._pSelectedNode = null;
                this.inline = get;
            }
            Tree.prototype.fromTree = function (pEntity) {
                if (!isNull(this._pRootNode)) {
 {
                        logger.setSourceLocation("Tree.ts", 160);
                        logger.criticalError("TODO: replace node");
                    }
                    ;
                }
                this._pRootNode = this._createNode(pEntity);
                this._pRootNode.sync();
                this._pRootNode.expand();
                this.el.append(this._pRootNode.el);
                this._pRootNode.select();
            };
            Tree.prototype.rootNode = function () {
                return this._pRootNode;
            };
            Tree.prototype.select = function (pNode) {
                var pPrev = this._pSelectedNode;
                this._pSelectedNode = null;
                if (!isNull(pPrev)) {
                    pPrev.selected = false;
                }
                this._pSelectedNode = pNode;
                if (!isNull(this._pSelectedNode)) {
                    this._pSelectedNode.selected = true;
                }
                return true;
            };
            Tree.prototype.isSelected = function (pNode) {
                return this._pSelectedNode === pNode;
            };
            Tree.prototype.rendered = function () {
                _super.prototype.rendered.call(this);
                this.el.addClass("component-tree");
            };
            Tree.prototype._createNode = function (pEntity) {
                var pNode = new TreeNode(this, pEntity);
                return pNode;
            };
            Tree.prototype._link = function (pNode) {
                this._pNodeMap[pNode.source.getGuid()] = pNode;
            };
            Tree.prototype._unlink = function (pNode) {
                this._pNodeMap[pNode.source.getGuid()] = null;
            };
            Tree.prototype.sync = function (pEntity) {
                if (arguments.length && !isNull(pEntity)) {
                    this._pNodeMap[pEntity.getGuid()].sync(false);
                } else {
                    this.rootNode.sync();
                }
            };
            return Tree;
        })(Component);
        ui.Tree = Tree;        
        register("Tree", Tree);
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    (function (EUIGraphNodes) {
        EUIGraphNodes._map = [];
        EUIGraphNodes._map[0] = "UNKNOWN";
        EUIGraphNodes.UNKNOWN = 0;
        EUIGraphNodes._map[1] = "ANIMATION_DATA";
        EUIGraphNodes.ANIMATION_DATA = 1;
        EUIGraphNodes._map[2] = "ANIMATION_PLAYER";
        EUIGraphNodes.ANIMATION_PLAYER = 2;
        EUIGraphNodes._map[3] = "ANIMATION_BLENDER";
        EUIGraphNodes.ANIMATION_BLENDER = 3;
        EUIGraphNodes._map[4] = "ANIMATION_MASK";
        EUIGraphNodes.ANIMATION_MASK = 4;
    })(akra.EUIGraphNodes || (akra.EUIGraphNodes = {}));
    var EUIGraphNodes = akra.EUIGraphNodes;
})(akra || (akra = {}));
var akra;
(function (akra) {
    ;
    ;
    ;
    (function (EUIGraphDirections) {
        EUIGraphDirections._map = [];
        EUIGraphDirections.IN = 0x01;
        EUIGraphDirections.OUT = 0x02;
    })(akra.EUIGraphDirections || (akra.EUIGraphDirections = {}));
    var EUIGraphDirections = akra.EUIGraphDirections;
    (function (EUIGraphTypes) {
        EUIGraphTypes._map = [];
        EUIGraphTypes._map[0] = "UNKNOWN";
        EUIGraphTypes.UNKNOWN = 0;
        EUIGraphTypes._map[1] = "ANIMATION";
        EUIGraphTypes.ANIMATION = 1;
    })(akra.EUIGraphTypes || (akra.EUIGraphTypes = {}));
    var EUIGraphTypes = akra.EUIGraphTypes;
    (function (EUIGraphEvents) {
        EUIGraphEvents._map = [];
        EUIGraphEvents._map[0] = "UNKNOWN";
        EUIGraphEvents.UNKNOWN = 0;
        EUIGraphEvents._map[1] = "DELETE";
        EUIGraphEvents.DELETE = 1;
        EUIGraphEvents._map[2] = "SHOW_MAP";
        EUIGraphEvents.SHOW_MAP = 2;
        EUIGraphEvents._map[3] = "HIDE_MAP";
        EUIGraphEvents.HIDE_MAP = 3;
    })(akra.EUIGraphEvents || (akra.EUIGraphEvents = {}));
    var EUIGraphEvents = akra.EUIGraphEvents;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var Controls = (function (_super) {
                __extends(Controls, _super);
                function Controls(parent, options, pGraph) {
                    if (typeof pGraph === "undefined") { pGraph = null; }
                    _super.call(this, parent, options);
                    this.controls = this.ui.createComponent("Controls");
                    this.graph = pGraph || this.ui.createComponent("Graph");
                    this.controls.attachToParent(this);
                    this.graph.attachToParent(this);
                    var pControlPanel = this.controls;
                    var pNodeBtn = new Button(pControlPanel, {
                        text: "Create graph node"
                    });
                    this.connect(pNodeBtn, "click", "createNode");
                }
                Controls.prototype.createNode = function () {
                    return new graph.Node(this.graph);
                };
                Controls.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    this.el.addClass("component-graphcontrols");
                };
                return Controls;
            })(Panel);
            graph.Controls = Controls;            
            register("GraphControls", Controls);
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var Connector = (function (_super) {
                __extends(Connector, _super);
                function Connector(parent, options) {
                    _super.call(this, parent, options, EUIComponents.GRAPH_CONNECTOR);
                    this._eDirect = EUIGraphDirections.IN;
                    this._bActive = false;
                    this._pRoute = null;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = set;
                    this.inline = isConnected();
                    this.bool = {
                        return: !isNull(this.route) && this.route.isBridge()
                    };
                    this.inline = isActive();
                    this.bool = {
                        return: this._bActive
                    };
                    this.handleEvent("mousedown mouseup");
                    this.el.disableSelection();
                }
                Connector.prototype.area = function () {
                    return (this.parent.parent);
                };
                Connector.prototype.node = function () {
                    return this.area.node;
                };
                Connector.prototype.graph = function () {
                    return this.node.graph;
                };
                Connector.prototype.route = function () {
                    return this._pRoute;
                };
                Connector.prototype.direction = function () {
                    return this._eDirect;
                };
                Connector.prototype.route = function (pRoute) {
                    this._pRoute = pRoute;
                    (this === pRoute.left ? this.output() : this.input());
                    if (pRoute.isBridge()) {
                        this.connected(pRoute.right);
                    }
                };
                Connector.prototype.mousedown = function (e) {
                    e.stopPropagation();
                    if (!isNull(this.route)) {
                        return;
                    }
                    this.graph.createRouteFrom(this);
                };
                Connector.prototype.mouseup = function (e) {
                    if (this.direction === EUIGraphDirections.IN && !this.isConnected() && this.node.isSuitable()) {
                        e.stopPropagation();
                        this.graph.connectTo(this);
                    }
                };
                Connector.prototype.hasRoute = function () {
                    return !isNull(this.route);
                };
                Connector.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    this.el.addClass("component-graphconnector");
                };
                Connector.prototype.activate = function (bValue) {
                    if (typeof bValue === "undefined") { bValue = true; }
                    if (this.isActive() === bValue) {
                        return;
                    }
                    this._bActive = bValue;
                    this.activated(bValue);
                    this.highlight(bValue);
                    this.route.activate(bValue);
                };
                Connector.prototype.sendEvent = function (e) {
                    this.node.sendEvent(e);
                };
                Connector.prototype.input = function () {
                    this.el.addClass("in");
                    this._eDirect = EUIGraphDirections.IN;
                    return true;
                };
                Connector.prototype.output = function () {
                    this.el.addClass("out");
                    this._eDirect = EUIGraphDirections.OUT;
                    return true;
                };
                Connector.prototype.highlight = function (bToggle) {
                    if (typeof bToggle === "undefined") { bToggle = false; }
                    bToggle ? this.$element.addClass("highlight") : this.$element.removeClass("highlight");
                };
                Connector.prototype.routing = function () {
                    this.route.routing();
                };
                Connector.prototype.connected = function (pTarget) {
                    this.el.addClass("connected");
                    this.el.css({
                        backgroundColor: this.route.color.html
                    });
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).connected;
                    var _recivier = this;
                    if (isDef(_broadcast)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pTarget) : _broadcast[i].listener(_recivier, pTarget);
                        }
                    }
                    ;
                };
                Connector.prototype.activated = function (value) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).activated;
                    var _recivier = this;
                    if (isDef(_broadcast)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, value) : _broadcast[i].listener(_recivier, value);
                        }
                    }
                };
                Connector.prototype.routeBreaked = function (pRoute) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).routeBreaked;
                    var _recivier = this;
                    if (isDef(_broadcast)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pRoute) : _broadcast[i].listener(_recivier, pRoute);
                        }
                    }
                };
                return Connector;
            })(Component);
            graph.Connector = Connector;            
            register("GraphConnector", Connector);
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var MouseConnector = (function (_super) {
                __extends(MouseConnector, _super);
                function MouseConnector(pGraph, options) {
                    _super.call(this, pGraph, options);
                    this.connect(pGraph, "\"mousemove\"", "_onMouseMove");
                    this.setDraggable();
                    this.el.css({
                        "background": "red"
                    });
                }
                MouseConnector.prototype.mousedown = function (e) {
                };
                MouseConnector.prototype._onMouseMove = function (pGraph, e) {
                    var pOffset = this.$element.offset();
                    this.$element.offset({
                        left: e.pageX - pOffset.left,
                        top: e.pageY - pOffset.top
                    });
                };
                return MouseConnector;
            })(Connector);
            graph.MouseConnector = MouseConnector;            
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var Route = (function () {
                function Route(pLeft, pRight) {
                    this._pLeft = null;
                    this._pRight = null;
                    this._bActive = false;
                    this._pPath = null;
                    this._pArrow = null;
                    this._fWeight = 1.;
                    this._fMaxWeight = 2.;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = set;
                    this.inline = set;
                    this.inline = get;
                    this.inline = get;
                    this.inline = set;
                    this.inline = isConnectedWithNode(pNode, IUIGraphNode);
                    this.bool = {
                        return: this.left.node === pNode || this.right.node === pNode
                    };
                    this.inline = isConnectedWith(pConnector, IUIGraphConnector);
                    this.bool = {
                        return: this.left === pConnector || this.right === pConnector
                    };
                    this.inline = isBridge();
                    this.bool = {
                        return: !isNull(this.left) && !isNull(this.right)
                    };
                    this.inline = isActive();
                    this.bool = {
                        return: this._bActive
                    };
                    this._pLeft = pLeft;
                    this._pRight = pRight;
                    this._pColor = util.randomColor(true);
                    this._pColor.a = .5;
                    if (!isNull(pLeft)) {
                        pLeft.route = this;
                    }
                    if (!isNull(pRight)) {
                        pRight.route = this;
                    }
                }
                Route.prototype.color = function () {
                    return this._pColor;
                };
                Route.prototype.left = function () {
                    return this._pLeft;
                };
                Route.prototype.right = function () {
                    return this._pRight;
                };
                Route.prototype.weight = function () {
                    return this._fWeight;
                };
                Object.defineProperty(Route.prototype, "left", {
                    set: function (pConnector) {
                        if (!isNull(this._pLeft)) {
                            this._pLeft.destroy();
                        }
                        this._pLeft = pConnector;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Route.prototype, "right", {
                    set: function (pConnector) {
                        if (!isNull(this._pRight)) {
                            this._pRight.destroy();
                        }
                        this._pRight = pConnector;
                    },
                    enumerable: true,
                    configurable: true
                });
                Route.prototype.arrow = function () {
                    return this._pArrow;
                };
                Route.prototype.arrow = function (pPath) {
                    this._pArrow = pPath;
                };
                Route.prototype.weight = function (fWeight) {
                    this._fWeight = fWeight;
                };
                Route.prototype.path = function () {
                    return this._pPath;
                };
                Route.prototype.canvas = function () {
                    return this.left.graph.canvas;
                };
                Route.prototype.path = function (pPath) {
                    var pRoute = this;
                    (pPath).click(function () {
                        pRoute.activate(!pRoute.isActive());
                    });
                    this._pPath = pPath;
                };
                Route.prototype.detach = function () {
                    this._pLeft = null;
                    this._pRight = null;
                };
                Route.prototype.remove = function (bRecirsive) {
                    if (typeof bRecirsive === "undefined") { bRecirsive = false; }
                    if (!isNull(this.left)) {
                        this.left.routeBreaked(this);
                        bRecirsive && this.left.destroy();
                    }
                    if (!isNull(this.right)) {
                        this.left.routeBreaked(this);
                        bRecirsive && this.right.destroy();
                    }
                    if (!isNull(this.path)) {
                        (this.path).remove();
                        (this.arrow).remove();
                    }
                };
                Route.prototype.sendEvent = function (e) {
                    for(var i = 0; i < e.traversedRoutes.length; ++i) {
                        if (e.traversedRoutes[i] === this) {
                            return;
                        }
                    }
                    e.traversedRoutes.push(this);
                    if (!isNull(this.right)) {
                        this.right.sendEvent(e);
                    }
                    switch(e.type) {
                        case EUIGraphEvents.SHOW_MAP:
                            this.color.a = 1.;
                            this.routing();
                            break;
                        case EUIGraphEvents.HIDE_MAP:
                            this.color.a = .5;
                            this.routing();
                            break;
                    }
                };
                Route.prototype.destroy = function () {
                    this.remove(false);
                };
                Route.prototype.activate = function (bValue) {
                    if (typeof bValue === "undefined") { bValue = true; }
                    if (this.isActive() === bValue) {
                        return;
                    }
                    this._bActive = bValue;
                    if (!isNull(this.path)) {
                        (this.path).attr({
                            "stroke-width": bValue ? 3 : 2
                        });
                    }
                    this.left && this.left.activate(bValue);
                    this.right && this.right.activate(bValue);
                };
                Route.prototype.routing = function () {
                    var pLeft = Route.calcPosition(this.left);
                    var pRight = Route.calcPosition(this.right);
                    this.drawRoute(pLeft, pRight);
                };
                Route.prototype.drawRoute = function (pFrom, pTo) {
                    var fAngle = math.HALF_PI + math.atan2(pFrom.x - pTo.x, pTo.y - pFrom.y);
                    var iArrowHeight = 6;
                    var iArrowWidth = 15;
                    var pA0 = {
                        x: (0 - iArrowWidth),
                        y: (0 - iArrowHeight)
                    };
                    var pA1 = {
                        x: (0 - iArrowWidth),
                        y: (0 + iArrowHeight)
                    };
                    var pA0n = {
                        x: pA0.x * math.cos(fAngle) - pA0.y * math.sin(fAngle),
                        y: pA0.x * math.sin(fAngle) + pA0.y * math.cos(fAngle)
                    };
                    var pA1n = {
                        x: pA1.x * math.cos(fAngle) - pA1.y * math.sin(fAngle),
                        y: pA1.x * math.sin(fAngle) + pA1.y * math.cos(fAngle)
                    };
                    var pPath = [
                        [
                            "M", 
                            pFrom.x, 
                            pFrom.y
                        ], 
                        [
                            "C", 
                            pFrom.x, 
                            pFrom.y, 
                            pFrom.x, 
                            (pFrom.y * 7 + pTo.y * 3) / 10, 
                            (pFrom.x + pTo.x) / 2, 
                            (pFrom.y + pTo.y) / 2, 
                            (pFrom.x + pTo.x) / 2, 
                            (pFrom.y + pTo.y) / 2, 
                            pTo.x, 
                            (pFrom.y * 3 + pTo.y * 7) / 10, 
                            pTo.x, 
                            pTo.y, 
                            
                        ]
                    ];
                    var sColor;
                    var fWeight = this._fMaxWeight * this._fWeight;
                    sColor = this.isBridge() ? this.color.htmlRgba : "rgba(255, 255, 255, 1.)";
                    if (!isNull(this.path)) {
                        (this.path).attr({
                            path: pPath,
                            "stroke": sColor,
                            "stroke-width": fWeight
                        });
                    } else {
                        this.path = ((this.canvas).path(pPath)).attr({
                            "stroke": sColor,
                            "stroke-width": fWeight,
                            "stroke-linecap": "round"
                        });
                    }
                    var iLength = (this.path).getTotalLength();
                    var pCenter = (this.path).getPointAtLength(iLength / 2);
                    var pArrow = [
                        [
                            "M", 
                            pCenter.x, 
                            pCenter.y
                        ], 
                        [
                            "L", 
                            pCenter.x + pA0n.x, 
                            pCenter.y + pA0n.y
                        ], 
                        [
                            "L", 
                            pCenter.x + pA1n.x, 
                            pCenter.y + pA1n.y
                        ], 
                        [
                            "L", 
                            (pCenter.x), 
                            (pCenter.y)
                        ]
                    ];
                    if (!isNull(this.arrow)) {
                        (this.arrow).attr({
                            path: pArrow
                        });
                    } else {
                        this.arrow = (((this.canvas).path(pArrow)).attr({
                            "fill": sColor,
                            "stroke": "#FF0",
                            "stroke-width": 1
                        }));
                    }
                };
                Route.calcPosition = function calcPosition(pConnector) {
                    var pGraph = pConnector.graph;
                    var pGraphOffset = pGraph.$element.offset();
                    var pPosition = pConnector.$element.offset();
                    var pOut = {
                        x: pPosition.left - pGraphOffset.left,
                        y: pPosition.top - pGraphOffset.top
                    };
                    pOut.x += pConnector.$element.width() / 2.;
                    pOut.y += pConnector.$element.height() / 2.;
                    return pOut;
                };
                return Route;
            })();
            graph.Route = Route;            
            var TempRoute = (function (_super) {
                __extends(TempRoute, _super);
                function TempRoute(pLeft) {
                    _super.call(this, pLeft, null);
                }
                TempRoute.prototype.routing = function (pRight) {
                    if (typeof pRight === "undefined") { pRight = {
                        x: 0,
                        y: 0
                    }; }
                    var pLeft = Route.calcPosition(this.left);
                    this.drawRoute(pLeft, pRight);
                };
                return TempRoute;
            })(Route);
            graph.TempRoute = TempRoute;            
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var ConnectionArea = (function (_super) {
                __extends(ConnectionArea, _super);
                function ConnectionArea(parent, options, eType) {
                    if (typeof eType === "undefined") { eType = EUIComponents.GRAPH_CONNECTIONAREA; }
                    _super.call(this, parent, options, eType);
                    this._iMode = EUIGraphDirections.IN | EUIGraphDirections.OUT;
                    this._pConnectors = new Connector[]();
                    this._pTempConnect = null;
                    this._iConnectionLimit = -1;
                    this._iInConnectionLimit = MAX_INT8;
                    this._iOutConnectionLimit = MAX_INT8;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this.inline = setMode(iMode, number);
                    this.connect(this.node, "mouseenter", "_onNodeMouseover");
                    this.connect(this.node, "mouseleave", "_onNodeMouseout");
                    if (!isNull(options)) {
                        this._iConnectionLimit = isInt((options).maxConnections) ? options.maxConnections : -1;
                        this._iInConnectionLimit = isInt((options).maxInConnections) ? options.maxInConnections : MAX_INT8;
                        this._iOutConnectionLimit = isInt((options).maxOutConnections) ? options.maxOutConnections : MAX_INT8;
                    }
                    if (this._iConnectionLimit == -1) {
                        this._iConnectionLimit = this._iInConnectionLimit + this._iOutConnectionLimit;
                    }
                }
                ConnectionArea.prototype.connectors = function () {
                    return this._pConnectors;
                };
                ConnectionArea.prototype.node = function () {
                    return this.parent;
                };
                ConnectionArea.prototype.graph = function () {
                    return this.node.graph;
                };
                ConnectionArea.prototype.findRoute = function (pNode) {
                    for(var i = 0; i < this._pConnectors.length; ++i) {
                        var pRoute = this._pConnectors[i].route;
                        if (pRoute.isConnectedWithNode(pNode)) {
                            return pRoute;
                        }
                    }
                    return null;
                };
                ConnectionArea.prototype.connectorsCount = function (eDir) {
                    if (arguments.length === 0) {
                        return this._pConnectors.length;
                    }
                    var n = 0;
                    for(var i = 0; i < this._pConnectors.length; ++i) {
                        if (this._pConnectors[i].direction === eDir) {
                            n++;
                        }
                    }
                    return n;
                };
                return ConnectionArea;
            })(Panel);
            graph.ConnectionArea = ConnectionArea;            
 {
                this._iMode = iMode;
            }
            inline;
            isSupportsIncoming();
            bool;
 {
                return this.connectorsCount(EUIGraphDirections.IN) < this._iInConnectionLimit && (((this._iMode) & (EUIGraphDirections.IN)) != 0) && !this.isLimitReached();
            }
            inline;
            isSupportsOutgoing();
            bool;
 {
                return this.connectorsCount(EUIGraphDirections.OUT) < this._iOutConnectionLimit && (((this._iMode) & (EUIGraphDirections.OUT)) != 0) && !this.isLimitReached();
            }
            inline;
            isLimitReached();
            bool;
 {
                return this._pConnectors.length >= this._iConnectionLimit;
            }
            hasConnections();
            bool;
 {
                return !(this.connectors.length == 0 || isNull(this.connectors[0]));
            }
            isActive();
            bool;
 {
                return this.node.isActive();
            }
            activate(bValue, bool = true);
            void {
                for: 
            };
            var i = 0;
            i < this._pConnectors.length;
            ++i;
 {
                this._pConnectors[i].activate(bValue);
            }
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
sendEvent(e, IUIGraphEvent);
void {
    for: 
};
var i = 0;
i < this._pConnectors.length;
++i;
 {
    if (this._pConnectors[i].direction === EUIGraphDirections.OUT) {
        this._pConnectors[i].route.sendEvent(e);
    }
}
if (e.type === EUIGraphEvents.DELETE) {
    if (this.isActive()) {
        this.destroy();
    }
}
_onNodeMouseover(pNode, IUIGraphNode, e, IUIEvent);
void {
    if: ((!this.isSupportsIncoming() && this.graph.isReadyForConnect()) || (!this.isSupportsOutgoing() && !this.graph.isReadyForConnect()))
};
 {
    return;
}
if (!isNull(this._pTempConnect)) {
    return;
}
var pConnector = this._pTempConnect = new Connector(this);
this.connect(pConnector, "routeBreaked", "destroyTempConnect");
this.connect(pConnector, "connected", "onConnection");
onConnection(pConnector, IUIGraphConnector, pTarget, IUIGraphConnector);
void {};
 {
    logger.setSourceLocation("ConnectionArea.ts", 130);
    logger.assert(pConnector === this._pTempConnect, "oO!!");
}
;
this.disconnect(pConnector, "connected", "onConnection");
this._pTempConnect = null;
this._pConnectors.push(pConnector);
this.connected(pConnector.node, pConnector.route);
destroyTempConnect();
void {
    this: ,
    _pTempConnect: ,
    destroy: 
};
this._pTempConnect = null;
_onNodeMouseout(pNode, IUIGraphNode, e, IUIEvent);
void {
    if: (isNull(this._pTempConnect) || this._pTempConnect.hasRoute())
};
 {
    return;
}
this.destroyTempConnect();
inline;
routing();
void {
    for: 
};
var i = 0;
i < this._pConnectors.length;
++i;
 {
    this._pConnectors[i].routing();
}
connected(pNode, pRoute);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).connected;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pNode, pRoute) : _broadcast[i].listener(_recivier, pNode, pRoute);
    }
}
;
;
register("GraphConnectionArea", ConnectionArea);
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var Node = (function (_super) {
                __extends(Node, _super);
                function Node(pGraph, options, eType, $el) {
                    if (typeof eType === "undefined") { eType = EUIGraphNodes.UNKNOWN; }
                    _super.call(this, getUI(pGraph), options, EUIComponents.GRAPH_NODE, $el);
                    this._isActive = false;
                    this._pAreas = {};
                    this._isSuitable = true;
                    this.inline = get;
                    this.inline = get;
                    this.inline = isSuitable();
                    this.bool = {
                        return: this._isSuitable
                    };
                    this.inline = isConnectedWith(pNode, IUIGraphNode);
                    this.bool = {
                        return: !isNull(this.findRoute(pNode))
                    };
                    this.inline = isActive();
                    this.bool = {
                        return: this._isActive
                    };
                    this.inline = addConnectionArea(sName, string, pArea, IUIGraphConnectionArea);
                    this.template("ui/templates/GraphNode.tpl");
                    this.handleEvent("mouseenter mouseleave dblclick");
                    this._eGraphNodeType = eType;
 {
                        logger.setSourceLocation("../graph/Node.ts", 42);
                        logger.assert(isComponent(pGraph, EUIComponents.GRAPH), "only graph may be as parent", pGraph);
                    }
                    ;
                    this.$element.css("position", "absolute");
                    this.attachToParent(pGraph);
                    if (!isDef(options) || options.init !== false) {
                        this.init();
                    }
                    this.setDraggable();
                    this.$element.offset(this.graph.$element.offset());
                    this.connect(pGraph, "connectionBegin", "onConnectionBegin");
                    this.connect(pGraph, "connectionEnd", "onConnectionEnd");
                }
                Node.prototype.graphNodeType = function () {
                    return this._eGraphNodeType;
                };
                Node.prototype.graph = function () {
                    return this.parent;
                };
                Node.prototype.onConnectionEnd = function (pGraph) {
                    this._isSuitable = false;
                    this.el.removeClass("open blocked");
                };
                Node.prototype.onConnectionBegin = function (pGraph, pRoute) {
                    if (!this.canAcceptConnect() || pRoute.left.node === this) {
                        return;
                    }
                    this._isSuitable = true;
                    this.el.addClass("open");
                };
                Node.prototype.findRoute = function (pNode) {
                    var pRoute = null;
                    for(var i in this._pAreas) {
                        pRoute = this._pAreas[i].findRoute(pNode);
                        if (!isNull(pRoute)) {
                            return pRoute;
                        }
                    }
                    return null;
                };
                Node.prototype.canAcceptConnect = function () {
                    for(var i in this._pAreas) {
                        if (this._pAreas[i].isSupportsIncoming()) {
                            return true;
                        }
                    }
                    return false;
                };
                Node.prototype.mouseenter = function (e) {
                    _super.prototype.mouseenter.call(this, e);
                    this.sendEvent(Graph.event(EUIGraphEvents.SHOW_MAP));
                };
                Node.prototype.mouseleave = function (e) {
                    _super.prototype.mouseleave.call(this, e);
                    this.sendEvent(Graph.event(EUIGraphEvents.HIDE_MAP));
                };
                Node.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    this.el.addClass("component-graphnode");
                };
                Node.prototype.move = function (e) {
                    this.routing();
                };
                Node.prototype.dblclick = function (e) {
                    this.activate(!this.isActive());
                };
                Node.prototype.activate = function (bValue) {
                    if (typeof bValue === "undefined") { bValue = true; }
                    this._isActive = bValue;
                    this.highlight(bValue);
                    for(var sArea in this._pAreas) {
                        this._pAreas[sArea].activate(bValue);
                    }
                };
                Node.prototype.init = function () {
                    var pSidesLR = [
                        "left", 
                        "right"
                    ];
                    var pSidesTB = [
                        "top", 
                        "bottom"
                    ];
                    var pSidePanels = [];
                    for(var i = 0; i < pSidesTB.length; ++i) {
                        var sSide = pSidesTB[i];
                        pSidePanels[i] = new ConnectionArea(this, {
                            show: false
                        });
                        pSidePanels[i].setLayout(EUILayouts.HORIZONTAL);
                        pSidePanels[i].render(this.el.find(".graph-node-" + sSide + ":first"));
                        this._pAreas[sSide] = pSidePanels[i];
                    }
                    for(var i = 0; i < pSidesLR.length; ++i) {
                        var sSide = pSidesLR[i];
                        pSidePanels[i] = new ConnectionArea(this, {
                            show: false
                        });
                        pSidePanels[i].render(this.el.find(".graph-node-" + sSide + ":first"));
                        this.addConnectionArea(sSide, pSidePanels[i]);
                    }
                };
                return Node;
            })(Component);
            graph.Node = Node;            
            void {
                this: ,
                connect: (pArea, 
"connected", 
"connected")
            };
            this._pAreas[sName] = pArea;
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
connected(pArea, IUIGraphConnectionArea, pNode, IUIGraphNode, pRoute, IUIGraphRoute);
void {};
sendEvent(e, IUIGraphEvent);
void {
    for: 
};
var i;
this._pAreas;
 {
    this._pAreas[i].sendEvent(e);
}
if (e.type === EUIGraphEvents.DELETE) {
    if (this.isActive()) {
        this.beforeDestroy(this);
        this.destroy();
    }
}
highlight(bValue, bool = true);
void {
    if: (bValue)
};
 {
    this.$element.addClass('highlight');
}
 {
    this.$element.removeClass('highlight');
}
routing();
void {
    for: 
};
var i;
this._pAreas;
 {
    this._pAreas[i].routing();
}
beforeDestroy(node);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).beforeDestroy;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, node) : _broadcast[i].listener(_recivier, node);
    }
}
;
;
register("GraphNode", Node);
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Node = (function (_super) {
                __extends(Node, _super);
                function Node() {
                    _super.apply(this, arguments);

                    this.inline = get;
                    this.inline = get;
                }
                Node.prototype.animation = function () {
                    return null;
                };
                Node.prototype.graph = function () {
                    return this.parent;
                };
                return Node;
            })(graph.Node);
            animation.Node = Node;            
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Data = (function (_super) {
                __extends(Data, _super);
                function Data(pGraph, pAnim) {
                    if (typeof pAnim === "undefined") { pAnim = null; }
                    _super.call(this, pGraph, {
                        init: false
                    }, EUIGraphNodes.ANIMATION_DATA);
                    this._pAnimation = null;
                    this.inline = get;
                    this.inline = set;
                    template(this, "ui/templates/AnimationData.tpl");
                    if (!isNull(pAnim)) {
                        this.animation = pAnim;
                    }
                    this.init();
                }
                Data.prototype.animation = function () {
                    return this._pAnimation;
                };
                Data.prototype.animation = function (pAnim) {
                    this._pAnimation = pAnim;
                    (this.child).text = pAnim.name;
                };
                Data.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    this.el.addClass("component-animationdata");
                };
                Data.prototype.init = function () {
                    var pArea = new graph.ConnectionArea(this, {
                        show: false,
                        maxConnections: 1
                    });
                    pArea.setMode(EUIGraphDirections.OUT);
                    pArea.setLayout(EUILayouts.HORIZONTAL);
                    pArea.render(this.el);
                    this.addConnectionArea("out", pArea);
                };
                return Data;
            })(Node);
            animation.Data = Data;            
            register("AnimationData", Data);
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (animation) {
        var Container = (function (_super) {
            __extends(Container, _super);
            function Container(pAnimation, sName) {
                _super.call(this, EAnimationTypes.CONTAINER, sName);
                this._bEnable = true;
                this._fStartTime = 0;
                this._fSpeed = 1.0;
                this._bLoop = false;
                this._pAnimation = null;
                this._bReverse = false;
                this._fTrueTime = 0;
                this._fRealTime = 0;
                this._fTime = 0;
                this._bPause = false;
                this._bLeftInfinity = true;
                this._bRightInfinity = true;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = get;
                this.inline = stop();
                if (pAnimation) {
                    this.setAnimation(pAnimation);
                }
            }
            Container.prototype.animationName = function () {
                return this._pAnimation.name;
            };
            Container.prototype.speed = function () {
                return this._fSpeed;
            };
            Container.prototype.animationTime = function () {
                return this._fTrueTime;
            };
            Container.prototype.time = function () {
                return this._fTime;
            };
            Container.prototype.play = function (fRealTime) {
                this._fRealTime = fRealTime;
                this._fTime = 0;
                this.played(this._fTime);
            };
            return Container;
        })(Base);
        animation.Container = Container;        
        void {
            this: ,
            stoped: (this._fTime)
        };
        attach(pTarget, ISceneNode);
        void {
            this: ,
            _pAnimation: ,
            attach: (pTarget)
        };
        this.grab(this._pAnimation, true);
    })(akra.animation || (akra.animation = {}));
    var animation = akra.animation;
})(akra || (akra = {}));
setAnimation(pAnimation, IAnimationBase);
void {};
 {
    logger.setSourceLocation("animation/Container.ts", 73);
    logger.assert(!this._pAnimation, "anim. already exists");
}
;
this._pAnimation = pAnimation;
this.setSpeed(this.speed);
this.connect(pAnimation, "durationUpdated", "_onDurationUpdate");
this.grab(pAnimation);
_onDurationUpdate(pAnimation, IAnimationBase, fDuration, number);
void {
    this: ,
    setSpeed: (this.speed)
};
getAnimation();
IAnimationBase;
 {
    return this._pAnimation;
}
inline;
enable();
void {
    this: ,
    _bEnable:  = true
};
inline;
disable();
void {
    this: ,
    _bEnable:  = false
};
inline;
isEnabled();
bool;
 {
    return this._bEnable;
}
inline;
leftInfinity(bValue, bool);
void {
    this: ,
    _bLeftInfinity:  = bValue
};
inline;
inLeftInfinity();
bool;
 {
    return this._bLeftInfinity;
}
inline;
inRightInfinity();
bool;
 {
    return this._bRightInfinity;
}
inline;
rightInfinity(bValue, bool);
void {
    this: ,
    _bRightInfinity:  = bValue
};
inline;
setStartTime(fRealTime, number);
void {
    this: ,
    _fStartTime:  = fRealTime
};
inline;
getStartTime();
number;
 {
    return this._fStartTime;
}
setSpeed(fSpeed, number);
void {
    this: ,
    _fSpeed:  = fSpeed
};
this.duration = this._pAnimation.duration / fSpeed;
this.durationUpdated(this.duration);
inline;
getSpeed();
number;
 {
    return this._fSpeed;
}
inline;
useLoop(bValue, bool);
void {
    this: ,
    _bLoop:  = bValue
};
inline;
inLoop();
bool;
 {
    return this._bLoop;
}
inline;
reverse(bValue, bool);
void {
    this: ,
    _bReverse:  = bValue
};
inline;
isReversed();
bool;
 {
    return this._bReverse;
}
pause(bValue, bool = true);
void {
    this: ,
    _fRealTime:  = -1
};
this._bPause = bValue;
inline;
rewind(fRealTime, number);
void {
    this: ,
    _fTime:  = fRealTime
};
inline;
isPaused();
bool;
 {
    return this._bPause;
}
calcTime(fRealTime, number);
void {
    if: (this._bPause)
};
 {
    return;
}
if (this._fRealTime < 0) {
    this._fRealTime = fRealTime;
}
this._fTime = this._fTime + (fRealTime - this._fRealTime) * this._fSpeed;
this._fRealTime = fRealTime;
var fTime = this._fTime;
if (this._bLoop) {
    fTime = math.mod(fTime, (this._pAnimation.duration));
    if (this._bReverse) {
        fTime = this._pAnimation.duration - fTime;
    }
}
this._fTrueTime = fTime;
frame(sName, string, fRealTime, number);
IAnimationFrame;
 {
    if (!this._bEnable) {
        return null;
    }
    if (this._fRealTime !== fRealTime) {
        this.calcTime(fRealTime);
        this.enterFrame(fRealTime);
    }
    if (!this._bLeftInfinity && this._fRealTime < this._fStartTime) {
        return null;
    }
    if (!this._bRightInfinity && this._fRealTime > this.duration + this._fStartTime) {
        return null;
    }
    return this._pAnimation.frame(sName, this._fTrueTime);
}
durationUpdated(fDuration);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).durationUpdated;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, fDuration) : _broadcast[i].listener(_recivier, fDuration);
    }
}
;
;
enterFrame(fRealTime);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).enterFrame;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, fRealTime) : _broadcast[i].listener(_recivier, fRealTime);
    }
}
;
;
inline;
function isContainer(pAnimation) {
    return pAnimation.type === EAnimationTypes.CONTAINER;
}
function createContainer(pAnimation, sName) {
    return new Container(pAnimation, sName);
}
exports.createContainer = createContainer;
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Player = (function (_super) {
                __extends(Player, _super);
                function Player(pGraph, pContainer) {
                    if (typeof pContainer === "undefined") { pContainer = null; }
                    _super.call(this, pGraph, {
                        init: false
                    }, EUIGraphNodes.ANIMATION_PLAYER);
                    this._pAnimation = null;
                    this.inline = get;
                    template(this, "ui/templates/AnimationPlayer.tpl");
                    this.init();
                    this._pSpeedLabel = this.findEntity("speed");
                    this._pSlider = this.findEntity("state");
                    this._pPlayBtn = this.findEntity("play");
                    this._pLoopBtn = this.findEntity("loop");
                    this._pReverseBtn = this.findEntity("reverse");
                    this._pNameLabel = this.findEntity("name");
                    this._pAnimation = pContainer = pContainer || akra.animation.createContainer();
                    this.graph.addAnimation(pContainer);
                    this.connect(pContainer, "enterFrame", "_enterFrame");
                    this.connect(this._pPlayBtn, "changed", "_play");
                    this.connect(this._pSpeedLabel, "changed", "_setSpeed");
                    this.connect(this._pNameLabel, "changed", "_setName");
                    this.setup();
                }
                Player.prototype.animation = function () {
                    return this._pAnimation;
                };
                Object.defineProperty(Player.prototype, "animation", {
                    set: function (pAnim) {
                        this._pAnimation.setAnimation(pAnim);
                        this.setup();
                    },
                    enumerable: true,
                    configurable: true
                });
                Player.prototype.setup = function () {
                    var pAnimation = this._pAnimation;
                    this._pSlider.range = pAnimation.duration;
                    this._pPlayBtn.checked = !pAnimation.isPaused();
                    this._pLoopBtn.checked = pAnimation.inLoop();
                    this._pReverseBtn.checked = pAnimation.isReversed();
                    this._pNameLabel.text = pAnimation.name;
                    this._pSpeedLabel.text = pAnimation.speed.toString();
                };
                Player.prototype._reverse = function (pCheckbox, bValue) {
                    this._pAnimation.reverse(bValue);
                };
                Player.prototype._useLoop = function (pCheckbox, bValue) {
                    this._pAnimation.useLoop(bValue);
                };
                Player.prototype._pause = function (pCheckbox, bValue) {
                    this._pAnimation.pause(bValue);
                };
                Player.prototype._play = function (pCheckbox, bValue) {
                    this._pAnimation.pause(!bValue);
                };
                Player.prototype._setName = function (pLabel, sName) {
                    this._pAnimation.name = sName;
                };
                Player.prototype._setSpeed = function (pLabel, x) {
                    this._pAnimation.setSpeed(parseFloat(x));
                };
                Player.prototype.init = function () {
                    var pInput = new graph.ConnectionArea(this, {
                        show: false,
                        maxInConnections: 1,
                        maxOutConnections: 1
                    });
                    pInput.setMode(EUIGraphDirections.IN | EUIGraphDirections.OUT);
                    pInput.setLayout(EUILayouts.HORIZONTAL);
                    pInput.render(this.el);
                    this.addConnectionArea("in", pInput);
                };
                Player.prototype._enterFrame = function (fTime) {
                    if (this._pAnimation.isPaused()) {
                    } else {
                        if (this._pAnimation.inLoop()) {
                            this._pSlider.value = math.mod((fTime - this._pAnimation.getStartTime()), this._pAnimation.duration);
                        } else if (fTime >= this._pAnimation.getStartTime()) {
                            this._pSlider.value = (math.min(fTime, this._pAnimation.duration) - this._pAnimation.getStartTime());
                        }
                    }
                };
                return Player;
            })(Node);
            animation.Player = Player;            
            register("AnimationPlayer", Player);
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Mask = (function (_super) {
                __extends(Mask, _super);
                function Mask(pGraph) {
                    _super.call(this, pGraph, {
                        init: false
                    }, EUIGraphNodes.ANIMATION_MASK);
                    this._pAnimation = null;
                    this._pMask = null;
                    this._pSliders = [];
                    this._pViewBtn = null;
                    this.inline = get;
                    this.inline = set;
                    template(this, "ui/templates/AnimationMask.tpl");
                    this.init();
                }
                Mask.prototype.animation = function () {
                    return this._pAnimation;
                };
                Mask.prototype.animation = function (pAnim) {
                    this._pAnimation = pAnim;
                };
                Mask.prototype.init = function () {
                    var pArea = new graph.ConnectionArea(this, {
                        show: false,
                        maxInConnections: 1
                    });
                    pArea.setMode(EUIGraphDirections.OUT | EUIGraphDirections.IN);
                    pArea.setLayout(EUILayouts.HORIZONTAL);
                    pArea.render(this.el);
                    this.addConnectionArea("out", pArea);
                };
                Mask.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    this.el.addClass("component-animationmask");
                };
                Mask.prototype.create = function (pMask, pAnimation) {
                    if (typeof pMask === "undefined") { pMask = null; }
                    if (typeof pAnimation === "undefined") { pAnimation = null; }
                    if (isNull(pAnimation)) {
                        pAnimation = this._pAnimation;
                    }
                    if (isNull(pMask)) {
                        pMask = pAnimation.createAnimationMask();
                    }
                    var $location = this.$element.find(".controls:first");
                    var pSliders = this._pSliders;
                    var pViewBtn = new Button(this, {
                        text: "view mask"
                    });
                    var pParent = this;
                    $location.append(pViewBtn.$element);
                    var fnViewHide = function (pBtn, e) {
                        for(var i = 0; i < pSliders.length; ++i) {
                            var $el = pSliders[i].$element;
                            $el.is(":visible") ? $el.hide() : $el.show();
                        }
                    };
                    var fnCreate = function (pBtn, e) {
                        for(var sTarget in pMask) {
                            pSliders.push(Mask.createSlider(pParent, $location, pMask, sTarget));
                        }
                        pViewBtn.unbind("click", fnCreate);
                        pViewBtn.bind("click", fnViewHide);
                        pViewBtn.text = "hide/view";
                    };
                    pViewBtn.bind("click", fnCreate);
                    this._pViewBtn = pViewBtn;
                    this._pMask = pMask;
                };
                Mask.prototype.getMask = function () {
                    if (isNull(this._pAnimation)) {
                        return null;
                    }
                    if (isNull(this._pMask)) {
                        this.create();
                    }
                    return this._pMask;
                };
                Mask.createSlider = function createSlider(pParent, $location, pMask, sName) {
                    var pSlider;
                    pSlider = new Slider(pParent, {
                        show: false
                    });
                    pSlider.render($location);
                    pSlider.range = 10;
                    pSlider.value = pMask[sName];
                    pSlider.bind("updated", function (pSlider, fValue) {
                        pMask[sName] = fValue;
                    });
                    return pSlider;
                };
                return Mask;
            })(Node);
            animation.Mask = Mask;            
            register("AnimationMask", Mask);
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Blender = (function (_super) {
                __extends(Blender, _super);
                function Blender(pGraph, pBlender) {
                    if (typeof pBlender === "undefined") { pBlender = null; }
                    _super.call(this, pGraph, {
                        init: false
                    }, EUIGraphNodes.ANIMATION_BLENDER);
                    this._pBlend = null;
                    this._pSliders = [];
                    this._pMaskNodes = [];
                    this._pAnimMap = {};
                    this._iTotalAnim = 0;
                    this.inline = get;
                    template(this, "ui/templates/AnimationBlender.tpl");
                    this.init();
                    this._pNameLabel = this.findEntity("name");
                    this.connect(this._pNameLabel, "changed", "_textChanged");
                    this._pBlend = pBlender = pBlender || akra.animation.createBlend();
                    this.graph.addAnimation(pBlender);
                    this._pNameLabel.text = pBlender.name;
                }
                Blender.prototype.animation = function () {
                    return this._pBlend;
                };
                Blender.prototype.connected = function (pArea, pNode, pRoute) {
 {
                        logger.setSourceLocation("Blender.ts", 47);
                        logger.log("CONNECTED", arguments);
                    }
                    ;
                };
                Blender.prototype.onConnectionBegin = function (pGraph, pRoute) {
                    if (pRoute.left.node === this) {
                        return;
                    }
                    if (!this.isConnectedWith(pRoute.left.node)) {
                        _super.prototype.onConnectionBegin.call(this, pGraph, pRoute);
                        return;
                    }
                    this.el.addClass("blocked");
                };
                Blender.prototype._textChanged = function (pLabel, sValue) {
 {
                        logger.setSourceLocation("Blender.ts", 64);
                        logger.log("new blend name > " + sValue);
                    }
                    ;
                    this._pBlend.name = sValue;
                };
                Blender.prototype.destroy = function () {
                    (this.graph).removeAnimation(this._pBlend);
                    _super.prototype.destroy.call(this);
                };
                Blender.prototype.init = function () {
                    var pInput = new graph.ConnectionArea(this, {
                        show: false
                    });
                    pInput.setMode(EUIGraphDirections.IN);
                    pInput.setLayout(EUILayouts.HORIZONTAL);
                    pInput.render(this.el.find("td.graph-node-left"));
                    this.addConnectionArea("in", pInput);
                    var pOutput = new graph.ConnectionArea(this, {
                        show: false,
                        maxConnections: 1
                    });
                    pOutput.setMode(EUIGraphDirections.OUT);
                    pOutput.setLayout(EUILayouts.HORIZONTAL);
                    pOutput.render(this.el);
                    this.addConnectionArea("out", pOutput);
                };
                Blender.prototype.getMaskNode = function (iAnimation) {
                    return this._pMaskNodes[iAnimation] || null;
                };
                Blender.prototype.setMaskNode = function (iAnimation, pNode) {
                    this._pMaskNodes[iAnimation] = pNode;
                };
                Blender.prototype.setup = function () {
                    var pBlend = this._pBlend;
                    for(var i = 0; i < pBlend.totalAnimations; i++) {
                        for(var j = 0; j < this._pSliders.length; ++j) {
                            if (this._pSliders[j].animation === pBlend.getAnimation(i)) {
                                this._pSliders[j].slider.value = pBlend.getAnimationWeight(i);
                            }
                        }
                    }
                    this._pNameLabel.text = pBlend.name;
                };
                Blender.prototype.route = function (eDirection, pTarget) {
                    if (typeof pTarget === "undefined") { pTarget = null; }
                    return 0;
                };
                Blender.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    this.el.addClass("component-animationblender");
                };
                return Blender;
            })(Node);
            animation.Blender = Blender;            
            register("AnimationBlender", Blender);
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Controls = (function (_super) {
                __extends(Controls, _super);
                function Controls(parent) {
                    _super.call(this, parent, getUI(parent).createComponent("AnimationGraph"));
                    var pControlPanel = this.controls;
                    var pDataBtn = new Button(pControlPanel, {
                        text: "Create data"
                    });
                    var pPlayerBtn = new Button(pControlPanel, {
                        text: "Create player"
                    });
                    var pBlenderBtn = new Button(pControlPanel, {
                        text: "Create blender"
                    });
                    var pMaskBtn = new Button(pControlPanel, {
                        text: "Create mask"
                    });
                    this.connect(pDataBtn, "click", "createData");
                    this.connect(pPlayerBtn, "click", "createPlayer");
                    this.connect(pBlenderBtn, "click", "createBlender");
                    this.connect(pMaskBtn, "click", "createMask");
                }
                Controls.prototype.createData = function () {
                    return new Data(this.graph);
                };
                Controls.prototype.createPlayer = function () {
                    return new Player(this.graph);
                };
                Controls.prototype.createBlender = function () {
                    return new Blender(this.graph);
                };
                Controls.prototype.createMask = function () {
                    return new Mask(this.graph);
                };
                return Controls;
            })(graph.Controls);
            animation.Controls = Controls;            
            register("AnimationControls", Controls);
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (graph) {
            var Graph = (function (_super) {
                __extends(Graph, _super);
                function Graph(parent, eType) {
                    if (typeof eType === "undefined") { eType = EUIGraphTypes.UNKNOWN; }
                    _super.call(this, parent, null, EUIComponents.GRAPH);
                    this._pCanvas = null;
                    this._pTempRoute = null;
                    this.inline = get;
                    this.inline = get;
                    this.inline = get;
                    this._eGraphType = eType;
                    this.getHTMLElement().onselectstart = function () {
                        return false;
                    };
                }
                Graph.prototype.nodes = function () {
                    var pNodes = [];
                    var pChild = this.child;
                    while(!isNull(pChild)) {
                        pNodes.push(pChild);
                        pChild = pChild.sibling;
                    }
                    return pNodes;
                };
                Graph.prototype.graphType = function () {
                    return this._eGraphType;
                };
                Graph.prototype.canvas = function () {
                    return this._pCanvas;
                };
                Graph.prototype.createRouteFrom = function (pConnector) {
                    this._pTempRoute = new TempRoute(pConnector);
                    this.connectionBegin(this._pTempRoute);
                };
                Graph.prototype.removeTempRoute = function () {
                    this._pTempRoute.destroy();
                    this._pTempRoute = null;
                    this.connectionEnd();
                };
                Graph.prototype.isReadyForConnect = function () {
                    return !isNull(this._pTempRoute);
                };
                Graph.prototype.connectTo = function (pTo) {
                    if (isNull(this._pTempRoute)) {
                        return;
                    }
                    var pFrom = this._pTempRoute.left;
                    if (pFrom.node === pTo.node) {
 {
                            logger.setSourceLocation("../graph/Graph.ts", 67);
                            logger.log("connection to same node forbidden");
                        }
                        ;
                        this.removeTempRoute();
                        return;
                    }
                    var pRoute = new Route(pFrom, pTo);
                    pRoute.routing();
                    this._pTempRoute.detach();
                    this.removeTempRoute();
                };
                Graph.prototype.rendered = function () {
                    _super.prototype.rendered.call(this);
                    this._pCanvas = Raphael(this.getHTMLElement(), 0, 0);
                    var $svg = this.$element.children(":first");
                    $svg.css({
                        width: "100%",
                        height: "100%"
                    });
                    this.el.addClass("component-graph");
                };
                Graph.prototype.mouseup = function (e) {
                    if (!isNull(this._pTempRoute)) {
                        this.removeTempRoute();
                    }
                };
                Graph.prototype.mousemove = function (e) {
                    if (!isNull(this._pTempRoute)) {
                        var pOffset = this.el.offset();
                        this._pTempRoute.routing({
                            x: e.pageX - pOffset.left,
                            y: e.pageY - pOffset.top
                        });
                    }
                };
                Graph.prototype.keydown = function (e) {
                    var pNodes = this.nodes;
                    for(var i = 0; i < pNodes.length; ++i) {
                        var iKeyCode = (e).keyCode;
                        if (iKeyCode === EKeyCodes.DELETE) {
                            pNodes[i].sendEvent(Graph.event(EUIGraphEvents.DELETE));
                        }
                    }
                    _super.prototype.keydown.call(this, e);
                };
                Graph.prototype.click = function (e) {
                    var pNodes = this.nodes;
                    for(var i = 0; i < pNodes.length; ++i) {
                        pNodes[i].activate(false);
                    }
                    _super.prototype.click.call(this, e);
                };
                Graph.prototype.connectionBegin = function (pRoute) {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).connectionBegin;
                    var _recivier = this;
                    if (isDef(_broadcast)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, pRoute) : _broadcast[i].listener(_recivier, pRoute);
                        }
                    }
                };
                Graph.prototype.connectionEnd = function () {
                    this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
                    var _broadcast = (this._pBroadcastSlotList).connectionEnd;
                    var _recivier = this;
                    if (isDef(_broadcast)) {
                        for(var i = 0; i < _broadcast.length; ++i) {
                            _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
                        }
                    }
                };
                Graph.event = function event(eType) {
                    return {
                        type: eType,
                        traversedRoutes: []
                    };
                };
                return Graph;
            })(Component);
            graph.Graph = Graph;            
            register("Graph", Graph);
        })(ui.graph || (ui.graph = {}));
        var graph = ui.graph;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        (function (animation) {
            var Graph = (function (_super) {
                __extends(Graph, _super);
                function Graph(parent) {
                    _super.call(this, parent, EUIGraphTypes.ANIMATION);
                    this._pSelectedNode = null;
                    this._pAnimationController = null;
                    this._pTimer = null;
                }
                Graph.prototype.setTimer = function (pTimer) {
                    this._pTimer = pTimer;
                };
                Graph.prototype.getController = function () {
                    return this._pAnimationController;
                };
                Graph.prototype.selectNode = function (pNode, bPlay) {
                    if (typeof bPlay === "undefined") { bPlay = true; }
                };
                Graph.prototype.addAnimation = function (pAnimation) {
                    this._pAnimationController.addAnimation(pAnimation);
                };
                Graph.prototype.removeAnimation = function (animation) {
                    this._pAnimationController.removeAnimation(animation);
                };
                Graph.prototype.findNodeByAnimation = function (animation) {
                    return null;
                };
                Graph.prototype.createNodeByController = function (pController) {
                    var pNode = null;
                    for(var i = 0; i < pController.totalAnimations; ++i) {
                        var pAnimation = pController.getAnimation(i);
                        pNode = this.createNodeByAnimation(pAnimation);
                    }
                    return;
                };
                Graph.prototype.createNodeByAnimation = function (pAnimation) {
                    var pNode = this.findNodeByAnimation(pAnimation.name);
                    var pSubNode;
                    var pMaskNode;
                    var pSubAnimation;
                    var n = 0;
                    var pMask = null;
                    if (!isNull(pNode)) {
                        return pNode;
                    }
                    if (akra.animation.isAnimation(pAnimation)) {
                        pNode = (this.parent).createData();
                        pNode.animation = pAnimation;
                    } else {
 {
                            logger.setSourceLocation("animation/Graph.ts", 108);
                            logger.criticalError("AHTUNG!!!");
                        }
                        ;
                    }
                    return null;
                };
                Graph.prototype.capture = function (pController) {
                    this._pAnimationController = pController;
                    this.connect(pController, "play", "onControllerPlay");
                    this.createNodeByController(pController);
                    return true;
                };
                Graph.prototype.onControllerPlay = function (pAnimation) {
                };
                return Graph;
            })(graph.Graph);
            animation.Graph = Graph;            
            register("AnimationGraph", Graph);
        })(ui.animation || (ui.animation = {}));
        var animation = ui.animation;
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (ui) {
        var UI = (function () {
            function UI(pManager) {
                if (typeof pManager === "undefined") { pManager = null; }
                this.inline = get;
                this.inline = getManager();
                this.ISceneManager = {
                    return: this._pManager
                };
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.inline = getEventTable();
                this.IEventTable = {
                    return: UI._pEventTable
                };
                this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = _syncTable(pFrom, IEventProvider);
                this._pManager = pManager;
            }
            UI.prototype.type = function () {
                return ESceneTypes.TYPE_2D;
            };
            UI.prototype.createHTMLNode = function (pElement) {
                return new HTMLNode(this, pElement);
            };
            UI.prototype.createDNDNode = function (pElement) {
                return new DNDNode(this, pElement);
            };
            UI.prototype.createComponent = function (sType, pOptions) {
                if (isDefAndNotNull(COMPONENTS[sType])) {
                    return new COMPONENTS[sType](this, pOptions);
                }
                return new Component(this, mergeOptions(pOptions, {
                    generic: sType
                }));
            };
            UI.prototype.createLayout = function (type, pAttrs) {
                if (typeof type === "undefined") { type = null; }
                if (typeof pAttrs === "undefined") { pAttrs = null; }
                var pLayout = null;
                if (isString(type)) {
                    type = type.toLowerCase();
                }
                switch(type) {
                    case "horizontal":
                    case EUILayouts.HORIZONTAL:
                        pLayout = new Horizontal(this);
                        break;
                    case "vertical":
                    case EUILayouts.VERTICAL:
                        pLayout = new Vertical(this);
                        break;
                    default:
                        pLayout = new Layout(this);
                }
                if (!isNull(pLayout) && !isNull(pAttrs)) {
                    pLayout.setAttributes(pAttrs);
                }
                return pLayout;
            };
            UI._pEventTable = new events.EventTable();
            return UI;
        })();
        ui.UI = UI;        
        void {
            this: ,
            getEventTable: ._sync(this, pFrom)
        };
    })(akra.ui || (akra.ui = {}));
    var ui = akra.ui;
})(akra || (akra = {}));
var akra;
(function (akra) {
    (function (core) {
        var Engine = (function () {
            function Engine(pOptions) {
                if (typeof pOptions === "undefined") { pOptions = null; }
                this._iAppPausedCount = 0;
                this._isActive = false;
                this._isFrameMoving = true;
                this._isDepsLoaded = false;
                this._pGamepads = null;
                this._fElapsedAppTime = 0.0;
                this.inline = get;
                this.inline = get;
                this.inline = getScene();
                this.IScene3d = {
                    return: this._pSceneManager.getScene3D(0)
                };
                this.inline = getSceneManager();
                this.ISceneManager = {
                    return: this._pSceneManager
                };
                this.inline = getParticleManager();
                this.IParticleManager = {
                    return: null
                };
                this.inline = getResourceManager();
                this.IResourcePoolManager = {
                    return: this._pResourceManager
                };
                this.inline = getRenderer();
                this.IRenderer = {
                    return: this._pRenderer
                };
                this.inline = getComposer();
                this.IAFXComposer = {
                    return: this._pComposer
                };
                this.inline = isActive();
                this.bool = {
                    return: this._isActive
                };
                this.inline = isDepsLoaded();
                this.bool = {
                    return: this._isDepsLoaded
                };
                this.inline = getTimer();
                this.IUtilTimer = {
                    return: this._pTimer
                };
                this.inline = createMesh(sName, string = null, eOptions, number = 0, pDataBuffer, IRenderDataCollection = null);
                this.IMesh = {
                    return: model.createMesh(this, sName, eOptions, pDataBuffer)
                };
                this.inline = createRenderDataCollection(iOptions, number = 0);
                this.IRenderDataCollection = {
                    return: render.createRenderDataCollection(this, iOptions)
                };
                this.inline = createBufferMap();
                this.IBufferMap = {
                    return: util.createBufferMap(this)
                };
                this.inline = createAnimationController(iOptions, number = 0);
                this.IAnimationController = {
                    return: animation.createController(iOptions)
                };
                this._iGuid = sid();
                this.inline = getGuid();
                this.number = {
                    return: this._iGuid
                };
                this._pUnicastSlotMap = null;
                this._pBroadcastSlotList = null;
                this.inline = getEventTable();
                this.IEventTable = {
                    return: Engine._pEventTable
                };
                this.inline = connect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().addDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = disconnect(pSender, IEventProvider, sSignal, string, sSlot, string, eType ?  : EEventTypes);
                this.bool = {
                    return: pSender.getEventTable().removeDestination((pSender).getGuid(), sSignal, this, sSlot, eType)
                };
                this.inline = bind(sSignal, string, fnListener, Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().addListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = unbind(sSignal, string, fnListener ?  : Function, eType ?  : EEventTypes);
                this.bool = {
                    return: this.getEventTable().removeListener(this.getGuid(), sSignal, fnListener, eType)
                };
                this.inline = _syncTable(pFrom, IEventProvider);
                this._pResourceManager = new pool.ResourcePoolManager(this);
                if (!this._pResourceManager.initialize()) {
 {
                        logger.setSourceLocation("core/Engine.ts", 80);
                        logger.error('cannot initialize ResourcePoolManager');
                    }
                    ;
                }
                this._pSceneManager = new scene.SceneManager(this);
                if (!this._pSceneManager.initialize()) {
 {
                        logger.setSourceLocation("core/Engine.ts", 85);
                        logger.error("cannot initialize SceneManager");
                    }
                    ;
                }
                this._pParticleManager = null;
                this._pTimer = util.UtilTimer.start();
                this._pRenderer = new webgl.WebGLRenderer(this);
                this._pComposer = new fx.Composer(this);
                DDSCodec.startup();
                this.pause(false);
                this.parseOptions(pOptions);
            }
            Engine.prototype.time = function () {
                return this._pTimer.appTime;
            };
            Engine.prototype.elapsedTime = function () {
                return this._fElapsedAppTime;
            };
            Engine.prototype.enableGamepads = function () {
                if (!isNull(this._pGamepads)) {
                    return true;
                }
                var pGamepads = controls.createGamepadMap();
                if (pGamepads.init()) {
                    this._pGamepads = pGamepads;
                    return true;
                }
                return false;
            };
            Engine.prototype.getGamepads = function () {
                if (this.enableGamepads()) {
                    return this._pGamepads;
                }
                return null;
            };
            Engine.prototype.parseOptions = function (pOptions) {
                var pDeps = Engine.DEPS;
                var sDepsRoot = Engine.DEPS_ROOT;
                var pDepsManager = util.createDepsManager(this);
                if (!isNull(pOptions)) {
                    sDepsRoot = pOptions.depsRoot || Engine.DEPS_ROOT;
                    if (isDefAndNotNull(pOptions.deps)) {
                        Engine.depends(pOptions.deps);
                    }
                    if (pOptions.gamepads === true) {
                        this.enableGamepads();
                    }
                }
                this.connect(pDepsManager, "loaded", "_depsLoaded");
                if (!pDepsManager.load(pDeps, sDepsRoot)) {
 {
                        logger.setSourceLocation("core/Engine.ts", 155);
                        logger.criticalError("load dependencies are not started.");
                    }
                    ;
                }
            };
            Engine.prototype.exec = function (bValue) {
                if (typeof bValue === "undefined") { bValue = true; }
                var pRenderer = this._pRenderer;
                var pEngine = this;
 {
                    logger.setSourceLocation("core/Engine.ts", 203);
                    logger.assert(!isNull(pRenderer));
                }
                ;
                pRenderer._initRenderTargets();
                bValue ? this.active() : this.inactive();
                function render(iTime) {
                    if (pRenderer.isValid()) {
 {
                            logger.setSourceLocation("core/Engine.ts", 215);
                            logger.error(pRenderer.getError());
                        }
                        ;
                    }
                    if (pEngine.isActive() && pEngine.isDepsLoaded()) {
                        if (!pEngine.renderFrame()) {
 {
                                logger.setSourceLocation("core/Engine.ts", 220);
                                logger.error("Engine::exec() error.");
                            }
                            ;
                            return;
                        }
                    }
                    requestAnimationFrame(render);
                }
                render(0);
            };
            Engine.prototype.renderFrame = function () {
                this._fElapsedAppTime = this._pTimer.elapsedTime;
                if (0. == this._fElapsedAppTime && this._isFrameMoving) {
                    return true;
                }
                if (this._isFrameMoving) {
                    if (!isNull(this._pGamepads)) {
                        this._pGamepads.update();
                    }
                    this._pSceneManager.update();
                }
                this.frameStarted();
                this._pRenderer._updateAllRenderTargets();
                this.frameEnded();
                return true;
            };
            Engine.prototype.play = function () {
                if (!this.isActive()) {
                    this._iAppPausedCount = 0;
                    this.active();
                    if (this._isFrameMoving) {
                        this._pTimer.start();
                    }
                }
                return this.isActive();
            };
            Engine.prototype.pause = function (isPause) {
                if (typeof isPause === "undefined") { isPause = false; }
                this._iAppPausedCount += (isPause ? +1 : -1);
                (this._iAppPausedCount ? this.inactive() : this.active());
                if (isPause && (1 == this._iAppPausedCount)) {
                    if (this._isFrameMoving) {
                        this._pTimer.stop();
                    }
                }
                if (0 == this._iAppPausedCount) {
                    if (this._isFrameMoving) {
                        this._pTimer.start();
                    }
                }
                return !this.isActive();
            };
            Engine.prototype._depsLoaded = function (pLoader, pDeps) {
 {
                    logger.setSourceLocation("core/Engine.ts", 311);
                    logger.log("[ALL DEPTS LOADED]");
                }
                ;
                this._isDepsLoaded = true;
                this.depsLoaded(pDeps);
            };
            Engine.depends = function depends(pData) {
                var pDeps = Engine.DEPS;
                while(isDefAndNotNull(pDeps.files)) {
                    pDeps = pDeps.deps;
                }
                if (isString(pData)) {
                    pDeps.files = [
                        pData
                    ];
                } else {
                    pDeps.files = pData;
                }
            };
            Engine.DEPS_ROOT = "/akra-engine-core/src2/data/";
            Engine.DEPS = {
                files: [
                    "grammars/HLSL.gr"
                ],
                deps: {
                    files: [
                        "effects/SystemEffects.afx", 
                        "effects/Plane.afx", 
                        "effects/fxaa.afx", 
                        "effects/skybox.afx", 
                        "effects/mesh.afx", 
                        "effects/TextureToScreen.afx", 
                        "effects/mesh_geometry.afx", 
                        "effects/prepare_shadows.afx", 
                        "effects/terrain.afx", 
                        "effects/prepareDeferredShading.afx"
                    ],
                    deps: {
                        files: [
                            "effects/mesh_texture.afx", 
                            "effects/deferredShading.afx", 
                            "effects/apply_lights_and_shadows.afx"
                        ]
                    }
                }
            };
            Engine._pEventTable = new events.EventTable();
            return Engine;
        })();
        core.Engine = Engine;        
        void {
            this: ,
            getEventTable: ._sync(this, pFrom)
        };
        frameStarted();
        void {
            this: ,
            _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
        };
        var _broadcast = (this._pBroadcastSlotList).frameStarted;
        var _recivier = this;
        if (isDef(_broadcast)) {
            for(var i = 0; i < _broadcast.length; ++i) {
                _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
            }
        }
    })(akra.core || (akra.core = {}));
    var core = akra.core;
})(akra || (akra = {}));
;
;
frameEnded();
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).frameEnded;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
;
depsLoaded(deps);
void {
    this: ,
    _pBroadcastSlotList:  = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid)
};
var _broadcast = (this._pBroadcastSlotList).depsLoaded;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier, deps) : _broadcast[i].listener(_recivier, deps);
    }
}
;
;
inactive();
void {
    this: ,
    _isActive:  = false
};
this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
var _broadcast = (this._pBroadcastSlotList).inactive;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
active();
void {
    this: ,
    _isActive:  = true
};
this._pBroadcastSlotList = this._pBroadcastSlotList || (this.getEventTable()).findBroadcastList(this._iGuid);
var _broadcast = (this._pBroadcastSlotList).active;
var _recivier = this;
if (isDef(_broadcast)) {
    for(var i = 0; i < _broadcast.length; ++i) {
        _broadcast[i].target ? _broadcast[i].target[_broadcast[i].callback](_recivier) : _broadcast[i].listener(_recivier);
    }
}
;
